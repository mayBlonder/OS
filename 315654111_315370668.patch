diff --git a/Makefile b/Makefile
index 98f7329..fb8cc2d 100644
--- a/Makefile
+++ b/Makefile
@@ -28,7 +28,7 @@ OBJS = \
   $K/sysfile.o \
   $K/kernelvec.o \
   $K/plic.o \
-  $K/virtio_disk.o \
+  $K/virtio_disk.o\
   $K/cas.o
 
 # riscv64-unknown-elf- or riscv64-linux-gnu-
@@ -49,12 +49,6 @@ TOOLPREFIX := $(shell if riscv64-unknown-elf-objdump -i 2>&1 | grep 'elf64-big'
 	echo "***" 1>&2; exit 1; fi)
 endif
 
-# added
-# ifndef SCHEDFLAG
-# SCHEDFLAG := DEFAULT
-# endif
-
-
 QEMU = qemu-system-riscv64
 
 CC = $(TOOLPREFIX)gcc
@@ -70,10 +64,6 @@ CFLAGS += -ffreestanding -fno-common -nostdlib -mno-relax
 CFLAGS += -I.
 CFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
 
-# added
-# CFLAGS += -D $(SCHEDFLAG)
-
-
 # Disable PIE when possible (for Ubuntu 16.10 toolchain)
 ifneq ($(shell $(CC) -dumpspecs 2>/dev/null | grep -e '[^f]no-pie'),)
 CFLAGS += -fno-pie -no-pie
@@ -143,9 +133,6 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
-	$U/_syscall\
-	$U/_env\
-
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -167,10 +154,9 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 1
+CPUS := 3
 endif
 
-
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
 QEMUOPTS += -drive file=fs.img,if=none,format=raw,id=x0
 QEMUOPTS += -device virtio-blk-device,drive=x0,bus=virtio-mmio-bus.0
diff --git a/assignment1v1.0.pdf b/assignment1v1.0.pdf
deleted file mode 100644
index f91db77..0000000
Binary files a/assignment1v1.0.pdf and /dev/null differ
diff --git a/env.c b/env.c
deleted file mode 100644
index 72fa9f9..0000000
--- a/env.c
+++ /dev/null
@@ -1,60 +0,0 @@
-#include "kernel/param.h"
-#include "kernel/types.h"
-#include "kernel/stat.h"
-#include "user/user.h"
-#include "kernel/fs.h"
-#include "kernel/fcntl.h"
-#include "kernel/syscall.h"
-#include "kernel/memlayout.h"
-#include "kernel/riscv.h"
-
-int loop_size = 10000;
-int large_interval = 1000;
-int large_size = 1000;
-int freq_interval = 100;
-int freq_size = 100;
-void env(int size, int interval, char* env_name) {
-    int result = 1;
-    for (int i = 0; i < loop_size; i++) {
-        if (i % interval == 0) {
-            result = result * size;
-        }
-    }
-}
-
-void env_large() {
-    env(large_size, large_interval, "env_large");
-}
-
-void env_freq() {
-    env(freq_size, freq_interval, "env_freq");
-}
-
-int
-main(int argc, char *argv[])
-{
-    int n_forks = 2;
-    int pid = getpid();
-    for (int i = 0; i < n_forks; i++) {
-        fork();
-    }
-    int larges = 0;
-    int freqs = 0;
-    int n_experiments = 10;
-    for (int i = 0; i < n_experiments; i++) {
-        env_large(10, 3, 100);
-        if (pid == getpid()) {
-            printf("experiment %d/%d\n", i + 1, n_experiments);
-            larges = (larges * i + get_utilization()) / (i + 1);
-        }
-        sleep(10);
-        env_freq(10, 100);
-        if (pid == getpid()) {
-            freqs = (freqs * i + get_utilization()) / (i + 1);
-        }
-    }
-    if (pid == getpid()) {
-        printf("larges = %d\nfreqs = %d\n", larges, freqs);
-    }
-    exit(0);
-}
\ No newline at end of file
diff --git a/fs.img b/fs.img
index 0d2b260..92ea8e7 100644
Binary files a/fs.img and b/fs.img differ
diff --git a/kernel/bio.o b/kernel/bio.o
index d306cd5..9ab9f31 100644
Binary files a/kernel/bio.o and b/kernel/bio.o differ
diff --git a/kernel/cas.S b/kernel/cas.S
index 7bc5b2d..0d13233 100644
--- a/kernel/cas.S
+++ b/kernel/cas.S
@@ -1,21 +1,15 @@
 .global cas
 
-// your code will be here
-// use 
-// lr
-// sc
-
-
 # a0 holds address of memory location
 # a1 holds expected value
 # a2 holds desired value
 # a0 holds return value, 0 if successful, !0 otherwise
 
 cas:
-    lr.w t0, (a0)      # Load original value.
-    bne t0, a1, fail   # Doesnâ€™t match, so fail.
-    sc.w a0, a2, (a0)  # Try to update.
-    jr ra              # Return.
+    lr.w t0, (a0) 
+    bne t0, a1, fail 
+    sc.w a0, a2, (a0) 
+    jr ra 
 fail:
-    li a0, 1           # Set return to failure.
-    jr ra              # Return.
\ No newline at end of file
+    li a0, 1 
+    jr ra
\ No newline at end of file
diff --git a/kernel/console.o b/kernel/console.o
index 8b7df8f..a9c2ce0 100644
Binary files a/kernel/console.o and b/kernel/console.o differ
diff --git a/kernel/defs.h b/kernel/defs.h
index 33d4b30..3b78d3f 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -94,8 +94,7 @@ struct cpu*     mycpu(void);
 struct cpu*     getmycpu(void);
 struct proc*    myproc();
 void            procinit(void);
-void            scheduler(void);
-void            FCFS_scheduler(void) __attribute__ ((noreturn));
+void            scheduler(void) __attribute__((noreturn));
 void            sched(void);
 void            sleep(void*, struct spinlock*);
 void            userinit(void);
@@ -105,16 +104,9 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
-int             pause_system(int seconds);
-int             kill_system(void);
-int             print_stats(void);
-
-// Ass2
-int             set_cpu(int cpu_num);
-int             get_cpu(void);
-int             add_proc_to_list(int tail, struct proc *p);
-int             remove_proc_from_list(int ind);
-
+int            get_cpu(void);
+int            set_cpu(int cpu_num);
+// int            sys_cpu_process_count(int cpu_num);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/exec.o b/kernel/exec.o
index 541e096..c184186 100644
Binary files a/kernel/exec.o and b/kernel/exec.o differ
diff --git a/kernel/file.o b/kernel/file.o
index affe66c..4837312 100644
Binary files a/kernel/file.o and b/kernel/file.o differ
diff --git a/kernel/fs.o b/kernel/fs.o
index 915845b..5c510e5 100644
Binary files a/kernel/fs.o and b/kernel/fs.o differ
diff --git a/kernel/kalloc.o b/kernel/kalloc.o
index ce7b208..6afe772 100644
Binary files a/kernel/kalloc.o and b/kernel/kalloc.o differ
diff --git a/kernel/kernel b/kernel/kernel
index 47ce589..20d7e56 100755
Binary files a/kernel/kernel and b/kernel/kernel differ
diff --git a/kernel/kernel.asm b/kernel/kernel.asm
index 78abe0a..6aea5c4 100644
--- a/kernel/kernel.asm
+++ b/kernel/kernel.asm
@@ -5,8 +5,8 @@ kernel/kernel:     file format elf64-littleriscv
 Disassembly of section .text:
 
 0000000080000000 <_entry>:
-    80000000:	0000a117          	auipc	sp,0xa
-    80000004:	c9013103          	ld	sp,-880(sp) # 80009c90 <_GLOBAL_OFFSET_TABLE_+0x8>
+    80000000:	00009117          	auipc	sp,0x9
+    80000004:	96013103          	ld	sp,-1696(sp) # 80008960 <_GLOBAL_OFFSET_TABLE_+0x8>
     80000008:	6505                	lui	a0,0x1
     8000000a:	f14025f3          	csrr	a1,mhartid
     8000000e:	0585                	addi	a1,a1,1
@@ -59,8 +59,8 @@ r_mhartid()
     80000048:	00269713          	slli	a4,a3,0x2
     8000004c:	9736                	add	a4,a4,a3
     8000004e:	00371693          	slli	a3,a4,0x3
-    80000052:	0000a717          	auipc	a4,0xa
-    80000056:	00e70713          	addi	a4,a4,14 # 8000a060 <timer_scratch>
+    80000052:	00009717          	auipc	a4,0x9
+    80000056:	fee70713          	addi	a4,a4,-18 # 80009040 <timer_scratch>
     8000005a:	9736                	add	a4,a4,a3
   scratch[3] = CLINT_MTIMECMP(id);
     8000005c:	ef1c                	sd	a5,24(a4)
@@ -74,8 +74,8 @@ w_mscratch(uint64 x)
   asm volatile("csrw mscratch, %0" : : "r" (x));
     80000060:	34071073          	csrw	mscratch,a4
   asm volatile("csrw mtvec, %0" : : "r" (x));
-    80000064:	00007797          	auipc	a5,0x7
-    80000068:	21c78793          	addi	a5,a5,540 # 80007280 <timervec>
+    80000064:	00006797          	auipc	a5,0x6
+    80000068:	11c78793          	addi	a5,a5,284 # 80006180 <timervec>
     8000006c:	30579073          	csrw	mtvec,a5
   asm volatile("csrr %0, mstatus" : "=r" (x) );
     80000070:	300027f3          	csrr	a5,mstatus
@@ -111,7 +111,7 @@ w_mscratch(uint64 x)
     80000096:	300027f3          	csrr	a5,mstatus
   x &= ~MSTATUS_MPP_MASK;
     8000009a:	7779                	lui	a4,0xffffe
-    8000009c:	7ff70713          	addi	a4,a4,2047 # ffffffffffffe7ff <end+0xffffffff7ffd67ff>
+    8000009c:	7ff70713          	addi	a4,a4,2047 # ffffffffffffe7ff <end+0xffffffff7ffd87ff>
     800000a0:	8ff9                	and	a5,a5,a4
   x |= MSTATUS_MPP_S;
     800000a2:	6705                	lui	a4,0x1
@@ -198,8 +198,8 @@ consolewrite(int user_src, uint64 src, int n)
     80000124:	8626                	mv	a2,s1
     80000126:	85d2                	mv	a1,s4
     80000128:	fbf40513          	addi	a0,s0,-65
-    8000012c:	00004097          	auipc	ra,0x4
-    80000130:	9e8080e7          	jalr	-1560(ra) # 80003b14 <either_copyin>
+    8000012c:	00003097          	auipc	ra,0x3
+    80000130:	8e2080e7          	jalr	-1822(ra) # 80002a0e <either_copyin>
     80000134:	01550c63          	beq	a0,s5,8000014c <consolewrite+0x4a>
       break;
     uartputc(c);
@@ -260,24 +260,24 @@ consoleread(int user_dst, uint64 dst, int n)
   target = n;
     80000188:	00060b9b          	sext.w	s7,a2
   acquire(&cons.lock);
-    8000018c:	00012517          	auipc	a0,0x12
-    80000190:	01450513          	addi	a0,a0,20 # 800121a0 <cons>
+    8000018c:	00011517          	auipc	a0,0x11
+    80000190:	ff450513          	addi	a0,a0,-12 # 80011180 <cons>
     80000194:	00001097          	auipc	ra,0x1
     80000198:	a50080e7          	jalr	-1456(ra) # 80000be4 <acquire>
   while(n > 0){
     // wait until interrupt handler has put some
     // input into cons.buffer.
     while(cons.r == cons.w){
-    8000019c:	00012497          	auipc	s1,0x12
-    800001a0:	00448493          	addi	s1,s1,4 # 800121a0 <cons>
+    8000019c:	00011497          	auipc	s1,0x11
+    800001a0:	fe448493          	addi	s1,s1,-28 # 80011180 <cons>
       if(myproc()->killed){
         release(&cons.lock);
         return -1;
       }
       sleep(&cons.r, &cons.lock);
     800001a4:	89a6                	mv	s3,s1
-    800001a6:	00012917          	auipc	s2,0x12
-    800001aa:	09290913          	addi	s2,s2,146 # 80012238 <cons+0x98>
+    800001a6:	00011917          	auipc	s2,0x11
+    800001aa:	07290913          	addi	s2,s2,114 # 80011218 <cons+0x98>
     }
 
     c = cons.buf[cons.r++ % INPUT_BUF];
@@ -306,14 +306,14 @@ consoleread(int user_dst, uint64 dst, int n)
     800001c0:	02f71463          	bne	a4,a5,800001e8 <consoleread+0x84>
       if(myproc()->killed){
     800001c4:	00002097          	auipc	ra,0x2
-    800001c8:	9d0080e7          	jalr	-1584(ra) # 80001b94 <myproc>
+    800001c8:	b0c080e7          	jalr	-1268(ra) # 80001cd0 <myproc>
     800001cc:	551c                	lw	a5,40(a0)
     800001ce:	e7b5                	bnez	a5,8000023a <consoleread+0xd6>
       sleep(&cons.r, &cons.lock);
     800001d0:	85ce                	mv	a1,s3
     800001d2:	854a                	mv	a0,s2
-    800001d4:	00003097          	auipc	ra,0x3
-    800001d8:	aaa080e7          	jalr	-1366(ra) # 80002c7e <sleep>
+    800001d4:	00002097          	auipc	ra,0x2
+    800001d8:	36e080e7          	jalr	878(ra) # 80002542 <sleep>
     while(cons.r == cons.w){
     800001dc:	0984a783          	lw	a5,152(s1)
     800001e0:	09c4a703          	lw	a4,156(s1)
@@ -334,8 +334,8 @@ consoleread(int user_dst, uint64 dst, int n)
     80000208:	f8f40613          	addi	a2,s0,-113
     8000020c:	85d6                	mv	a1,s5
     8000020e:	855a                	mv	a0,s6
-    80000210:	00004097          	auipc	ra,0x4
-    80000214:	8ae080e7          	jalr	-1874(ra) # 80003abe <either_copyout>
+    80000210:	00002097          	auipc	ra,0x2
+    80000214:	7a8080e7          	jalr	1960(ra) # 800029b8 <either_copyout>
     80000218:	01a50663          	beq	a0,s10,80000224 <consoleread+0xc0>
     dst++;
     8000021c:	0a85                	addi	s5,s5,1
@@ -349,8 +349,8 @@ consoleread(int user_dst, uint64 dst, int n)
     }
   }
   release(&cons.lock);
-    80000224:	00012517          	auipc	a0,0x12
-    80000228:	f7c50513          	addi	a0,a0,-132 # 800121a0 <cons>
+    80000224:	00011517          	auipc	a0,0x11
+    80000228:	f5c50513          	addi	a0,a0,-164 # 80011180 <cons>
     8000022c:	00001097          	auipc	ra,0x1
     80000230:	a6c080e7          	jalr	-1428(ra) # 80000c98 <release>
 
@@ -358,8 +358,8 @@ consoleread(int user_dst, uint64 dst, int n)
     80000234:	414b853b          	subw	a0,s7,s4
     80000238:	a811                	j	8000024c <consoleread+0xe8>
         release(&cons.lock);
-    8000023a:	00012517          	auipc	a0,0x12
-    8000023e:	f6650513          	addi	a0,a0,-154 # 800121a0 <cons>
+    8000023a:	00011517          	auipc	a0,0x11
+    8000023e:	f4650513          	addi	a0,a0,-186 # 80011180 <cons>
     80000242:	00001097          	auipc	ra,0x1
     80000246:	a56080e7          	jalr	-1450(ra) # 80000c98 <release>
         return -1;
@@ -384,8 +384,8 @@ consoleread(int user_dst, uint64 dst, int n)
     8000026a:	000a071b          	sext.w	a4,s4
     8000026e:	fb777be3          	bgeu	a4,s7,80000224 <consoleread+0xc0>
         cons.r--;
-    80000272:	00012717          	auipc	a4,0x12
-    80000276:	fcf72323          	sw	a5,-58(a4) # 80012238 <cons+0x98>
+    80000272:	00011717          	auipc	a4,0x11
+    80000276:	faf72323          	sw	a5,-90(a4) # 80011218 <cons+0x98>
     8000027a:	b76d                	j	80000224 <consoleread+0xc0>
 
 000000008000027c <consputc>:
@@ -432,8 +432,8 @@ consoleintr(int c)
     800002c8:	1000                	addi	s0,sp,32
     800002ca:	84aa                	mv	s1,a0
   acquire(&cons.lock);
-    800002cc:	00012517          	auipc	a0,0x12
-    800002d0:	ed450513          	addi	a0,a0,-300 # 800121a0 <cons>
+    800002cc:	00011517          	auipc	a0,0x11
+    800002d0:	eb450513          	addi	a0,a0,-332 # 80011180 <cons>
     800002d4:	00001097          	auipc	ra,0x1
     800002d8:	910080e7          	jalr	-1776(ra) # 80000be4 <acquire>
 
@@ -447,16 +447,16 @@ consoleintr(int c)
     800002ee:	10f49a63          	bne	s1,a5,80000402 <consoleintr+0x144>
   case C('P'):  // Print process list.
     procdump();
-    800002f2:	00004097          	auipc	ra,0x4
-    800002f6:	878080e7          	jalr	-1928(ra) # 80003b6a <procdump>
+    800002f2:	00002097          	auipc	ra,0x2
+    800002f6:	772080e7          	jalr	1906(ra) # 80002a64 <procdump>
       }
     }
     break;
   }
   
   release(&cons.lock);
-    800002fa:	00012517          	auipc	a0,0x12
-    800002fe:	ea650513          	addi	a0,a0,-346 # 800121a0 <cons>
+    800002fa:	00011517          	auipc	a0,0x11
+    800002fe:	e8650513          	addi	a0,a0,-378 # 80011180 <cons>
     80000302:	00001097          	auipc	ra,0x1
     80000306:	996080e7          	jalr	-1642(ra) # 80000c98 <release>
 }
@@ -470,8 +470,8 @@ consoleintr(int c)
     80000316:	07f00793          	li	a5,127
     8000031a:	0af48e63          	beq	s1,a5,800003d6 <consoleintr+0x118>
     if(c != 0 && cons.e-cons.r < INPUT_BUF){
-    8000031e:	00012717          	auipc	a4,0x12
-    80000322:	e8270713          	addi	a4,a4,-382 # 800121a0 <cons>
+    8000031e:	00011717          	auipc	a4,0x11
+    80000322:	e6270713          	addi	a4,a4,-414 # 80011180 <cons>
     80000326:	0a072783          	lw	a5,160(a4)
     8000032a:	09872703          	lw	a4,152(a4)
     8000032e:	9f99                	subw	a5,a5,a4
@@ -485,8 +485,8 @@ consoleintr(int c)
     80000340:	00000097          	auipc	ra,0x0
     80000344:	f3c080e7          	jalr	-196(ra) # 8000027c <consputc>
       cons.buf[cons.e++ % INPUT_BUF] = c;
-    80000348:	00012797          	auipc	a5,0x12
-    8000034c:	e5878793          	addi	a5,a5,-424 # 800121a0 <cons>
+    80000348:	00011797          	auipc	a5,0x11
+    8000034c:	e3878793          	addi	a5,a5,-456 # 80011180 <cons>
     80000350:	0a07a703          	lw	a4,160(a5)
     80000354:	0017069b          	addiw	a3,a4,1
     80000358:	0006861b          	sext.w	a2,a3
@@ -499,21 +499,21 @@ consoleintr(int c)
     8000036c:	0cf48563          	beq	s1,a5,80000436 <consoleintr+0x178>
     80000370:	4791                	li	a5,4
     80000372:	0cf48263          	beq	s1,a5,80000436 <consoleintr+0x178>
-    80000376:	00012797          	auipc	a5,0x12
-    8000037a:	ec27a783          	lw	a5,-318(a5) # 80012238 <cons+0x98>
+    80000376:	00011797          	auipc	a5,0x11
+    8000037a:	ea27a783          	lw	a5,-350(a5) # 80011218 <cons+0x98>
     8000037e:	0807879b          	addiw	a5,a5,128
     80000382:	f6f61ce3          	bne	a2,a5,800002fa <consoleintr+0x3c>
       cons.buf[cons.e++ % INPUT_BUF] = c;
     80000386:	863e                	mv	a2,a5
     80000388:	a07d                	j	80000436 <consoleintr+0x178>
     while(cons.e != cons.w &&
-    8000038a:	00012717          	auipc	a4,0x12
-    8000038e:	e1670713          	addi	a4,a4,-490 # 800121a0 <cons>
+    8000038a:	00011717          	auipc	a4,0x11
+    8000038e:	df670713          	addi	a4,a4,-522 # 80011180 <cons>
     80000392:	0a072783          	lw	a5,160(a4)
     80000396:	09c72703          	lw	a4,156(a4)
           cons.buf[(cons.e-1) % INPUT_BUF] != '\n'){
-    8000039a:	00012497          	auipc	s1,0x12
-    8000039e:	e0648493          	addi	s1,s1,-506 # 800121a0 <cons>
+    8000039a:	00011497          	auipc	s1,0x11
+    8000039e:	de648493          	addi	s1,s1,-538 # 80011180 <cons>
     while(cons.e != cons.w &&
     800003a2:	4929                	li	s2,10
     800003a4:	f4f70be3          	beq	a4,a5,800002fa <consoleintr+0x3c>
@@ -536,15 +536,15 @@ consoleintr(int c)
     800003d0:	fcf71ce3          	bne	a4,a5,800003a8 <consoleintr+0xea>
     800003d4:	b71d                	j	800002fa <consoleintr+0x3c>
     if(cons.e != cons.w){
-    800003d6:	00012717          	auipc	a4,0x12
-    800003da:	dca70713          	addi	a4,a4,-566 # 800121a0 <cons>
+    800003d6:	00011717          	auipc	a4,0x11
+    800003da:	daa70713          	addi	a4,a4,-598 # 80011180 <cons>
     800003de:	0a072783          	lw	a5,160(a4)
     800003e2:	09c72703          	lw	a4,156(a4)
     800003e6:	f0f70ae3          	beq	a4,a5,800002fa <consoleintr+0x3c>
       cons.e--;
     800003ea:	37fd                	addiw	a5,a5,-1
-    800003ec:	00012717          	auipc	a4,0x12
-    800003f0:	e4f72a23          	sw	a5,-428(a4) # 80012240 <cons+0xa0>
+    800003ec:	00011717          	auipc	a4,0x11
+    800003f0:	e2f72a23          	sw	a5,-460(a4) # 80011220 <cons+0xa0>
       consputc(BACKSPACE);
     800003f4:	10000513          	li	a0,256
     800003f8:	00000097          	auipc	ra,0x0
@@ -558,8 +558,8 @@ consoleintr(int c)
     8000040a:	00000097          	auipc	ra,0x0
     8000040e:	e72080e7          	jalr	-398(ra) # 8000027c <consputc>
       cons.buf[cons.e++ % INPUT_BUF] = c;
-    80000412:	00012797          	auipc	a5,0x12
-    80000416:	d8e78793          	addi	a5,a5,-626 # 800121a0 <cons>
+    80000412:	00011797          	auipc	a5,0x11
+    80000416:	d6e78793          	addi	a5,a5,-658 # 80011180 <cons>
     8000041a:	0a07a703          	lw	a4,160(a5)
     8000041e:	0017069b          	addiw	a3,a4,1
     80000422:	0006861b          	sext.w	a2,a3
@@ -569,13 +569,13 @@ consoleintr(int c)
     80000430:	4729                	li	a4,10
     80000432:	00e78c23          	sb	a4,24(a5)
         cons.w = cons.e;
-    80000436:	00012797          	auipc	a5,0x12
-    8000043a:	e0c7a323          	sw	a2,-506(a5) # 8001223c <cons+0x9c>
+    80000436:	00011797          	auipc	a5,0x11
+    8000043a:	dec7a323          	sw	a2,-538(a5) # 8001121c <cons+0x9c>
         wakeup(&cons.r);
-    8000043e:	00012517          	auipc	a0,0x12
-    80000442:	dfa50513          	addi	a0,a0,-518 # 80012238 <cons+0x98>
-    80000446:	00003097          	auipc	ra,0x3
-    8000044a:	c4e080e7          	jalr	-946(ra) # 80003094 <wakeup>
+    8000043e:	00011517          	auipc	a0,0x11
+    80000442:	dda50513          	addi	a0,a0,-550 # 80011218 <cons+0x98>
+    80000446:	00002097          	auipc	ra,0x2
+    8000044a:	29a080e7          	jalr	666(ra) # 800026e0 <wakeup>
     8000044e:	b575                	j	800002fa <consoleintr+0x3c>
 
 0000000080000450 <consoleinit>:
@@ -588,10 +588,10 @@ consoleinit(void)
     80000454:	e022                	sd	s0,0(sp)
     80000456:	0800                	addi	s0,sp,16
   initlock(&cons.lock, "cons");
-    80000458:	00009597          	auipc	a1,0x9
-    8000045c:	bb858593          	addi	a1,a1,-1096 # 80009010 <etext+0x10>
-    80000460:	00012517          	auipc	a0,0x12
-    80000464:	d4050513          	addi	a0,a0,-704 # 800121a0 <cons>
+    80000458:	00008597          	auipc	a1,0x8
+    8000045c:	bb858593          	addi	a1,a1,-1096 # 80008010 <etext+0x10>
+    80000460:	00011517          	auipc	a0,0x11
+    80000464:	d2050513          	addi	a0,a0,-736 # 80011180 <cons>
     80000468:	00000097          	auipc	ra,0x0
     8000046c:	6ec080e7          	jalr	1772(ra) # 80000b54 <initlock>
 
@@ -602,8 +602,8 @@ consoleinit(void)
   // connect read and write system calls
   // to consoleread and consolewrite.
   devsw[CONSOLE].read = consoleread;
-    80000478:	00023797          	auipc	a5,0x23
-    8000047c:	b4078793          	addi	a5,a5,-1216 # 80022fb8 <devsw>
+    80000478:	00022797          	auipc	a5,0x22
+    8000047c:	9e078793          	addi	a5,a5,-1568 # 80021e58 <devsw>
     80000480:	00000717          	auipc	a4,0x0
     80000484:	ce470713          	addi	a4,a4,-796 # 80000164 <consoleread>
     80000488:	eb98                	sd	a4,16(a5)
@@ -649,8 +649,8 @@ printint(int xx, int base, int sign)
   do {
     buf[i++] = digits[x % base];
     800004b8:	2581                	sext.w	a1,a1
-    800004ba:	00009617          	auipc	a2,0x9
-    800004be:	b8660613          	addi	a2,a2,-1146 # 80009040 <digits>
+    800004ba:	00008617          	auipc	a2,0x8
+    800004be:	b8660613          	addi	a2,a2,-1146 # 80008040 <digits>
     800004c2:	883a                	mv	a6,a4
     800004c4:	2705                	addiw	a4,a4,1
     800004c6:	02b577bb          	remuw	a5,a0,a1
@@ -719,11 +719,11 @@ panic(char *s)
     80000546:	1000                	addi	s0,sp,32
     80000548:	84aa                	mv	s1,a0
   pr.locking = 0;
-    8000054a:	00012797          	auipc	a5,0x12
-    8000054e:	d007ab23          	sw	zero,-746(a5) # 80012260 <pr+0x18>
+    8000054a:	00011797          	auipc	a5,0x11
+    8000054e:	ce07ab23          	sw	zero,-778(a5) # 80011240 <pr+0x18>
   printf("panic: ");
-    80000552:	00009517          	auipc	a0,0x9
-    80000556:	ac650513          	addi	a0,a0,-1338 # 80009018 <etext+0x18>
+    80000552:	00008517          	auipc	a0,0x8
+    80000556:	ac650513          	addi	a0,a0,-1338 # 80008018 <etext+0x18>
     8000055a:	00000097          	auipc	ra,0x0
     8000055e:	02e080e7          	jalr	46(ra) # 80000588 <printf>
   printf(s);
@@ -731,14 +731,14 @@ panic(char *s)
     80000564:	00000097          	auipc	ra,0x0
     80000568:	024080e7          	jalr	36(ra) # 80000588 <printf>
   printf("\n");
-    8000056c:	00009517          	auipc	a0,0x9
-    80000570:	09c50513          	addi	a0,a0,156 # 80009608 <digits+0x5c8>
+    8000056c:	00008517          	auipc	a0,0x8
+    80000570:	b5c50513          	addi	a0,a0,-1188 # 800080c8 <digits+0x88>
     80000574:	00000097          	auipc	ra,0x0
     80000578:	014080e7          	jalr	20(ra) # 80000588 <printf>
   panicked = 1; // freeze uart output from other CPUs
     8000057c:	4785                	li	a5,1
-    8000057e:	0000a717          	auipc	a4,0xa
-    80000582:	a8f72123          	sw	a5,-1406(a4) # 8000a000 <panicked>
+    8000057e:	00009717          	auipc	a4,0x9
+    80000582:	a8f72123          	sw	a5,-1406(a4) # 80009000 <panicked>
   for(;;)
     80000586:	a001                	j	80000586 <panic+0x48>
 
@@ -768,8 +768,8 @@ panic(char *s)
     800005b2:	03043823          	sd	a6,48(s0)
     800005b6:	03143c23          	sd	a7,56(s0)
   locking = pr.locking;
-    800005ba:	00012d97          	auipc	s11,0x12
-    800005be:	ca6dad83          	lw	s11,-858(s11) # 80012260 <pr+0x18>
+    800005ba:	00011d97          	auipc	s11,0x11
+    800005be:	c86dad83          	lw	s11,-890(s11) # 80011240 <pr+0x18>
   if(locking)
     800005c2:	020d9b63          	bnez	s11,800005f8 <printf+0x70>
   if (fmt == 0)
@@ -788,21 +788,21 @@ panic(char *s)
   consputc('x');
     800005e4:	4d41                	li	s10,16
     consputc(digits[x >> (sizeof(uint64) * 8 - 4)]);
-    800005e6:	00009b97          	auipc	s7,0x9
-    800005ea:	a5ab8b93          	addi	s7,s7,-1446 # 80009040 <digits>
+    800005e6:	00008b97          	auipc	s7,0x8
+    800005ea:	a5ab8b93          	addi	s7,s7,-1446 # 80008040 <digits>
     switch(c){
     800005ee:	07300c93          	li	s9,115
     800005f2:	06400c13          	li	s8,100
     800005f6:	a82d                	j	80000630 <printf+0xa8>
     acquire(&pr.lock);
-    800005f8:	00012517          	auipc	a0,0x12
-    800005fc:	c5050513          	addi	a0,a0,-944 # 80012248 <pr>
+    800005f8:	00011517          	auipc	a0,0x11
+    800005fc:	c3050513          	addi	a0,a0,-976 # 80011228 <pr>
     80000600:	00000097          	auipc	ra,0x0
     80000604:	5e4080e7          	jalr	1508(ra) # 80000be4 <acquire>
     80000608:	bf7d                	j	800005c6 <printf+0x3e>
     panic("null fmt");
-    8000060a:	00009517          	auipc	a0,0x9
-    8000060e:	a1e50513          	addi	a0,a0,-1506 # 80009028 <etext+0x28>
+    8000060a:	00008517          	auipc	a0,0x8
+    8000060e:	a1e50513          	addi	a0,a0,-1506 # 80008028 <etext+0x28>
     80000612:	00000097          	auipc	ra,0x0
     80000616:	f2c080e7          	jalr	-212(ra) # 8000053e <panic>
       consputc(c);
@@ -896,8 +896,8 @@ panic(char *s)
     80000706:	f96d                	bnez	a0,800006f8 <printf+0x170>
     80000708:	bf29                	j	80000622 <printf+0x9a>
         s = "(null)";
-    8000070a:	00009917          	auipc	s2,0x9
-    8000070e:	91690913          	addi	s2,s2,-1770 # 80009020 <etext+0x20>
+    8000070a:	00008917          	auipc	s2,0x8
+    8000070e:	91690913          	addi	s2,s2,-1770 # 80008020 <etext+0x20>
       for(; *s; s++)
     80000712:	02800513          	li	a0,40
     80000716:	b7cd                	j	800006f8 <printf+0x170>
@@ -936,8 +936,8 @@ panic(char *s)
     80000758:	6129                	addi	sp,sp,192
     8000075a:	8082                	ret
     release(&pr.lock);
-    8000075c:	00012517          	auipc	a0,0x12
-    80000760:	aec50513          	addi	a0,a0,-1300 # 80012248 <pr>
+    8000075c:	00011517          	auipc	a0,0x11
+    80000760:	acc50513          	addi	a0,a0,-1332 # 80011228 <pr>
     80000764:	00000097          	auipc	ra,0x0
     80000768:	534080e7          	jalr	1332(ra) # 80000c98 <release>
 }
@@ -956,10 +956,10 @@ printfinit(void)
     80000774:	e426                	sd	s1,8(sp)
     80000776:	1000                	addi	s0,sp,32
   initlock(&pr.lock, "pr");
-    80000778:	00012497          	auipc	s1,0x12
-    8000077c:	ad048493          	addi	s1,s1,-1328 # 80012248 <pr>
-    80000780:	00009597          	auipc	a1,0x9
-    80000784:	8b858593          	addi	a1,a1,-1864 # 80009038 <etext+0x38>
+    80000778:	00011497          	auipc	s1,0x11
+    8000077c:	ab048493          	addi	s1,s1,-1360 # 80011228 <pr>
+    80000780:	00008597          	auipc	a1,0x8
+    80000784:	8b858593          	addi	a1,a1,-1864 # 80008038 <etext+0x38>
     80000788:	8526                	mv	a0,s1
     8000078a:	00000097          	auipc	ra,0x0
     8000078e:	3ca080e7          	jalr	970(ra) # 80000b54 <initlock>
@@ -1018,10 +1018,10 @@ uartinit(void)
     800007cc:	00e780a3          	sb	a4,1(a5)
 
   initlock(&uart_tx_lock, "uart");
-    800007d0:	00009597          	auipc	a1,0x9
-    800007d4:	88858593          	addi	a1,a1,-1912 # 80009058 <digits+0x18>
-    800007d8:	00012517          	auipc	a0,0x12
-    800007dc:	a9050513          	addi	a0,a0,-1392 # 80012268 <uart_tx_lock>
+    800007d0:	00008597          	auipc	a1,0x8
+    800007d4:	88858593          	addi	a1,a1,-1912 # 80008058 <digits+0x18>
+    800007d8:	00011517          	auipc	a0,0x11
+    800007dc:	a7050513          	addi	a0,a0,-1424 # 80011248 <uart_tx_lock>
     800007e0:	00000097          	auipc	ra,0x0
     800007e4:	374080e7          	jalr	884(ra) # 80000b54 <initlock>
 }
@@ -1048,8 +1048,8 @@ uartputc_sync(int c)
     80000800:	39c080e7          	jalr	924(ra) # 80000b98 <push_off>
 
   if(panicked){
-    80000804:	00009797          	auipc	a5,0x9
-    80000808:	7fc7a783          	lw	a5,2044(a5) # 8000a000 <panicked>
+    80000804:	00008797          	auipc	a5,0x8
+    80000808:	7fc7a783          	lw	a5,2044(a5) # 80009000 <panicked>
     for(;;)
       ;
   }
@@ -1089,10 +1089,10 @@ uartstart()
 {
   while(1){
     if(uart_tx_w == uart_tx_r){
-    80000840:	00009717          	auipc	a4,0x9
-    80000844:	7c873703          	ld	a4,1992(a4) # 8000a008 <uart_tx_r>
-    80000848:	00009797          	auipc	a5,0x9
-    8000084c:	7c87b783          	ld	a5,1992(a5) # 8000a010 <uart_tx_w>
+    80000840:	00008717          	auipc	a4,0x8
+    80000844:	7c873703          	ld	a4,1992(a4) # 80009008 <uart_tx_r>
+    80000848:	00008797          	auipc	a5,0x8
+    8000084c:	7c87b783          	ld	a5,1992(a5) # 80009010 <uart_tx_w>
     80000850:	06e78c63          	beq	a5,a4,800008c8 <uartstart+0x88>
 {
     80000854:	7139                	addi	sp,sp,-64
@@ -1116,14 +1116,14 @@ uartstart()
     }
     
     int c = uart_tx_buf[uart_tx_r % UART_TX_BUF_SIZE];
-    8000086a:	00012a17          	auipc	s4,0x12
-    8000086e:	9fea0a13          	addi	s4,s4,-1538 # 80012268 <uart_tx_lock>
+    8000086a:	00011a17          	auipc	s4,0x11
+    8000086e:	9dea0a13          	addi	s4,s4,-1570 # 80011248 <uart_tx_lock>
     uart_tx_r += 1;
-    80000872:	00009497          	auipc	s1,0x9
-    80000876:	79648493          	addi	s1,s1,1942 # 8000a008 <uart_tx_r>
+    80000872:	00008497          	auipc	s1,0x8
+    80000876:	79648493          	addi	s1,s1,1942 # 80009008 <uart_tx_r>
     if(uart_tx_w == uart_tx_r){
-    8000087a:	00009997          	auipc	s3,0x9
-    8000087e:	79698993          	addi	s3,s3,1942 # 8000a010 <uart_tx_w>
+    8000087a:	00008997          	auipc	s3,0x8
+    8000087e:	79698993          	addi	s3,s3,1942 # 80009010 <uart_tx_w>
     if((ReadReg(LSR) & LSR_TX_IDLE) == 0){
     80000882:	00594783          	lbu	a5,5(s2) # 10000005 <_entry-0x6ffffffb>
     80000886:	0ff7f793          	andi	a5,a5,255
@@ -1141,7 +1141,7 @@ uartstart()
     wakeup(&uart_tx_r);
     8000089e:	8526                	mv	a0,s1
     800008a0:	00002097          	auipc	ra,0x2
-    800008a4:	7f4080e7          	jalr	2036(ra) # 80003094 <wakeup>
+    800008a4:	e40080e7          	jalr	-448(ra) # 800026e0 <wakeup>
     
     WriteReg(THR, c);
     800008a8:	01590023          	sb	s5,0(s2)
@@ -1174,51 +1174,51 @@ uartstart()
     800008d8:	1800                	addi	s0,sp,48
     800008da:	89aa                	mv	s3,a0
   acquire(&uart_tx_lock);
-    800008dc:	00012517          	auipc	a0,0x12
-    800008e0:	98c50513          	addi	a0,a0,-1652 # 80012268 <uart_tx_lock>
+    800008dc:	00011517          	auipc	a0,0x11
+    800008e0:	96c50513          	addi	a0,a0,-1684 # 80011248 <uart_tx_lock>
     800008e4:	00000097          	auipc	ra,0x0
     800008e8:	300080e7          	jalr	768(ra) # 80000be4 <acquire>
   if(panicked){
-    800008ec:	00009797          	auipc	a5,0x9
-    800008f0:	7147a783          	lw	a5,1812(a5) # 8000a000 <panicked>
+    800008ec:	00008797          	auipc	a5,0x8
+    800008f0:	7147a783          	lw	a5,1812(a5) # 80009000 <panicked>
     800008f4:	c391                	beqz	a5,800008f8 <uartputc+0x2e>
     for(;;)
     800008f6:	a001                	j	800008f6 <uartputc+0x2c>
     if(uart_tx_w == uart_tx_r + UART_TX_BUF_SIZE){
-    800008f8:	00009797          	auipc	a5,0x9
-    800008fc:	7187b783          	ld	a5,1816(a5) # 8000a010 <uart_tx_w>
-    80000900:	00009717          	auipc	a4,0x9
-    80000904:	70873703          	ld	a4,1800(a4) # 8000a008 <uart_tx_r>
+    800008f8:	00008797          	auipc	a5,0x8
+    800008fc:	7187b783          	ld	a5,1816(a5) # 80009010 <uart_tx_w>
+    80000900:	00008717          	auipc	a4,0x8
+    80000904:	70873703          	ld	a4,1800(a4) # 80009008 <uart_tx_r>
     80000908:	02070713          	addi	a4,a4,32
     8000090c:	02f71b63          	bne	a4,a5,80000942 <uartputc+0x78>
       sleep(&uart_tx_r, &uart_tx_lock);
-    80000910:	00012a17          	auipc	s4,0x12
-    80000914:	958a0a13          	addi	s4,s4,-1704 # 80012268 <uart_tx_lock>
-    80000918:	00009497          	auipc	s1,0x9
-    8000091c:	6f048493          	addi	s1,s1,1776 # 8000a008 <uart_tx_r>
+    80000910:	00011a17          	auipc	s4,0x11
+    80000914:	938a0a13          	addi	s4,s4,-1736 # 80011248 <uart_tx_lock>
+    80000918:	00008497          	auipc	s1,0x8
+    8000091c:	6f048493          	addi	s1,s1,1776 # 80009008 <uart_tx_r>
     if(uart_tx_w == uart_tx_r + UART_TX_BUF_SIZE){
-    80000920:	00009917          	auipc	s2,0x9
-    80000924:	6f090913          	addi	s2,s2,1776 # 8000a010 <uart_tx_w>
+    80000920:	00008917          	auipc	s2,0x8
+    80000924:	6f090913          	addi	s2,s2,1776 # 80009010 <uart_tx_w>
       sleep(&uart_tx_r, &uart_tx_lock);
     80000928:	85d2                	mv	a1,s4
     8000092a:	8526                	mv	a0,s1
     8000092c:	00002097          	auipc	ra,0x2
-    80000930:	352080e7          	jalr	850(ra) # 80002c7e <sleep>
+    80000930:	c16080e7          	jalr	-1002(ra) # 80002542 <sleep>
     if(uart_tx_w == uart_tx_r + UART_TX_BUF_SIZE){
     80000934:	00093783          	ld	a5,0(s2)
     80000938:	6098                	ld	a4,0(s1)
     8000093a:	02070713          	addi	a4,a4,32
     8000093e:	fef705e3          	beq	a4,a5,80000928 <uartputc+0x5e>
       uart_tx_buf[uart_tx_w % UART_TX_BUF_SIZE] = c;
-    80000942:	00012497          	auipc	s1,0x12
-    80000946:	92648493          	addi	s1,s1,-1754 # 80012268 <uart_tx_lock>
+    80000942:	00011497          	auipc	s1,0x11
+    80000946:	90648493          	addi	s1,s1,-1786 # 80011248 <uart_tx_lock>
     8000094a:	01f7f713          	andi	a4,a5,31
     8000094e:	9726                	add	a4,a4,s1
     80000950:	01370c23          	sb	s3,24(a4)
       uart_tx_w += 1;
     80000954:	0785                	addi	a5,a5,1
-    80000956:	00009717          	auipc	a4,0x9
-    8000095a:	6af73d23          	sd	a5,1722(a4) # 8000a010 <uart_tx_w>
+    80000956:	00008717          	auipc	a4,0x8
+    8000095a:	6af73d23          	sd	a5,1722(a4) # 80009010 <uart_tx_w>
       uartstart();
     8000095e:	00000097          	auipc	ra,0x0
     80000962:	ee2080e7          	jalr	-286(ra) # 80000840 <uartstart>
@@ -1299,8 +1299,8 @@ uartintr(void)
 
   // send buffered characters.
   acquire(&uart_tx_lock);
-    800009ca:	00012497          	auipc	s1,0x12
-    800009ce:	89e48493          	addi	s1,s1,-1890 # 80012268 <uart_tx_lock>
+    800009ca:	00011497          	auipc	s1,0x11
+    800009ce:	87e48493          	addi	s1,s1,-1922 # 80011248 <uart_tx_lock>
     800009d2:	8526                	mv	a0,s1
     800009d4:	00000097          	auipc	ra,0x0
     800009d8:	210080e7          	jalr	528(ra) # 80000be4 <acquire>
@@ -1337,8 +1337,8 @@ kfree(void *pa)
     80000a04:	03451793          	slli	a5,a0,0x34
     80000a08:	ebb9                	bnez	a5,80000a5e <kfree+0x66>
     80000a0a:	84aa                	mv	s1,a0
-    80000a0c:	00027797          	auipc	a5,0x27
-    80000a10:	5f478793          	addi	a5,a5,1524 # 80028000 <end>
+    80000a0c:	00025797          	auipc	a5,0x25
+    80000a10:	5f478793          	addi	a5,a5,1524 # 80026000 <end>
     80000a14:	04f56563          	bltu	a0,a5,80000a5e <kfree+0x66>
     80000a18:	47c5                	li	a5,17
     80000a1a:	07ee                	slli	a5,a5,0x1b
@@ -1355,8 +1355,8 @@ kfree(void *pa)
   r = (struct run*)pa;
 
   acquire(&kmem.lock);
-    80000a2c:	00012917          	auipc	s2,0x12
-    80000a30:	87490913          	addi	s2,s2,-1932 # 800122a0 <kmem>
+    80000a2c:	00011917          	auipc	s2,0x11
+    80000a30:	85490913          	addi	s2,s2,-1964 # 80011280 <kmem>
     80000a34:	854a                	mv	a0,s2
     80000a36:	00000097          	auipc	ra,0x0
     80000a3a:	1ae080e7          	jalr	430(ra) # 80000be4 <acquire>
@@ -1377,8 +1377,8 @@ kfree(void *pa)
     80000a5a:	6105                	addi	sp,sp,32
     80000a5c:	8082                	ret
     panic("kfree");
-    80000a5e:	00008517          	auipc	a0,0x8
-    80000a62:	60250513          	addi	a0,a0,1538 # 80009060 <digits+0x20>
+    80000a5e:	00007517          	auipc	a0,0x7
+    80000a62:	60250513          	addi	a0,a0,1538 # 80008060 <digits+0x20>
     80000a66:	00000097          	auipc	ra,0x0
     80000a6a:	ad8080e7          	jalr	-1320(ra) # 8000053e <panic>
 
@@ -1430,17 +1430,17 @@ kfree(void *pa)
     80000abc:	e022                	sd	s0,0(sp)
     80000abe:	0800                	addi	s0,sp,16
   initlock(&kmem.lock, "kmem");
-    80000ac0:	00008597          	auipc	a1,0x8
-    80000ac4:	5a858593          	addi	a1,a1,1448 # 80009068 <digits+0x28>
-    80000ac8:	00011517          	auipc	a0,0x11
-    80000acc:	7d850513          	addi	a0,a0,2008 # 800122a0 <kmem>
+    80000ac0:	00007597          	auipc	a1,0x7
+    80000ac4:	5a858593          	addi	a1,a1,1448 # 80008068 <digits+0x28>
+    80000ac8:	00010517          	auipc	a0,0x10
+    80000acc:	7b850513          	addi	a0,a0,1976 # 80011280 <kmem>
     80000ad0:	00000097          	auipc	ra,0x0
     80000ad4:	084080e7          	jalr	132(ra) # 80000b54 <initlock>
   freerange(end, (void*)PHYSTOP);
     80000ad8:	45c5                	li	a1,17
     80000ada:	05ee                	slli	a1,a1,0x1b
-    80000adc:	00027517          	auipc	a0,0x27
-    80000ae0:	52450513          	addi	a0,a0,1316 # 80028000 <end>
+    80000adc:	00025517          	auipc	a0,0x25
+    80000ae0:	52450513          	addi	a0,a0,1316 # 80026000 <end>
     80000ae4:	00000097          	auipc	ra,0x0
     80000ae8:	f8a080e7          	jalr	-118(ra) # 80000a6e <freerange>
 }
@@ -1464,8 +1464,8 @@ kalloc(void)
   struct run *r;
 
   acquire(&kmem.lock);
-    80000afe:	00011497          	auipc	s1,0x11
-    80000b02:	7a248493          	addi	s1,s1,1954 # 800122a0 <kmem>
+    80000afe:	00010497          	auipc	s1,0x10
+    80000b02:	78248493          	addi	s1,s1,1922 # 80011280 <kmem>
     80000b06:	8526                	mv	a0,s1
     80000b08:	00000097          	auipc	ra,0x0
     80000b0c:	0dc080e7          	jalr	220(ra) # 80000be4 <acquire>
@@ -1475,8 +1475,8 @@ kalloc(void)
     80000b12:	c885                	beqz	s1,80000b42 <kalloc+0x4e>
     kmem.freelist = r->next;
     80000b14:	609c                	ld	a5,0(s1)
-    80000b16:	00011517          	auipc	a0,0x11
-    80000b1a:	78a50513          	addi	a0,a0,1930 # 800122a0 <kmem>
+    80000b16:	00010517          	auipc	a0,0x10
+    80000b1a:	76a50513          	addi	a0,a0,1898 # 80011280 <kmem>
     80000b1e:	ed1c                	sd	a5,24(a0)
   release(&kmem.lock);
     80000b20:	00000097          	auipc	ra,0x0
@@ -1498,8 +1498,8 @@ kalloc(void)
     80000b3e:	6105                	addi	sp,sp,32
     80000b40:	8082                	ret
   release(&kmem.lock);
-    80000b42:	00011517          	auipc	a0,0x11
-    80000b46:	75e50513          	addi	a0,a0,1886 # 800122a0 <kmem>
+    80000b42:	00010517          	auipc	a0,0x10
+    80000b46:	73e50513          	addi	a0,a0,1854 # 80011280 <kmem>
     80000b4a:	00000097          	auipc	ra,0x0
     80000b4e:	14e080e7          	jalr	334(ra) # 80000c98 <release>
   if(r)
@@ -1548,7 +1548,7 @@ holding(struct spinlock *lk)
   r = (lk->locked && lk->cpu == mycpu());
     80000b7c:	6904                	ld	s1,16(a0)
     80000b7e:	00001097          	auipc	ra,0x1
-    80000b82:	fea080e7          	jalr	-22(ra) # 80001b68 <mycpu>
+    80000b82:	130080e7          	jalr	304(ra) # 80001cae <mycpu>
     80000b86:	40a48533          	sub	a0,s1,a0
     80000b8a:	00153513          	seqz	a0,a0
 }
@@ -1582,13 +1582,13 @@ push_off(void)
   intr_off();
   if(mycpu()->noff == 0)
     80000bb0:	00001097          	auipc	ra,0x1
-    80000bb4:	fb8080e7          	jalr	-72(ra) # 80001b68 <mycpu>
+    80000bb4:	0fe080e7          	jalr	254(ra) # 80001cae <mycpu>
     80000bb8:	5d3c                	lw	a5,120(a0)
     80000bba:	cf89                	beqz	a5,80000bd4 <push_off+0x3c>
     mycpu()->intena = old;
   mycpu()->noff += 1;
     80000bbc:	00001097          	auipc	ra,0x1
-    80000bc0:	fac080e7          	jalr	-84(ra) # 80001b68 <mycpu>
+    80000bc0:	0f2080e7          	jalr	242(ra) # 80001cae <mycpu>
     80000bc4:	5d3c                	lw	a5,120(a0)
     80000bc6:	2785                	addiw	a5,a5,1
     80000bc8:	dd3c                	sw	a5,120(a0)
@@ -1600,7 +1600,7 @@ push_off(void)
     80000bd2:	8082                	ret
     mycpu()->intena = old;
     80000bd4:	00001097          	auipc	ra,0x1
-    80000bd8:	f94080e7          	jalr	-108(ra) # 80001b68 <mycpu>
+    80000bd8:	0da080e7          	jalr	218(ra) # 80001cae <mycpu>
   return (x & SSTATUS_SIE) != 0;
     80000bdc:	8085                	srli	s1,s1,0x1
     80000bde:	8885                	andi	s1,s1,1
@@ -1635,7 +1635,7 @@ push_off(void)
     80000c10:	0ff0000f          	fence
   lk->cpu = mycpu();
     80000c14:	00001097          	auipc	ra,0x1
-    80000c18:	f54080e7          	jalr	-172(ra) # 80001b68 <mycpu>
+    80000c18:	09a080e7          	jalr	154(ra) # 80001cae <mycpu>
     80000c1c:	e888                	sd	a0,16(s1)
 }
     80000c1e:	60e2                	ld	ra,24(sp)
@@ -1644,8 +1644,8 @@ push_off(void)
     80000c24:	6105                	addi	sp,sp,32
     80000c26:	8082                	ret
     panic("acquire");
-    80000c28:	00008517          	auipc	a0,0x8
-    80000c2c:	44850513          	addi	a0,a0,1096 # 80009070 <digits+0x30>
+    80000c28:	00007517          	auipc	a0,0x7
+    80000c2c:	44850513          	addi	a0,a0,1096 # 80008070 <digits+0x30>
     80000c30:	00000097          	auipc	ra,0x0
     80000c34:	90e080e7          	jalr	-1778(ra) # 8000053e <panic>
 
@@ -1660,7 +1660,7 @@ pop_off(void)
     80000c3e:	0800                	addi	s0,sp,16
   struct cpu *c = mycpu();
     80000c40:	00001097          	auipc	ra,0x1
-    80000c44:	f28080e7          	jalr	-216(ra) # 80001b68 <mycpu>
+    80000c44:	06e080e7          	jalr	110(ra) # 80001cae <mycpu>
   asm volatile("csrr %0, sstatus" : "=r" (x) );
     80000c48:	100027f3          	csrr	a5,sstatus
   return (x & SSTATUS_SIE) != 0;
@@ -1693,13 +1693,13 @@ pop_off(void)
     80000c74:	0141                	addi	sp,sp,16
     80000c76:	8082                	ret
     panic("pop_off - interruptible");
-    80000c78:	00008517          	auipc	a0,0x8
-    80000c7c:	40050513          	addi	a0,a0,1024 # 80009078 <digits+0x38>
+    80000c78:	00007517          	auipc	a0,0x7
+    80000c7c:	40050513          	addi	a0,a0,1024 # 80008078 <digits+0x38>
     80000c80:	00000097          	auipc	ra,0x0
     80000c84:	8be080e7          	jalr	-1858(ra) # 8000053e <panic>
     panic("pop_off");
-    80000c88:	00008517          	auipc	a0,0x8
-    80000c8c:	40850513          	addi	a0,a0,1032 # 80009090 <digits+0x50>
+    80000c88:	00007517          	auipc	a0,0x7
+    80000c8c:	40850513          	addi	a0,a0,1032 # 80008090 <digits+0x50>
     80000c90:	00000097          	auipc	ra,0x0
     80000c94:	8ae080e7          	jalr	-1874(ra) # 8000053e <panic>
 
@@ -1732,8 +1732,8 @@ pop_off(void)
     80000ccc:	6105                	addi	sp,sp,32
     80000cce:	8082                	ret
     panic("release");
-    80000cd0:	00008517          	auipc	a0,0x8
-    80000cd4:	3c850513          	addi	a0,a0,968 # 80009098 <digits+0x58>
+    80000cd0:	00007517          	auipc	a0,0x7
+    80000cd4:	3c850513          	addi	a0,a0,968 # 80008098 <digits+0x58>
     80000cd8:	00000097          	auipc	ra,0x0
     80000cdc:	866080e7          	jalr	-1946(ra) # 8000053e <panic>
 
@@ -2055,17 +2055,17 @@ main()
     80000e94:	0800                	addi	s0,sp,16
   if(cpuid() == 0){
     80000e96:	00001097          	auipc	ra,0x1
-    80000e9a:	cc2080e7          	jalr	-830(ra) # 80001b58 <cpuid>
+    80000e9a:	e08080e7          	jalr	-504(ra) # 80001c9e <cpuid>
     virtio_disk_init(); // emulated hard disk
     userinit();      // first user process
     __sync_synchronize();
     started = 1;
   } else {
     while(started == 0)
-    80000e9e:	00009717          	auipc	a4,0x9
-    80000ea2:	17a70713          	addi	a4,a4,378 # 8000a018 <started>
+    80000e9e:	00008717          	auipc	a4,0x8
+    80000ea2:	17a70713          	addi	a4,a4,378 # 80009018 <started>
   if(cpuid() == 0){
-    80000ea6:	c539                	beqz	a0,80000ef4 <main+0x66>
+    80000ea6:	c139                	beqz	a0,80000eec <main+0x5e>
     while(started == 0)
     80000ea8:	431c                	lw	a5,0(a4)
     80000eaa:	2781                	sext.w	a5,a5
@@ -2075,13446 +2075,11585 @@ main()
     80000eae:	0ff0000f          	fence
     printf("hart %d starting\n", cpuid());
     80000eb2:	00001097          	auipc	ra,0x1
-    80000eb6:	ca6080e7          	jalr	-858(ra) # 80001b58 <cpuid>
+    80000eb6:	dec080e7          	jalr	-532(ra) # 80001c9e <cpuid>
     80000eba:	85aa                	mv	a1,a0
-    80000ebc:	00008517          	auipc	a0,0x8
-    80000ec0:	1fc50513          	addi	a0,a0,508 # 800090b8 <digits+0x78>
+    80000ebc:	00007517          	auipc	a0,0x7
+    80000ec0:	1fc50513          	addi	a0,a0,508 # 800080b8 <digits+0x78>
     80000ec4:	fffff097          	auipc	ra,0xfffff
     80000ec8:	6c4080e7          	jalr	1732(ra) # 80000588 <printf>
     kvminithart();    // turn on paging
     80000ecc:	00000097          	auipc	ra,0x0
-    80000ed0:	0e0080e7          	jalr	224(ra) # 80000fac <kvminithart>
+    80000ed0:	0d8080e7          	jalr	216(ra) # 80000fa4 <kvminithart>
     trapinithart();   // install kernel trap vector
-    80000ed4:	00003097          	auipc	ra,0x3
-    80000ed8:	dd6080e7          	jalr	-554(ra) # 80003caa <trapinithart>
+    80000ed4:	00002097          	auipc	ra,0x2
+    80000ed8:	d42080e7          	jalr	-702(ra) # 80002c16 <trapinithart>
     plicinithart();   // ask PLIC for device interrupts
-    80000edc:	00006097          	auipc	ra,0x6
-    80000ee0:	3e4080e7          	jalr	996(ra) # 800072c0 <plicinithart>
+    80000edc:	00005097          	auipc	ra,0x5
+    80000ee0:	2e4080e7          	jalr	740(ra) # 800061c0 <plicinithart>
   }
 
   scheduler();        
-    80000ee4:	00002097          	auipc	ra,0x2
-    80000ee8:	9b2080e7          	jalr	-1614(ra) # 80002896 <scheduler>
-}
-    80000eec:	60a2                	ld	ra,8(sp)
-    80000eee:	6402                	ld	s0,0(sp)
-    80000ef0:	0141                	addi	sp,sp,16
-    80000ef2:	8082                	ret
+    80000ee4:	00001097          	auipc	ra,0x1
+    80000ee8:	452080e7          	jalr	1106(ra) # 80002336 <scheduler>
     consoleinit();
-    80000ef4:	fffff097          	auipc	ra,0xfffff
-    80000ef8:	55c080e7          	jalr	1372(ra) # 80000450 <consoleinit>
+    80000eec:	fffff097          	auipc	ra,0xfffff
+    80000ef0:	564080e7          	jalr	1380(ra) # 80000450 <consoleinit>
     printfinit();
-    80000efc:	00000097          	auipc	ra,0x0
-    80000f00:	872080e7          	jalr	-1934(ra) # 8000076e <printfinit>
+    80000ef4:	00000097          	auipc	ra,0x0
+    80000ef8:	87a080e7          	jalr	-1926(ra) # 8000076e <printfinit>
     printf("\n");
-    80000f04:	00008517          	auipc	a0,0x8
-    80000f08:	70450513          	addi	a0,a0,1796 # 80009608 <digits+0x5c8>
-    80000f0c:	fffff097          	auipc	ra,0xfffff
-    80000f10:	67c080e7          	jalr	1660(ra) # 80000588 <printf>
+    80000efc:	00007517          	auipc	a0,0x7
+    80000f00:	1cc50513          	addi	a0,a0,460 # 800080c8 <digits+0x88>
+    80000f04:	fffff097          	auipc	ra,0xfffff
+    80000f08:	684080e7          	jalr	1668(ra) # 80000588 <printf>
     printf("xv6 kernel is booting\n");
-    80000f14:	00008517          	auipc	a0,0x8
-    80000f18:	18c50513          	addi	a0,a0,396 # 800090a0 <digits+0x60>
-    80000f1c:	fffff097          	auipc	ra,0xfffff
-    80000f20:	66c080e7          	jalr	1644(ra) # 80000588 <printf>
+    80000f0c:	00007517          	auipc	a0,0x7
+    80000f10:	19450513          	addi	a0,a0,404 # 800080a0 <digits+0x60>
+    80000f14:	fffff097          	auipc	ra,0xfffff
+    80000f18:	674080e7          	jalr	1652(ra) # 80000588 <printf>
     printf("\n");
-    80000f24:	00008517          	auipc	a0,0x8
-    80000f28:	6e450513          	addi	a0,a0,1764 # 80009608 <digits+0x5c8>
-    80000f2c:	fffff097          	auipc	ra,0xfffff
-    80000f30:	65c080e7          	jalr	1628(ra) # 80000588 <printf>
+    80000f1c:	00007517          	auipc	a0,0x7
+    80000f20:	1ac50513          	addi	a0,a0,428 # 800080c8 <digits+0x88>
+    80000f24:	fffff097          	auipc	ra,0xfffff
+    80000f28:	664080e7          	jalr	1636(ra) # 80000588 <printf>
     kinit();         // physical page allocator
-    80000f34:	00000097          	auipc	ra,0x0
-    80000f38:	b84080e7          	jalr	-1148(ra) # 80000ab8 <kinit>
+    80000f2c:	00000097          	auipc	ra,0x0
+    80000f30:	b8c080e7          	jalr	-1140(ra) # 80000ab8 <kinit>
     kvminit();       // create kernel page table
-    80000f3c:	00000097          	auipc	ra,0x0
-    80000f40:	322080e7          	jalr	802(ra) # 8000125e <kvminit>
+    80000f34:	00000097          	auipc	ra,0x0
+    80000f38:	322080e7          	jalr	802(ra) # 80001256 <kvminit>
     kvminithart();   // turn on paging
-    80000f44:	00000097          	auipc	ra,0x0
-    80000f48:	068080e7          	jalr	104(ra) # 80000fac <kvminithart>
+    80000f3c:	00000097          	auipc	ra,0x0
+    80000f40:	068080e7          	jalr	104(ra) # 80000fa4 <kvminithart>
     procinit();      // process table
-    80000f4c:	00001097          	auipc	ra,0x1
-    80000f50:	ad4080e7          	jalr	-1324(ra) # 80001a20 <procinit>
+    80000f44:	00001097          	auipc	ra,0x1
+    80000f48:	bd0080e7          	jalr	-1072(ra) # 80001b14 <procinit>
     trapinit();      // trap vectors
-    80000f54:	00003097          	auipc	ra,0x3
-    80000f58:	d2e080e7          	jalr	-722(ra) # 80003c82 <trapinit>
+    80000f4c:	00002097          	auipc	ra,0x2
+    80000f50:	ca2080e7          	jalr	-862(ra) # 80002bee <trapinit>
     trapinithart();  // install kernel trap vector
-    80000f5c:	00003097          	auipc	ra,0x3
-    80000f60:	d4e080e7          	jalr	-690(ra) # 80003caa <trapinithart>
+    80000f54:	00002097          	auipc	ra,0x2
+    80000f58:	cc2080e7          	jalr	-830(ra) # 80002c16 <trapinithart>
     plicinit();      // set up interrupt controller
-    80000f64:	00006097          	auipc	ra,0x6
-    80000f68:	346080e7          	jalr	838(ra) # 800072aa <plicinit>
+    80000f5c:	00005097          	auipc	ra,0x5
+    80000f60:	24e080e7          	jalr	590(ra) # 800061aa <plicinit>
     plicinithart();  // ask PLIC for device interrupts
-    80000f6c:	00006097          	auipc	ra,0x6
-    80000f70:	354080e7          	jalr	852(ra) # 800072c0 <plicinithart>
+    80000f64:	00005097          	auipc	ra,0x5
+    80000f68:	25c080e7          	jalr	604(ra) # 800061c0 <plicinithart>
     binit();         // buffer cache
-    80000f74:	00003097          	auipc	ra,0x3
-    80000f78:	532080e7          	jalr	1330(ra) # 800044a6 <binit>
+    80000f6c:	00002097          	auipc	ra,0x2
+    80000f70:	436080e7          	jalr	1078(ra) # 800033a2 <binit>
     iinit();         // inode table
-    80000f7c:	00004097          	auipc	ra,0x4
-    80000f80:	bc2080e7          	jalr	-1086(ra) # 80004b3e <iinit>
+    80000f74:	00003097          	auipc	ra,0x3
+    80000f78:	ac6080e7          	jalr	-1338(ra) # 80003a3a <iinit>
     fileinit();      // file table
-    80000f84:	00005097          	auipc	ra,0x5
-    80000f88:	b6c080e7          	jalr	-1172(ra) # 80005af0 <fileinit>
+    80000f7c:	00004097          	auipc	ra,0x4
+    80000f80:	a70080e7          	jalr	-1424(ra) # 800049ec <fileinit>
     virtio_disk_init(); // emulated hard disk
-    80000f8c:	00006097          	auipc	ra,0x6
-    80000f90:	456080e7          	jalr	1110(ra) # 800073e2 <virtio_disk_init>
+    80000f84:	00005097          	auipc	ra,0x5
+    80000f88:	35e080e7          	jalr	862(ra) # 800062e2 <virtio_disk_init>
     userinit();      // first user process
-    80000f94:	00001097          	auipc	ra,0x1
-    80000f98:	1d8080e7          	jalr	472(ra) # 8000216c <userinit>
+    80000f8c:	00001097          	auipc	ra,0x1
+    80000f90:	0ca080e7          	jalr	202(ra) # 80002056 <userinit>
     __sync_synchronize();
-    80000f9c:	0ff0000f          	fence
+    80000f94:	0ff0000f          	fence
     started = 1;
-    80000fa0:	4785                	li	a5,1
-    80000fa2:	00009717          	auipc	a4,0x9
-    80000fa6:	06f72b23          	sw	a5,118(a4) # 8000a018 <started>
-    80000faa:	bf2d                	j	80000ee4 <main+0x56>
+    80000f98:	4785                	li	a5,1
+    80000f9a:	00008717          	auipc	a4,0x8
+    80000f9e:	06f72f23          	sw	a5,126(a4) # 80009018 <started>
+    80000fa2:	b789                	j	80000ee4 <main+0x56>
 
-0000000080000fac <kvminithart>:
+0000000080000fa4 <kvminithart>:
 
 // Switch h/w page table register to the kernel's page table,
 // and enable paging.
 void
 kvminithart()
 {
-    80000fac:	1141                	addi	sp,sp,-16
-    80000fae:	e422                	sd	s0,8(sp)
-    80000fb0:	0800                	addi	s0,sp,16
+    80000fa4:	1141                	addi	sp,sp,-16
+    80000fa6:	e422                	sd	s0,8(sp)
+    80000fa8:	0800                	addi	s0,sp,16
   w_satp(MAKE_SATP(kernel_pagetable));
-    80000fb2:	00009797          	auipc	a5,0x9
-    80000fb6:	06e7b783          	ld	a5,110(a5) # 8000a020 <kernel_pagetable>
-    80000fba:	83b1                	srli	a5,a5,0xc
-    80000fbc:	577d                	li	a4,-1
-    80000fbe:	177e                	slli	a4,a4,0x3f
-    80000fc0:	8fd9                	or	a5,a5,a4
+    80000faa:	00008797          	auipc	a5,0x8
+    80000fae:	0767b783          	ld	a5,118(a5) # 80009020 <kernel_pagetable>
+    80000fb2:	83b1                	srli	a5,a5,0xc
+    80000fb4:	577d                	li	a4,-1
+    80000fb6:	177e                	slli	a4,a4,0x3f
+    80000fb8:	8fd9                	or	a5,a5,a4
   asm volatile("csrw satp, %0" : : "r" (x));
-    80000fc2:	18079073          	csrw	satp,a5
+    80000fba:	18079073          	csrw	satp,a5
 // flush the TLB.
 static inline void
 sfence_vma()
 {
   // the zero, zero means flush all TLB entries.
   asm volatile("sfence.vma zero, zero");
-    80000fc6:	12000073          	sfence.vma
+    80000fbe:	12000073          	sfence.vma
   sfence_vma();
 }
-    80000fca:	6422                	ld	s0,8(sp)
-    80000fcc:	0141                	addi	sp,sp,16
-    80000fce:	8082                	ret
+    80000fc2:	6422                	ld	s0,8(sp)
+    80000fc4:	0141                	addi	sp,sp,16
+    80000fc6:	8082                	ret
 
-0000000080000fd0 <walk>:
+0000000080000fc8 <walk>:
 //   21..29 -- 9 bits of level-1 index.
 //   12..20 -- 9 bits of level-0 index.
 //    0..11 -- 12 bits of byte offset within the page.
 pte_t *
 walk(pagetable_t pagetable, uint64 va, int alloc)
 {
-    80000fd0:	7139                	addi	sp,sp,-64
-    80000fd2:	fc06                	sd	ra,56(sp)
-    80000fd4:	f822                	sd	s0,48(sp)
-    80000fd6:	f426                	sd	s1,40(sp)
-    80000fd8:	f04a                	sd	s2,32(sp)
-    80000fda:	ec4e                	sd	s3,24(sp)
-    80000fdc:	e852                	sd	s4,16(sp)
-    80000fde:	e456                	sd	s5,8(sp)
-    80000fe0:	e05a                	sd	s6,0(sp)
-    80000fe2:	0080                	addi	s0,sp,64
-    80000fe4:	84aa                	mv	s1,a0
-    80000fe6:	89ae                	mv	s3,a1
-    80000fe8:	8ab2                	mv	s5,a2
+    80000fc8:	7139                	addi	sp,sp,-64
+    80000fca:	fc06                	sd	ra,56(sp)
+    80000fcc:	f822                	sd	s0,48(sp)
+    80000fce:	f426                	sd	s1,40(sp)
+    80000fd0:	f04a                	sd	s2,32(sp)
+    80000fd2:	ec4e                	sd	s3,24(sp)
+    80000fd4:	e852                	sd	s4,16(sp)
+    80000fd6:	e456                	sd	s5,8(sp)
+    80000fd8:	e05a                	sd	s6,0(sp)
+    80000fda:	0080                	addi	s0,sp,64
+    80000fdc:	84aa                	mv	s1,a0
+    80000fde:	89ae                	mv	s3,a1
+    80000fe0:	8ab2                	mv	s5,a2
   if(va >= MAXVA)
-    80000fea:	57fd                	li	a5,-1
-    80000fec:	83e9                	srli	a5,a5,0x1a
-    80000fee:	4a79                	li	s4,30
+    80000fe2:	57fd                	li	a5,-1
+    80000fe4:	83e9                	srli	a5,a5,0x1a
+    80000fe6:	4a79                	li	s4,30
     panic("walk");
 
   for(int level = 2; level > 0; level--) {
-    80000ff0:	4b31                	li	s6,12
+    80000fe8:	4b31                	li	s6,12
   if(va >= MAXVA)
-    80000ff2:	04b7f263          	bgeu	a5,a1,80001036 <walk+0x66>
+    80000fea:	04b7f263          	bgeu	a5,a1,8000102e <walk+0x66>
     panic("walk");
-    80000ff6:	00008517          	auipc	a0,0x8
-    80000ffa:	0da50513          	addi	a0,a0,218 # 800090d0 <digits+0x90>
-    80000ffe:	fffff097          	auipc	ra,0xfffff
-    80001002:	540080e7          	jalr	1344(ra) # 8000053e <panic>
+    80000fee:	00007517          	auipc	a0,0x7
+    80000ff2:	0e250513          	addi	a0,a0,226 # 800080d0 <digits+0x90>
+    80000ff6:	fffff097          	auipc	ra,0xfffff
+    80000ffa:	548080e7          	jalr	1352(ra) # 8000053e <panic>
     pte_t *pte = &pagetable[PX(level, va)];
     if(*pte & PTE_V) {
       pagetable = (pagetable_t)PTE2PA(*pte);
     } else {
       if(!alloc || (pagetable = (pde_t*)kalloc()) == 0)
-    80001006:	060a8663          	beqz	s5,80001072 <walk+0xa2>
-    8000100a:	00000097          	auipc	ra,0x0
-    8000100e:	aea080e7          	jalr	-1302(ra) # 80000af4 <kalloc>
-    80001012:	84aa                	mv	s1,a0
-    80001014:	c529                	beqz	a0,8000105e <walk+0x8e>
+    80000ffe:	060a8663          	beqz	s5,8000106a <walk+0xa2>
+    80001002:	00000097          	auipc	ra,0x0
+    80001006:	af2080e7          	jalr	-1294(ra) # 80000af4 <kalloc>
+    8000100a:	84aa                	mv	s1,a0
+    8000100c:	c529                	beqz	a0,80001056 <walk+0x8e>
         return 0;
       memset(pagetable, 0, PGSIZE);
-    80001016:	6605                	lui	a2,0x1
-    80001018:	4581                	li	a1,0
-    8000101a:	00000097          	auipc	ra,0x0
-    8000101e:	cc6080e7          	jalr	-826(ra) # 80000ce0 <memset>
+    8000100e:	6605                	lui	a2,0x1
+    80001010:	4581                	li	a1,0
+    80001012:	00000097          	auipc	ra,0x0
+    80001016:	cce080e7          	jalr	-818(ra) # 80000ce0 <memset>
       *pte = PA2PTE(pagetable) | PTE_V;
-    80001022:	00c4d793          	srli	a5,s1,0xc
-    80001026:	07aa                	slli	a5,a5,0xa
-    80001028:	0017e793          	ori	a5,a5,1
-    8000102c:	00f93023          	sd	a5,0(s2)
+    8000101a:	00c4d793          	srli	a5,s1,0xc
+    8000101e:	07aa                	slli	a5,a5,0xa
+    80001020:	0017e793          	ori	a5,a5,1
+    80001024:	00f93023          	sd	a5,0(s2)
   for(int level = 2; level > 0; level--) {
-    80001030:	3a5d                	addiw	s4,s4,-9
-    80001032:	036a0063          	beq	s4,s6,80001052 <walk+0x82>
+    80001028:	3a5d                	addiw	s4,s4,-9
+    8000102a:	036a0063          	beq	s4,s6,8000104a <walk+0x82>
     pte_t *pte = &pagetable[PX(level, va)];
-    80001036:	0149d933          	srl	s2,s3,s4
-    8000103a:	1ff97913          	andi	s2,s2,511
-    8000103e:	090e                	slli	s2,s2,0x3
-    80001040:	9926                	add	s2,s2,s1
+    8000102e:	0149d933          	srl	s2,s3,s4
+    80001032:	1ff97913          	andi	s2,s2,511
+    80001036:	090e                	slli	s2,s2,0x3
+    80001038:	9926                	add	s2,s2,s1
     if(*pte & PTE_V) {
-    80001042:	00093483          	ld	s1,0(s2)
-    80001046:	0014f793          	andi	a5,s1,1
-    8000104a:	dfd5                	beqz	a5,80001006 <walk+0x36>
+    8000103a:	00093483          	ld	s1,0(s2)
+    8000103e:	0014f793          	andi	a5,s1,1
+    80001042:	dfd5                	beqz	a5,80000ffe <walk+0x36>
       pagetable = (pagetable_t)PTE2PA(*pte);
-    8000104c:	80a9                	srli	s1,s1,0xa
-    8000104e:	04b2                	slli	s1,s1,0xc
-    80001050:	b7c5                	j	80001030 <walk+0x60>
+    80001044:	80a9                	srli	s1,s1,0xa
+    80001046:	04b2                	slli	s1,s1,0xc
+    80001048:	b7c5                	j	80001028 <walk+0x60>
     }
   }
   return &pagetable[PX(0, va)];
-    80001052:	00c9d513          	srli	a0,s3,0xc
-    80001056:	1ff57513          	andi	a0,a0,511
-    8000105a:	050e                	slli	a0,a0,0x3
-    8000105c:	9526                	add	a0,a0,s1
-}
-    8000105e:	70e2                	ld	ra,56(sp)
-    80001060:	7442                	ld	s0,48(sp)
-    80001062:	74a2                	ld	s1,40(sp)
-    80001064:	7902                	ld	s2,32(sp)
-    80001066:	69e2                	ld	s3,24(sp)
-    80001068:	6a42                	ld	s4,16(sp)
-    8000106a:	6aa2                	ld	s5,8(sp)
-    8000106c:	6b02                	ld	s6,0(sp)
-    8000106e:	6121                	addi	sp,sp,64
-    80001070:	8082                	ret
+    8000104a:	00c9d513          	srli	a0,s3,0xc
+    8000104e:	1ff57513          	andi	a0,a0,511
+    80001052:	050e                	slli	a0,a0,0x3
+    80001054:	9526                	add	a0,a0,s1
+}
+    80001056:	70e2                	ld	ra,56(sp)
+    80001058:	7442                	ld	s0,48(sp)
+    8000105a:	74a2                	ld	s1,40(sp)
+    8000105c:	7902                	ld	s2,32(sp)
+    8000105e:	69e2                	ld	s3,24(sp)
+    80001060:	6a42                	ld	s4,16(sp)
+    80001062:	6aa2                	ld	s5,8(sp)
+    80001064:	6b02                	ld	s6,0(sp)
+    80001066:	6121                	addi	sp,sp,64
+    80001068:	8082                	ret
         return 0;
-    80001072:	4501                	li	a0,0
-    80001074:	b7ed                	j	8000105e <walk+0x8e>
+    8000106a:	4501                	li	a0,0
+    8000106c:	b7ed                	j	80001056 <walk+0x8e>
 
-0000000080001076 <walkaddr>:
+000000008000106e <walkaddr>:
 walkaddr(pagetable_t pagetable, uint64 va)
 {
   pte_t *pte;
   uint64 pa;
 
   if(va >= MAXVA)
-    80001076:	57fd                	li	a5,-1
-    80001078:	83e9                	srli	a5,a5,0x1a
-    8000107a:	00b7f463          	bgeu	a5,a1,80001082 <walkaddr+0xc>
+    8000106e:	57fd                	li	a5,-1
+    80001070:	83e9                	srli	a5,a5,0x1a
+    80001072:	00b7f463          	bgeu	a5,a1,8000107a <walkaddr+0xc>
     return 0;
-    8000107e:	4501                	li	a0,0
+    80001076:	4501                	li	a0,0
     return 0;
   if((*pte & PTE_U) == 0)
     return 0;
   pa = PTE2PA(*pte);
   return pa;
 }
-    80001080:	8082                	ret
+    80001078:	8082                	ret
 {
-    80001082:	1141                	addi	sp,sp,-16
-    80001084:	e406                	sd	ra,8(sp)
-    80001086:	e022                	sd	s0,0(sp)
-    80001088:	0800                	addi	s0,sp,16
+    8000107a:	1141                	addi	sp,sp,-16
+    8000107c:	e406                	sd	ra,8(sp)
+    8000107e:	e022                	sd	s0,0(sp)
+    80001080:	0800                	addi	s0,sp,16
   pte = walk(pagetable, va, 0);
-    8000108a:	4601                	li	a2,0
-    8000108c:	00000097          	auipc	ra,0x0
-    80001090:	f44080e7          	jalr	-188(ra) # 80000fd0 <walk>
+    80001082:	4601                	li	a2,0
+    80001084:	00000097          	auipc	ra,0x0
+    80001088:	f44080e7          	jalr	-188(ra) # 80000fc8 <walk>
   if(pte == 0)
-    80001094:	c105                	beqz	a0,800010b4 <walkaddr+0x3e>
+    8000108c:	c105                	beqz	a0,800010ac <walkaddr+0x3e>
   if((*pte & PTE_V) == 0)
-    80001096:	611c                	ld	a5,0(a0)
+    8000108e:	611c                	ld	a5,0(a0)
   if((*pte & PTE_U) == 0)
-    80001098:	0117f693          	andi	a3,a5,17
-    8000109c:	4745                	li	a4,17
+    80001090:	0117f693          	andi	a3,a5,17
+    80001094:	4745                	li	a4,17
     return 0;
-    8000109e:	4501                	li	a0,0
+    80001096:	4501                	li	a0,0
   if((*pte & PTE_U) == 0)
-    800010a0:	00e68663          	beq	a3,a4,800010ac <walkaddr+0x36>
+    80001098:	00e68663          	beq	a3,a4,800010a4 <walkaddr+0x36>
 }
-    800010a4:	60a2                	ld	ra,8(sp)
-    800010a6:	6402                	ld	s0,0(sp)
-    800010a8:	0141                	addi	sp,sp,16
-    800010aa:	8082                	ret
+    8000109c:	60a2                	ld	ra,8(sp)
+    8000109e:	6402                	ld	s0,0(sp)
+    800010a0:	0141                	addi	sp,sp,16
+    800010a2:	8082                	ret
   pa = PTE2PA(*pte);
-    800010ac:	00a7d513          	srli	a0,a5,0xa
-    800010b0:	0532                	slli	a0,a0,0xc
+    800010a4:	00a7d513          	srli	a0,a5,0xa
+    800010a8:	0532                	slli	a0,a0,0xc
   return pa;
-    800010b2:	bfcd                	j	800010a4 <walkaddr+0x2e>
+    800010aa:	bfcd                	j	8000109c <walkaddr+0x2e>
     return 0;
-    800010b4:	4501                	li	a0,0
-    800010b6:	b7fd                	j	800010a4 <walkaddr+0x2e>
+    800010ac:	4501                	li	a0,0
+    800010ae:	b7fd                	j	8000109c <walkaddr+0x2e>
 
-00000000800010b8 <mappages>:
+00000000800010b0 <mappages>:
 // physical addresses starting at pa. va and size might not
 // be page-aligned. Returns 0 on success, -1 if walk() couldn't
 // allocate a needed page-table page.
 int
 mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
 {
-    800010b8:	715d                	addi	sp,sp,-80
-    800010ba:	e486                	sd	ra,72(sp)
-    800010bc:	e0a2                	sd	s0,64(sp)
-    800010be:	fc26                	sd	s1,56(sp)
-    800010c0:	f84a                	sd	s2,48(sp)
-    800010c2:	f44e                	sd	s3,40(sp)
-    800010c4:	f052                	sd	s4,32(sp)
-    800010c6:	ec56                	sd	s5,24(sp)
-    800010c8:	e85a                	sd	s6,16(sp)
-    800010ca:	e45e                	sd	s7,8(sp)
-    800010cc:	0880                	addi	s0,sp,80
+    800010b0:	715d                	addi	sp,sp,-80
+    800010b2:	e486                	sd	ra,72(sp)
+    800010b4:	e0a2                	sd	s0,64(sp)
+    800010b6:	fc26                	sd	s1,56(sp)
+    800010b8:	f84a                	sd	s2,48(sp)
+    800010ba:	f44e                	sd	s3,40(sp)
+    800010bc:	f052                	sd	s4,32(sp)
+    800010be:	ec56                	sd	s5,24(sp)
+    800010c0:	e85a                	sd	s6,16(sp)
+    800010c2:	e45e                	sd	s7,8(sp)
+    800010c4:	0880                	addi	s0,sp,80
   uint64 a, last;
   pte_t *pte;
 
   if(size == 0)
-    800010ce:	c205                	beqz	a2,800010ee <mappages+0x36>
-    800010d0:	8aaa                	mv	s5,a0
-    800010d2:	8b3a                	mv	s6,a4
+    800010c6:	c205                	beqz	a2,800010e6 <mappages+0x36>
+    800010c8:	8aaa                	mv	s5,a0
+    800010ca:	8b3a                	mv	s6,a4
     panic("mappages: size");
   
   a = PGROUNDDOWN(va);
-    800010d4:	77fd                	lui	a5,0xfffff
-    800010d6:	00f5fa33          	and	s4,a1,a5
+    800010cc:	77fd                	lui	a5,0xfffff
+    800010ce:	00f5fa33          	and	s4,a1,a5
   last = PGROUNDDOWN(va + size - 1);
-    800010da:	15fd                	addi	a1,a1,-1
-    800010dc:	00c589b3          	add	s3,a1,a2
-    800010e0:	00f9f9b3          	and	s3,s3,a5
+    800010d2:	15fd                	addi	a1,a1,-1
+    800010d4:	00c589b3          	add	s3,a1,a2
+    800010d8:	00f9f9b3          	and	s3,s3,a5
   a = PGROUNDDOWN(va);
-    800010e4:	8952                	mv	s2,s4
-    800010e6:	41468a33          	sub	s4,a3,s4
+    800010dc:	8952                	mv	s2,s4
+    800010de:	41468a33          	sub	s4,a3,s4
     if(*pte & PTE_V)
       panic("mappages: remap");
     *pte = PA2PTE(pa) | perm | PTE_V;
     if(a == last)
       break;
     a += PGSIZE;
-    800010ea:	6b85                	lui	s7,0x1
-    800010ec:	a015                	j	80001110 <mappages+0x58>
+    800010e2:	6b85                	lui	s7,0x1
+    800010e4:	a015                	j	80001108 <mappages+0x58>
     panic("mappages: size");
-    800010ee:	00008517          	auipc	a0,0x8
-    800010f2:	fea50513          	addi	a0,a0,-22 # 800090d8 <digits+0x98>
-    800010f6:	fffff097          	auipc	ra,0xfffff
-    800010fa:	448080e7          	jalr	1096(ra) # 8000053e <panic>
+    800010e6:	00007517          	auipc	a0,0x7
+    800010ea:	ff250513          	addi	a0,a0,-14 # 800080d8 <digits+0x98>
+    800010ee:	fffff097          	auipc	ra,0xfffff
+    800010f2:	450080e7          	jalr	1104(ra) # 8000053e <panic>
       panic("mappages: remap");
-    800010fe:	00008517          	auipc	a0,0x8
-    80001102:	fea50513          	addi	a0,a0,-22 # 800090e8 <digits+0xa8>
-    80001106:	fffff097          	auipc	ra,0xfffff
-    8000110a:	438080e7          	jalr	1080(ra) # 8000053e <panic>
+    800010f6:	00007517          	auipc	a0,0x7
+    800010fa:	ff250513          	addi	a0,a0,-14 # 800080e8 <digits+0xa8>
+    800010fe:	fffff097          	auipc	ra,0xfffff
+    80001102:	440080e7          	jalr	1088(ra) # 8000053e <panic>
     a += PGSIZE;
-    8000110e:	995e                	add	s2,s2,s7
+    80001106:	995e                	add	s2,s2,s7
   for(;;){
-    80001110:	012a04b3          	add	s1,s4,s2
+    80001108:	012a04b3          	add	s1,s4,s2
     if((pte = walk(pagetable, a, 1)) == 0)
-    80001114:	4605                	li	a2,1
-    80001116:	85ca                	mv	a1,s2
-    80001118:	8556                	mv	a0,s5
-    8000111a:	00000097          	auipc	ra,0x0
-    8000111e:	eb6080e7          	jalr	-330(ra) # 80000fd0 <walk>
-    80001122:	cd19                	beqz	a0,80001140 <mappages+0x88>
+    8000110c:	4605                	li	a2,1
+    8000110e:	85ca                	mv	a1,s2
+    80001110:	8556                	mv	a0,s5
+    80001112:	00000097          	auipc	ra,0x0
+    80001116:	eb6080e7          	jalr	-330(ra) # 80000fc8 <walk>
+    8000111a:	cd19                	beqz	a0,80001138 <mappages+0x88>
     if(*pte & PTE_V)
-    80001124:	611c                	ld	a5,0(a0)
-    80001126:	8b85                	andi	a5,a5,1
-    80001128:	fbf9                	bnez	a5,800010fe <mappages+0x46>
+    8000111c:	611c                	ld	a5,0(a0)
+    8000111e:	8b85                	andi	a5,a5,1
+    80001120:	fbf9                	bnez	a5,800010f6 <mappages+0x46>
     *pte = PA2PTE(pa) | perm | PTE_V;
-    8000112a:	80b1                	srli	s1,s1,0xc
-    8000112c:	04aa                	slli	s1,s1,0xa
-    8000112e:	0164e4b3          	or	s1,s1,s6
-    80001132:	0014e493          	ori	s1,s1,1
-    80001136:	e104                	sd	s1,0(a0)
+    80001122:	80b1                	srli	s1,s1,0xc
+    80001124:	04aa                	slli	s1,s1,0xa
+    80001126:	0164e4b3          	or	s1,s1,s6
+    8000112a:	0014e493          	ori	s1,s1,1
+    8000112e:	e104                	sd	s1,0(a0)
     if(a == last)
-    80001138:	fd391be3          	bne	s2,s3,8000110e <mappages+0x56>
+    80001130:	fd391be3          	bne	s2,s3,80001106 <mappages+0x56>
     pa += PGSIZE;
   }
   return 0;
-    8000113c:	4501                	li	a0,0
-    8000113e:	a011                	j	80001142 <mappages+0x8a>
+    80001134:	4501                	li	a0,0
+    80001136:	a011                	j	8000113a <mappages+0x8a>
       return -1;
-    80001140:	557d                	li	a0,-1
-}
-    80001142:	60a6                	ld	ra,72(sp)
-    80001144:	6406                	ld	s0,64(sp)
-    80001146:	74e2                	ld	s1,56(sp)
-    80001148:	7942                	ld	s2,48(sp)
-    8000114a:	79a2                	ld	s3,40(sp)
-    8000114c:	7a02                	ld	s4,32(sp)
-    8000114e:	6ae2                	ld	s5,24(sp)
-    80001150:	6b42                	ld	s6,16(sp)
-    80001152:	6ba2                	ld	s7,8(sp)
-    80001154:	6161                	addi	sp,sp,80
-    80001156:	8082                	ret
-
-0000000080001158 <kvmmap>:
-{
-    80001158:	1141                	addi	sp,sp,-16
-    8000115a:	e406                	sd	ra,8(sp)
-    8000115c:	e022                	sd	s0,0(sp)
-    8000115e:	0800                	addi	s0,sp,16
-    80001160:	87b6                	mv	a5,a3
+    80001138:	557d                	li	a0,-1
+}
+    8000113a:	60a6                	ld	ra,72(sp)
+    8000113c:	6406                	ld	s0,64(sp)
+    8000113e:	74e2                	ld	s1,56(sp)
+    80001140:	7942                	ld	s2,48(sp)
+    80001142:	79a2                	ld	s3,40(sp)
+    80001144:	7a02                	ld	s4,32(sp)
+    80001146:	6ae2                	ld	s5,24(sp)
+    80001148:	6b42                	ld	s6,16(sp)
+    8000114a:	6ba2                	ld	s7,8(sp)
+    8000114c:	6161                	addi	sp,sp,80
+    8000114e:	8082                	ret
+
+0000000080001150 <kvmmap>:
+{
+    80001150:	1141                	addi	sp,sp,-16
+    80001152:	e406                	sd	ra,8(sp)
+    80001154:	e022                	sd	s0,0(sp)
+    80001156:	0800                	addi	s0,sp,16
+    80001158:	87b6                	mv	a5,a3
   if(mappages(kpgtbl, va, sz, pa, perm) != 0)
-    80001162:	86b2                	mv	a3,a2
-    80001164:	863e                	mv	a2,a5
-    80001166:	00000097          	auipc	ra,0x0
-    8000116a:	f52080e7          	jalr	-174(ra) # 800010b8 <mappages>
-    8000116e:	e509                	bnez	a0,80001178 <kvmmap+0x20>
-}
-    80001170:	60a2                	ld	ra,8(sp)
-    80001172:	6402                	ld	s0,0(sp)
-    80001174:	0141                	addi	sp,sp,16
-    80001176:	8082                	ret
+    8000115a:	86b2                	mv	a3,a2
+    8000115c:	863e                	mv	a2,a5
+    8000115e:	00000097          	auipc	ra,0x0
+    80001162:	f52080e7          	jalr	-174(ra) # 800010b0 <mappages>
+    80001166:	e509                	bnez	a0,80001170 <kvmmap+0x20>
+}
+    80001168:	60a2                	ld	ra,8(sp)
+    8000116a:	6402                	ld	s0,0(sp)
+    8000116c:	0141                	addi	sp,sp,16
+    8000116e:	8082                	ret
     panic("kvmmap");
-    80001178:	00008517          	auipc	a0,0x8
-    8000117c:	f8050513          	addi	a0,a0,-128 # 800090f8 <digits+0xb8>
-    80001180:	fffff097          	auipc	ra,0xfffff
-    80001184:	3be080e7          	jalr	958(ra) # 8000053e <panic>
-
-0000000080001188 <kvmmake>:
-{
-    80001188:	1101                	addi	sp,sp,-32
-    8000118a:	ec06                	sd	ra,24(sp)
-    8000118c:	e822                	sd	s0,16(sp)
-    8000118e:	e426                	sd	s1,8(sp)
-    80001190:	e04a                	sd	s2,0(sp)
-    80001192:	1000                	addi	s0,sp,32
+    80001170:	00007517          	auipc	a0,0x7
+    80001174:	f8850513          	addi	a0,a0,-120 # 800080f8 <digits+0xb8>
+    80001178:	fffff097          	auipc	ra,0xfffff
+    8000117c:	3c6080e7          	jalr	966(ra) # 8000053e <panic>
+
+0000000080001180 <kvmmake>:
+{
+    80001180:	1101                	addi	sp,sp,-32
+    80001182:	ec06                	sd	ra,24(sp)
+    80001184:	e822                	sd	s0,16(sp)
+    80001186:	e426                	sd	s1,8(sp)
+    80001188:	e04a                	sd	s2,0(sp)
+    8000118a:	1000                	addi	s0,sp,32
   kpgtbl = (pagetable_t) kalloc();
-    80001194:	00000097          	auipc	ra,0x0
-    80001198:	960080e7          	jalr	-1696(ra) # 80000af4 <kalloc>
-    8000119c:	84aa                	mv	s1,a0
+    8000118c:	00000097          	auipc	ra,0x0
+    80001190:	968080e7          	jalr	-1688(ra) # 80000af4 <kalloc>
+    80001194:	84aa                	mv	s1,a0
   memset(kpgtbl, 0, PGSIZE);
-    8000119e:	6605                	lui	a2,0x1
-    800011a0:	4581                	li	a1,0
-    800011a2:	00000097          	auipc	ra,0x0
-    800011a6:	b3e080e7          	jalr	-1218(ra) # 80000ce0 <memset>
+    80001196:	6605                	lui	a2,0x1
+    80001198:	4581                	li	a1,0
+    8000119a:	00000097          	auipc	ra,0x0
+    8000119e:	b46080e7          	jalr	-1210(ra) # 80000ce0 <memset>
   kvmmap(kpgtbl, UART0, UART0, PGSIZE, PTE_R | PTE_W);
-    800011aa:	4719                	li	a4,6
-    800011ac:	6685                	lui	a3,0x1
-    800011ae:	10000637          	lui	a2,0x10000
-    800011b2:	100005b7          	lui	a1,0x10000
-    800011b6:	8526                	mv	a0,s1
-    800011b8:	00000097          	auipc	ra,0x0
-    800011bc:	fa0080e7          	jalr	-96(ra) # 80001158 <kvmmap>
+    800011a2:	4719                	li	a4,6
+    800011a4:	6685                	lui	a3,0x1
+    800011a6:	10000637          	lui	a2,0x10000
+    800011aa:	100005b7          	lui	a1,0x10000
+    800011ae:	8526                	mv	a0,s1
+    800011b0:	00000097          	auipc	ra,0x0
+    800011b4:	fa0080e7          	jalr	-96(ra) # 80001150 <kvmmap>
   kvmmap(kpgtbl, VIRTIO0, VIRTIO0, PGSIZE, PTE_R | PTE_W);
-    800011c0:	4719                	li	a4,6
-    800011c2:	6685                	lui	a3,0x1
-    800011c4:	10001637          	lui	a2,0x10001
-    800011c8:	100015b7          	lui	a1,0x10001
-    800011cc:	8526                	mv	a0,s1
-    800011ce:	00000097          	auipc	ra,0x0
-    800011d2:	f8a080e7          	jalr	-118(ra) # 80001158 <kvmmap>
+    800011b8:	4719                	li	a4,6
+    800011ba:	6685                	lui	a3,0x1
+    800011bc:	10001637          	lui	a2,0x10001
+    800011c0:	100015b7          	lui	a1,0x10001
+    800011c4:	8526                	mv	a0,s1
+    800011c6:	00000097          	auipc	ra,0x0
+    800011ca:	f8a080e7          	jalr	-118(ra) # 80001150 <kvmmap>
   kvmmap(kpgtbl, PLIC, PLIC, 0x400000, PTE_R | PTE_W);
-    800011d6:	4719                	li	a4,6
-    800011d8:	004006b7          	lui	a3,0x400
-    800011dc:	0c000637          	lui	a2,0xc000
-    800011e0:	0c0005b7          	lui	a1,0xc000
-    800011e4:	8526                	mv	a0,s1
-    800011e6:	00000097          	auipc	ra,0x0
-    800011ea:	f72080e7          	jalr	-142(ra) # 80001158 <kvmmap>
+    800011ce:	4719                	li	a4,6
+    800011d0:	004006b7          	lui	a3,0x400
+    800011d4:	0c000637          	lui	a2,0xc000
+    800011d8:	0c0005b7          	lui	a1,0xc000
+    800011dc:	8526                	mv	a0,s1
+    800011de:	00000097          	auipc	ra,0x0
+    800011e2:	f72080e7          	jalr	-142(ra) # 80001150 <kvmmap>
   kvmmap(kpgtbl, KERNBASE, KERNBASE, (uint64)etext-KERNBASE, PTE_R | PTE_X);
-    800011ee:	00008917          	auipc	s2,0x8
-    800011f2:	e1290913          	addi	s2,s2,-494 # 80009000 <etext>
-    800011f6:	4729                	li	a4,10
-    800011f8:	80008697          	auipc	a3,0x80008
-    800011fc:	e0868693          	addi	a3,a3,-504 # 9000 <_entry-0x7fff7000>
-    80001200:	4605                	li	a2,1
-    80001202:	067e                	slli	a2,a2,0x1f
-    80001204:	85b2                	mv	a1,a2
-    80001206:	8526                	mv	a0,s1
-    80001208:	00000097          	auipc	ra,0x0
-    8000120c:	f50080e7          	jalr	-176(ra) # 80001158 <kvmmap>
+    800011e6:	00007917          	auipc	s2,0x7
+    800011ea:	e1a90913          	addi	s2,s2,-486 # 80008000 <etext>
+    800011ee:	4729                	li	a4,10
+    800011f0:	80007697          	auipc	a3,0x80007
+    800011f4:	e1068693          	addi	a3,a3,-496 # 8000 <_entry-0x7fff8000>
+    800011f8:	4605                	li	a2,1
+    800011fa:	067e                	slli	a2,a2,0x1f
+    800011fc:	85b2                	mv	a1,a2
+    800011fe:	8526                	mv	a0,s1
+    80001200:	00000097          	auipc	ra,0x0
+    80001204:	f50080e7          	jalr	-176(ra) # 80001150 <kvmmap>
   kvmmap(kpgtbl, (uint64)etext, (uint64)etext, PHYSTOP-(uint64)etext, PTE_R | PTE_W);
-    80001210:	4719                	li	a4,6
-    80001212:	46c5                	li	a3,17
-    80001214:	06ee                	slli	a3,a3,0x1b
-    80001216:	412686b3          	sub	a3,a3,s2
-    8000121a:	864a                	mv	a2,s2
-    8000121c:	85ca                	mv	a1,s2
-    8000121e:	8526                	mv	a0,s1
-    80001220:	00000097          	auipc	ra,0x0
-    80001224:	f38080e7          	jalr	-200(ra) # 80001158 <kvmmap>
+    80001208:	4719                	li	a4,6
+    8000120a:	46c5                	li	a3,17
+    8000120c:	06ee                	slli	a3,a3,0x1b
+    8000120e:	412686b3          	sub	a3,a3,s2
+    80001212:	864a                	mv	a2,s2
+    80001214:	85ca                	mv	a1,s2
+    80001216:	8526                	mv	a0,s1
+    80001218:	00000097          	auipc	ra,0x0
+    8000121c:	f38080e7          	jalr	-200(ra) # 80001150 <kvmmap>
   kvmmap(kpgtbl, TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);
-    80001228:	4729                	li	a4,10
-    8000122a:	6685                	lui	a3,0x1
-    8000122c:	00007617          	auipc	a2,0x7
-    80001230:	dd460613          	addi	a2,a2,-556 # 80008000 <_trampoline>
-    80001234:	040005b7          	lui	a1,0x4000
-    80001238:	15fd                	addi	a1,a1,-1
-    8000123a:	05b2                	slli	a1,a1,0xc
-    8000123c:	8526                	mv	a0,s1
-    8000123e:	00000097          	auipc	ra,0x0
-    80001242:	f1a080e7          	jalr	-230(ra) # 80001158 <kvmmap>
+    80001220:	4729                	li	a4,10
+    80001222:	6685                	lui	a3,0x1
+    80001224:	00006617          	auipc	a2,0x6
+    80001228:	ddc60613          	addi	a2,a2,-548 # 80007000 <_trampoline>
+    8000122c:	040005b7          	lui	a1,0x4000
+    80001230:	15fd                	addi	a1,a1,-1
+    80001232:	05b2                	slli	a1,a1,0xc
+    80001234:	8526                	mv	a0,s1
+    80001236:	00000097          	auipc	ra,0x0
+    8000123a:	f1a080e7          	jalr	-230(ra) # 80001150 <kvmmap>
   proc_mapstacks(kpgtbl);
-    80001246:	8526                	mv	a0,s1
-    80001248:	00000097          	auipc	ra,0x0
-    8000124c:	742080e7          	jalr	1858(ra) # 8000198a <proc_mapstacks>
-}
-    80001250:	8526                	mv	a0,s1
-    80001252:	60e2                	ld	ra,24(sp)
-    80001254:	6442                	ld	s0,16(sp)
-    80001256:	64a2                	ld	s1,8(sp)
-    80001258:	6902                	ld	s2,0(sp)
-    8000125a:	6105                	addi	sp,sp,32
-    8000125c:	8082                	ret
-
-000000008000125e <kvminit>:
-{
-    8000125e:	1141                	addi	sp,sp,-16
-    80001260:	e406                	sd	ra,8(sp)
-    80001262:	e022                	sd	s0,0(sp)
-    80001264:	0800                	addi	s0,sp,16
+    8000123e:	8526                	mv	a0,s1
+    80001240:	00001097          	auipc	ra,0x1
+    80001244:	83e080e7          	jalr	-1986(ra) # 80001a7e <proc_mapstacks>
+}
+    80001248:	8526                	mv	a0,s1
+    8000124a:	60e2                	ld	ra,24(sp)
+    8000124c:	6442                	ld	s0,16(sp)
+    8000124e:	64a2                	ld	s1,8(sp)
+    80001250:	6902                	ld	s2,0(sp)
+    80001252:	6105                	addi	sp,sp,32
+    80001254:	8082                	ret
+
+0000000080001256 <kvminit>:
+{
+    80001256:	1141                	addi	sp,sp,-16
+    80001258:	e406                	sd	ra,8(sp)
+    8000125a:	e022                	sd	s0,0(sp)
+    8000125c:	0800                	addi	s0,sp,16
   kernel_pagetable = kvmmake();
-    80001266:	00000097          	auipc	ra,0x0
-    8000126a:	f22080e7          	jalr	-222(ra) # 80001188 <kvmmake>
-    8000126e:	00009797          	auipc	a5,0x9
-    80001272:	daa7b923          	sd	a0,-590(a5) # 8000a020 <kernel_pagetable>
+    8000125e:	00000097          	auipc	ra,0x0
+    80001262:	f22080e7          	jalr	-222(ra) # 80001180 <kvmmake>
+    80001266:	00008797          	auipc	a5,0x8
+    8000126a:	daa7bd23          	sd	a0,-582(a5) # 80009020 <kernel_pagetable>
 }
-    80001276:	60a2                	ld	ra,8(sp)
-    80001278:	6402                	ld	s0,0(sp)
-    8000127a:	0141                	addi	sp,sp,16
-    8000127c:	8082                	ret
+    8000126e:	60a2                	ld	ra,8(sp)
+    80001270:	6402                	ld	s0,0(sp)
+    80001272:	0141                	addi	sp,sp,16
+    80001274:	8082                	ret
 
-000000008000127e <uvmunmap>:
+0000000080001276 <uvmunmap>:
 // Remove npages of mappings starting from va. va must be
 // page-aligned. The mappings must exist.
 // Optionally free the physical memory.
 void
 uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
 {
-    8000127e:	715d                	addi	sp,sp,-80
-    80001280:	e486                	sd	ra,72(sp)
-    80001282:	e0a2                	sd	s0,64(sp)
-    80001284:	fc26                	sd	s1,56(sp)
-    80001286:	f84a                	sd	s2,48(sp)
-    80001288:	f44e                	sd	s3,40(sp)
-    8000128a:	f052                	sd	s4,32(sp)
-    8000128c:	ec56                	sd	s5,24(sp)
-    8000128e:	e85a                	sd	s6,16(sp)
-    80001290:	e45e                	sd	s7,8(sp)
-    80001292:	0880                	addi	s0,sp,80
+    80001276:	715d                	addi	sp,sp,-80
+    80001278:	e486                	sd	ra,72(sp)
+    8000127a:	e0a2                	sd	s0,64(sp)
+    8000127c:	fc26                	sd	s1,56(sp)
+    8000127e:	f84a                	sd	s2,48(sp)
+    80001280:	f44e                	sd	s3,40(sp)
+    80001282:	f052                	sd	s4,32(sp)
+    80001284:	ec56                	sd	s5,24(sp)
+    80001286:	e85a                	sd	s6,16(sp)
+    80001288:	e45e                	sd	s7,8(sp)
+    8000128a:	0880                	addi	s0,sp,80
   uint64 a;
   pte_t *pte;
 
   if((va % PGSIZE) != 0)
-    80001294:	03459793          	slli	a5,a1,0x34
-    80001298:	e795                	bnez	a5,800012c4 <uvmunmap+0x46>
-    8000129a:	8a2a                	mv	s4,a0
-    8000129c:	892e                	mv	s2,a1
-    8000129e:	8ab6                	mv	s5,a3
+    8000128c:	03459793          	slli	a5,a1,0x34
+    80001290:	e795                	bnez	a5,800012bc <uvmunmap+0x46>
+    80001292:	8a2a                	mv	s4,a0
+    80001294:	892e                	mv	s2,a1
+    80001296:	8ab6                	mv	s5,a3
     panic("uvmunmap: not aligned");
 
   for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
-    800012a0:	0632                	slli	a2,a2,0xc
-    800012a2:	00b609b3          	add	s3,a2,a1
+    80001298:	0632                	slli	a2,a2,0xc
+    8000129a:	00b609b3          	add	s3,a2,a1
     if((pte = walk(pagetable, a, 0)) == 0)
       panic("uvmunmap: walk");
     if((*pte & PTE_V) == 0)
       panic("uvmunmap: not mapped");
     if(PTE_FLAGS(*pte) == PTE_V)
-    800012a6:	4b85                	li	s7,1
+    8000129e:	4b85                	li	s7,1
   for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
-    800012a8:	6b05                	lui	s6,0x1
-    800012aa:	0735e863          	bltu	a1,s3,8000131a <uvmunmap+0x9c>
+    800012a0:	6b05                	lui	s6,0x1
+    800012a2:	0735e863          	bltu	a1,s3,80001312 <uvmunmap+0x9c>
       uint64 pa = PTE2PA(*pte);
       kfree((void*)pa);
     }
     *pte = 0;
   }
 }
-    800012ae:	60a6                	ld	ra,72(sp)
-    800012b0:	6406                	ld	s0,64(sp)
-    800012b2:	74e2                	ld	s1,56(sp)
-    800012b4:	7942                	ld	s2,48(sp)
-    800012b6:	79a2                	ld	s3,40(sp)
-    800012b8:	7a02                	ld	s4,32(sp)
-    800012ba:	6ae2                	ld	s5,24(sp)
-    800012bc:	6b42                	ld	s6,16(sp)
-    800012be:	6ba2                	ld	s7,8(sp)
-    800012c0:	6161                	addi	sp,sp,80
-    800012c2:	8082                	ret
+    800012a6:	60a6                	ld	ra,72(sp)
+    800012a8:	6406                	ld	s0,64(sp)
+    800012aa:	74e2                	ld	s1,56(sp)
+    800012ac:	7942                	ld	s2,48(sp)
+    800012ae:	79a2                	ld	s3,40(sp)
+    800012b0:	7a02                	ld	s4,32(sp)
+    800012b2:	6ae2                	ld	s5,24(sp)
+    800012b4:	6b42                	ld	s6,16(sp)
+    800012b6:	6ba2                	ld	s7,8(sp)
+    800012b8:	6161                	addi	sp,sp,80
+    800012ba:	8082                	ret
     panic("uvmunmap: not aligned");
-    800012c4:	00008517          	auipc	a0,0x8
-    800012c8:	e3c50513          	addi	a0,a0,-452 # 80009100 <digits+0xc0>
-    800012cc:	fffff097          	auipc	ra,0xfffff
-    800012d0:	272080e7          	jalr	626(ra) # 8000053e <panic>
+    800012bc:	00007517          	auipc	a0,0x7
+    800012c0:	e4450513          	addi	a0,a0,-444 # 80008100 <digits+0xc0>
+    800012c4:	fffff097          	auipc	ra,0xfffff
+    800012c8:	27a080e7          	jalr	634(ra) # 8000053e <panic>
       panic("uvmunmap: walk");
-    800012d4:	00008517          	auipc	a0,0x8
-    800012d8:	e4450513          	addi	a0,a0,-444 # 80009118 <digits+0xd8>
-    800012dc:	fffff097          	auipc	ra,0xfffff
-    800012e0:	262080e7          	jalr	610(ra) # 8000053e <panic>
+    800012cc:	00007517          	auipc	a0,0x7
+    800012d0:	e4c50513          	addi	a0,a0,-436 # 80008118 <digits+0xd8>
+    800012d4:	fffff097          	auipc	ra,0xfffff
+    800012d8:	26a080e7          	jalr	618(ra) # 8000053e <panic>
       panic("uvmunmap: not mapped");
-    800012e4:	00008517          	auipc	a0,0x8
-    800012e8:	e4450513          	addi	a0,a0,-444 # 80009128 <digits+0xe8>
-    800012ec:	fffff097          	auipc	ra,0xfffff
-    800012f0:	252080e7          	jalr	594(ra) # 8000053e <panic>
+    800012dc:	00007517          	auipc	a0,0x7
+    800012e0:	e4c50513          	addi	a0,a0,-436 # 80008128 <digits+0xe8>
+    800012e4:	fffff097          	auipc	ra,0xfffff
+    800012e8:	25a080e7          	jalr	602(ra) # 8000053e <panic>
       panic("uvmunmap: not a leaf");
-    800012f4:	00008517          	auipc	a0,0x8
-    800012f8:	e4c50513          	addi	a0,a0,-436 # 80009140 <digits+0x100>
-    800012fc:	fffff097          	auipc	ra,0xfffff
-    80001300:	242080e7          	jalr	578(ra) # 8000053e <panic>
+    800012ec:	00007517          	auipc	a0,0x7
+    800012f0:	e5450513          	addi	a0,a0,-428 # 80008140 <digits+0x100>
+    800012f4:	fffff097          	auipc	ra,0xfffff
+    800012f8:	24a080e7          	jalr	586(ra) # 8000053e <panic>
       uint64 pa = PTE2PA(*pte);
-    80001304:	8129                	srli	a0,a0,0xa
+    800012fc:	8129                	srli	a0,a0,0xa
       kfree((void*)pa);
-    80001306:	0532                	slli	a0,a0,0xc
-    80001308:	fffff097          	auipc	ra,0xfffff
-    8000130c:	6f0080e7          	jalr	1776(ra) # 800009f8 <kfree>
+    800012fe:	0532                	slli	a0,a0,0xc
+    80001300:	fffff097          	auipc	ra,0xfffff
+    80001304:	6f8080e7          	jalr	1784(ra) # 800009f8 <kfree>
     *pte = 0;
-    80001310:	0004b023          	sd	zero,0(s1)
+    80001308:	0004b023          	sd	zero,0(s1)
   for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
-    80001314:	995a                	add	s2,s2,s6
-    80001316:	f9397ce3          	bgeu	s2,s3,800012ae <uvmunmap+0x30>
+    8000130c:	995a                	add	s2,s2,s6
+    8000130e:	f9397ce3          	bgeu	s2,s3,800012a6 <uvmunmap+0x30>
     if((pte = walk(pagetable, a, 0)) == 0)
-    8000131a:	4601                	li	a2,0
-    8000131c:	85ca                	mv	a1,s2
-    8000131e:	8552                	mv	a0,s4
-    80001320:	00000097          	auipc	ra,0x0
-    80001324:	cb0080e7          	jalr	-848(ra) # 80000fd0 <walk>
-    80001328:	84aa                	mv	s1,a0
-    8000132a:	d54d                	beqz	a0,800012d4 <uvmunmap+0x56>
+    80001312:	4601                	li	a2,0
+    80001314:	85ca                	mv	a1,s2
+    80001316:	8552                	mv	a0,s4
+    80001318:	00000097          	auipc	ra,0x0
+    8000131c:	cb0080e7          	jalr	-848(ra) # 80000fc8 <walk>
+    80001320:	84aa                	mv	s1,a0
+    80001322:	d54d                	beqz	a0,800012cc <uvmunmap+0x56>
     if((*pte & PTE_V) == 0)
-    8000132c:	6108                	ld	a0,0(a0)
-    8000132e:	00157793          	andi	a5,a0,1
-    80001332:	dbcd                	beqz	a5,800012e4 <uvmunmap+0x66>
+    80001324:	6108                	ld	a0,0(a0)
+    80001326:	00157793          	andi	a5,a0,1
+    8000132a:	dbcd                	beqz	a5,800012dc <uvmunmap+0x66>
     if(PTE_FLAGS(*pte) == PTE_V)
-    80001334:	3ff57793          	andi	a5,a0,1023
-    80001338:	fb778ee3          	beq	a5,s7,800012f4 <uvmunmap+0x76>
+    8000132c:	3ff57793          	andi	a5,a0,1023
+    80001330:	fb778ee3          	beq	a5,s7,800012ec <uvmunmap+0x76>
     if(do_free){
-    8000133c:	fc0a8ae3          	beqz	s5,80001310 <uvmunmap+0x92>
-    80001340:	b7d1                	j	80001304 <uvmunmap+0x86>
+    80001334:	fc0a8ae3          	beqz	s5,80001308 <uvmunmap+0x92>
+    80001338:	b7d1                	j	800012fc <uvmunmap+0x86>
 
-0000000080001342 <uvmcreate>:
+000000008000133a <uvmcreate>:
 
 // create an empty user page table.
 // returns 0 if out of memory.
 pagetable_t
 uvmcreate()
 {
-    80001342:	1101                	addi	sp,sp,-32
-    80001344:	ec06                	sd	ra,24(sp)
-    80001346:	e822                	sd	s0,16(sp)
-    80001348:	e426                	sd	s1,8(sp)
-    8000134a:	1000                	addi	s0,sp,32
+    8000133a:	1101                	addi	sp,sp,-32
+    8000133c:	ec06                	sd	ra,24(sp)
+    8000133e:	e822                	sd	s0,16(sp)
+    80001340:	e426                	sd	s1,8(sp)
+    80001342:	1000                	addi	s0,sp,32
   pagetable_t pagetable;
   pagetable = (pagetable_t) kalloc();
-    8000134c:	fffff097          	auipc	ra,0xfffff
-    80001350:	7a8080e7          	jalr	1960(ra) # 80000af4 <kalloc>
-    80001354:	84aa                	mv	s1,a0
+    80001344:	fffff097          	auipc	ra,0xfffff
+    80001348:	7b0080e7          	jalr	1968(ra) # 80000af4 <kalloc>
+    8000134c:	84aa                	mv	s1,a0
   if(pagetable == 0)
-    80001356:	c519                	beqz	a0,80001364 <uvmcreate+0x22>
+    8000134e:	c519                	beqz	a0,8000135c <uvmcreate+0x22>
     return 0;
   memset(pagetable, 0, PGSIZE);
-    80001358:	6605                	lui	a2,0x1
-    8000135a:	4581                	li	a1,0
-    8000135c:	00000097          	auipc	ra,0x0
-    80001360:	984080e7          	jalr	-1660(ra) # 80000ce0 <memset>
+    80001350:	6605                	lui	a2,0x1
+    80001352:	4581                	li	a1,0
+    80001354:	00000097          	auipc	ra,0x0
+    80001358:	98c080e7          	jalr	-1652(ra) # 80000ce0 <memset>
   return pagetable;
 }
-    80001364:	8526                	mv	a0,s1
-    80001366:	60e2                	ld	ra,24(sp)
-    80001368:	6442                	ld	s0,16(sp)
-    8000136a:	64a2                	ld	s1,8(sp)
-    8000136c:	6105                	addi	sp,sp,32
-    8000136e:	8082                	ret
+    8000135c:	8526                	mv	a0,s1
+    8000135e:	60e2                	ld	ra,24(sp)
+    80001360:	6442                	ld	s0,16(sp)
+    80001362:	64a2                	ld	s1,8(sp)
+    80001364:	6105                	addi	sp,sp,32
+    80001366:	8082                	ret
 
-0000000080001370 <uvminit>:
+0000000080001368 <uvminit>:
 // Load the user initcode into address 0 of pagetable,
 // for the very first process.
 // sz must be less than a page.
 void
 uvminit(pagetable_t pagetable, uchar *src, uint sz)
 {
-    80001370:	7179                	addi	sp,sp,-48
-    80001372:	f406                	sd	ra,40(sp)
-    80001374:	f022                	sd	s0,32(sp)
-    80001376:	ec26                	sd	s1,24(sp)
-    80001378:	e84a                	sd	s2,16(sp)
-    8000137a:	e44e                	sd	s3,8(sp)
-    8000137c:	e052                	sd	s4,0(sp)
-    8000137e:	1800                	addi	s0,sp,48
+    80001368:	7179                	addi	sp,sp,-48
+    8000136a:	f406                	sd	ra,40(sp)
+    8000136c:	f022                	sd	s0,32(sp)
+    8000136e:	ec26                	sd	s1,24(sp)
+    80001370:	e84a                	sd	s2,16(sp)
+    80001372:	e44e                	sd	s3,8(sp)
+    80001374:	e052                	sd	s4,0(sp)
+    80001376:	1800                	addi	s0,sp,48
   char *mem;
 
   if(sz >= PGSIZE)
-    80001380:	6785                	lui	a5,0x1
-    80001382:	04f67863          	bgeu	a2,a5,800013d2 <uvminit+0x62>
-    80001386:	8a2a                	mv	s4,a0
-    80001388:	89ae                	mv	s3,a1
-    8000138a:	84b2                	mv	s1,a2
+    80001378:	6785                	lui	a5,0x1
+    8000137a:	04f67863          	bgeu	a2,a5,800013ca <uvminit+0x62>
+    8000137e:	8a2a                	mv	s4,a0
+    80001380:	89ae                	mv	s3,a1
+    80001382:	84b2                	mv	s1,a2
     panic("inituvm: more than a page");
   mem = kalloc();
-    8000138c:	fffff097          	auipc	ra,0xfffff
-    80001390:	768080e7          	jalr	1896(ra) # 80000af4 <kalloc>
-    80001394:	892a                	mv	s2,a0
+    80001384:	fffff097          	auipc	ra,0xfffff
+    80001388:	770080e7          	jalr	1904(ra) # 80000af4 <kalloc>
+    8000138c:	892a                	mv	s2,a0
   memset(mem, 0, PGSIZE);
-    80001396:	6605                	lui	a2,0x1
-    80001398:	4581                	li	a1,0
-    8000139a:	00000097          	auipc	ra,0x0
-    8000139e:	946080e7          	jalr	-1722(ra) # 80000ce0 <memset>
+    8000138e:	6605                	lui	a2,0x1
+    80001390:	4581                	li	a1,0
+    80001392:	00000097          	auipc	ra,0x0
+    80001396:	94e080e7          	jalr	-1714(ra) # 80000ce0 <memset>
   mappages(pagetable, 0, PGSIZE, (uint64)mem, PTE_W|PTE_R|PTE_X|PTE_U);
-    800013a2:	4779                	li	a4,30
-    800013a4:	86ca                	mv	a3,s2
-    800013a6:	6605                	lui	a2,0x1
-    800013a8:	4581                	li	a1,0
-    800013aa:	8552                	mv	a0,s4
-    800013ac:	00000097          	auipc	ra,0x0
-    800013b0:	d0c080e7          	jalr	-756(ra) # 800010b8 <mappages>
+    8000139a:	4779                	li	a4,30
+    8000139c:	86ca                	mv	a3,s2
+    8000139e:	6605                	lui	a2,0x1
+    800013a0:	4581                	li	a1,0
+    800013a2:	8552                	mv	a0,s4
+    800013a4:	00000097          	auipc	ra,0x0
+    800013a8:	d0c080e7          	jalr	-756(ra) # 800010b0 <mappages>
   memmove(mem, src, sz);
-    800013b4:	8626                	mv	a2,s1
-    800013b6:	85ce                	mv	a1,s3
-    800013b8:	854a                	mv	a0,s2
-    800013ba:	00000097          	auipc	ra,0x0
-    800013be:	986080e7          	jalr	-1658(ra) # 80000d40 <memmove>
-}
-    800013c2:	70a2                	ld	ra,40(sp)
-    800013c4:	7402                	ld	s0,32(sp)
-    800013c6:	64e2                	ld	s1,24(sp)
-    800013c8:	6942                	ld	s2,16(sp)
-    800013ca:	69a2                	ld	s3,8(sp)
-    800013cc:	6a02                	ld	s4,0(sp)
-    800013ce:	6145                	addi	sp,sp,48
-    800013d0:	8082                	ret
+    800013ac:	8626                	mv	a2,s1
+    800013ae:	85ce                	mv	a1,s3
+    800013b0:	854a                	mv	a0,s2
+    800013b2:	00000097          	auipc	ra,0x0
+    800013b6:	98e080e7          	jalr	-1650(ra) # 80000d40 <memmove>
+}
+    800013ba:	70a2                	ld	ra,40(sp)
+    800013bc:	7402                	ld	s0,32(sp)
+    800013be:	64e2                	ld	s1,24(sp)
+    800013c0:	6942                	ld	s2,16(sp)
+    800013c2:	69a2                	ld	s3,8(sp)
+    800013c4:	6a02                	ld	s4,0(sp)
+    800013c6:	6145                	addi	sp,sp,48
+    800013c8:	8082                	ret
     panic("inituvm: more than a page");
-    800013d2:	00008517          	auipc	a0,0x8
-    800013d6:	d8650513          	addi	a0,a0,-634 # 80009158 <digits+0x118>
-    800013da:	fffff097          	auipc	ra,0xfffff
-    800013de:	164080e7          	jalr	356(ra) # 8000053e <panic>
+    800013ca:	00007517          	auipc	a0,0x7
+    800013ce:	d8e50513          	addi	a0,a0,-626 # 80008158 <digits+0x118>
+    800013d2:	fffff097          	auipc	ra,0xfffff
+    800013d6:	16c080e7          	jalr	364(ra) # 8000053e <panic>
 
-00000000800013e2 <uvmdealloc>:
+00000000800013da <uvmdealloc>:
 // newsz.  oldsz and newsz need not be page-aligned, nor does newsz
 // need to be less than oldsz.  oldsz can be larger than the actual
 // process size.  Returns the new process size.
 uint64
 uvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
 {
-    800013e2:	1101                	addi	sp,sp,-32
-    800013e4:	ec06                	sd	ra,24(sp)
-    800013e6:	e822                	sd	s0,16(sp)
-    800013e8:	e426                	sd	s1,8(sp)
-    800013ea:	1000                	addi	s0,sp,32
+    800013da:	1101                	addi	sp,sp,-32
+    800013dc:	ec06                	sd	ra,24(sp)
+    800013de:	e822                	sd	s0,16(sp)
+    800013e0:	e426                	sd	s1,8(sp)
+    800013e2:	1000                	addi	s0,sp,32
   if(newsz >= oldsz)
     return oldsz;
-    800013ec:	84ae                	mv	s1,a1
+    800013e4:	84ae                	mv	s1,a1
   if(newsz >= oldsz)
-    800013ee:	00b67d63          	bgeu	a2,a1,80001408 <uvmdealloc+0x26>
-    800013f2:	84b2                	mv	s1,a2
+    800013e6:	00b67d63          	bgeu	a2,a1,80001400 <uvmdealloc+0x26>
+    800013ea:	84b2                	mv	s1,a2
 
   if(PGROUNDUP(newsz) < PGROUNDUP(oldsz)){
-    800013f4:	6785                	lui	a5,0x1
-    800013f6:	17fd                	addi	a5,a5,-1
-    800013f8:	00f60733          	add	a4,a2,a5
-    800013fc:	767d                	lui	a2,0xfffff
-    800013fe:	8f71                	and	a4,a4,a2
-    80001400:	97ae                	add	a5,a5,a1
-    80001402:	8ff1                	and	a5,a5,a2
-    80001404:	00f76863          	bltu	a4,a5,80001414 <uvmdealloc+0x32>
+    800013ec:	6785                	lui	a5,0x1
+    800013ee:	17fd                	addi	a5,a5,-1
+    800013f0:	00f60733          	add	a4,a2,a5
+    800013f4:	767d                	lui	a2,0xfffff
+    800013f6:	8f71                	and	a4,a4,a2
+    800013f8:	97ae                	add	a5,a5,a1
+    800013fa:	8ff1                	and	a5,a5,a2
+    800013fc:	00f76863          	bltu	a4,a5,8000140c <uvmdealloc+0x32>
     int npages = (PGROUNDUP(oldsz) - PGROUNDUP(newsz)) / PGSIZE;
     uvmunmap(pagetable, PGROUNDUP(newsz), npages, 1);
   }
 
   return newsz;
 }
-    80001408:	8526                	mv	a0,s1
-    8000140a:	60e2                	ld	ra,24(sp)
-    8000140c:	6442                	ld	s0,16(sp)
-    8000140e:	64a2                	ld	s1,8(sp)
-    80001410:	6105                	addi	sp,sp,32
-    80001412:	8082                	ret
+    80001400:	8526                	mv	a0,s1
+    80001402:	60e2                	ld	ra,24(sp)
+    80001404:	6442                	ld	s0,16(sp)
+    80001406:	64a2                	ld	s1,8(sp)
+    80001408:	6105                	addi	sp,sp,32
+    8000140a:	8082                	ret
     int npages = (PGROUNDUP(oldsz) - PGROUNDUP(newsz)) / PGSIZE;
-    80001414:	8f99                	sub	a5,a5,a4
-    80001416:	83b1                	srli	a5,a5,0xc
+    8000140c:	8f99                	sub	a5,a5,a4
+    8000140e:	83b1                	srli	a5,a5,0xc
     uvmunmap(pagetable, PGROUNDUP(newsz), npages, 1);
-    80001418:	4685                	li	a3,1
-    8000141a:	0007861b          	sext.w	a2,a5
-    8000141e:	85ba                	mv	a1,a4
-    80001420:	00000097          	auipc	ra,0x0
-    80001424:	e5e080e7          	jalr	-418(ra) # 8000127e <uvmunmap>
-    80001428:	b7c5                	j	80001408 <uvmdealloc+0x26>
-
-000000008000142a <uvmalloc>:
+    80001410:	4685                	li	a3,1
+    80001412:	0007861b          	sext.w	a2,a5
+    80001416:	85ba                	mv	a1,a4
+    80001418:	00000097          	auipc	ra,0x0
+    8000141c:	e5e080e7          	jalr	-418(ra) # 80001276 <uvmunmap>
+    80001420:	b7c5                	j	80001400 <uvmdealloc+0x26>
+
+0000000080001422 <uvmalloc>:
   if(newsz < oldsz)
-    8000142a:	0ab66163          	bltu	a2,a1,800014cc <uvmalloc+0xa2>
-{
-    8000142e:	7139                	addi	sp,sp,-64
-    80001430:	fc06                	sd	ra,56(sp)
-    80001432:	f822                	sd	s0,48(sp)
-    80001434:	f426                	sd	s1,40(sp)
-    80001436:	f04a                	sd	s2,32(sp)
-    80001438:	ec4e                	sd	s3,24(sp)
-    8000143a:	e852                	sd	s4,16(sp)
-    8000143c:	e456                	sd	s5,8(sp)
-    8000143e:	0080                	addi	s0,sp,64
-    80001440:	8aaa                	mv	s5,a0
-    80001442:	8a32                	mv	s4,a2
+    80001422:	0ab66163          	bltu	a2,a1,800014c4 <uvmalloc+0xa2>
+{
+    80001426:	7139                	addi	sp,sp,-64
+    80001428:	fc06                	sd	ra,56(sp)
+    8000142a:	f822                	sd	s0,48(sp)
+    8000142c:	f426                	sd	s1,40(sp)
+    8000142e:	f04a                	sd	s2,32(sp)
+    80001430:	ec4e                	sd	s3,24(sp)
+    80001432:	e852                	sd	s4,16(sp)
+    80001434:	e456                	sd	s5,8(sp)
+    80001436:	0080                	addi	s0,sp,64
+    80001438:	8aaa                	mv	s5,a0
+    8000143a:	8a32                	mv	s4,a2
   oldsz = PGROUNDUP(oldsz);
-    80001444:	6985                	lui	s3,0x1
-    80001446:	19fd                	addi	s3,s3,-1
-    80001448:	95ce                	add	a1,a1,s3
-    8000144a:	79fd                	lui	s3,0xfffff
-    8000144c:	0135f9b3          	and	s3,a1,s3
+    8000143c:	6985                	lui	s3,0x1
+    8000143e:	19fd                	addi	s3,s3,-1
+    80001440:	95ce                	add	a1,a1,s3
+    80001442:	79fd                	lui	s3,0xfffff
+    80001444:	0135f9b3          	and	s3,a1,s3
   for(a = oldsz; a < newsz; a += PGSIZE){
-    80001450:	08c9f063          	bgeu	s3,a2,800014d0 <uvmalloc+0xa6>
-    80001454:	894e                	mv	s2,s3
+    80001448:	08c9f063          	bgeu	s3,a2,800014c8 <uvmalloc+0xa6>
+    8000144c:	894e                	mv	s2,s3
     mem = kalloc();
-    80001456:	fffff097          	auipc	ra,0xfffff
-    8000145a:	69e080e7          	jalr	1694(ra) # 80000af4 <kalloc>
-    8000145e:	84aa                	mv	s1,a0
+    8000144e:	fffff097          	auipc	ra,0xfffff
+    80001452:	6a6080e7          	jalr	1702(ra) # 80000af4 <kalloc>
+    80001456:	84aa                	mv	s1,a0
     if(mem == 0){
-    80001460:	c51d                	beqz	a0,8000148e <uvmalloc+0x64>
+    80001458:	c51d                	beqz	a0,80001486 <uvmalloc+0x64>
     memset(mem, 0, PGSIZE);
-    80001462:	6605                	lui	a2,0x1
-    80001464:	4581                	li	a1,0
-    80001466:	00000097          	auipc	ra,0x0
-    8000146a:	87a080e7          	jalr	-1926(ra) # 80000ce0 <memset>
+    8000145a:	6605                	lui	a2,0x1
+    8000145c:	4581                	li	a1,0
+    8000145e:	00000097          	auipc	ra,0x0
+    80001462:	882080e7          	jalr	-1918(ra) # 80000ce0 <memset>
     if(mappages(pagetable, a, PGSIZE, (uint64)mem, PTE_W|PTE_X|PTE_R|PTE_U) != 0){
-    8000146e:	4779                	li	a4,30
-    80001470:	86a6                	mv	a3,s1
-    80001472:	6605                	lui	a2,0x1
-    80001474:	85ca                	mv	a1,s2
-    80001476:	8556                	mv	a0,s5
-    80001478:	00000097          	auipc	ra,0x0
-    8000147c:	c40080e7          	jalr	-960(ra) # 800010b8 <mappages>
-    80001480:	e905                	bnez	a0,800014b0 <uvmalloc+0x86>
+    80001466:	4779                	li	a4,30
+    80001468:	86a6                	mv	a3,s1
+    8000146a:	6605                	lui	a2,0x1
+    8000146c:	85ca                	mv	a1,s2
+    8000146e:	8556                	mv	a0,s5
+    80001470:	00000097          	auipc	ra,0x0
+    80001474:	c40080e7          	jalr	-960(ra) # 800010b0 <mappages>
+    80001478:	e905                	bnez	a0,800014a8 <uvmalloc+0x86>
   for(a = oldsz; a < newsz; a += PGSIZE){
-    80001482:	6785                	lui	a5,0x1
-    80001484:	993e                	add	s2,s2,a5
-    80001486:	fd4968e3          	bltu	s2,s4,80001456 <uvmalloc+0x2c>
+    8000147a:	6785                	lui	a5,0x1
+    8000147c:	993e                	add	s2,s2,a5
+    8000147e:	fd4968e3          	bltu	s2,s4,8000144e <uvmalloc+0x2c>
   return newsz;
-    8000148a:	8552                	mv	a0,s4
-    8000148c:	a809                	j	8000149e <uvmalloc+0x74>
+    80001482:	8552                	mv	a0,s4
+    80001484:	a809                	j	80001496 <uvmalloc+0x74>
       uvmdealloc(pagetable, a, oldsz);
-    8000148e:	864e                	mv	a2,s3
-    80001490:	85ca                	mv	a1,s2
-    80001492:	8556                	mv	a0,s5
-    80001494:	00000097          	auipc	ra,0x0
-    80001498:	f4e080e7          	jalr	-178(ra) # 800013e2 <uvmdealloc>
+    80001486:	864e                	mv	a2,s3
+    80001488:	85ca                	mv	a1,s2
+    8000148a:	8556                	mv	a0,s5
+    8000148c:	00000097          	auipc	ra,0x0
+    80001490:	f4e080e7          	jalr	-178(ra) # 800013da <uvmdealloc>
       return 0;
-    8000149c:	4501                	li	a0,0
-}
-    8000149e:	70e2                	ld	ra,56(sp)
-    800014a0:	7442                	ld	s0,48(sp)
-    800014a2:	74a2                	ld	s1,40(sp)
-    800014a4:	7902                	ld	s2,32(sp)
-    800014a6:	69e2                	ld	s3,24(sp)
-    800014a8:	6a42                	ld	s4,16(sp)
-    800014aa:	6aa2                	ld	s5,8(sp)
-    800014ac:	6121                	addi	sp,sp,64
-    800014ae:	8082                	ret
+    80001494:	4501                	li	a0,0
+}
+    80001496:	70e2                	ld	ra,56(sp)
+    80001498:	7442                	ld	s0,48(sp)
+    8000149a:	74a2                	ld	s1,40(sp)
+    8000149c:	7902                	ld	s2,32(sp)
+    8000149e:	69e2                	ld	s3,24(sp)
+    800014a0:	6a42                	ld	s4,16(sp)
+    800014a2:	6aa2                	ld	s5,8(sp)
+    800014a4:	6121                	addi	sp,sp,64
+    800014a6:	8082                	ret
       kfree(mem);
-    800014b0:	8526                	mv	a0,s1
-    800014b2:	fffff097          	auipc	ra,0xfffff
-    800014b6:	546080e7          	jalr	1350(ra) # 800009f8 <kfree>
+    800014a8:	8526                	mv	a0,s1
+    800014aa:	fffff097          	auipc	ra,0xfffff
+    800014ae:	54e080e7          	jalr	1358(ra) # 800009f8 <kfree>
       uvmdealloc(pagetable, a, oldsz);
-    800014ba:	864e                	mv	a2,s3
-    800014bc:	85ca                	mv	a1,s2
-    800014be:	8556                	mv	a0,s5
-    800014c0:	00000097          	auipc	ra,0x0
-    800014c4:	f22080e7          	jalr	-222(ra) # 800013e2 <uvmdealloc>
+    800014b2:	864e                	mv	a2,s3
+    800014b4:	85ca                	mv	a1,s2
+    800014b6:	8556                	mv	a0,s5
+    800014b8:	00000097          	auipc	ra,0x0
+    800014bc:	f22080e7          	jalr	-222(ra) # 800013da <uvmdealloc>
       return 0;
-    800014c8:	4501                	li	a0,0
-    800014ca:	bfd1                	j	8000149e <uvmalloc+0x74>
+    800014c0:	4501                	li	a0,0
+    800014c2:	bfd1                	j	80001496 <uvmalloc+0x74>
     return oldsz;
-    800014cc:	852e                	mv	a0,a1
+    800014c4:	852e                	mv	a0,a1
 }
-    800014ce:	8082                	ret
+    800014c6:	8082                	ret
   return newsz;
-    800014d0:	8532                	mv	a0,a2
-    800014d2:	b7f1                	j	8000149e <uvmalloc+0x74>
+    800014c8:	8532                	mv	a0,a2
+    800014ca:	b7f1                	j	80001496 <uvmalloc+0x74>
 
-00000000800014d4 <freewalk>:
+00000000800014cc <freewalk>:
 
 // Recursively free page-table pages.
 // All leaf mappings must already have been removed.
 void
 freewalk(pagetable_t pagetable)
 {
-    800014d4:	7179                	addi	sp,sp,-48
-    800014d6:	f406                	sd	ra,40(sp)
-    800014d8:	f022                	sd	s0,32(sp)
-    800014da:	ec26                	sd	s1,24(sp)
-    800014dc:	e84a                	sd	s2,16(sp)
-    800014de:	e44e                	sd	s3,8(sp)
-    800014e0:	e052                	sd	s4,0(sp)
-    800014e2:	1800                	addi	s0,sp,48
-    800014e4:	8a2a                	mv	s4,a0
+    800014cc:	7179                	addi	sp,sp,-48
+    800014ce:	f406                	sd	ra,40(sp)
+    800014d0:	f022                	sd	s0,32(sp)
+    800014d2:	ec26                	sd	s1,24(sp)
+    800014d4:	e84a                	sd	s2,16(sp)
+    800014d6:	e44e                	sd	s3,8(sp)
+    800014d8:	e052                	sd	s4,0(sp)
+    800014da:	1800                	addi	s0,sp,48
+    800014dc:	8a2a                	mv	s4,a0
   // there are 2^9 = 512 PTEs in a page table.
   for(int i = 0; i < 512; i++){
-    800014e6:	84aa                	mv	s1,a0
-    800014e8:	6905                	lui	s2,0x1
-    800014ea:	992a                	add	s2,s2,a0
+    800014de:	84aa                	mv	s1,a0
+    800014e0:	6905                	lui	s2,0x1
+    800014e2:	992a                	add	s2,s2,a0
     pte_t pte = pagetable[i];
     if((pte & PTE_V) && (pte & (PTE_R|PTE_W|PTE_X)) == 0){
-    800014ec:	4985                	li	s3,1
-    800014ee:	a821                	j	80001506 <freewalk+0x32>
+    800014e4:	4985                	li	s3,1
+    800014e6:	a821                	j	800014fe <freewalk+0x32>
       // this PTE points to a lower-level page table.
       uint64 child = PTE2PA(pte);
-    800014f0:	8129                	srli	a0,a0,0xa
+    800014e8:	8129                	srli	a0,a0,0xa
       freewalk((pagetable_t)child);
-    800014f2:	0532                	slli	a0,a0,0xc
-    800014f4:	00000097          	auipc	ra,0x0
-    800014f8:	fe0080e7          	jalr	-32(ra) # 800014d4 <freewalk>
+    800014ea:	0532                	slli	a0,a0,0xc
+    800014ec:	00000097          	auipc	ra,0x0
+    800014f0:	fe0080e7          	jalr	-32(ra) # 800014cc <freewalk>
       pagetable[i] = 0;
-    800014fc:	0004b023          	sd	zero,0(s1)
+    800014f4:	0004b023          	sd	zero,0(s1)
   for(int i = 0; i < 512; i++){
-    80001500:	04a1                	addi	s1,s1,8
-    80001502:	03248163          	beq	s1,s2,80001524 <freewalk+0x50>
+    800014f8:	04a1                	addi	s1,s1,8
+    800014fa:	03248163          	beq	s1,s2,8000151c <freewalk+0x50>
     pte_t pte = pagetable[i];
-    80001506:	6088                	ld	a0,0(s1)
+    800014fe:	6088                	ld	a0,0(s1)
     if((pte & PTE_V) && (pte & (PTE_R|PTE_W|PTE_X)) == 0){
-    80001508:	00f57793          	andi	a5,a0,15
-    8000150c:	ff3782e3          	beq	a5,s3,800014f0 <freewalk+0x1c>
+    80001500:	00f57793          	andi	a5,a0,15
+    80001504:	ff3782e3          	beq	a5,s3,800014e8 <freewalk+0x1c>
     } else if(pte & PTE_V){
-    80001510:	8905                	andi	a0,a0,1
-    80001512:	d57d                	beqz	a0,80001500 <freewalk+0x2c>
+    80001508:	8905                	andi	a0,a0,1
+    8000150a:	d57d                	beqz	a0,800014f8 <freewalk+0x2c>
       panic("freewalk: leaf");
-    80001514:	00008517          	auipc	a0,0x8
-    80001518:	c6450513          	addi	a0,a0,-924 # 80009178 <digits+0x138>
-    8000151c:	fffff097          	auipc	ra,0xfffff
-    80001520:	022080e7          	jalr	34(ra) # 8000053e <panic>
+    8000150c:	00007517          	auipc	a0,0x7
+    80001510:	c6c50513          	addi	a0,a0,-916 # 80008178 <digits+0x138>
+    80001514:	fffff097          	auipc	ra,0xfffff
+    80001518:	02a080e7          	jalr	42(ra) # 8000053e <panic>
     }
   }
   kfree((void*)pagetable);
-    80001524:	8552                	mv	a0,s4
-    80001526:	fffff097          	auipc	ra,0xfffff
-    8000152a:	4d2080e7          	jalr	1234(ra) # 800009f8 <kfree>
+    8000151c:	8552                	mv	a0,s4
+    8000151e:	fffff097          	auipc	ra,0xfffff
+    80001522:	4da080e7          	jalr	1242(ra) # 800009f8 <kfree>
 }
-    8000152e:	70a2                	ld	ra,40(sp)
-    80001530:	7402                	ld	s0,32(sp)
-    80001532:	64e2                	ld	s1,24(sp)
-    80001534:	6942                	ld	s2,16(sp)
-    80001536:	69a2                	ld	s3,8(sp)
-    80001538:	6a02                	ld	s4,0(sp)
-    8000153a:	6145                	addi	sp,sp,48
-    8000153c:	8082                	ret
+    80001526:	70a2                	ld	ra,40(sp)
+    80001528:	7402                	ld	s0,32(sp)
+    8000152a:	64e2                	ld	s1,24(sp)
+    8000152c:	6942                	ld	s2,16(sp)
+    8000152e:	69a2                	ld	s3,8(sp)
+    80001530:	6a02                	ld	s4,0(sp)
+    80001532:	6145                	addi	sp,sp,48
+    80001534:	8082                	ret
 
-000000008000153e <uvmfree>:
+0000000080001536 <uvmfree>:
 
 // Free user memory pages,
 // then free page-table pages.
 void
 uvmfree(pagetable_t pagetable, uint64 sz)
 {
-    8000153e:	1101                	addi	sp,sp,-32
-    80001540:	ec06                	sd	ra,24(sp)
-    80001542:	e822                	sd	s0,16(sp)
-    80001544:	e426                	sd	s1,8(sp)
-    80001546:	1000                	addi	s0,sp,32
-    80001548:	84aa                	mv	s1,a0
+    80001536:	1101                	addi	sp,sp,-32
+    80001538:	ec06                	sd	ra,24(sp)
+    8000153a:	e822                	sd	s0,16(sp)
+    8000153c:	e426                	sd	s1,8(sp)
+    8000153e:	1000                	addi	s0,sp,32
+    80001540:	84aa                	mv	s1,a0
   if(sz > 0)
-    8000154a:	e999                	bnez	a1,80001560 <uvmfree+0x22>
+    80001542:	e999                	bnez	a1,80001558 <uvmfree+0x22>
     uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);
   freewalk(pagetable);
-    8000154c:	8526                	mv	a0,s1
-    8000154e:	00000097          	auipc	ra,0x0
-    80001552:	f86080e7          	jalr	-122(ra) # 800014d4 <freewalk>
-}
-    80001556:	60e2                	ld	ra,24(sp)
-    80001558:	6442                	ld	s0,16(sp)
-    8000155a:	64a2                	ld	s1,8(sp)
-    8000155c:	6105                	addi	sp,sp,32
-    8000155e:	8082                	ret
+    80001544:	8526                	mv	a0,s1
+    80001546:	00000097          	auipc	ra,0x0
+    8000154a:	f86080e7          	jalr	-122(ra) # 800014cc <freewalk>
+}
+    8000154e:	60e2                	ld	ra,24(sp)
+    80001550:	6442                	ld	s0,16(sp)
+    80001552:	64a2                	ld	s1,8(sp)
+    80001554:	6105                	addi	sp,sp,32
+    80001556:	8082                	ret
     uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);
-    80001560:	6605                	lui	a2,0x1
-    80001562:	167d                	addi	a2,a2,-1
-    80001564:	962e                	add	a2,a2,a1
-    80001566:	4685                	li	a3,1
-    80001568:	8231                	srli	a2,a2,0xc
-    8000156a:	4581                	li	a1,0
-    8000156c:	00000097          	auipc	ra,0x0
-    80001570:	d12080e7          	jalr	-750(ra) # 8000127e <uvmunmap>
-    80001574:	bfe1                	j	8000154c <uvmfree+0xe>
-
-0000000080001576 <uvmcopy>:
+    80001558:	6605                	lui	a2,0x1
+    8000155a:	167d                	addi	a2,a2,-1
+    8000155c:	962e                	add	a2,a2,a1
+    8000155e:	4685                	li	a3,1
+    80001560:	8231                	srli	a2,a2,0xc
+    80001562:	4581                	li	a1,0
+    80001564:	00000097          	auipc	ra,0x0
+    80001568:	d12080e7          	jalr	-750(ra) # 80001276 <uvmunmap>
+    8000156c:	bfe1                	j	80001544 <uvmfree+0xe>
+
+000000008000156e <uvmcopy>:
   pte_t *pte;
   uint64 pa, i;
   uint flags;
   char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
-    80001576:	c679                	beqz	a2,80001644 <uvmcopy+0xce>
-{
-    80001578:	715d                	addi	sp,sp,-80
-    8000157a:	e486                	sd	ra,72(sp)
-    8000157c:	e0a2                	sd	s0,64(sp)
-    8000157e:	fc26                	sd	s1,56(sp)
-    80001580:	f84a                	sd	s2,48(sp)
-    80001582:	f44e                	sd	s3,40(sp)
-    80001584:	f052                	sd	s4,32(sp)
-    80001586:	ec56                	sd	s5,24(sp)
-    80001588:	e85a                	sd	s6,16(sp)
-    8000158a:	e45e                	sd	s7,8(sp)
-    8000158c:	0880                	addi	s0,sp,80
-    8000158e:	8b2a                	mv	s6,a0
-    80001590:	8aae                	mv	s5,a1
-    80001592:	8a32                	mv	s4,a2
+    8000156e:	c679                	beqz	a2,8000163c <uvmcopy+0xce>
+{
+    80001570:	715d                	addi	sp,sp,-80
+    80001572:	e486                	sd	ra,72(sp)
+    80001574:	e0a2                	sd	s0,64(sp)
+    80001576:	fc26                	sd	s1,56(sp)
+    80001578:	f84a                	sd	s2,48(sp)
+    8000157a:	f44e                	sd	s3,40(sp)
+    8000157c:	f052                	sd	s4,32(sp)
+    8000157e:	ec56                	sd	s5,24(sp)
+    80001580:	e85a                	sd	s6,16(sp)
+    80001582:	e45e                	sd	s7,8(sp)
+    80001584:	0880                	addi	s0,sp,80
+    80001586:	8b2a                	mv	s6,a0
+    80001588:	8aae                	mv	s5,a1
+    8000158a:	8a32                	mv	s4,a2
   for(i = 0; i < sz; i += PGSIZE){
-    80001594:	4981                	li	s3,0
+    8000158c:	4981                	li	s3,0
     if((pte = walk(old, i, 0)) == 0)
-    80001596:	4601                	li	a2,0
-    80001598:	85ce                	mv	a1,s3
-    8000159a:	855a                	mv	a0,s6
-    8000159c:	00000097          	auipc	ra,0x0
-    800015a0:	a34080e7          	jalr	-1484(ra) # 80000fd0 <walk>
-    800015a4:	c531                	beqz	a0,800015f0 <uvmcopy+0x7a>
+    8000158e:	4601                	li	a2,0
+    80001590:	85ce                	mv	a1,s3
+    80001592:	855a                	mv	a0,s6
+    80001594:	00000097          	auipc	ra,0x0
+    80001598:	a34080e7          	jalr	-1484(ra) # 80000fc8 <walk>
+    8000159c:	c531                	beqz	a0,800015e8 <uvmcopy+0x7a>
       panic("uvmcopy: pte should exist");
     if((*pte & PTE_V) == 0)
-    800015a6:	6118                	ld	a4,0(a0)
-    800015a8:	00177793          	andi	a5,a4,1
-    800015ac:	cbb1                	beqz	a5,80001600 <uvmcopy+0x8a>
+    8000159e:	6118                	ld	a4,0(a0)
+    800015a0:	00177793          	andi	a5,a4,1
+    800015a4:	cbb1                	beqz	a5,800015f8 <uvmcopy+0x8a>
       panic("uvmcopy: page not present");
     pa = PTE2PA(*pte);
-    800015ae:	00a75593          	srli	a1,a4,0xa
-    800015b2:	00c59b93          	slli	s7,a1,0xc
+    800015a6:	00a75593          	srli	a1,a4,0xa
+    800015aa:	00c59b93          	slli	s7,a1,0xc
     flags = PTE_FLAGS(*pte);
-    800015b6:	3ff77493          	andi	s1,a4,1023
+    800015ae:	3ff77493          	andi	s1,a4,1023
     if((mem = kalloc()) == 0)
-    800015ba:	fffff097          	auipc	ra,0xfffff
-    800015be:	53a080e7          	jalr	1338(ra) # 80000af4 <kalloc>
-    800015c2:	892a                	mv	s2,a0
-    800015c4:	c939                	beqz	a0,8000161a <uvmcopy+0xa4>
+    800015b2:	fffff097          	auipc	ra,0xfffff
+    800015b6:	542080e7          	jalr	1346(ra) # 80000af4 <kalloc>
+    800015ba:	892a                	mv	s2,a0
+    800015bc:	c939                	beqz	a0,80001612 <uvmcopy+0xa4>
       goto err;
     memmove(mem, (char*)pa, PGSIZE);
-    800015c6:	6605                	lui	a2,0x1
-    800015c8:	85de                	mv	a1,s7
-    800015ca:	fffff097          	auipc	ra,0xfffff
-    800015ce:	776080e7          	jalr	1910(ra) # 80000d40 <memmove>
+    800015be:	6605                	lui	a2,0x1
+    800015c0:	85de                	mv	a1,s7
+    800015c2:	fffff097          	auipc	ra,0xfffff
+    800015c6:	77e080e7          	jalr	1918(ra) # 80000d40 <memmove>
     if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-    800015d2:	8726                	mv	a4,s1
-    800015d4:	86ca                	mv	a3,s2
-    800015d6:	6605                	lui	a2,0x1
-    800015d8:	85ce                	mv	a1,s3
-    800015da:	8556                	mv	a0,s5
-    800015dc:	00000097          	auipc	ra,0x0
-    800015e0:	adc080e7          	jalr	-1316(ra) # 800010b8 <mappages>
-    800015e4:	e515                	bnez	a0,80001610 <uvmcopy+0x9a>
+    800015ca:	8726                	mv	a4,s1
+    800015cc:	86ca                	mv	a3,s2
+    800015ce:	6605                	lui	a2,0x1
+    800015d0:	85ce                	mv	a1,s3
+    800015d2:	8556                	mv	a0,s5
+    800015d4:	00000097          	auipc	ra,0x0
+    800015d8:	adc080e7          	jalr	-1316(ra) # 800010b0 <mappages>
+    800015dc:	e515                	bnez	a0,80001608 <uvmcopy+0x9a>
   for(i = 0; i < sz; i += PGSIZE){
-    800015e6:	6785                	lui	a5,0x1
-    800015e8:	99be                	add	s3,s3,a5
-    800015ea:	fb49e6e3          	bltu	s3,s4,80001596 <uvmcopy+0x20>
-    800015ee:	a081                	j	8000162e <uvmcopy+0xb8>
+    800015de:	6785                	lui	a5,0x1
+    800015e0:	99be                	add	s3,s3,a5
+    800015e2:	fb49e6e3          	bltu	s3,s4,8000158e <uvmcopy+0x20>
+    800015e6:	a081                	j	80001626 <uvmcopy+0xb8>
       panic("uvmcopy: pte should exist");
-    800015f0:	00008517          	auipc	a0,0x8
-    800015f4:	b9850513          	addi	a0,a0,-1128 # 80009188 <digits+0x148>
-    800015f8:	fffff097          	auipc	ra,0xfffff
-    800015fc:	f46080e7          	jalr	-186(ra) # 8000053e <panic>
+    800015e8:	00007517          	auipc	a0,0x7
+    800015ec:	ba050513          	addi	a0,a0,-1120 # 80008188 <digits+0x148>
+    800015f0:	fffff097          	auipc	ra,0xfffff
+    800015f4:	f4e080e7          	jalr	-178(ra) # 8000053e <panic>
       panic("uvmcopy: page not present");
-    80001600:	00008517          	auipc	a0,0x8
-    80001604:	ba850513          	addi	a0,a0,-1112 # 800091a8 <digits+0x168>
-    80001608:	fffff097          	auipc	ra,0xfffff
-    8000160c:	f36080e7          	jalr	-202(ra) # 8000053e <panic>
+    800015f8:	00007517          	auipc	a0,0x7
+    800015fc:	bb050513          	addi	a0,a0,-1104 # 800081a8 <digits+0x168>
+    80001600:	fffff097          	auipc	ra,0xfffff
+    80001604:	f3e080e7          	jalr	-194(ra) # 8000053e <panic>
       kfree(mem);
-    80001610:	854a                	mv	a0,s2
-    80001612:	fffff097          	auipc	ra,0xfffff
-    80001616:	3e6080e7          	jalr	998(ra) # 800009f8 <kfree>
+    80001608:	854a                	mv	a0,s2
+    8000160a:	fffff097          	auipc	ra,0xfffff
+    8000160e:	3ee080e7          	jalr	1006(ra) # 800009f8 <kfree>
     }
   }
   return 0;
 
  err:
   uvmunmap(new, 0, i / PGSIZE, 1);
-    8000161a:	4685                	li	a3,1
-    8000161c:	00c9d613          	srli	a2,s3,0xc
-    80001620:	4581                	li	a1,0
-    80001622:	8556                	mv	a0,s5
-    80001624:	00000097          	auipc	ra,0x0
-    80001628:	c5a080e7          	jalr	-934(ra) # 8000127e <uvmunmap>
+    80001612:	4685                	li	a3,1
+    80001614:	00c9d613          	srli	a2,s3,0xc
+    80001618:	4581                	li	a1,0
+    8000161a:	8556                	mv	a0,s5
+    8000161c:	00000097          	auipc	ra,0x0
+    80001620:	c5a080e7          	jalr	-934(ra) # 80001276 <uvmunmap>
   return -1;
-    8000162c:	557d                	li	a0,-1
-}
-    8000162e:	60a6                	ld	ra,72(sp)
-    80001630:	6406                	ld	s0,64(sp)
-    80001632:	74e2                	ld	s1,56(sp)
-    80001634:	7942                	ld	s2,48(sp)
-    80001636:	79a2                	ld	s3,40(sp)
-    80001638:	7a02                	ld	s4,32(sp)
-    8000163a:	6ae2                	ld	s5,24(sp)
-    8000163c:	6b42                	ld	s6,16(sp)
-    8000163e:	6ba2                	ld	s7,8(sp)
-    80001640:	6161                	addi	sp,sp,80
-    80001642:	8082                	ret
+    80001624:	557d                	li	a0,-1
+}
+    80001626:	60a6                	ld	ra,72(sp)
+    80001628:	6406                	ld	s0,64(sp)
+    8000162a:	74e2                	ld	s1,56(sp)
+    8000162c:	7942                	ld	s2,48(sp)
+    8000162e:	79a2                	ld	s3,40(sp)
+    80001630:	7a02                	ld	s4,32(sp)
+    80001632:	6ae2                	ld	s5,24(sp)
+    80001634:	6b42                	ld	s6,16(sp)
+    80001636:	6ba2                	ld	s7,8(sp)
+    80001638:	6161                	addi	sp,sp,80
+    8000163a:	8082                	ret
   return 0;
-    80001644:	4501                	li	a0,0
+    8000163c:	4501                	li	a0,0
 }
-    80001646:	8082                	ret
+    8000163e:	8082                	ret
 
-0000000080001648 <uvmclear>:
+0000000080001640 <uvmclear>:
 
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
 uvmclear(pagetable_t pagetable, uint64 va)
 {
-    80001648:	1141                	addi	sp,sp,-16
-    8000164a:	e406                	sd	ra,8(sp)
-    8000164c:	e022                	sd	s0,0(sp)
-    8000164e:	0800                	addi	s0,sp,16
+    80001640:	1141                	addi	sp,sp,-16
+    80001642:	e406                	sd	ra,8(sp)
+    80001644:	e022                	sd	s0,0(sp)
+    80001646:	0800                	addi	s0,sp,16
   pte_t *pte;
   
   pte = walk(pagetable, va, 0);
-    80001650:	4601                	li	a2,0
-    80001652:	00000097          	auipc	ra,0x0
-    80001656:	97e080e7          	jalr	-1666(ra) # 80000fd0 <walk>
+    80001648:	4601                	li	a2,0
+    8000164a:	00000097          	auipc	ra,0x0
+    8000164e:	97e080e7          	jalr	-1666(ra) # 80000fc8 <walk>
   if(pte == 0)
-    8000165a:	c901                	beqz	a0,8000166a <uvmclear+0x22>
+    80001652:	c901                	beqz	a0,80001662 <uvmclear+0x22>
     panic("uvmclear");
   *pte &= ~PTE_U;
-    8000165c:	611c                	ld	a5,0(a0)
-    8000165e:	9bbd                	andi	a5,a5,-17
-    80001660:	e11c                	sd	a5,0(a0)
-}
-    80001662:	60a2                	ld	ra,8(sp)
-    80001664:	6402                	ld	s0,0(sp)
-    80001666:	0141                	addi	sp,sp,16
-    80001668:	8082                	ret
+    80001654:	611c                	ld	a5,0(a0)
+    80001656:	9bbd                	andi	a5,a5,-17
+    80001658:	e11c                	sd	a5,0(a0)
+}
+    8000165a:	60a2                	ld	ra,8(sp)
+    8000165c:	6402                	ld	s0,0(sp)
+    8000165e:	0141                	addi	sp,sp,16
+    80001660:	8082                	ret
     panic("uvmclear");
-    8000166a:	00008517          	auipc	a0,0x8
-    8000166e:	b5e50513          	addi	a0,a0,-1186 # 800091c8 <digits+0x188>
-    80001672:	fffff097          	auipc	ra,0xfffff
-    80001676:	ecc080e7          	jalr	-308(ra) # 8000053e <panic>
+    80001662:	00007517          	auipc	a0,0x7
+    80001666:	b6650513          	addi	a0,a0,-1178 # 800081c8 <digits+0x188>
+    8000166a:	fffff097          	auipc	ra,0xfffff
+    8000166e:	ed4080e7          	jalr	-300(ra) # 8000053e <panic>
 
-000000008000167a <copyout>:
+0000000080001672 <copyout>:
 int
 copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 {
   uint64 n, va0, pa0;
 
   while(len > 0){
-    8000167a:	c6bd                	beqz	a3,800016e8 <copyout+0x6e>
-{
-    8000167c:	715d                	addi	sp,sp,-80
-    8000167e:	e486                	sd	ra,72(sp)
-    80001680:	e0a2                	sd	s0,64(sp)
-    80001682:	fc26                	sd	s1,56(sp)
-    80001684:	f84a                	sd	s2,48(sp)
-    80001686:	f44e                	sd	s3,40(sp)
-    80001688:	f052                	sd	s4,32(sp)
-    8000168a:	ec56                	sd	s5,24(sp)
-    8000168c:	e85a                	sd	s6,16(sp)
-    8000168e:	e45e                	sd	s7,8(sp)
-    80001690:	e062                	sd	s8,0(sp)
-    80001692:	0880                	addi	s0,sp,80
-    80001694:	8b2a                	mv	s6,a0
-    80001696:	8c2e                	mv	s8,a1
-    80001698:	8a32                	mv	s4,a2
-    8000169a:	89b6                	mv	s3,a3
+    80001672:	c6bd                	beqz	a3,800016e0 <copyout+0x6e>
+{
+    80001674:	715d                	addi	sp,sp,-80
+    80001676:	e486                	sd	ra,72(sp)
+    80001678:	e0a2                	sd	s0,64(sp)
+    8000167a:	fc26                	sd	s1,56(sp)
+    8000167c:	f84a                	sd	s2,48(sp)
+    8000167e:	f44e                	sd	s3,40(sp)
+    80001680:	f052                	sd	s4,32(sp)
+    80001682:	ec56                	sd	s5,24(sp)
+    80001684:	e85a                	sd	s6,16(sp)
+    80001686:	e45e                	sd	s7,8(sp)
+    80001688:	e062                	sd	s8,0(sp)
+    8000168a:	0880                	addi	s0,sp,80
+    8000168c:	8b2a                	mv	s6,a0
+    8000168e:	8c2e                	mv	s8,a1
+    80001690:	8a32                	mv	s4,a2
+    80001692:	89b6                	mv	s3,a3
     va0 = PGROUNDDOWN(dstva);
-    8000169c:	7bfd                	lui	s7,0xfffff
+    80001694:	7bfd                	lui	s7,0xfffff
     pa0 = walkaddr(pagetable, va0);
     if(pa0 == 0)
       return -1;
     n = PGSIZE - (dstva - va0);
-    8000169e:	6a85                	lui	s5,0x1
-    800016a0:	a015                	j	800016c4 <copyout+0x4a>
+    80001696:	6a85                	lui	s5,0x1
+    80001698:	a015                	j	800016bc <copyout+0x4a>
     if(n > len)
       n = len;
     memmove((void *)(pa0 + (dstva - va0)), src, n);
-    800016a2:	9562                	add	a0,a0,s8
-    800016a4:	0004861b          	sext.w	a2,s1
-    800016a8:	85d2                	mv	a1,s4
-    800016aa:	41250533          	sub	a0,a0,s2
-    800016ae:	fffff097          	auipc	ra,0xfffff
-    800016b2:	692080e7          	jalr	1682(ra) # 80000d40 <memmove>
+    8000169a:	9562                	add	a0,a0,s8
+    8000169c:	0004861b          	sext.w	a2,s1
+    800016a0:	85d2                	mv	a1,s4
+    800016a2:	41250533          	sub	a0,a0,s2
+    800016a6:	fffff097          	auipc	ra,0xfffff
+    800016aa:	69a080e7          	jalr	1690(ra) # 80000d40 <memmove>
 
     len -= n;
-    800016b6:	409989b3          	sub	s3,s3,s1
+    800016ae:	409989b3          	sub	s3,s3,s1
     src += n;
-    800016ba:	9a26                	add	s4,s4,s1
+    800016b2:	9a26                	add	s4,s4,s1
     dstva = va0 + PGSIZE;
-    800016bc:	01590c33          	add	s8,s2,s5
+    800016b4:	01590c33          	add	s8,s2,s5
   while(len > 0){
-    800016c0:	02098263          	beqz	s3,800016e4 <copyout+0x6a>
+    800016b8:	02098263          	beqz	s3,800016dc <copyout+0x6a>
     va0 = PGROUNDDOWN(dstva);
-    800016c4:	017c7933          	and	s2,s8,s7
+    800016bc:	017c7933          	and	s2,s8,s7
     pa0 = walkaddr(pagetable, va0);
-    800016c8:	85ca                	mv	a1,s2
-    800016ca:	855a                	mv	a0,s6
-    800016cc:	00000097          	auipc	ra,0x0
-    800016d0:	9aa080e7          	jalr	-1622(ra) # 80001076 <walkaddr>
+    800016c0:	85ca                	mv	a1,s2
+    800016c2:	855a                	mv	a0,s6
+    800016c4:	00000097          	auipc	ra,0x0
+    800016c8:	9aa080e7          	jalr	-1622(ra) # 8000106e <walkaddr>
     if(pa0 == 0)
-    800016d4:	cd01                	beqz	a0,800016ec <copyout+0x72>
+    800016cc:	cd01                	beqz	a0,800016e4 <copyout+0x72>
     n = PGSIZE - (dstva - va0);
-    800016d6:	418904b3          	sub	s1,s2,s8
-    800016da:	94d6                	add	s1,s1,s5
+    800016ce:	418904b3          	sub	s1,s2,s8
+    800016d2:	94d6                	add	s1,s1,s5
     if(n > len)
-    800016dc:	fc99f3e3          	bgeu	s3,s1,800016a2 <copyout+0x28>
-    800016e0:	84ce                	mv	s1,s3
-    800016e2:	b7c1                	j	800016a2 <copyout+0x28>
+    800016d4:	fc99f3e3          	bgeu	s3,s1,8000169a <copyout+0x28>
+    800016d8:	84ce                	mv	s1,s3
+    800016da:	b7c1                	j	8000169a <copyout+0x28>
   }
   return 0;
-    800016e4:	4501                	li	a0,0
-    800016e6:	a021                	j	800016ee <copyout+0x74>
-    800016e8:	4501                	li	a0,0
+    800016dc:	4501                	li	a0,0
+    800016de:	a021                	j	800016e6 <copyout+0x74>
+    800016e0:	4501                	li	a0,0
 }
-    800016ea:	8082                	ret
+    800016e2:	8082                	ret
       return -1;
-    800016ec:	557d                	li	a0,-1
-}
-    800016ee:	60a6                	ld	ra,72(sp)
-    800016f0:	6406                	ld	s0,64(sp)
-    800016f2:	74e2                	ld	s1,56(sp)
-    800016f4:	7942                	ld	s2,48(sp)
-    800016f6:	79a2                	ld	s3,40(sp)
-    800016f8:	7a02                	ld	s4,32(sp)
-    800016fa:	6ae2                	ld	s5,24(sp)
-    800016fc:	6b42                	ld	s6,16(sp)
-    800016fe:	6ba2                	ld	s7,8(sp)
-    80001700:	6c02                	ld	s8,0(sp)
-    80001702:	6161                	addi	sp,sp,80
-    80001704:	8082                	ret
-
-0000000080001706 <copyin>:
+    800016e4:	557d                	li	a0,-1
+}
+    800016e6:	60a6                	ld	ra,72(sp)
+    800016e8:	6406                	ld	s0,64(sp)
+    800016ea:	74e2                	ld	s1,56(sp)
+    800016ec:	7942                	ld	s2,48(sp)
+    800016ee:	79a2                	ld	s3,40(sp)
+    800016f0:	7a02                	ld	s4,32(sp)
+    800016f2:	6ae2                	ld	s5,24(sp)
+    800016f4:	6b42                	ld	s6,16(sp)
+    800016f6:	6ba2                	ld	s7,8(sp)
+    800016f8:	6c02                	ld	s8,0(sp)
+    800016fa:	6161                	addi	sp,sp,80
+    800016fc:	8082                	ret
+
+00000000800016fe <copyin>:
 int
 copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
 {
   uint64 n, va0, pa0;
 
   while(len > 0){
-    80001706:	c6bd                	beqz	a3,80001774 <copyin+0x6e>
-{
-    80001708:	715d                	addi	sp,sp,-80
-    8000170a:	e486                	sd	ra,72(sp)
-    8000170c:	e0a2                	sd	s0,64(sp)
-    8000170e:	fc26                	sd	s1,56(sp)
-    80001710:	f84a                	sd	s2,48(sp)
-    80001712:	f44e                	sd	s3,40(sp)
-    80001714:	f052                	sd	s4,32(sp)
-    80001716:	ec56                	sd	s5,24(sp)
-    80001718:	e85a                	sd	s6,16(sp)
-    8000171a:	e45e                	sd	s7,8(sp)
-    8000171c:	e062                	sd	s8,0(sp)
-    8000171e:	0880                	addi	s0,sp,80
-    80001720:	8b2a                	mv	s6,a0
-    80001722:	8a2e                	mv	s4,a1
-    80001724:	8c32                	mv	s8,a2
-    80001726:	89b6                	mv	s3,a3
+    800016fe:	c6bd                	beqz	a3,8000176c <copyin+0x6e>
+{
+    80001700:	715d                	addi	sp,sp,-80
+    80001702:	e486                	sd	ra,72(sp)
+    80001704:	e0a2                	sd	s0,64(sp)
+    80001706:	fc26                	sd	s1,56(sp)
+    80001708:	f84a                	sd	s2,48(sp)
+    8000170a:	f44e                	sd	s3,40(sp)
+    8000170c:	f052                	sd	s4,32(sp)
+    8000170e:	ec56                	sd	s5,24(sp)
+    80001710:	e85a                	sd	s6,16(sp)
+    80001712:	e45e                	sd	s7,8(sp)
+    80001714:	e062                	sd	s8,0(sp)
+    80001716:	0880                	addi	s0,sp,80
+    80001718:	8b2a                	mv	s6,a0
+    8000171a:	8a2e                	mv	s4,a1
+    8000171c:	8c32                	mv	s8,a2
+    8000171e:	89b6                	mv	s3,a3
     va0 = PGROUNDDOWN(srcva);
-    80001728:	7bfd                	lui	s7,0xfffff
+    80001720:	7bfd                	lui	s7,0xfffff
     pa0 = walkaddr(pagetable, va0);
     if(pa0 == 0)
       return -1;
     n = PGSIZE - (srcva - va0);
-    8000172a:	6a85                	lui	s5,0x1
-    8000172c:	a015                	j	80001750 <copyin+0x4a>
+    80001722:	6a85                	lui	s5,0x1
+    80001724:	a015                	j	80001748 <copyin+0x4a>
     if(n > len)
       n = len;
     memmove(dst, (void *)(pa0 + (srcva - va0)), n);
-    8000172e:	9562                	add	a0,a0,s8
-    80001730:	0004861b          	sext.w	a2,s1
-    80001734:	412505b3          	sub	a1,a0,s2
-    80001738:	8552                	mv	a0,s4
-    8000173a:	fffff097          	auipc	ra,0xfffff
-    8000173e:	606080e7          	jalr	1542(ra) # 80000d40 <memmove>
+    80001726:	9562                	add	a0,a0,s8
+    80001728:	0004861b          	sext.w	a2,s1
+    8000172c:	412505b3          	sub	a1,a0,s2
+    80001730:	8552                	mv	a0,s4
+    80001732:	fffff097          	auipc	ra,0xfffff
+    80001736:	60e080e7          	jalr	1550(ra) # 80000d40 <memmove>
 
     len -= n;
-    80001742:	409989b3          	sub	s3,s3,s1
+    8000173a:	409989b3          	sub	s3,s3,s1
     dst += n;
-    80001746:	9a26                	add	s4,s4,s1
+    8000173e:	9a26                	add	s4,s4,s1
     srcva = va0 + PGSIZE;
-    80001748:	01590c33          	add	s8,s2,s5
+    80001740:	01590c33          	add	s8,s2,s5
   while(len > 0){
-    8000174c:	02098263          	beqz	s3,80001770 <copyin+0x6a>
+    80001744:	02098263          	beqz	s3,80001768 <copyin+0x6a>
     va0 = PGROUNDDOWN(srcva);
-    80001750:	017c7933          	and	s2,s8,s7
+    80001748:	017c7933          	and	s2,s8,s7
     pa0 = walkaddr(pagetable, va0);
-    80001754:	85ca                	mv	a1,s2
-    80001756:	855a                	mv	a0,s6
-    80001758:	00000097          	auipc	ra,0x0
-    8000175c:	91e080e7          	jalr	-1762(ra) # 80001076 <walkaddr>
+    8000174c:	85ca                	mv	a1,s2
+    8000174e:	855a                	mv	a0,s6
+    80001750:	00000097          	auipc	ra,0x0
+    80001754:	91e080e7          	jalr	-1762(ra) # 8000106e <walkaddr>
     if(pa0 == 0)
-    80001760:	cd01                	beqz	a0,80001778 <copyin+0x72>
+    80001758:	cd01                	beqz	a0,80001770 <copyin+0x72>
     n = PGSIZE - (srcva - va0);
-    80001762:	418904b3          	sub	s1,s2,s8
-    80001766:	94d6                	add	s1,s1,s5
+    8000175a:	418904b3          	sub	s1,s2,s8
+    8000175e:	94d6                	add	s1,s1,s5
     if(n > len)
-    80001768:	fc99f3e3          	bgeu	s3,s1,8000172e <copyin+0x28>
-    8000176c:	84ce                	mv	s1,s3
-    8000176e:	b7c1                	j	8000172e <copyin+0x28>
+    80001760:	fc99f3e3          	bgeu	s3,s1,80001726 <copyin+0x28>
+    80001764:	84ce                	mv	s1,s3
+    80001766:	b7c1                	j	80001726 <copyin+0x28>
   }
   return 0;
-    80001770:	4501                	li	a0,0
-    80001772:	a021                	j	8000177a <copyin+0x74>
-    80001774:	4501                	li	a0,0
+    80001768:	4501                	li	a0,0
+    8000176a:	a021                	j	80001772 <copyin+0x74>
+    8000176c:	4501                	li	a0,0
 }
-    80001776:	8082                	ret
+    8000176e:	8082                	ret
       return -1;
-    80001778:	557d                	li	a0,-1
-}
-    8000177a:	60a6                	ld	ra,72(sp)
-    8000177c:	6406                	ld	s0,64(sp)
-    8000177e:	74e2                	ld	s1,56(sp)
-    80001780:	7942                	ld	s2,48(sp)
-    80001782:	79a2                	ld	s3,40(sp)
-    80001784:	7a02                	ld	s4,32(sp)
-    80001786:	6ae2                	ld	s5,24(sp)
-    80001788:	6b42                	ld	s6,16(sp)
-    8000178a:	6ba2                	ld	s7,8(sp)
-    8000178c:	6c02                	ld	s8,0(sp)
-    8000178e:	6161                	addi	sp,sp,80
-    80001790:	8082                	ret
-
-0000000080001792 <copyinstr>:
+    80001770:	557d                	li	a0,-1
+}
+    80001772:	60a6                	ld	ra,72(sp)
+    80001774:	6406                	ld	s0,64(sp)
+    80001776:	74e2                	ld	s1,56(sp)
+    80001778:	7942                	ld	s2,48(sp)
+    8000177a:	79a2                	ld	s3,40(sp)
+    8000177c:	7a02                	ld	s4,32(sp)
+    8000177e:	6ae2                	ld	s5,24(sp)
+    80001780:	6b42                	ld	s6,16(sp)
+    80001782:	6ba2                	ld	s7,8(sp)
+    80001784:	6c02                	ld	s8,0(sp)
+    80001786:	6161                	addi	sp,sp,80
+    80001788:	8082                	ret
+
+000000008000178a <copyinstr>:
 copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
 {
   uint64 n, va0, pa0;
   int got_null = 0;
 
   while(got_null == 0 && max > 0){
-    80001792:	c6c5                	beqz	a3,8000183a <copyinstr+0xa8>
-{
-    80001794:	715d                	addi	sp,sp,-80
-    80001796:	e486                	sd	ra,72(sp)
-    80001798:	e0a2                	sd	s0,64(sp)
-    8000179a:	fc26                	sd	s1,56(sp)
-    8000179c:	f84a                	sd	s2,48(sp)
-    8000179e:	f44e                	sd	s3,40(sp)
-    800017a0:	f052                	sd	s4,32(sp)
-    800017a2:	ec56                	sd	s5,24(sp)
-    800017a4:	e85a                	sd	s6,16(sp)
-    800017a6:	e45e                	sd	s7,8(sp)
-    800017a8:	0880                	addi	s0,sp,80
-    800017aa:	8a2a                	mv	s4,a0
-    800017ac:	8b2e                	mv	s6,a1
-    800017ae:	8bb2                	mv	s7,a2
-    800017b0:	84b6                	mv	s1,a3
+    8000178a:	c6c5                	beqz	a3,80001832 <copyinstr+0xa8>
+{
+    8000178c:	715d                	addi	sp,sp,-80
+    8000178e:	e486                	sd	ra,72(sp)
+    80001790:	e0a2                	sd	s0,64(sp)
+    80001792:	fc26                	sd	s1,56(sp)
+    80001794:	f84a                	sd	s2,48(sp)
+    80001796:	f44e                	sd	s3,40(sp)
+    80001798:	f052                	sd	s4,32(sp)
+    8000179a:	ec56                	sd	s5,24(sp)
+    8000179c:	e85a                	sd	s6,16(sp)
+    8000179e:	e45e                	sd	s7,8(sp)
+    800017a0:	0880                	addi	s0,sp,80
+    800017a2:	8a2a                	mv	s4,a0
+    800017a4:	8b2e                	mv	s6,a1
+    800017a6:	8bb2                	mv	s7,a2
+    800017a8:	84b6                	mv	s1,a3
     va0 = PGROUNDDOWN(srcva);
-    800017b2:	7afd                	lui	s5,0xfffff
+    800017aa:	7afd                	lui	s5,0xfffff
     pa0 = walkaddr(pagetable, va0);
     if(pa0 == 0)
       return -1;
     n = PGSIZE - (srcva - va0);
-    800017b4:	6985                	lui	s3,0x1
-    800017b6:	a035                	j	800017e2 <copyinstr+0x50>
+    800017ac:	6985                	lui	s3,0x1
+    800017ae:	a035                	j	800017da <copyinstr+0x50>
       n = max;
 
     char *p = (char *) (pa0 + (srcva - va0));
     while(n > 0){
       if(*p == '\0'){
         *dst = '\0';
-    800017b8:	00078023          	sb	zero,0(a5) # 1000 <_entry-0x7ffff000>
-    800017bc:	4785                	li	a5,1
+    800017b0:	00078023          	sb	zero,0(a5) # 1000 <_entry-0x7ffff000>
+    800017b4:	4785                	li	a5,1
       dst++;
     }
 
     srcva = va0 + PGSIZE;
   }
   if(got_null){
-    800017be:	0017b793          	seqz	a5,a5
-    800017c2:	40f00533          	neg	a0,a5
+    800017b6:	0017b793          	seqz	a5,a5
+    800017ba:	40f00533          	neg	a0,a5
     return 0;
   } else {
     return -1;
   }
 }
-    800017c6:	60a6                	ld	ra,72(sp)
-    800017c8:	6406                	ld	s0,64(sp)
-    800017ca:	74e2                	ld	s1,56(sp)
-    800017cc:	7942                	ld	s2,48(sp)
-    800017ce:	79a2                	ld	s3,40(sp)
-    800017d0:	7a02                	ld	s4,32(sp)
-    800017d2:	6ae2                	ld	s5,24(sp)
-    800017d4:	6b42                	ld	s6,16(sp)
-    800017d6:	6ba2                	ld	s7,8(sp)
-    800017d8:	6161                	addi	sp,sp,80
-    800017da:	8082                	ret
+    800017be:	60a6                	ld	ra,72(sp)
+    800017c0:	6406                	ld	s0,64(sp)
+    800017c2:	74e2                	ld	s1,56(sp)
+    800017c4:	7942                	ld	s2,48(sp)
+    800017c6:	79a2                	ld	s3,40(sp)
+    800017c8:	7a02                	ld	s4,32(sp)
+    800017ca:	6ae2                	ld	s5,24(sp)
+    800017cc:	6b42                	ld	s6,16(sp)
+    800017ce:	6ba2                	ld	s7,8(sp)
+    800017d0:	6161                	addi	sp,sp,80
+    800017d2:	8082                	ret
     srcva = va0 + PGSIZE;
-    800017dc:	01390bb3          	add	s7,s2,s3
+    800017d4:	01390bb3          	add	s7,s2,s3
   while(got_null == 0 && max > 0){
-    800017e0:	c8a9                	beqz	s1,80001832 <copyinstr+0xa0>
+    800017d8:	c8a9                	beqz	s1,8000182a <copyinstr+0xa0>
     va0 = PGROUNDDOWN(srcva);
-    800017e2:	015bf933          	and	s2,s7,s5
+    800017da:	015bf933          	and	s2,s7,s5
     pa0 = walkaddr(pagetable, va0);
-    800017e6:	85ca                	mv	a1,s2
-    800017e8:	8552                	mv	a0,s4
-    800017ea:	00000097          	auipc	ra,0x0
-    800017ee:	88c080e7          	jalr	-1908(ra) # 80001076 <walkaddr>
+    800017de:	85ca                	mv	a1,s2
+    800017e0:	8552                	mv	a0,s4
+    800017e2:	00000097          	auipc	ra,0x0
+    800017e6:	88c080e7          	jalr	-1908(ra) # 8000106e <walkaddr>
     if(pa0 == 0)
-    800017f2:	c131                	beqz	a0,80001836 <copyinstr+0xa4>
+    800017ea:	c131                	beqz	a0,8000182e <copyinstr+0xa4>
     n = PGSIZE - (srcva - va0);
-    800017f4:	41790833          	sub	a6,s2,s7
-    800017f8:	984e                	add	a6,a6,s3
+    800017ec:	41790833          	sub	a6,s2,s7
+    800017f0:	984e                	add	a6,a6,s3
     if(n > max)
-    800017fa:	0104f363          	bgeu	s1,a6,80001800 <copyinstr+0x6e>
-    800017fe:	8826                	mv	a6,s1
+    800017f2:	0104f363          	bgeu	s1,a6,800017f8 <copyinstr+0x6e>
+    800017f6:	8826                	mv	a6,s1
     char *p = (char *) (pa0 + (srcva - va0));
-    80001800:	955e                	add	a0,a0,s7
-    80001802:	41250533          	sub	a0,a0,s2
+    800017f8:	955e                	add	a0,a0,s7
+    800017fa:	41250533          	sub	a0,a0,s2
     while(n > 0){
-    80001806:	fc080be3          	beqz	a6,800017dc <copyinstr+0x4a>
-    8000180a:	985a                	add	a6,a6,s6
-    8000180c:	87da                	mv	a5,s6
+    800017fe:	fc080be3          	beqz	a6,800017d4 <copyinstr+0x4a>
+    80001802:	985a                	add	a6,a6,s6
+    80001804:	87da                	mv	a5,s6
       if(*p == '\0'){
-    8000180e:	41650633          	sub	a2,a0,s6
-    80001812:	14fd                	addi	s1,s1,-1
-    80001814:	9b26                	add	s6,s6,s1
-    80001816:	00f60733          	add	a4,a2,a5
-    8000181a:	00074703          	lbu	a4,0(a4)
-    8000181e:	df49                	beqz	a4,800017b8 <copyinstr+0x26>
+    80001806:	41650633          	sub	a2,a0,s6
+    8000180a:	14fd                	addi	s1,s1,-1
+    8000180c:	9b26                	add	s6,s6,s1
+    8000180e:	00f60733          	add	a4,a2,a5
+    80001812:	00074703          	lbu	a4,0(a4)
+    80001816:	df49                	beqz	a4,800017b0 <copyinstr+0x26>
         *dst = *p;
-    80001820:	00e78023          	sb	a4,0(a5)
+    80001818:	00e78023          	sb	a4,0(a5)
       --max;
-    80001824:	40fb04b3          	sub	s1,s6,a5
+    8000181c:	40fb04b3          	sub	s1,s6,a5
       dst++;
-    80001828:	0785                	addi	a5,a5,1
+    80001820:	0785                	addi	a5,a5,1
     while(n > 0){
-    8000182a:	ff0796e3          	bne	a5,a6,80001816 <copyinstr+0x84>
+    80001822:	ff0796e3          	bne	a5,a6,8000180e <copyinstr+0x84>
       dst++;
-    8000182e:	8b42                	mv	s6,a6
-    80001830:	b775                	j	800017dc <copyinstr+0x4a>
-    80001832:	4781                	li	a5,0
-    80001834:	b769                	j	800017be <copyinstr+0x2c>
+    80001826:	8b42                	mv	s6,a6
+    80001828:	b775                	j	800017d4 <copyinstr+0x4a>
+    8000182a:	4781                	li	a5,0
+    8000182c:	b769                	j	800017b6 <copyinstr+0x2c>
       return -1;
-    80001836:	557d                	li	a0,-1
-    80001838:	b779                	j	800017c6 <copyinstr+0x34>
+    8000182e:	557d                	li	a0,-1
+    80001830:	b779                	j	800017be <copyinstr+0x34>
   int got_null = 0;
-    8000183a:	4781                	li	a5,0
+    80001832:	4781                	li	a5,0
   if(got_null){
-    8000183c:	0017b793          	seqz	a5,a5
-    80001840:	40f00533          	neg	a0,a5
-}
-    80001844:	8082                	ret
-
-0000000080001846 <add_proc_to_list>:
-extern uint64 cas( volatile void *addr, int expected, int newval);
-
-// Ass2
-int
-add_proc_to_list(int tail, struct proc *p)
-{
-    80001846:	1101                	addi	sp,sp,-32
-    80001848:	ec06                	sd	ra,24(sp)
-    8000184a:	e822                	sd	s0,16(sp)
-    8000184c:	e426                	sd	s1,8(sp)
-    8000184e:	e04a                	sd	s2,0(sp)
-    80001850:	1000                	addi	s0,sp,32
-    80001852:	892a                	mv	s2,a0
-    80001854:	84ae                	mv	s1,a1
-  // if (tail == p->pid)
-    // return 0;
-  printf("&&&&&&&&&&&&&&&adding: %d,     prev:   %d,   next:  %d\n", p->proc_ind, p->prev_proc, p->next_proc);
-    80001856:	51b4                	lw	a3,96(a1)
-    80001858:	51f0                	lw	a2,100(a1)
-    8000185a:	4dec                	lw	a1,92(a1)
-    8000185c:	00008517          	auipc	a0,0x8
-    80001860:	97c50513          	addi	a0,a0,-1668 # 800091d8 <digits+0x198>
-    80001864:	fffff097          	auipc	ra,0xfffff
-    80001868:	d24080e7          	jalr	-732(ra) # 80000588 <printf>
-  int p_before = proc[tail].next_proc;
-    8000186c:	00011517          	auipc	a0,0x11
-    80001870:	f0450513          	addi	a0,a0,-252 # 80012770 <proc>
-    80001874:	19800793          	li	a5,408
-    80001878:	02f907b3          	mul	a5,s2,a5
-    8000187c:	00f50733          	add	a4,a0,a5
-  if (cas(&proc[tail].next_proc, p_before, p->proc_ind) == 0)
-    80001880:	06078793          	addi	a5,a5,96
-    80001884:	4cf0                	lw	a2,92(s1)
-    80001886:	532c                	lw	a1,96(a4)
-    80001888:	953e                	add	a0,a0,a5
-    8000188a:	00006097          	auipc	ra,0x6
-    8000188e:	03c080e7          	jalr	60(ra) # 800078c6 <cas>
-    80001892:	e51d                	bnez	a0,800018c0 <add_proc_to_list+0x7a>
+    80001834:	0017b793          	seqz	a5,a5
+    80001838:	40f00533          	neg	a0,a5
+}
+    8000183c:	8082                	ret
+
+000000008000183e <inc_cpu>:
+struct linked_list unused_list = {-1};   
+struct linked_list sleeping_list = {-1}; 
+struct linked_list zombie_list = {-1};
+
+void 
+inc_cpu(struct cpu *c){
+    8000183e:	1101                	addi	sp,sp,-32
+    80001840:	ec06                	sd	ra,24(sp)
+    80001842:	e822                	sd	s0,16(sp)
+    80001844:	e426                	sd	s1,8(sp)
+    80001846:	e04a                	sd	s2,0(sp)
+    80001848:	1000                	addi	s0,sp,32
+    8000184a:	84aa                	mv	s1,a0
+  uint64 procs_num;
+  do
   {
-    p->prev_proc = tail;
-    80001894:	0724a223          	sw	s2,100(s1)
-    p->next_proc = -1;
-    80001898:	57fd                	li	a5,-1
-    8000189a:	d0bc                	sw	a5,96(s1)
-    printf("&&&&&&&&&&&&&&&adding: %d,     prev:   %d,   next:  %d\n", p->proc_ind, p->prev_proc, p->next_proc);
-    8000189c:	56fd                	li	a3,-1
-    8000189e:	864a                	mv	a2,s2
-    800018a0:	4cec                	lw	a1,92(s1)
-    800018a2:	00008517          	auipc	a0,0x8
-    800018a6:	93650513          	addi	a0,a0,-1738 # 800091d8 <digits+0x198>
-    800018aa:	fffff097          	auipc	ra,0xfffff
-    800018ae:	cde080e7          	jalr	-802(ra) # 80000588 <printf>
-    return 0;
-    800018b2:	4501                	li	a0,0
+    procs_num = c->proc_cnt;
   }
-  return -1;
-}
-    800018b4:	60e2                	ld	ra,24(sp)
-    800018b6:	6442                	ld	s0,16(sp)
-    800018b8:	64a2                	ld	s1,8(sp)
-    800018ba:	6902                	ld	s2,0(sp)
-    800018bc:	6105                	addi	sp,sp,32
-    800018be:	8082                	ret
-  return -1;
-    800018c0:	557d                	li	a0,-1
-    800018c2:	bfcd                	j	800018b4 <add_proc_to_list+0x6e>
+  while (cas(&(c->proc_cnt), procs_num, procs_num+1));
+    8000184c:	08050913          	addi	s2,a0,128
+    procs_num = c->proc_cnt;
+    80001850:	0804a583          	lw	a1,128(s1)
+  while (cas(&(c->proc_cnt), procs_num, procs_num+1));
+    80001854:	0015861b          	addiw	a2,a1,1
+    80001858:	854a                	mv	a0,s2
+    8000185a:	00005097          	auipc	ra,0x5
+    8000185e:	f6c080e7          	jalr	-148(ra) # 800067c6 <cas>
+    80001862:	2501                	sext.w	a0,a0
+    80001864:	f575                	bnez	a0,80001850 <inc_cpu+0x12>
+}
+    80001866:	60e2                	ld	ra,24(sp)
+    80001868:	6442                	ld	s0,16(sp)
+    8000186a:	64a2                	ld	s1,8(sp)
+    8000186c:	6902                	ld	s2,0(sp)
+    8000186e:	6105                	addi	sp,sp,32
+    80001870:	8082                	ret
+
+0000000080001872 <isEmpty>:
 
-00000000800018c4 <remove_proc_from_list>:
 
-// Ass2
 int
-remove_proc_from_list(int ind)
-{
-    800018c4:	1101                	addi	sp,sp,-32
-    800018c6:	ec06                	sd	ra,24(sp)
-    800018c8:	e822                	sd	s0,16(sp)
-    800018ca:	e426                	sd	s1,8(sp)
-    800018cc:	e04a                	sd	s2,0(sp)
-    800018ce:	1000                	addi	s0,sp,32
-    800018d0:	84aa                	mv	s1,a0
-  struct proc *p = &proc[ind];
-
-  printf("######### remove cur: %d,    prev: %d, next: %d   \n", ind, p->prev_proc, p->next_proc);
-    800018d2:	19800913          	li	s2,408
-    800018d6:	032507b3          	mul	a5,a0,s2
-    800018da:	00011917          	auipc	s2,0x11
-    800018de:	e9690913          	addi	s2,s2,-362 # 80012770 <proc>
-    800018e2:	993e                	add	s2,s2,a5
-    800018e4:	06092683          	lw	a3,96(s2)
-    800018e8:	06492603          	lw	a2,100(s2)
-    800018ec:	85aa                	mv	a1,a0
-    800018ee:	00008517          	auipc	a0,0x8
-    800018f2:	92250513          	addi	a0,a0,-1758 # 80009210 <digits+0x1d0>
-    800018f6:	fffff097          	auipc	ra,0xfffff
-    800018fa:	c92080e7          	jalr	-878(ra) # 80000588 <printf>
-
-  if (p->prev_proc == -1 && p->next_proc == -1)
-    800018fe:	06093703          	ld	a4,96(s2)
-    80001902:	57fd                	li	a5,-1
-    return 1;  // Need to change head & tail.
-    80001904:	4505                	li	a0,1
-  if (p->prev_proc == -1 && p->next_proc == -1)
-    80001906:	06f70863          	beq	a4,a5,80001976 <remove_proc_from_list+0xb2>
-  
-  if (p->prev_proc == -1)
-    8000190a:	06492783          	lw	a5,100(s2)
-    8000190e:	577d                	li	a4,-1
-    80001910:	06e78963          	beq	a5,a4,80001982 <remove_proc_from_list+0xbe>
-    return 2;  // Need to change head.
-
-  if (p->next_proc == -1)
-    80001914:	06092603          	lw	a2,96(s2)
-    80001918:	577d                	li	a4,-1
-    return 3;  // Need to change tail.
-    8000191a:	450d                	li	a0,3
-  if (p->next_proc == -1)
-    8000191c:	04e60d63          	beq	a2,a4,80001976 <remove_proc_from_list+0xb2>
-
-  int prev = proc[p->prev_proc].next_proc;
-    80001920:	00011517          	auipc	a0,0x11
-    80001924:	e5050513          	addi	a0,a0,-432 # 80012770 <proc>
-    80001928:	19800713          	li	a4,408
-    8000192c:	02e787b3          	mul	a5,a5,a4
-    80001930:	00f50733          	add	a4,a0,a5
-  if (cas(&proc[p->prev_proc].next_proc, prev, p->next_proc) == 0)
-    80001934:	06078793          	addi	a5,a5,96
-    80001938:	532c                	lw	a1,96(a4)
-    8000193a:	953e                	add	a0,a0,a5
-    8000193c:	00006097          	auipc	ra,0x6
-    80001940:	f8a080e7          	jalr	-118(ra) # 800078c6 <cas>
-    80001944:	e129                	bnez	a0,80001986 <remove_proc_from_list+0xc2>
-  {
-    proc[p->next_proc].prev_proc = p->prev_proc;
-    80001946:	00011797          	auipc	a5,0x11
-    8000194a:	e2a78793          	addi	a5,a5,-470 # 80012770 <proc>
-    8000194e:	19800713          	li	a4,408
-    80001952:	06092683          	lw	a3,96(s2)
-    80001956:	06492603          	lw	a2,100(s2)
-    8000195a:	02e68733          	mul	a4,a3,a4
-    8000195e:	97ba                	add	a5,a5,a4
-    80001960:	d3f0                	sw	a2,100(a5)
-
-    printf("######### remove cur: %d,    prev: %d, next: %d   \n", ind, p->prev_proc, p->next_proc);
-    80001962:	85a6                	mv	a1,s1
-    80001964:	00008517          	auipc	a0,0x8
-    80001968:	8ac50513          	addi	a0,a0,-1876 # 80009210 <digits+0x1d0>
-    8000196c:	fffff097          	auipc	ra,0xfffff
-    80001970:	c1c080e7          	jalr	-996(ra) # 80000588 <printf>
-    return 0;
-    80001974:	4501                	li	a0,0
+isEmpty(struct linked_list *lst){
+    80001872:	1141                	addi	sp,sp,-16
+    80001874:	e422                	sd	s0,8(sp)
+    80001876:	0800                	addi	s0,sp,16
+  int h= 0;
+  h = lst->head == -1;
+    80001878:	4108                	lw	a0,0(a0)
+    8000187a:	0505                	addi	a0,a0,1
+  return h;
+}
+    8000187c:	00153513          	seqz	a0,a0
+    80001880:	6422                	ld	s0,8(sp)
+    80001882:	0141                	addi	sp,sp,16
+    80001884:	8082                	ret
+
+0000000080001886 <append>:
+
+
+void 
+append(struct linked_list *lst, struct proc *p){
+    80001886:	7139                	addi	sp,sp,-64
+    80001888:	fc06                	sd	ra,56(sp)
+    8000188a:	f822                	sd	s0,48(sp)
+    8000188c:	f426                	sd	s1,40(sp)
+    8000188e:	f04a                	sd	s2,32(sp)
+    80001890:	ec4e                	sd	s3,24(sp)
+    80001892:	e852                	sd	s4,16(sp)
+    80001894:	e456                	sd	s5,8(sp)
+    80001896:	0080                	addi	s0,sp,64
+    80001898:	84aa                	mv	s1,a0
+    8000189a:	892e                	mv	s2,a1
+  acquire(&lst->head_lock);
+    8000189c:	00850993          	addi	s3,a0,8
+    800018a0:	854e                	mv	a0,s3
+    800018a2:	fffff097          	auipc	ra,0xfffff
+    800018a6:	342080e7          	jalr	834(ra) # 80000be4 <acquire>
+  if(isEmpty(lst)){
+    800018aa:	4098                	lw	a4,0(s1)
+    800018ac:	57fd                	li	a5,-1
+    800018ae:	04f71063          	bne	a4,a5,800018ee <append+0x68>
+    lst->head = p->proc_ind;
+    800018b2:	17492783          	lw	a5,372(s2) # 1174 <_entry-0x7fffee8c>
+    800018b6:	c09c                	sw	a5,0(s1)
+    release(&lst->head_lock);
+    800018b8:	854e                	mv	a0,s3
+    800018ba:	fffff097          	auipc	ra,0xfffff
+    800018be:	3de080e7          	jalr	990(ra) # 80000c98 <release>
+    release(&lst->head_lock);
+    proc[lst->tail].next_proc = p->proc_ind;
+    p->prev_proc = proc[lst->tail].proc_ind; 
+    release(&proc[lst->tail].list_lock);
+  }
+  acquire(&lst->head_lock);
+    800018c2:	854e                	mv	a0,s3
+    800018c4:	fffff097          	auipc	ra,0xfffff
+    800018c8:	320080e7          	jalr	800(ra) # 80000be4 <acquire>
+  lst->tail = p->proc_ind;
+    800018cc:	17492783          	lw	a5,372(s2)
+    800018d0:	c0dc                	sw	a5,4(s1)
+  release(&lst->head_lock);
+    800018d2:	854e                	mv	a0,s3
+    800018d4:	fffff097          	auipc	ra,0xfffff
+    800018d8:	3c4080e7          	jalr	964(ra) # 80000c98 <release>
+}
+    800018dc:	70e2                	ld	ra,56(sp)
+    800018de:	7442                	ld	s0,48(sp)
+    800018e0:	74a2                	ld	s1,40(sp)
+    800018e2:	7902                	ld	s2,32(sp)
+    800018e4:	69e2                	ld	s3,24(sp)
+    800018e6:	6a42                	ld	s4,16(sp)
+    800018e8:	6aa2                	ld	s5,8(sp)
+    800018ea:	6121                	addi	sp,sp,64
+    800018ec:	8082                	ret
+    acquire(&proc[lst->tail].list_lock);
+    800018ee:	40c8                	lw	a0,4(s1)
+    800018f0:	19000a93          	li	s5,400
+    800018f4:	03550533          	mul	a0,a0,s5
+    800018f8:	17850513          	addi	a0,a0,376
+    800018fc:	00010a17          	auipc	s4,0x10
+    80001900:	f14a0a13          	addi	s4,s4,-236 # 80011810 <proc>
+    80001904:	9552                	add	a0,a0,s4
+    80001906:	fffff097          	auipc	ra,0xfffff
+    8000190a:	2de080e7          	jalr	734(ra) # 80000be4 <acquire>
+    release(&lst->head_lock);
+    8000190e:	854e                	mv	a0,s3
+    80001910:	fffff097          	auipc	ra,0xfffff
+    80001914:	388080e7          	jalr	904(ra) # 80000c98 <release>
+    proc[lst->tail].next_proc = p->proc_ind;
+    80001918:	40dc                	lw	a5,4(s1)
+    8000191a:	17492703          	lw	a4,372(s2)
+    8000191e:	035787b3          	mul	a5,a5,s5
+    80001922:	97d2                	add	a5,a5,s4
+    80001924:	16e7a623          	sw	a4,364(a5)
+    p->prev_proc = proc[lst->tail].proc_ind; 
+    80001928:	40dc                	lw	a5,4(s1)
+    8000192a:	035787b3          	mul	a5,a5,s5
+    8000192e:	97d2                	add	a5,a5,s4
+    80001930:	1747a783          	lw	a5,372(a5)
+    80001934:	16f92823          	sw	a5,368(s2)
+    release(&proc[lst->tail].list_lock);
+    80001938:	40c8                	lw	a0,4(s1)
+    8000193a:	03550533          	mul	a0,a0,s5
+    8000193e:	17850513          	addi	a0,a0,376
+    80001942:	9552                	add	a0,a0,s4
+    80001944:	fffff097          	auipc	ra,0xfffff
+    80001948:	354080e7          	jalr	852(ra) # 80000c98 <release>
+    8000194c:	bf9d                	j	800018c2 <append+0x3c>
+
+000000008000194e <remove>:
+
+void 
+remove(struct linked_list *lst, struct proc *p){
+    8000194e:	7179                	addi	sp,sp,-48
+    80001950:	f406                	sd	ra,40(sp)
+    80001952:	f022                	sd	s0,32(sp)
+    80001954:	ec26                	sd	s1,24(sp)
+    80001956:	e84a                	sd	s2,16(sp)
+    80001958:	e44e                	sd	s3,8(sp)
+    8000195a:	e052                	sd	s4,0(sp)
+    8000195c:	1800                	addi	s0,sp,48
+    8000195e:	892a                	mv	s2,a0
+    80001960:	84ae                	mv	s1,a1
+  acquire(&lst->head_lock);
+    80001962:	00850993          	addi	s3,a0,8
+    80001966:	854e                	mv	a0,s3
+    80001968:	fffff097          	auipc	ra,0xfffff
+    8000196c:	27c080e7          	jalr	636(ra) # 80000be4 <acquire>
+  h = lst->head == -1;
+    80001970:	00092783          	lw	a5,0(s2)
+  if(isEmpty(lst)){
+    80001974:	577d                	li	a4,-1
+    80001976:	0ae78263          	beq	a5,a4,80001a1a <remove+0xcc>
+    release(&lst->head_lock);
+    panic("list is empty\n");
   }
-  return -1;
-}
-    80001976:	60e2                	ld	ra,24(sp)
-    80001978:	6442                	ld	s0,16(sp)
-    8000197a:	64a2                	ld	s1,8(sp)
-    8000197c:	6902                	ld	s2,0(sp)
-    8000197e:	6105                	addi	sp,sp,32
-    80001980:	8082                	ret
-    return 2;  // Need to change head.
-    80001982:	4509                	li	a0,2
-    80001984:	bfcd                	j	80001976 <remove_proc_from_list+0xb2>
-  return -1;
-    80001986:	557d                	li	a0,-1
-    80001988:	b7fd                	j	80001976 <remove_proc_from_list+0xb2>
 
-000000008000198a <proc_mapstacks>:
+  if(lst->head == p->proc_ind){ // the required proc is the head
+    8000197a:	1744a703          	lw	a4,372(s1)
+    8000197e:	0af70b63          	beq	a4,a5,80001a34 <remove+0xe6>
+      lst->tail = -1;
+    }
+    release(&lst->head_lock);
+  }
+  else{
+    if (lst->tail == p->proc_ind) {
+    80001982:	00492783          	lw	a5,4(s2)
+    80001986:	0ee78763          	beq	a5,a4,80001a74 <remove+0x126>
+      lst->tail = p->prev_proc;
+    }
+    release(&lst->head_lock); 
+    8000198a:	854e                	mv	a0,s3
+    8000198c:	fffff097          	auipc	ra,0xfffff
+    80001990:	30c080e7          	jalr	780(ra) # 80000c98 <release>
+    acquire(&p->list_lock);
+    80001994:	17848993          	addi	s3,s1,376
+    80001998:	854e                	mv	a0,s3
+    8000199a:	fffff097          	auipc	ra,0xfffff
+    8000199e:	24a080e7          	jalr	586(ra) # 80000be4 <acquire>
+    acquire(&proc[p->prev_proc].list_lock);
+    800019a2:	1704a503          	lw	a0,368(s1)
+    800019a6:	19000a13          	li	s4,400
+    800019aa:	03450533          	mul	a0,a0,s4
+    800019ae:	17850513          	addi	a0,a0,376
+    800019b2:	00010917          	auipc	s2,0x10
+    800019b6:	e5e90913          	addi	s2,s2,-418 # 80011810 <proc>
+    800019ba:	954a                	add	a0,a0,s2
+    800019bc:	fffff097          	auipc	ra,0xfffff
+    800019c0:	228080e7          	jalr	552(ra) # 80000be4 <acquire>
+    proc[p->prev_proc].next_proc = p->next_proc;
+    800019c4:	1704a703          	lw	a4,368(s1)
+    800019c8:	16c4a783          	lw	a5,364(s1)
+    800019cc:	03470733          	mul	a4,a4,s4
+    800019d0:	974a                	add	a4,a4,s2
+    800019d2:	16f72623          	sw	a5,364(a4)
+    proc[p->next_proc].prev_proc = p->prev_proc; 
+    800019d6:	1704a503          	lw	a0,368(s1)
+    800019da:	034787b3          	mul	a5,a5,s4
+    800019de:	97ca                	add	a5,a5,s2
+    800019e0:	16a7a823          	sw	a0,368(a5)
+    release(&proc[p->prev_proc].list_lock);
+    800019e4:	03450533          	mul	a0,a0,s4
+    800019e8:	17850513          	addi	a0,a0,376
+    800019ec:	954a                	add	a0,a0,s2
+    800019ee:	fffff097          	auipc	ra,0xfffff
+    800019f2:	2aa080e7          	jalr	682(ra) # 80000c98 <release>
+    release(&p->list_lock);
+    800019f6:	854e                	mv	a0,s3
+    800019f8:	fffff097          	auipc	ra,0xfffff
+    800019fc:	2a0080e7          	jalr	672(ra) # 80000c98 <release>
+  }
+  p->prev_proc = -1;
+    80001a00:	57fd                	li	a5,-1
+    80001a02:	16f4a823          	sw	a5,368(s1)
+  p->next_proc = -1;
+    80001a06:	16f4a623          	sw	a5,364(s1)
+}
+    80001a0a:	70a2                	ld	ra,40(sp)
+    80001a0c:	7402                	ld	s0,32(sp)
+    80001a0e:	64e2                	ld	s1,24(sp)
+    80001a10:	6942                	ld	s2,16(sp)
+    80001a12:	69a2                	ld	s3,8(sp)
+    80001a14:	6a02                	ld	s4,0(sp)
+    80001a16:	6145                	addi	sp,sp,48
+    80001a18:	8082                	ret
+    release(&lst->head_lock);
+    80001a1a:	854e                	mv	a0,s3
+    80001a1c:	fffff097          	auipc	ra,0xfffff
+    80001a20:	27c080e7          	jalr	636(ra) # 80000c98 <release>
+    panic("list is empty\n");
+    80001a24:	00006517          	auipc	a0,0x6
+    80001a28:	7b450513          	addi	a0,a0,1972 # 800081d8 <digits+0x198>
+    80001a2c:	fffff097          	auipc	ra,0xfffff
+    80001a30:	b12080e7          	jalr	-1262(ra) # 8000053e <panic>
+    lst->head = p->next_proc;
+    80001a34:	16c4a783          	lw	a5,364(s1)
+    80001a38:	00f92023          	sw	a5,0(s2)
+    proc[p->next_proc].prev_proc = -1;
+    80001a3c:	19000713          	li	a4,400
+    80001a40:	02e787b3          	mul	a5,a5,a4
+    80001a44:	00010717          	auipc	a4,0x10
+    80001a48:	dcc70713          	addi	a4,a4,-564 # 80011810 <proc>
+    80001a4c:	97ba                	add	a5,a5,a4
+    80001a4e:	577d                	li	a4,-1
+    80001a50:	16e7a823          	sw	a4,368(a5)
+    if(lst->tail == p->proc_ind){
+    80001a54:	00492703          	lw	a4,4(s2)
+    80001a58:	1744a783          	lw	a5,372(s1)
+    80001a5c:	00f70863          	beq	a4,a5,80001a6c <remove+0x11e>
+    release(&lst->head_lock);
+    80001a60:	854e                	mv	a0,s3
+    80001a62:	fffff097          	auipc	ra,0xfffff
+    80001a66:	236080e7          	jalr	566(ra) # 80000c98 <release>
+    80001a6a:	bf59                	j	80001a00 <remove+0xb2>
+      lst->tail = -1;
+    80001a6c:	57fd                	li	a5,-1
+    80001a6e:	00f92223          	sw	a5,4(s2)
+    80001a72:	b7fd                	j	80001a60 <remove+0x112>
+      lst->tail = p->prev_proc;
+    80001a74:	1704a783          	lw	a5,368(s1)
+    80001a78:	00f92223          	sw	a5,4(s2)
+    80001a7c:	b739                	j	8000198a <remove+0x3c>
+
+0000000080001a7e <proc_mapstacks>:
 
 // Allocate a page for each process's kernel stack.
 // Map it high in memory, followed by an invalid
 // guard page.
 void
 proc_mapstacks(pagetable_t kpgtbl) {
-    8000198a:	7139                	addi	sp,sp,-64
-    8000198c:	fc06                	sd	ra,56(sp)
-    8000198e:	f822                	sd	s0,48(sp)
-    80001990:	f426                	sd	s1,40(sp)
-    80001992:	f04a                	sd	s2,32(sp)
-    80001994:	ec4e                	sd	s3,24(sp)
-    80001996:	e852                	sd	s4,16(sp)
-    80001998:	e456                	sd	s5,8(sp)
-    8000199a:	e05a                	sd	s6,0(sp)
-    8000199c:	0080                	addi	s0,sp,64
-    8000199e:	89aa                	mv	s3,a0
+    80001a7e:	7139                	addi	sp,sp,-64
+    80001a80:	fc06                	sd	ra,56(sp)
+    80001a82:	f822                	sd	s0,48(sp)
+    80001a84:	f426                	sd	s1,40(sp)
+    80001a86:	f04a                	sd	s2,32(sp)
+    80001a88:	ec4e                	sd	s3,24(sp)
+    80001a8a:	e852                	sd	s4,16(sp)
+    80001a8c:	e456                	sd	s5,8(sp)
+    80001a8e:	e05a                	sd	s6,0(sp)
+    80001a90:	0080                	addi	s0,sp,64
+    80001a92:	89aa                	mv	s3,a0
   struct proc *p;
   
   for(p = proc; p < &proc[NPROC]; p++) {
-    800019a0:	00011497          	auipc	s1,0x11
-    800019a4:	dd048493          	addi	s1,s1,-560 # 80012770 <proc>
+    80001a94:	00010497          	auipc	s1,0x10
+    80001a98:	d7c48493          	addi	s1,s1,-644 # 80011810 <proc>
     char *pa = kalloc();
     if(pa == 0)
       panic("kalloc");
     uint64 va = KSTACK((int) (p - proc));
-    800019a8:	8b26                	mv	s6,s1
-    800019aa:	00007a97          	auipc	s5,0x7
-    800019ae:	656a8a93          	addi	s5,s5,1622 # 80009000 <etext>
-    800019b2:	04000937          	lui	s2,0x4000
-    800019b6:	197d                	addi	s2,s2,-1
-    800019b8:	0932                	slli	s2,s2,0xc
+    80001a9c:	8b26                	mv	s6,s1
+    80001a9e:	00006a97          	auipc	s5,0x6
+    80001aa2:	562a8a93          	addi	s5,s5,1378 # 80008000 <etext>
+    80001aa6:	04000937          	lui	s2,0x4000
+    80001aaa:	197d                	addi	s2,s2,-1
+    80001aac:	0932                	slli	s2,s2,0xc
   for(p = proc; p < &proc[NPROC]; p++) {
-    800019ba:	00017a17          	auipc	s4,0x17
-    800019be:	3b6a0a13          	addi	s4,s4,950 # 80018d70 <tickslock>
+    80001aae:	00016a17          	auipc	s4,0x16
+    80001ab2:	162a0a13          	addi	s4,s4,354 # 80017c10 <tickslock>
     char *pa = kalloc();
-    800019c2:	fffff097          	auipc	ra,0xfffff
-    800019c6:	132080e7          	jalr	306(ra) # 80000af4 <kalloc>
-    800019ca:	862a                	mv	a2,a0
+    80001ab6:	fffff097          	auipc	ra,0xfffff
+    80001aba:	03e080e7          	jalr	62(ra) # 80000af4 <kalloc>
+    80001abe:	862a                	mv	a2,a0
     if(pa == 0)
-    800019cc:	c131                	beqz	a0,80001a10 <proc_mapstacks+0x86>
+    80001ac0:	c131                	beqz	a0,80001b04 <proc_mapstacks+0x86>
     uint64 va = KSTACK((int) (p - proc));
-    800019ce:	416485b3          	sub	a1,s1,s6
-    800019d2:	858d                	srai	a1,a1,0x3
-    800019d4:	000ab783          	ld	a5,0(s5)
-    800019d8:	02f585b3          	mul	a1,a1,a5
-    800019dc:	2585                	addiw	a1,a1,1
-    800019de:	00d5959b          	slliw	a1,a1,0xd
+    80001ac2:	416485b3          	sub	a1,s1,s6
+    80001ac6:	8591                	srai	a1,a1,0x4
+    80001ac8:	000ab783          	ld	a5,0(s5)
+    80001acc:	02f585b3          	mul	a1,a1,a5
+    80001ad0:	2585                	addiw	a1,a1,1
+    80001ad2:	00d5959b          	slliw	a1,a1,0xd
     kvmmap(kpgtbl, va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
-    800019e2:	4719                	li	a4,6
-    800019e4:	6685                	lui	a3,0x1
-    800019e6:	40b905b3          	sub	a1,s2,a1
-    800019ea:	854e                	mv	a0,s3
-    800019ec:	fffff097          	auipc	ra,0xfffff
-    800019f0:	76c080e7          	jalr	1900(ra) # 80001158 <kvmmap>
+    80001ad6:	4719                	li	a4,6
+    80001ad8:	6685                	lui	a3,0x1
+    80001ada:	40b905b3          	sub	a1,s2,a1
+    80001ade:	854e                	mv	a0,s3
+    80001ae0:	fffff097          	auipc	ra,0xfffff
+    80001ae4:	670080e7          	jalr	1648(ra) # 80001150 <kvmmap>
   for(p = proc; p < &proc[NPROC]; p++) {
-    800019f4:	19848493          	addi	s1,s1,408
-    800019f8:	fd4495e3          	bne	s1,s4,800019c2 <proc_mapstacks+0x38>
+    80001ae8:	19048493          	addi	s1,s1,400
+    80001aec:	fd4495e3          	bne	s1,s4,80001ab6 <proc_mapstacks+0x38>
   }
 }
-    800019fc:	70e2                	ld	ra,56(sp)
-    800019fe:	7442                	ld	s0,48(sp)
-    80001a00:	74a2                	ld	s1,40(sp)
-    80001a02:	7902                	ld	s2,32(sp)
-    80001a04:	69e2                	ld	s3,24(sp)
-    80001a06:	6a42                	ld	s4,16(sp)
-    80001a08:	6aa2                	ld	s5,8(sp)
-    80001a0a:	6b02                	ld	s6,0(sp)
-    80001a0c:	6121                	addi	sp,sp,64
-    80001a0e:	8082                	ret
+    80001af0:	70e2                	ld	ra,56(sp)
+    80001af2:	7442                	ld	s0,48(sp)
+    80001af4:	74a2                	ld	s1,40(sp)
+    80001af6:	7902                	ld	s2,32(sp)
+    80001af8:	69e2                	ld	s3,24(sp)
+    80001afa:	6a42                	ld	s4,16(sp)
+    80001afc:	6aa2                	ld	s5,8(sp)
+    80001afe:	6b02                	ld	s6,0(sp)
+    80001b00:	6121                	addi	sp,sp,64
+    80001b02:	8082                	ret
       panic("kalloc");
-    80001a10:	00008517          	auipc	a0,0x8
-    80001a14:	83850513          	addi	a0,a0,-1992 # 80009248 <digits+0x208>
-    80001a18:	fffff097          	auipc	ra,0xfffff
-    80001a1c:	b26080e7          	jalr	-1242(ra) # 8000053e <panic>
-
-0000000080001a20 <procinit>:
+    80001b04:	00006517          	auipc	a0,0x6
+    80001b08:	6e450513          	addi	a0,a0,1764 # 800081e8 <digits+0x1a8>
+    80001b0c:	fffff097          	auipc	ra,0xfffff
+    80001b10:	a32080e7          	jalr	-1486(ra) # 8000053e <panic>
 
+0000000080001b14 <procinit>:
 
 // initialize the proc table at boot time.
-	void
-	procinit(void)
-	{
-    80001a20:	711d                	addi	sp,sp,-96
-    80001a22:	ec86                	sd	ra,88(sp)
-    80001a24:	e8a2                	sd	s0,80(sp)
-    80001a26:	e4a6                	sd	s1,72(sp)
-    80001a28:	e0ca                	sd	s2,64(sp)
-    80001a2a:	fc4e                	sd	s3,56(sp)
-    80001a2c:	f852                	sd	s4,48(sp)
-    80001a2e:	f456                	sd	s5,40(sp)
-    80001a30:	f05a                	sd	s6,32(sp)
-    80001a32:	ec5e                	sd	s7,24(sp)
-    80001a34:	e862                	sd	s8,16(sp)
-    80001a36:	e466                	sd	s9,8(sp)
-    80001a38:	e06a                	sd	s10,0(sp)
-    80001a3a:	1080                	addi	s0,sp,96
-	  struct proc *p;
-    int i = 0;
-	  
-	  initlock(&pid_lock, "nextpid");
-    80001a3c:	00008597          	auipc	a1,0x8
-    80001a40:	81458593          	addi	a1,a1,-2028 # 80009250 <digits+0x210>
-    80001a44:	00011517          	auipc	a0,0x11
-    80001a48:	cfc50513          	addi	a0,a0,-772 # 80012740 <pid_lock>
-    80001a4c:	fffff097          	auipc	ra,0xfffff
-    80001a50:	108080e7          	jalr	264(ra) # 80000b54 <initlock>
-	  initlock(&wait_lock, "wait_lock");
-    80001a54:	00008597          	auipc	a1,0x8
-    80001a58:	80458593          	addi	a1,a1,-2044 # 80009258 <digits+0x218>
-    80001a5c:	00011517          	auipc	a0,0x11
-    80001a60:	cfc50513          	addi	a0,a0,-772 # 80012758 <wait_lock>
-    80001a64:	fffff097          	auipc	ra,0xfffff
-    80001a68:	0f0080e7          	jalr	240(ra) # 80000b54 <initlock>
-    int i = 0;
-    80001a6c:	4901                	li	s2,0
-	  for(p = proc; p < &proc[NPROC]; p++) {
-    80001a6e:	00011497          	auipc	s1,0x11
-    80001a72:	d0248493          	addi	s1,s1,-766 # 80012770 <proc>
-	      initlock(&p->lock, "proc");
-    80001a76:	00007c97          	auipc	s9,0x7
-    80001a7a:	7f2c8c93          	addi	s9,s9,2034 # 80009268 <digits+0x228>
-	      p->kstack = KSTACK((int) (p - proc));
-    80001a7e:	8c26                	mv	s8,s1
-    80001a80:	00007b97          	auipc	s7,0x7
-    80001a84:	580b8b93          	addi	s7,s7,1408 # 80009000 <etext>
-    80001a88:	04000ab7          	lui	s5,0x4000
-    80001a8c:	1afd                	addi	s5,s5,-1
-    80001a8e:	0ab2                	slli	s5,s5,0xc
-
-        p->proc_ind = i;                               // Set index to process.
-        p->prev_proc = -1;
-    80001a90:	59fd                	li	s3,-1
-          unused_list_tail = p->proc_ind;
-        }
-        else
-        {
-          printf("unused");
-          add_proc_to_list(unused_list_tail, p);
-    80001a92:	00008a17          	auipc	s4,0x8
-    80001a96:	19ea0a13          	addi	s4,s4,414 # 80009c30 <unused_list_tail>
-          unused_list_head = p->proc_ind;
-    80001a9a:	00008d17          	auipc	s10,0x8
-    80001a9e:	19ad0d13          	addi	s10,s10,410 # 80009c34 <unused_list_head>
-	  for(p = proc; p < &proc[NPROC]; p++) {
-    80001aa2:	00017b17          	auipc	s6,0x17
-    80001aa6:	2ceb0b13          	addi	s6,s6,718 # 80018d70 <tickslock>
-    80001aaa:	a805                	j	80001ada <procinit+0xba>
-          printf("unused");
-    80001aac:	00007517          	auipc	a0,0x7
-    80001ab0:	7c450513          	addi	a0,a0,1988 # 80009270 <digits+0x230>
-    80001ab4:	fffff097          	auipc	ra,0xfffff
-    80001ab8:	ad4080e7          	jalr	-1324(ra) # 80000588 <printf>
-          add_proc_to_list(unused_list_tail, p);
-    80001abc:	85a6                	mv	a1,s1
-    80001abe:	000a2503          	lw	a0,0(s4)
-    80001ac2:	00000097          	auipc	ra,0x0
-    80001ac6:	d84080e7          	jalr	-636(ra) # 80001846 <add_proc_to_list>
-          unused_list_tail = p->proc_ind;             // After adding to list, updating tail.
-    80001aca:	4cfc                	lw	a5,92(s1)
-    80001acc:	00fa2023          	sw	a5,0(s4)
-        }
-        i ++;
-    80001ad0:	2905                	addiw	s2,s2,1
-	  for(p = proc; p < &proc[NPROC]; p++) {
-    80001ad2:	19848493          	addi	s1,s1,408
-    80001ad6:	05648263          	beq	s1,s6,80001b1a <procinit+0xfa>
-	      initlock(&p->lock, "proc");
-    80001ada:	85e6                	mv	a1,s9
-    80001adc:	8526                	mv	a0,s1
-    80001ade:	fffff097          	auipc	ra,0xfffff
-    80001ae2:	076080e7          	jalr	118(ra) # 80000b54 <initlock>
-	      p->kstack = KSTACK((int) (p - proc));
-    80001ae6:	418487b3          	sub	a5,s1,s8
-    80001aea:	878d                	srai	a5,a5,0x3
-    80001aec:	000bb703          	ld	a4,0(s7)
-    80001af0:	02e787b3          	mul	a5,a5,a4
-    80001af4:	2785                	addiw	a5,a5,1
-    80001af6:	00d7979b          	slliw	a5,a5,0xd
-    80001afa:	40fa87b3          	sub	a5,s5,a5
-    80001afe:	f8bc                	sd	a5,112(s1)
-        p->proc_ind = i;                               // Set index to process.
-    80001b00:	0524ae23          	sw	s2,92(s1)
-        p->prev_proc = -1;
-    80001b04:	0734a223          	sw	s3,100(s1)
-        p->next_proc = -1;
-    80001b08:	0734a023          	sw	s3,96(s1)
-        if (i == 0)
-    80001b0c:	fa0910e3          	bnez	s2,80001aac <procinit+0x8c>
-          unused_list_head = p->proc_ind;
-    80001b10:	000d2023          	sw	zero,0(s10)
-          unused_list_tail = p->proc_ind;
-    80001b14:	000a2023          	sw	zero,0(s4)
-    80001b18:	bf65                	j	80001ad0 <procinit+0xb0>
-      }
+void
+procinit(void)
+{
+    80001b14:	711d                	addi	sp,sp,-96
+    80001b16:	ec86                	sd	ra,88(sp)
+    80001b18:	e8a2                	sd	s0,80(sp)
+    80001b1a:	e4a6                	sd	s1,72(sp)
+    80001b1c:	e0ca                	sd	s2,64(sp)
+    80001b1e:	fc4e                	sd	s3,56(sp)
+    80001b20:	f852                	sd	s4,48(sp)
+    80001b22:	f456                	sd	s5,40(sp)
+    80001b24:	f05a                	sd	s6,32(sp)
+    80001b26:	ec5e                	sd	s7,24(sp)
+    80001b28:	e862                	sd	s8,16(sp)
+    80001b2a:	e466                	sd	s9,8(sp)
+    80001b2c:	e06a                	sd	s10,0(sp)
+    80001b2e:	1080                	addi	s0,sp,96
+  #ifdef ON
+    flag = 1;
+  #endif
+
+
+  initlock(sleep_lock, "sleeping_list_head_lock");
+    80001b30:	00006597          	auipc	a1,0x6
+    80001b34:	6c058593          	addi	a1,a1,1728 # 800081f0 <digits+0x1b0>
+    80001b38:	00007517          	auipc	a0,0x7
+    80001b3c:	d9050513          	addi	a0,a0,-624 # 800088c8 <sleeping_list+0x8>
+    80001b40:	fffff097          	auipc	ra,0xfffff
+    80001b44:	014080e7          	jalr	20(ra) # 80000b54 <initlock>
+  initlock(zombie_lock, "zombie_list_head_lock");
+    80001b48:	00006597          	auipc	a1,0x6
+    80001b4c:	6c058593          	addi	a1,a1,1728 # 80008208 <digits+0x1c8>
+    80001b50:	00007517          	auipc	a0,0x7
+    80001b54:	d9850513          	addi	a0,a0,-616 # 800088e8 <zombie_list+0x8>
+    80001b58:	fffff097          	auipc	ra,0xfffff
+    80001b5c:	ffc080e7          	jalr	-4(ra) # 80000b54 <initlock>
+  initlock(unused_lock, "unused_list_head_lock");
+    80001b60:	00006597          	auipc	a1,0x6
+    80001b64:	6c058593          	addi	a1,a1,1728 # 80008220 <digits+0x1e0>
+    80001b68:	00007517          	auipc	a0,0x7
+    80001b6c:	da050513          	addi	a0,a0,-608 # 80008908 <unused_list+0x8>
+    80001b70:	fffff097          	auipc	ra,0xfffff
+    80001b74:	fe4080e7          	jalr	-28(ra) # 80000b54 <initlock>
+  initlock(&pid_lock, "nextpid");
+    80001b78:	00006597          	auipc	a1,0x6
+    80001b7c:	6c058593          	addi	a1,a1,1728 # 80008238 <digits+0x1f8>
+    80001b80:	0000f517          	auipc	a0,0xf
+    80001b84:	72050513          	addi	a0,a0,1824 # 800112a0 <pid_lock>
+    80001b88:	fffff097          	auipc	ra,0xfffff
+    80001b8c:	fcc080e7          	jalr	-52(ra) # 80000b54 <initlock>
+  initlock(&wait_lock, "wait_lock");
+    80001b90:	00006597          	auipc	a1,0x6
+    80001b94:	6b058593          	addi	a1,a1,1712 # 80008240 <digits+0x200>
+    80001b98:	0000f517          	auipc	a0,0xf
+    80001b9c:	72050513          	addi	a0,a0,1824 # 800112b8 <wait_lock>
+    80001ba0:	fffff097          	auipc	ra,0xfffff
+    80001ba4:	fb4080e7          	jalr	-76(ra) # 80000b54 <initlock>
+  int i = 0;
+    80001ba8:	4901                	li	s2,0
+
   
-  struct cpu *c;
-  for(c = cpus; c < &cpus[NCPU]; c++)
-    80001b1a:	00010797          	auipc	a5,0x10
-    80001b1e:	7a678793          	addi	a5,a5,1958 # 800122c0 <cpus>
-  {
-    c->runnable_list_head = -1;
-    80001b22:	577d                	li	a4,-1
-  for(c = cpus; c < &cpus[NCPU]; c++)
-    80001b24:	00011697          	auipc	a3,0x11
-    80001b28:	c1c68693          	addi	a3,a3,-996 # 80012740 <pid_lock>
-    c->runnable_list_head = -1;
-    80001b2c:	08e7a023          	sw	a4,128(a5)
-    c->runnable_list_tail = -1;
-    80001b30:	08e7a223          	sw	a4,132(a5)
-  for(c = cpus; c < &cpus[NCPU]; c++)
-    80001b34:	09078793          	addi	a5,a5,144
-    80001b38:	fed79ae3          	bne	a5,a3,80001b2c <procinit+0x10c>
+  for(p = proc; p < &proc[NPROC]; p++) {
+    80001baa:	00010497          	auipc	s1,0x10
+    80001bae:	c6648493          	addi	s1,s1,-922 # 80011810 <proc>
+      initlock(&p->lock, "proc");
+    80001bb2:	00006d17          	auipc	s10,0x6
+    80001bb6:	69ed0d13          	addi	s10,s10,1694 # 80008250 <digits+0x210>
+      initlock(&p->list_lock, "list_lock");
+    80001bba:	00006c97          	auipc	s9,0x6
+    80001bbe:	69ec8c93          	addi	s9,s9,1694 # 80008258 <digits+0x218>
+      p->kstack = KSTACK((int) (p - proc));
+    80001bc2:	8c26                	mv	s8,s1
+    80001bc4:	00006b97          	auipc	s7,0x6
+    80001bc8:	43cb8b93          	addi	s7,s7,1084 # 80008000 <etext>
+    80001bcc:	04000a37          	lui	s4,0x4000
+    80001bd0:	1a7d                	addi	s4,s4,-1
+    80001bd2:	0a32                	slli	s4,s4,0xc
+      p->proc_ind = i;
+      i=i+1;
+      p->prev_proc = -1;
+    80001bd4:	59fd                	li	s3,-1
+      p->next_proc = -1;
+
+      struct linked_list *add_to_unused_list = &unused_list;
+      append(add_to_unused_list, p); 
+    80001bd6:	00007b17          	auipc	s6,0x7
+    80001bda:	d2ab0b13          	addi	s6,s6,-726 # 80008900 <unused_list>
+  for(p = proc; p < &proc[NPROC]; p++) {
+    80001bde:	00016a97          	auipc	s5,0x16
+    80001be2:	032a8a93          	addi	s5,s5,50 # 80017c10 <tickslock>
+      initlock(&p->lock, "proc");
+    80001be6:	85ea                	mv	a1,s10
+    80001be8:	8526                	mv	a0,s1
+    80001bea:	fffff097          	auipc	ra,0xfffff
+    80001bee:	f6a080e7          	jalr	-150(ra) # 80000b54 <initlock>
+      initlock(&p->list_lock, "list_lock");
+    80001bf2:	85e6                	mv	a1,s9
+    80001bf4:	17848513          	addi	a0,s1,376
+    80001bf8:	fffff097          	auipc	ra,0xfffff
+    80001bfc:	f5c080e7          	jalr	-164(ra) # 80000b54 <initlock>
+      p->kstack = KSTACK((int) (p - proc));
+    80001c00:	418487b3          	sub	a5,s1,s8
+    80001c04:	8791                	srai	a5,a5,0x4
+    80001c06:	000bb703          	ld	a4,0(s7)
+    80001c0a:	02e787b3          	mul	a5,a5,a4
+    80001c0e:	2785                	addiw	a5,a5,1
+    80001c10:	00d7979b          	slliw	a5,a5,0xd
+    80001c14:	40fa07b3          	sub	a5,s4,a5
+    80001c18:	e0bc                	sd	a5,64(s1)
+      p->proc_ind = i;
+    80001c1a:	1724aa23          	sw	s2,372(s1)
+      i=i+1;
+    80001c1e:	2905                	addiw	s2,s2,1
+      p->prev_proc = -1;
+    80001c20:	1734a823          	sw	s3,368(s1)
+      p->next_proc = -1;
+    80001c24:	1734a623          	sw	s3,364(s1)
+      append(add_to_unused_list, p); 
+    80001c28:	85a6                	mv	a1,s1
+    80001c2a:	855a                	mv	a0,s6
+    80001c2c:	00000097          	auipc	ra,0x0
+    80001c30:	c5a080e7          	jalr	-934(ra) # 80001886 <append>
+  for(p = proc; p < &proc[NPROC]; p++) {
+    80001c34:	19048493          	addi	s1,s1,400
+    80001c38:	fb5497e3          	bne	s1,s5,80001be6 <procinit+0xd2>
+    80001c3c:	0000f497          	auipc	s1,0xf
+    80001c40:	72448493          	addi	s1,s1,1828 # 80011360 <cpus+0x90>
+    80001c44:	00010a17          	auipc	s4,0x10
+    80001c48:	c5ca0a13          	addi	s4,s4,-932 # 800118a0 <proc+0x90>
+  }
+
+  for(c = cpus; c < &cpus[NCPU] && c != NULL ; c++){
+    struct linked_list empty_list = (struct linked_list){-1};
+    c->runnable_list = empty_list;
+    80001c4c:	59fd                	li	s3,-1
+    c->proc_cnt = 0;
+    struct spinlock *runnable_head = &c->runnable_list.head_lock;
+    initlock(runnable_head, "cpu_runnable_list_head_lock");
+    80001c4e:	00006917          	auipc	s2,0x6
+    80001c52:	61a90913          	addi	s2,s2,1562 # 80008268 <digits+0x228>
+    c->runnable_list = empty_list;
+    80001c56:	ff34ac23          	sw	s3,-8(s1)
+    80001c5a:	fe04ae23          	sw	zero,-4(s1)
+    80001c5e:	0004a023          	sw	zero,0(s1)
+    80001c62:	0004b423          	sd	zero,8(s1)
+    80001c66:	0004b823          	sd	zero,16(s1)
+    c->proc_cnt = 0;
+    80001c6a:	fe04a823          	sw	zero,-16(s1)
+    initlock(runnable_head, "cpu_runnable_list_head_lock");
+    80001c6e:	85ca                	mv	a1,s2
+    80001c70:	8526                	mv	a0,s1
+    80001c72:	fffff097          	auipc	ra,0xfffff
+    80001c76:	ee2080e7          	jalr	-286(ra) # 80000b54 <initlock>
+  for(c = cpus; c < &cpus[NCPU] && c != NULL ; c++){
+    80001c7a:	0a848493          	addi	s1,s1,168
+    80001c7e:	fd449ce3          	bne	s1,s4,80001c56 <procinit+0x142>
   }
 }
-    80001b3c:	60e6                	ld	ra,88(sp)
-    80001b3e:	6446                	ld	s0,80(sp)
-    80001b40:	64a6                	ld	s1,72(sp)
-    80001b42:	6906                	ld	s2,64(sp)
-    80001b44:	79e2                	ld	s3,56(sp)
-    80001b46:	7a42                	ld	s4,48(sp)
-    80001b48:	7aa2                	ld	s5,40(sp)
-    80001b4a:	7b02                	ld	s6,32(sp)
-    80001b4c:	6be2                	ld	s7,24(sp)
-    80001b4e:	6c42                	ld	s8,16(sp)
-    80001b50:	6ca2                	ld	s9,8(sp)
-    80001b52:	6d02                	ld	s10,0(sp)
-    80001b54:	6125                	addi	sp,sp,96
-    80001b56:	8082                	ret
-
-0000000080001b58 <cpuid>:
+    80001c82:	60e6                	ld	ra,88(sp)
+    80001c84:	6446                	ld	s0,80(sp)
+    80001c86:	64a6                	ld	s1,72(sp)
+    80001c88:	6906                	ld	s2,64(sp)
+    80001c8a:	79e2                	ld	s3,56(sp)
+    80001c8c:	7a42                	ld	s4,48(sp)
+    80001c8e:	7aa2                	ld	s5,40(sp)
+    80001c90:	7b02                	ld	s6,32(sp)
+    80001c92:	6be2                	ld	s7,24(sp)
+    80001c94:	6c42                	ld	s8,16(sp)
+    80001c96:	6ca2                	ld	s9,8(sp)
+    80001c98:	6d02                	ld	s10,0(sp)
+    80001c9a:	6125                	addi	sp,sp,96
+    80001c9c:	8082                	ret
+
+0000000080001c9e <cpuid>:
 // Must be called with interrupts disabled,
 // to prevent race with process being moved
 // to a different CPU.
 int
 cpuid()
 {
-    80001b58:	1141                	addi	sp,sp,-16
-    80001b5a:	e422                	sd	s0,8(sp)
-    80001b5c:	0800                	addi	s0,sp,16
+    80001c9e:	1141                	addi	sp,sp,-16
+    80001ca0:	e422                	sd	s0,8(sp)
+    80001ca2:	0800                	addi	s0,sp,16
   asm volatile("mv %0, tp" : "=r" (x) );
-    80001b5e:	8512                	mv	a0,tp
+    80001ca4:	8512                	mv	a0,tp
   int id = r_tp();
   return id;
 }
-    80001b60:	2501                	sext.w	a0,a0
-    80001b62:	6422                	ld	s0,8(sp)
-    80001b64:	0141                	addi	sp,sp,16
-    80001b66:	8082                	ret
+    80001ca6:	2501                	sext.w	a0,a0
+    80001ca8:	6422                	ld	s0,8(sp)
+    80001caa:	0141                	addi	sp,sp,16
+    80001cac:	8082                	ret
 
-0000000080001b68 <mycpu>:
+0000000080001cae <mycpu>:
 
 // Return this CPU's cpu struct.
 // Interrupts must be disabled.
 struct cpu*
 mycpu(void) {
-    80001b68:	1141                	addi	sp,sp,-16
-    80001b6a:	e422                	sd	s0,8(sp)
-    80001b6c:	0800                	addi	s0,sp,16
-    80001b6e:	8792                	mv	a5,tp
-  int id = r_tp();
-    80001b70:	0007871b          	sext.w	a4,a5
+    80001cae:	1141                	addi	sp,sp,-16
+    80001cb0:	e422                	sd	s0,8(sp)
+    80001cb2:	0800                	addi	s0,sp,16
+    80001cb4:	8792                	mv	a5,tp
   int id = cpuid();
   struct cpu *c = &cpus[id];
-  c->cpu_id = id;
-    80001b74:	00010517          	auipc	a0,0x10
-    80001b78:	74c50513          	addi	a0,a0,1868 # 800122c0 <cpus>
-    80001b7c:	00371793          	slli	a5,a4,0x3
-    80001b80:	00e786b3          	add	a3,a5,a4
-    80001b84:	0692                	slli	a3,a3,0x4
-    80001b86:	96aa                	add	a3,a3,a0
-    80001b88:	08e6a423          	sw	a4,136(a3)
+    80001cb6:	2781                	sext.w	a5,a5
+    80001cb8:	0a800513          	li	a0,168
+    80001cbc:	02a787b3          	mul	a5,a5,a0
   return c;
 }
-    80001b8c:	8536                	mv	a0,a3
-    80001b8e:	6422                	ld	s0,8(sp)
-    80001b90:	0141                	addi	sp,sp,16
-    80001b92:	8082                	ret
+    80001cc0:	0000f517          	auipc	a0,0xf
+    80001cc4:	61050513          	addi	a0,a0,1552 # 800112d0 <cpus>
+    80001cc8:	953e                	add	a0,a0,a5
+    80001cca:	6422                	ld	s0,8(sp)
+    80001ccc:	0141                	addi	sp,sp,16
+    80001cce:	8082                	ret
 
-0000000080001b94 <myproc>:
+0000000080001cd0 <myproc>:
 
 // Return the current struct proc *, or zero if none.
 struct proc*
 myproc(void) {
-    80001b94:	1101                	addi	sp,sp,-32
-    80001b96:	ec06                	sd	ra,24(sp)
-    80001b98:	e822                	sd	s0,16(sp)
-    80001b9a:	e426                	sd	s1,8(sp)
-    80001b9c:	1000                	addi	s0,sp,32
+    80001cd0:	1101                	addi	sp,sp,-32
+    80001cd2:	ec06                	sd	ra,24(sp)
+    80001cd4:	e822                	sd	s0,16(sp)
+    80001cd6:	e426                	sd	s1,8(sp)
+    80001cd8:	1000                	addi	s0,sp,32
   push_off();
-    80001b9e:	fffff097          	auipc	ra,0xfffff
-    80001ba2:	ffa080e7          	jalr	-6(ra) # 80000b98 <push_off>
-    80001ba6:	8792                	mv	a5,tp
-  int id = r_tp();
-    80001ba8:	0007871b          	sext.w	a4,a5
-  c->cpu_id = id;
-    80001bac:	00010617          	auipc	a2,0x10
-    80001bb0:	71460613          	addi	a2,a2,1812 # 800122c0 <cpus>
-    80001bb4:	00371793          	slli	a5,a4,0x3
-    80001bb8:	00e786b3          	add	a3,a5,a4
-    80001bbc:	0692                	slli	a3,a3,0x4
-    80001bbe:	96b2                	add	a3,a3,a2
-    80001bc0:	08e6a423          	sw	a4,136(a3)
+    80001cda:	fffff097          	auipc	ra,0xfffff
+    80001cde:	ebe080e7          	jalr	-322(ra) # 80000b98 <push_off>
+    80001ce2:	8792                	mv	a5,tp
   struct cpu *c = mycpu();
   struct proc *p = c->proc;
-    80001bc4:	6284                	ld	s1,0(a3)
+    80001ce4:	2781                	sext.w	a5,a5
+    80001ce6:	0a800713          	li	a4,168
+    80001cea:	02e787b3          	mul	a5,a5,a4
+    80001cee:	0000f717          	auipc	a4,0xf
+    80001cf2:	5b270713          	addi	a4,a4,1458 # 800112a0 <pid_lock>
+    80001cf6:	97ba                	add	a5,a5,a4
+    80001cf8:	7b84                	ld	s1,48(a5)
   pop_off();
-    80001bc6:	fffff097          	auipc	ra,0xfffff
-    80001bca:	072080e7          	jalr	114(ra) # 80000c38 <pop_off>
+    80001cfa:	fffff097          	auipc	ra,0xfffff
+    80001cfe:	f3e080e7          	jalr	-194(ra) # 80000c38 <pop_off>
   return p;
 }
-    80001bce:	8526                	mv	a0,s1
-    80001bd0:	60e2                	ld	ra,24(sp)
-    80001bd2:	6442                	ld	s0,16(sp)
-    80001bd4:	64a2                	ld	s1,8(sp)
-    80001bd6:	6105                	addi	sp,sp,32
-    80001bd8:	8082                	ret
+    80001d02:	8526                	mv	a0,s1
+    80001d04:	60e2                	ld	ra,24(sp)
+    80001d06:	6442                	ld	s0,16(sp)
+    80001d08:	64a2                	ld	s1,8(sp)
+    80001d0a:	6105                	addi	sp,sp,32
+    80001d0c:	8082                	ret
 
-0000000080001bda <forkret>:
+0000000080001d0e <forkret>:
 
 // A fork child's very first scheduling by scheduler()
 // will swtch to forkret.
 void
 forkret(void)
 {
-    80001bda:	1141                	addi	sp,sp,-16
-    80001bdc:	e406                	sd	ra,8(sp)
-    80001bde:	e022                	sd	s0,0(sp)
-    80001be0:	0800                	addi	s0,sp,16
+    80001d0e:	1141                	addi	sp,sp,-16
+    80001d10:	e406                	sd	ra,8(sp)
+    80001d12:	e022                	sd	s0,0(sp)
+    80001d14:	0800                	addi	s0,sp,16
   static int first = 1;
 
   // Still holding p->lock from scheduler.
   release(&myproc()->lock);
-    80001be2:	00000097          	auipc	ra,0x0
-    80001be6:	fb2080e7          	jalr	-78(ra) # 80001b94 <myproc>
-    80001bea:	fffff097          	auipc	ra,0xfffff
-    80001bee:	0ae080e7          	jalr	174(ra) # 80000c98 <release>
+    80001d16:	00000097          	auipc	ra,0x0
+    80001d1a:	fba080e7          	jalr	-70(ra) # 80001cd0 <myproc>
+    80001d1e:	fffff097          	auipc	ra,0xfffff
+    80001d22:	f7a080e7          	jalr	-134(ra) # 80000c98 <release>
 
   if (first) {
-    80001bf2:	00008797          	auipc	a5,0x8
-    80001bf6:	02e7a783          	lw	a5,46(a5) # 80009c20 <first.1783>
-    80001bfa:	eb89                	bnez	a5,80001c0c <forkret+0x32>
+    80001d26:	00007797          	auipc	a5,0x7
+    80001d2a:	b8a7a783          	lw	a5,-1142(a5) # 800088b0 <first.1750>
+    80001d2e:	eb89                	bnez	a5,80001d40 <forkret+0x32>
     // be run from main().
     first = 0;
     fsinit(ROOTDEV);
   }
 
   usertrapret();
-    80001bfc:	00002097          	auipc	ra,0x2
-    80001c00:	0c6080e7          	jalr	198(ra) # 80003cc2 <usertrapret>
+    80001d30:	00001097          	auipc	ra,0x1
+    80001d34:	efe080e7          	jalr	-258(ra) # 80002c2e <usertrapret>
 }
-    80001c04:	60a2                	ld	ra,8(sp)
-    80001c06:	6402                	ld	s0,0(sp)
-    80001c08:	0141                	addi	sp,sp,16
-    80001c0a:	8082                	ret
+    80001d38:	60a2                	ld	ra,8(sp)
+    80001d3a:	6402                	ld	s0,0(sp)
+    80001d3c:	0141                	addi	sp,sp,16
+    80001d3e:	8082                	ret
     first = 0;
-    80001c0c:	00008797          	auipc	a5,0x8
-    80001c10:	0007aa23          	sw	zero,20(a5) # 80009c20 <first.1783>
+    80001d40:	00007797          	auipc	a5,0x7
+    80001d44:	b607a823          	sw	zero,-1168(a5) # 800088b0 <first.1750>
     fsinit(ROOTDEV);
-    80001c14:	4505                	li	a0,1
-    80001c16:	00003097          	auipc	ra,0x3
-    80001c1a:	ea8080e7          	jalr	-344(ra) # 80004abe <fsinit>
-    80001c1e:	bff9                	j	80001bfc <forkret+0x22>
+    80001d48:	4505                	li	a0,1
+    80001d4a:	00002097          	auipc	ra,0x2
+    80001d4e:	c70080e7          	jalr	-912(ra) # 800039ba <fsinit>
+    80001d52:	bff9                	j	80001d30 <forkret+0x22>
 
-0000000080001c20 <allocpid>:
+0000000080001d54 <allocpid>:
 allocpid() {
-    80001c20:	1101                	addi	sp,sp,-32
-    80001c22:	ec06                	sd	ra,24(sp)
-    80001c24:	e822                	sd	s0,16(sp)
-    80001c26:	e426                	sd	s1,8(sp)
-    80001c28:	1000                	addi	s0,sp,32
-  pid = nextpid;
-    80001c2a:	00008517          	auipc	a0,0x8
-    80001c2e:	ffa50513          	addi	a0,a0,-6 # 80009c24 <nextpid>
-    80001c32:	4104                	lw	s1,0(a0)
-  if (cas(&nextpid, pid, (nextpid + 1)) == 0)
-    80001c34:	0014861b          	addiw	a2,s1,1
-    80001c38:	85a6                	mv	a1,s1
-    80001c3a:	00006097          	auipc	ra,0x6
-    80001c3e:	c8c080e7          	jalr	-884(ra) # 800078c6 <cas>
-    80001c42:	e519                	bnez	a0,80001c50 <allocpid+0x30>
-}
-    80001c44:	8526                	mv	a0,s1
-    80001c46:	60e2                	ld	ra,24(sp)
-    80001c48:	6442                	ld	s0,16(sp)
-    80001c4a:	64a2                	ld	s1,8(sp)
-    80001c4c:	6105                	addi	sp,sp,32
-    80001c4e:	8082                	ret
-  return allocpid();
-    80001c50:	00000097          	auipc	ra,0x0
-    80001c54:	fd0080e7          	jalr	-48(ra) # 80001c20 <allocpid>
-    80001c58:	84aa                	mv	s1,a0
-    80001c5a:	b7ed                	j	80001c44 <allocpid+0x24>
-
-0000000080001c5c <proc_pagetable>:
-{
-    80001c5c:	1101                	addi	sp,sp,-32
-    80001c5e:	ec06                	sd	ra,24(sp)
-    80001c60:	e822                	sd	s0,16(sp)
-    80001c62:	e426                	sd	s1,8(sp)
-    80001c64:	e04a                	sd	s2,0(sp)
-    80001c66:	1000                	addi	s0,sp,32
-    80001c68:	892a                	mv	s2,a0
+    80001d54:	1101                	addi	sp,sp,-32
+    80001d56:	ec06                	sd	ra,24(sp)
+    80001d58:	e822                	sd	s0,16(sp)
+    80001d5a:	e426                	sd	s1,8(sp)
+    80001d5c:	e04a                	sd	s2,0(sp)
+    80001d5e:	1000                	addi	s0,sp,32
+    pid = nextpid;
+    80001d60:	00007917          	auipc	s2,0x7
+    80001d64:	b5490913          	addi	s2,s2,-1196 # 800088b4 <nextpid>
+    80001d68:	00092483          	lw	s1,0(s2)
+  while (cas(&nextpid, pid, nextpid + 1));
+    80001d6c:	0014861b          	addiw	a2,s1,1
+    80001d70:	85a6                	mv	a1,s1
+    80001d72:	854a                	mv	a0,s2
+    80001d74:	00005097          	auipc	ra,0x5
+    80001d78:	a52080e7          	jalr	-1454(ra) # 800067c6 <cas>
+    80001d7c:	2501                	sext.w	a0,a0
+    80001d7e:	f56d                	bnez	a0,80001d68 <allocpid+0x14>
+}
+    80001d80:	8526                	mv	a0,s1
+    80001d82:	60e2                	ld	ra,24(sp)
+    80001d84:	6442                	ld	s0,16(sp)
+    80001d86:	64a2                	ld	s1,8(sp)
+    80001d88:	6902                	ld	s2,0(sp)
+    80001d8a:	6105                	addi	sp,sp,32
+    80001d8c:	8082                	ret
+
+0000000080001d8e <proc_pagetable>:
+{
+    80001d8e:	1101                	addi	sp,sp,-32
+    80001d90:	ec06                	sd	ra,24(sp)
+    80001d92:	e822                	sd	s0,16(sp)
+    80001d94:	e426                	sd	s1,8(sp)
+    80001d96:	e04a                	sd	s2,0(sp)
+    80001d98:	1000                	addi	s0,sp,32
+    80001d9a:	892a                	mv	s2,a0
   pagetable = uvmcreate();
-    80001c6a:	fffff097          	auipc	ra,0xfffff
-    80001c6e:	6d8080e7          	jalr	1752(ra) # 80001342 <uvmcreate>
-    80001c72:	84aa                	mv	s1,a0
+    80001d9c:	fffff097          	auipc	ra,0xfffff
+    80001da0:	59e080e7          	jalr	1438(ra) # 8000133a <uvmcreate>
+    80001da4:	84aa                	mv	s1,a0
   if(pagetable == 0)
-    80001c74:	c121                	beqz	a0,80001cb4 <proc_pagetable+0x58>
+    80001da6:	c121                	beqz	a0,80001de6 <proc_pagetable+0x58>
   if(mappages(pagetable, TRAMPOLINE, PGSIZE,
-    80001c76:	4729                	li	a4,10
-    80001c78:	00006697          	auipc	a3,0x6
-    80001c7c:	38868693          	addi	a3,a3,904 # 80008000 <_trampoline>
-    80001c80:	6605                	lui	a2,0x1
-    80001c82:	040005b7          	lui	a1,0x4000
-    80001c86:	15fd                	addi	a1,a1,-1
-    80001c88:	05b2                	slli	a1,a1,0xc
-    80001c8a:	fffff097          	auipc	ra,0xfffff
-    80001c8e:	42e080e7          	jalr	1070(ra) # 800010b8 <mappages>
-    80001c92:	02054863          	bltz	a0,80001cc2 <proc_pagetable+0x66>
+    80001da8:	4729                	li	a4,10
+    80001daa:	00005697          	auipc	a3,0x5
+    80001dae:	25668693          	addi	a3,a3,598 # 80007000 <_trampoline>
+    80001db2:	6605                	lui	a2,0x1
+    80001db4:	040005b7          	lui	a1,0x4000
+    80001db8:	15fd                	addi	a1,a1,-1
+    80001dba:	05b2                	slli	a1,a1,0xc
+    80001dbc:	fffff097          	auipc	ra,0xfffff
+    80001dc0:	2f4080e7          	jalr	756(ra) # 800010b0 <mappages>
+    80001dc4:	02054863          	bltz	a0,80001df4 <proc_pagetable+0x66>
   if(mappages(pagetable, TRAPFRAME, PGSIZE,
-    80001c96:	4719                	li	a4,6
-    80001c98:	08893683          	ld	a3,136(s2) # 4000088 <_entry-0x7bffff78>
-    80001c9c:	6605                	lui	a2,0x1
-    80001c9e:	020005b7          	lui	a1,0x2000
-    80001ca2:	15fd                	addi	a1,a1,-1
-    80001ca4:	05b6                	slli	a1,a1,0xd
-    80001ca6:	8526                	mv	a0,s1
-    80001ca8:	fffff097          	auipc	ra,0xfffff
-    80001cac:	410080e7          	jalr	1040(ra) # 800010b8 <mappages>
-    80001cb0:	02054163          	bltz	a0,80001cd2 <proc_pagetable+0x76>
-}
-    80001cb4:	8526                	mv	a0,s1
-    80001cb6:	60e2                	ld	ra,24(sp)
-    80001cb8:	6442                	ld	s0,16(sp)
-    80001cba:	64a2                	ld	s1,8(sp)
-    80001cbc:	6902                	ld	s2,0(sp)
-    80001cbe:	6105                	addi	sp,sp,32
-    80001cc0:	8082                	ret
+    80001dc8:	4719                	li	a4,6
+    80001dca:	05893683          	ld	a3,88(s2)
+    80001dce:	6605                	lui	a2,0x1
+    80001dd0:	020005b7          	lui	a1,0x2000
+    80001dd4:	15fd                	addi	a1,a1,-1
+    80001dd6:	05b6                	slli	a1,a1,0xd
+    80001dd8:	8526                	mv	a0,s1
+    80001dda:	fffff097          	auipc	ra,0xfffff
+    80001dde:	2d6080e7          	jalr	726(ra) # 800010b0 <mappages>
+    80001de2:	02054163          	bltz	a0,80001e04 <proc_pagetable+0x76>
+}
+    80001de6:	8526                	mv	a0,s1
+    80001de8:	60e2                	ld	ra,24(sp)
+    80001dea:	6442                	ld	s0,16(sp)
+    80001dec:	64a2                	ld	s1,8(sp)
+    80001dee:	6902                	ld	s2,0(sp)
+    80001df0:	6105                	addi	sp,sp,32
+    80001df2:	8082                	ret
     uvmfree(pagetable, 0);
-    80001cc2:	4581                	li	a1,0
-    80001cc4:	8526                	mv	a0,s1
-    80001cc6:	00000097          	auipc	ra,0x0
-    80001cca:	878080e7          	jalr	-1928(ra) # 8000153e <uvmfree>
+    80001df4:	4581                	li	a1,0
+    80001df6:	8526                	mv	a0,s1
+    80001df8:	fffff097          	auipc	ra,0xfffff
+    80001dfc:	73e080e7          	jalr	1854(ra) # 80001536 <uvmfree>
     return 0;
-    80001cce:	4481                	li	s1,0
-    80001cd0:	b7d5                	j	80001cb4 <proc_pagetable+0x58>
+    80001e00:	4481                	li	s1,0
+    80001e02:	b7d5                	j	80001de6 <proc_pagetable+0x58>
     uvmunmap(pagetable, TRAMPOLINE, 1, 0);
-    80001cd2:	4681                	li	a3,0
-    80001cd4:	4605                	li	a2,1
-    80001cd6:	040005b7          	lui	a1,0x4000
-    80001cda:	15fd                	addi	a1,a1,-1
-    80001cdc:	05b2                	slli	a1,a1,0xc
-    80001cde:	8526                	mv	a0,s1
-    80001ce0:	fffff097          	auipc	ra,0xfffff
-    80001ce4:	59e080e7          	jalr	1438(ra) # 8000127e <uvmunmap>
+    80001e04:	4681                	li	a3,0
+    80001e06:	4605                	li	a2,1
+    80001e08:	040005b7          	lui	a1,0x4000
+    80001e0c:	15fd                	addi	a1,a1,-1
+    80001e0e:	05b2                	slli	a1,a1,0xc
+    80001e10:	8526                	mv	a0,s1
+    80001e12:	fffff097          	auipc	ra,0xfffff
+    80001e16:	464080e7          	jalr	1124(ra) # 80001276 <uvmunmap>
     uvmfree(pagetable, 0);
-    80001ce8:	4581                	li	a1,0
-    80001cea:	8526                	mv	a0,s1
-    80001cec:	00000097          	auipc	ra,0x0
-    80001cf0:	852080e7          	jalr	-1966(ra) # 8000153e <uvmfree>
+    80001e1a:	4581                	li	a1,0
+    80001e1c:	8526                	mv	a0,s1
+    80001e1e:	fffff097          	auipc	ra,0xfffff
+    80001e22:	718080e7          	jalr	1816(ra) # 80001536 <uvmfree>
     return 0;
-    80001cf4:	4481                	li	s1,0
-    80001cf6:	bf7d                	j	80001cb4 <proc_pagetable+0x58>
-
-0000000080001cf8 <proc_freepagetable>:
-{
-    80001cf8:	1101                	addi	sp,sp,-32
-    80001cfa:	ec06                	sd	ra,24(sp)
-    80001cfc:	e822                	sd	s0,16(sp)
-    80001cfe:	e426                	sd	s1,8(sp)
-    80001d00:	e04a                	sd	s2,0(sp)
-    80001d02:	1000                	addi	s0,sp,32
-    80001d04:	84aa                	mv	s1,a0
-    80001d06:	892e                	mv	s2,a1
+    80001e26:	4481                	li	s1,0
+    80001e28:	bf7d                	j	80001de6 <proc_pagetable+0x58>
+
+0000000080001e2a <proc_freepagetable>:
+{
+    80001e2a:	1101                	addi	sp,sp,-32
+    80001e2c:	ec06                	sd	ra,24(sp)
+    80001e2e:	e822                	sd	s0,16(sp)
+    80001e30:	e426                	sd	s1,8(sp)
+    80001e32:	e04a                	sd	s2,0(sp)
+    80001e34:	1000                	addi	s0,sp,32
+    80001e36:	84aa                	mv	s1,a0
+    80001e38:	892e                	mv	s2,a1
   uvmunmap(pagetable, TRAMPOLINE, 1, 0);
-    80001d08:	4681                	li	a3,0
-    80001d0a:	4605                	li	a2,1
-    80001d0c:	040005b7          	lui	a1,0x4000
-    80001d10:	15fd                	addi	a1,a1,-1
-    80001d12:	05b2                	slli	a1,a1,0xc
-    80001d14:	fffff097          	auipc	ra,0xfffff
-    80001d18:	56a080e7          	jalr	1386(ra) # 8000127e <uvmunmap>
+    80001e3a:	4681                	li	a3,0
+    80001e3c:	4605                	li	a2,1
+    80001e3e:	040005b7          	lui	a1,0x4000
+    80001e42:	15fd                	addi	a1,a1,-1
+    80001e44:	05b2                	slli	a1,a1,0xc
+    80001e46:	fffff097          	auipc	ra,0xfffff
+    80001e4a:	430080e7          	jalr	1072(ra) # 80001276 <uvmunmap>
   uvmunmap(pagetable, TRAPFRAME, 1, 0);
-    80001d1c:	4681                	li	a3,0
-    80001d1e:	4605                	li	a2,1
-    80001d20:	020005b7          	lui	a1,0x2000
-    80001d24:	15fd                	addi	a1,a1,-1
-    80001d26:	05b6                	slli	a1,a1,0xd
-    80001d28:	8526                	mv	a0,s1
-    80001d2a:	fffff097          	auipc	ra,0xfffff
-    80001d2e:	554080e7          	jalr	1364(ra) # 8000127e <uvmunmap>
+    80001e4e:	4681                	li	a3,0
+    80001e50:	4605                	li	a2,1
+    80001e52:	020005b7          	lui	a1,0x2000
+    80001e56:	15fd                	addi	a1,a1,-1
+    80001e58:	05b6                	slli	a1,a1,0xd
+    80001e5a:	8526                	mv	a0,s1
+    80001e5c:	fffff097          	auipc	ra,0xfffff
+    80001e60:	41a080e7          	jalr	1050(ra) # 80001276 <uvmunmap>
   uvmfree(pagetable, sz);
-    80001d32:	85ca                	mv	a1,s2
-    80001d34:	8526                	mv	a0,s1
-    80001d36:	00000097          	auipc	ra,0x0
-    80001d3a:	808080e7          	jalr	-2040(ra) # 8000153e <uvmfree>
-}
-    80001d3e:	60e2                	ld	ra,24(sp)
-    80001d40:	6442                	ld	s0,16(sp)
-    80001d42:	64a2                	ld	s1,8(sp)
-    80001d44:	6902                	ld	s2,0(sp)
-    80001d46:	6105                	addi	sp,sp,32
-    80001d48:	8082                	ret
-
-0000000080001d4a <freeproc>:
-{
-    80001d4a:	1101                	addi	sp,sp,-32
-    80001d4c:	ec06                	sd	ra,24(sp)
-    80001d4e:	e822                	sd	s0,16(sp)
-    80001d50:	e426                	sd	s1,8(sp)
-    80001d52:	1000                	addi	s0,sp,32
-    80001d54:	84aa                	mv	s1,a0
+    80001e64:	85ca                	mv	a1,s2
+    80001e66:	8526                	mv	a0,s1
+    80001e68:	fffff097          	auipc	ra,0xfffff
+    80001e6c:	6ce080e7          	jalr	1742(ra) # 80001536 <uvmfree>
+}
+    80001e70:	60e2                	ld	ra,24(sp)
+    80001e72:	6442                	ld	s0,16(sp)
+    80001e74:	64a2                	ld	s1,8(sp)
+    80001e76:	6902                	ld	s2,0(sp)
+    80001e78:	6105                	addi	sp,sp,32
+    80001e7a:	8082                	ret
+
+0000000080001e7c <freeproc>:
+{
+    80001e7c:	1101                	addi	sp,sp,-32
+    80001e7e:	ec06                	sd	ra,24(sp)
+    80001e80:	e822                	sd	s0,16(sp)
+    80001e82:	e426                	sd	s1,8(sp)
+    80001e84:	1000                	addi	s0,sp,32
+    80001e86:	84aa                	mv	s1,a0
   if(p->trapframe)
-    80001d56:	6548                	ld	a0,136(a0)
-    80001d58:	c509                	beqz	a0,80001d62 <freeproc+0x18>
+    80001e88:	6d28                	ld	a0,88(a0)
+    80001e8a:	c509                	beqz	a0,80001e94 <freeproc+0x18>
     kfree((void*)p->trapframe);
-    80001d5a:	fffff097          	auipc	ra,0xfffff
-    80001d5e:	c9e080e7          	jalr	-866(ra) # 800009f8 <kfree>
+    80001e8c:	fffff097          	auipc	ra,0xfffff
+    80001e90:	b6c080e7          	jalr	-1172(ra) # 800009f8 <kfree>
   p->trapframe = 0;
-    80001d62:	0804b423          	sd	zero,136(s1)
+    80001e94:	0404bc23          	sd	zero,88(s1)
   if(p->pagetable)
-    80001d66:	60c8                	ld	a0,128(s1)
-    80001d68:	c511                	beqz	a0,80001d74 <freeproc+0x2a>
+    80001e98:	68a8                	ld	a0,80(s1)
+    80001e9a:	c511                	beqz	a0,80001ea6 <freeproc+0x2a>
     proc_freepagetable(p->pagetable, p->sz);
-    80001d6a:	7cac                	ld	a1,120(s1)
-    80001d6c:	00000097          	auipc	ra,0x0
-    80001d70:	f8c080e7          	jalr	-116(ra) # 80001cf8 <proc_freepagetable>
+    80001e9c:	64ac                	ld	a1,72(s1)
+    80001e9e:	00000097          	auipc	ra,0x0
+    80001ea2:	f8c080e7          	jalr	-116(ra) # 80001e2a <proc_freepagetable>
   p->pagetable = 0;
-    80001d74:	0804b023          	sd	zero,128(s1)
+    80001ea6:	0404b823          	sd	zero,80(s1)
   p->sz = 0;
-    80001d78:	0604bc23          	sd	zero,120(s1)
+    80001eaa:	0404b423          	sd	zero,72(s1)
   p->pid = 0;
-    80001d7c:	0204a823          	sw	zero,48(s1)
+    80001eae:	0204a823          	sw	zero,48(s1)
   p->parent = 0;
-    80001d80:	0604b423          	sd	zero,104(s1)
+    80001eb2:	0204bc23          	sd	zero,56(s1)
   p->name[0] = 0;
-    80001d84:	18048423          	sb	zero,392(s1)
+    80001eb6:	14048c23          	sb	zero,344(s1)
   p->chan = 0;
-    80001d88:	0204b023          	sd	zero,32(s1)
+    80001eba:	0204b023          	sd	zero,32(s1)
   p->killed = 0;
-    80001d8c:	0204a423          	sw	zero,40(s1)
+    80001ebe:	0204a423          	sw	zero,40(s1)
   p->xstate = 0;
-    80001d90:	0204a623          	sw	zero,44(s1)
+    80001ec2:	0204a623          	sw	zero,44(s1)
   p->state = UNUSED;
-    80001d94:	0004ac23          	sw	zero,24(s1)
-  printf("zombie");
-    80001d98:	00007517          	auipc	a0,0x7
-    80001d9c:	4e050513          	addi	a0,a0,1248 # 80009278 <digits+0x238>
-    80001da0:	ffffe097          	auipc	ra,0xffffe
-    80001da4:	7e8080e7          	jalr	2024(ra) # 80000588 <printf>
-  int res = remove_proc_from_list(p->proc_ind); 
-    80001da8:	4ce8                	lw	a0,92(s1)
-    80001daa:	00000097          	auipc	ra,0x0
-    80001dae:	b1a080e7          	jalr	-1254(ra) # 800018c4 <remove_proc_from_list>
-  if (res == 1)
-    80001db2:	4785                	li	a5,1
-    80001db4:	08f50563          	beq	a0,a5,80001e3e <freeproc+0xf4>
-  if (res == 2)
-    80001db8:	4789                	li	a5,2
-    80001dba:	0af50463          	beq	a0,a5,80001e62 <freeproc+0x118>
-  if (res == 3){
-    80001dbe:	478d                	li	a5,3
-    80001dc0:	04f51763          	bne	a0,a5,80001e0e <freeproc+0xc4>
-    zombie_list_tail = p->prev_proc;
-    80001dc4:	50fc                	lw	a5,100(s1)
-    80001dc6:	00008717          	auipc	a4,0x8
-    80001dca:	e6f72123          	sw	a5,-414(a4) # 80009c28 <zombie_list_tail>
-     if (proc[p->prev_proc].prev_proc == -1)
-    80001dce:	19800713          	li	a4,408
-    80001dd2:	02e786b3          	mul	a3,a5,a4
-    80001dd6:	00011717          	auipc	a4,0x11
-    80001dda:	99a70713          	addi	a4,a4,-1638 # 80012770 <proc>
-    80001dde:	9736                	add	a4,a4,a3
-    80001de0:	5374                	lw	a3,100(a4)
-    80001de2:	577d                	li	a4,-1
-    80001de4:	0ce68a63          	beq	a3,a4,80001eb8 <freeproc+0x16e>
-    proc[p->prev_proc].next_proc = -1;
-    80001de8:	19800713          	li	a4,408
-    80001dec:	02e787b3          	mul	a5,a5,a4
-    80001df0:	00011717          	auipc	a4,0x11
-    80001df4:	98070713          	addi	a4,a4,-1664 # 80012770 <proc>
-    80001df8:	97ba                	add	a5,a5,a4
-    80001dfa:	577d                	li	a4,-1
-    80001dfc:	d3b8                	sw	a4,96(a5)
-    printf("1 no tail");
-    80001dfe:	00007517          	auipc	a0,0x7
-    80001e02:	4aa50513          	addi	a0,a0,1194 # 800092a8 <digits+0x268>
-    80001e06:	ffffe097          	auipc	ra,0xffffe
-    80001e0a:	782080e7          	jalr	1922(ra) # 80000588 <printf>
-  p->next_proc = -1;
-    80001e0e:	57fd                	li	a5,-1
-    80001e10:	d0bc                	sw	a5,96(s1)
-  p->prev_proc = -1;
-    80001e12:	d0fc                	sw	a5,100(s1)
-  if (unused_list_tail != -1){
-    80001e14:	00008717          	auipc	a4,0x8
-    80001e18:	e1c72703          	lw	a4,-484(a4) # 80009c30 <unused_list_tail>
-    80001e1c:	57fd                	li	a5,-1
-    80001e1e:	0af71263          	bne	a4,a5,80001ec2 <freeproc+0x178>
-    unused_list_tail = unused_list_head = p->proc_ind;
-    80001e22:	4cfc                	lw	a5,92(s1)
-    80001e24:	00008717          	auipc	a4,0x8
-    80001e28:	e0f72823          	sw	a5,-496(a4) # 80009c34 <unused_list_head>
-    80001e2c:	00008717          	auipc	a4,0x8
-    80001e30:	e0f72223          	sw	a5,-508(a4) # 80009c30 <unused_list_tail>
-}
-    80001e34:	60e2                	ld	ra,24(sp)
-    80001e36:	6442                	ld	s0,16(sp)
-    80001e38:	64a2                	ld	s1,8(sp)
-    80001e3a:	6105                	addi	sp,sp,32
-    80001e3c:	8082                	ret
-    zombie_list_head = -1;
-    80001e3e:	57fd                	li	a5,-1
-    80001e40:	00008717          	auipc	a4,0x8
-    80001e44:	def72623          	sw	a5,-532(a4) # 80009c2c <zombie_list_head>
-    zombie_list_tail = -1;
-    80001e48:	00008717          	auipc	a4,0x8
-    80001e4c:	def72023          	sw	a5,-544(a4) # 80009c28 <zombie_list_tail>
-    printf("2 no head & tail");
-    80001e50:	00007517          	auipc	a0,0x7
-    80001e54:	43050513          	addi	a0,a0,1072 # 80009280 <digits+0x240>
-    80001e58:	ffffe097          	auipc	ra,0xffffe
-    80001e5c:	730080e7          	jalr	1840(ra) # 80000588 <printf>
-  if (res == 3){
-    80001e60:	b77d                	j	80001e0e <freeproc+0xc4>
-    zombie_list_head = p->next_proc;
-    80001e62:	50bc                	lw	a5,96(s1)
-    80001e64:	00008717          	auipc	a4,0x8
-    80001e68:	dcf72423          	sw	a5,-568(a4) # 80009c2c <zombie_list_head>
-    if (proc[p->next_proc].next_proc == -1)
-    80001e6c:	19800713          	li	a4,408
-    80001e70:	02e786b3          	mul	a3,a5,a4
-    80001e74:	00011717          	auipc	a4,0x11
-    80001e78:	8fc70713          	addi	a4,a4,-1796 # 80012770 <proc>
-    80001e7c:	9736                	add	a4,a4,a3
-    80001e7e:	5334                	lw	a3,96(a4)
-    80001e80:	577d                	li	a4,-1
-    80001e82:	02e68663          	beq	a3,a4,80001eae <freeproc+0x164>
-    proc[p->next_proc].prev_proc = -1;
-    80001e86:	19800713          	li	a4,408
-    80001e8a:	02e787b3          	mul	a5,a5,a4
-    80001e8e:	00011717          	auipc	a4,0x11
-    80001e92:	8e270713          	addi	a4,a4,-1822 # 80012770 <proc>
-    80001e96:	97ba                	add	a5,a5,a4
-    80001e98:	577d                	li	a4,-1
-    80001e9a:	d3f8                	sw	a4,100(a5)
-    printf("1 no head ");
-    80001e9c:	00007517          	auipc	a0,0x7
-    80001ea0:	3fc50513          	addi	a0,a0,1020 # 80009298 <digits+0x258>
-    80001ea4:	ffffe097          	auipc	ra,0xffffe
-    80001ea8:	6e4080e7          	jalr	1764(ra) # 80000588 <printf>
-  if (res == 3){
-    80001eac:	b78d                	j	80001e0e <freeproc+0xc4>
-      zombie_list_tail = p->next_proc;
-    80001eae:	00008717          	auipc	a4,0x8
-    80001eb2:	d6f72d23          	sw	a5,-646(a4) # 80009c28 <zombie_list_tail>
-    80001eb6:	bfc1                	j	80001e86 <freeproc+0x13c>
-      zombie_list_head = p->prev_proc;
-    80001eb8:	00008717          	auipc	a4,0x8
-    80001ebc:	d6f72a23          	sw	a5,-652(a4) # 80009c2c <zombie_list_head>
-    80001ec0:	b725                	j	80001de8 <freeproc+0x9e>
-    printf("unused");
-    80001ec2:	00007517          	auipc	a0,0x7
-    80001ec6:	3ae50513          	addi	a0,a0,942 # 80009270 <digits+0x230>
-    80001eca:	ffffe097          	auipc	ra,0xffffe
-    80001ece:	6be080e7          	jalr	1726(ra) # 80000588 <printf>
-    add_proc_to_list(unused_list_tail, p);
-    80001ed2:	85a6                	mv	a1,s1
-    80001ed4:	00008517          	auipc	a0,0x8
-    80001ed8:	d5c52503          	lw	a0,-676(a0) # 80009c30 <unused_list_tail>
-    80001edc:	00000097          	auipc	ra,0x0
-    80001ee0:	96a080e7          	jalr	-1686(ra) # 80001846 <add_proc_to_list>
-    if (unused_list_head == -1)
-    80001ee4:	00008717          	auipc	a4,0x8
-    80001ee8:	d5072703          	lw	a4,-688(a4) # 80009c34 <unused_list_head>
-    80001eec:	57fd                	li	a5,-1
-    80001eee:	00f70863          	beq	a4,a5,80001efe <freeproc+0x1b4>
-    unused_list_tail = p->proc_ind;
-    80001ef2:	4cfc                	lw	a5,92(s1)
-    80001ef4:	00008717          	auipc	a4,0x8
-    80001ef8:	d2f72e23          	sw	a5,-708(a4) # 80009c30 <unused_list_tail>
-    80001efc:	bf25                	j	80001e34 <freeproc+0xea>
-    unused_list_head = p->proc_ind;
-    80001efe:	4cfc                	lw	a5,92(s1)
-    80001f00:	00008717          	auipc	a4,0x8
-    80001f04:	d2f72a23          	sw	a5,-716(a4) # 80009c34 <unused_list_head>
-    80001f08:	b7ed                	j	80001ef2 <freeproc+0x1a8>
-
-0000000080001f0a <allocproc>:
-{
-    80001f0a:	7139                	addi	sp,sp,-64
-    80001f0c:	fc06                	sd	ra,56(sp)
-    80001f0e:	f822                	sd	s0,48(sp)
-    80001f10:	f426                	sd	s1,40(sp)
-    80001f12:	f04a                	sd	s2,32(sp)
-    80001f14:	ec4e                	sd	s3,24(sp)
-    80001f16:	e852                	sd	s4,16(sp)
-    80001f18:	e456                	sd	s5,8(sp)
-    80001f1a:	0080                	addi	s0,sp,64
-  while (unused_list_head > -1)
-    80001f1c:	00008917          	auipc	s2,0x8
-    80001f20:	d1892903          	lw	s2,-744(s2) # 80009c34 <unused_list_head>
-  return 0;
-    80001f24:	4981                	li	s3,0
-  while (unused_list_head > -1)
-    80001f26:	00095c63          	bgez	s2,80001f3e <allocproc+0x34>
-}
-    80001f2a:	854e                	mv	a0,s3
-    80001f2c:	70e2                	ld	ra,56(sp)
-    80001f2e:	7442                	ld	s0,48(sp)
-    80001f30:	74a2                	ld	s1,40(sp)
-    80001f32:	7902                	ld	s2,32(sp)
-    80001f34:	69e2                	ld	s3,24(sp)
-    80001f36:	6a42                	ld	s4,16(sp)
-    80001f38:	6aa2                	ld	s5,8(sp)
-    80001f3a:	6121                	addi	sp,sp,64
-    80001f3c:	8082                	ret
-    p = &proc[unused_list_head];
-    80001f3e:	19800a13          	li	s4,408
-    80001f42:	03490a33          	mul	s4,s2,s4
-    80001f46:	00011997          	auipc	s3,0x11
-    80001f4a:	82a98993          	addi	s3,s3,-2006 # 80012770 <proc>
-    80001f4e:	99d2                	add	s3,s3,s4
+    80001ec6:	0004ac23          	sw	zero,24(s1)
+  remove(remove_from_ZOMBIE_list, p); 
+    80001eca:	85a6                	mv	a1,s1
+    80001ecc:	00007517          	auipc	a0,0x7
+    80001ed0:	a1450513          	addi	a0,a0,-1516 # 800088e0 <zombie_list>
+    80001ed4:	00000097          	auipc	ra,0x0
+    80001ed8:	a7a080e7          	jalr	-1414(ra) # 8000194e <remove>
+  append(add_to_UNUSED_list, p); 
+    80001edc:	85a6                	mv	a1,s1
+    80001ede:	00007517          	auipc	a0,0x7
+    80001ee2:	a2250513          	addi	a0,a0,-1502 # 80008900 <unused_list>
+    80001ee6:	00000097          	auipc	ra,0x0
+    80001eea:	9a0080e7          	jalr	-1632(ra) # 80001886 <append>
+}
+    80001eee:	60e2                	ld	ra,24(sp)
+    80001ef0:	6442                	ld	s0,16(sp)
+    80001ef2:	64a2                	ld	s1,8(sp)
+    80001ef4:	6105                	addi	sp,sp,32
+    80001ef6:	8082                	ret
+
+0000000080001ef8 <allocproc>:
+{
+    80001ef8:	715d                	addi	sp,sp,-80
+    80001efa:	e486                	sd	ra,72(sp)
+    80001efc:	e0a2                	sd	s0,64(sp)
+    80001efe:	fc26                	sd	s1,56(sp)
+    80001f00:	f84a                	sd	s2,48(sp)
+    80001f02:	f44e                	sd	s3,40(sp)
+    80001f04:	f052                	sd	s4,32(sp)
+    80001f06:	ec56                	sd	s5,24(sp)
+    80001f08:	e85a                	sd	s6,16(sp)
+    80001f0a:	e45e                	sd	s7,8(sp)
+    80001f0c:	0880                	addi	s0,sp,80
+  while(!(unused_list.head == empty)) {
+    80001f0e:	00007917          	auipc	s2,0x7
+    80001f12:	9f292903          	lw	s2,-1550(s2) # 80008900 <unused_list>
+    80001f16:	57fd                	li	a5,-1
+    80001f18:	12f90d63          	beq	s2,a5,80002052 <allocproc+0x15a>
+    80001f1c:	19000a93          	li	s5,400
+    p = &proc[unused_list.head];
+    80001f20:	00010a17          	auipc	s4,0x10
+    80001f24:	8f0a0a13          	addi	s4,s4,-1808 # 80011810 <proc>
+  while(!(unused_list.head == empty)) {
+    80001f28:	00007b97          	auipc	s7,0x7
+    80001f2c:	998b8b93          	addi	s7,s7,-1640 # 800088c0 <sleeping_list>
+    80001f30:	5b7d                	li	s6,-1
+    p = &proc[unused_list.head];
+    80001f32:	035909b3          	mul	s3,s2,s5
+    80001f36:	014984b3          	add	s1,s3,s4
     acquire(&p->lock);
-    80001f50:	854e                	mv	a0,s3
-    80001f52:	fffff097          	auipc	ra,0xfffff
-    80001f56:	c92080e7          	jalr	-878(ra) # 80000be4 <acquire>
-    printf("unused");
-    80001f5a:	00007517          	auipc	a0,0x7
-    80001f5e:	31650513          	addi	a0,a0,790 # 80009270 <digits+0x230>
-    80001f62:	ffffe097          	auipc	ra,0xffffe
-    80001f66:	626080e7          	jalr	1574(ra) # 80000588 <printf>
-    int res = remove_proc_from_list(unused_list_head); 
-    80001f6a:	00008517          	auipc	a0,0x8
-    80001f6e:	cca52503          	lw	a0,-822(a0) # 80009c34 <unused_list_head>
-    80001f72:	00000097          	auipc	ra,0x0
-    80001f76:	952080e7          	jalr	-1710(ra) # 800018c4 <remove_proc_from_list>
-    if (res == 1)
-    80001f7a:	4785                	li	a5,1
-    80001f7c:	06f50163          	beq	a0,a5,80001fde <allocproc+0xd4>
-    if (res == 2)
-    80001f80:	4789                	li	a5,2
-    80001f82:	08f50063          	beq	a0,a5,80002002 <allocproc+0xf8>
-    if (res == 3)
-    80001f86:	478d                	li	a5,3
-    80001f88:	0cf51563          	bne	a0,a5,80002052 <allocproc+0x148>
-      unused_list_tail = p->prev_proc;      // Update tail.
-    80001f8c:	00010717          	auipc	a4,0x10
-    80001f90:	7e470713          	addi	a4,a4,2020 # 80012770 <proc>
-    80001f94:	19800693          	li	a3,408
-    80001f98:	02d907b3          	mul	a5,s2,a3
-    80001f9c:	97ba                	add	a5,a5,a4
-    80001f9e:	53fc                	lw	a5,100(a5)
-    80001fa0:	00008617          	auipc	a2,0x8
-    80001fa4:	c8f62823          	sw	a5,-880(a2) # 80009c30 <unused_list_tail>
-       if (proc[p->prev_proc].prev_proc == -1)
-    80001fa8:	02d786b3          	mul	a3,a5,a3
-    80001fac:	9736                	add	a4,a4,a3
-    80001fae:	5374                	lw	a3,100(a4)
-    80001fb0:	577d                	li	a4,-1
-    80001fb2:	14e68c63          	beq	a3,a4,8000210a <allocproc+0x200>
-      proc[p->prev_proc].next_proc = -1;    // Remove tail's next.
-    80001fb6:	19800713          	li	a4,408
-    80001fba:	02e787b3          	mul	a5,a5,a4
-    80001fbe:	00010717          	auipc	a4,0x10
-    80001fc2:	7b270713          	addi	a4,a4,1970 # 80012770 <proc>
-    80001fc6:	97ba                	add	a5,a5,a4
-    80001fc8:	577d                	li	a4,-1
-    80001fca:	d3b8                	sw	a4,96(a5)
-      printf("1 no tail");
-    80001fcc:	00007517          	auipc	a0,0x7
-    80001fd0:	2dc50513          	addi	a0,a0,732 # 800092a8 <digits+0x268>
-    80001fd4:	ffffe097          	auipc	ra,0xffffe
-    80001fd8:	5b4080e7          	jalr	1460(ra) # 80000588 <printf>
-    80001fdc:	a89d                	j	80002052 <allocproc+0x148>
-      unused_list_head = -1;
-    80001fde:	57fd                	li	a5,-1
-    80001fe0:	00008717          	auipc	a4,0x8
-    80001fe4:	c4f72a23          	sw	a5,-940(a4) # 80009c34 <unused_list_head>
-      unused_list_tail = -1;
-    80001fe8:	00008717          	auipc	a4,0x8
-    80001fec:	c4f72423          	sw	a5,-952(a4) # 80009c30 <unused_list_tail>
-      printf("1 no head & tail");
-    80001ff0:	00007517          	auipc	a0,0x7
-    80001ff4:	2c850513          	addi	a0,a0,712 # 800092b8 <digits+0x278>
-    80001ff8:	ffffe097          	auipc	ra,0xffffe
-    80001ffc:	590080e7          	jalr	1424(ra) # 80000588 <printf>
-    if (res == 3)
-    80002000:	a889                	j	80002052 <allocproc+0x148>
-      unused_list_head = p->next_proc;      // Update head.
-    80002002:	00010717          	auipc	a4,0x10
-    80002006:	76e70713          	addi	a4,a4,1902 # 80012770 <proc>
-    8000200a:	19800693          	li	a3,408
-    8000200e:	02d907b3          	mul	a5,s2,a3
-    80002012:	97ba                	add	a5,a5,a4
-    80002014:	53bc                	lw	a5,96(a5)
-    80002016:	00008617          	auipc	a2,0x8
-    8000201a:	c0f62f23          	sw	a5,-994(a2) # 80009c34 <unused_list_head>
-      if (proc[p->next_proc].next_proc == -1)
-    8000201e:	02d786b3          	mul	a3,a5,a3
-    80002022:	9736                	add	a4,a4,a3
-    80002024:	5334                	lw	a3,96(a4)
-    80002026:	577d                	li	a4,-1
-    80002028:	0ce68c63          	beq	a3,a4,80002100 <allocproc+0x1f6>
-      proc[p->next_proc].prev_proc = -1;    // Remove head's prev.
-    8000202c:	19800713          	li	a4,408
-    80002030:	02e787b3          	mul	a5,a5,a4
-    80002034:	00010717          	auipc	a4,0x10
-    80002038:	73c70713          	addi	a4,a4,1852 # 80012770 <proc>
-    8000203c:	97ba                	add	a5,a5,a4
-    8000203e:	577d                	li	a4,-1
-    80002040:	d3f8                	sw	a4,100(a5)
-      printf("1 no head");
-    80002042:	00007517          	auipc	a0,0x7
-    80002046:	28e50513          	addi	a0,a0,654 # 800092d0 <digits+0x290>
-    8000204a:	ffffe097          	auipc	ra,0xffffe
-    8000204e:	53e080e7          	jalr	1342(ra) # 80000588 <printf>
-    p->prev_proc = -1;
-    80002052:	19800493          	li	s1,408
-    80002056:	029907b3          	mul	a5,s2,s1
-    8000205a:	00010497          	auipc	s1,0x10
-    8000205e:	71648493          	addi	s1,s1,1814 # 80012770 <proc>
-    80002062:	94be                	add	s1,s1,a5
-    80002064:	57fd                	li	a5,-1
-    80002066:	d0fc                	sw	a5,100(s1)
-    p->next_proc = -1;
-    80002068:	d0bc                	sw	a5,96(s1)
+    80001f3a:	8526                	mv	a0,s1
+    80001f3c:	fffff097          	auipc	ra,0xfffff
+    80001f40:	ca8080e7          	jalr	-856(ra) # 80000be4 <acquire>
+    if(p->state == UNUSED) {
+    80001f44:	4c9c                	lw	a5,24(s1)
+    80001f46:	c79d                	beqz	a5,80001f74 <allocproc+0x7c>
+      release(&p->lock);
+    80001f48:	8526                	mv	a0,s1
+    80001f4a:	fffff097          	auipc	ra,0xfffff
+    80001f4e:	d4e080e7          	jalr	-690(ra) # 80000c98 <release>
+  while(!(unused_list.head == empty)) {
+    80001f52:	040ba903          	lw	s2,64(s7)
+    80001f56:	fd691ee3          	bne	s2,s6,80001f32 <allocproc+0x3a>
+  return 0;
+    80001f5a:	4481                	li	s1,0
+}
+    80001f5c:	8526                	mv	a0,s1
+    80001f5e:	60a6                	ld	ra,72(sp)
+    80001f60:	6406                	ld	s0,64(sp)
+    80001f62:	74e2                	ld	s1,56(sp)
+    80001f64:	7942                	ld	s2,48(sp)
+    80001f66:	79a2                	ld	s3,40(sp)
+    80001f68:	7a02                	ld	s4,32(sp)
+    80001f6a:	6ae2                	ld	s5,24(sp)
+    80001f6c:	6b42                	ld	s6,16(sp)
+    80001f6e:	6ba2                	ld	s7,8(sp)
+    80001f70:	6161                	addi	sp,sp,80
+    80001f72:	8082                	ret
+      remove(remove_from_unused_list, p); 
+    80001f74:	85a6                	mv	a1,s1
+    80001f76:	00007517          	auipc	a0,0x7
+    80001f7a:	98a50513          	addi	a0,a0,-1654 # 80008900 <unused_list>
+    80001f7e:	00000097          	auipc	ra,0x0
+    80001f82:	9d0080e7          	jalr	-1584(ra) # 8000194e <remove>
   p->pid = allocpid();
-    8000206a:	00000097          	auipc	ra,0x0
-    8000206e:	bb6080e7          	jalr	-1098(ra) # 80001c20 <allocpid>
-    80002072:	d888                	sw	a0,48(s1)
+    80001f86:	00000097          	auipc	ra,0x0
+    80001f8a:	dce080e7          	jalr	-562(ra) # 80001d54 <allocpid>
+    80001f8e:	19000a13          	li	s4,400
+    80001f92:	034907b3          	mul	a5,s2,s4
+    80001f96:	00010a17          	auipc	s4,0x10
+    80001f9a:	87aa0a13          	addi	s4,s4,-1926 # 80011810 <proc>
+    80001f9e:	9a3e                	add	s4,s4,a5
+    80001fa0:	02aa2823          	sw	a0,48(s4)
   p->state = USED;
-    80002074:	4785                	li	a5,1
-    80002076:	cc9c                	sw	a5,24(s1)
-  p->mean_ticks = 0;
-    80002078:	0204aa23          	sw	zero,52(s1)
-  p->last_ticks = 0;
-    8000207c:	0204ac23          	sw	zero,56(s1)
-  p->paused = 0;
-    80002080:	0404a023          	sw	zero,64(s1)
-  p->sleeping_time = 0;
-    80002084:	0404a623          	sw	zero,76(s1)
-  p->running_time = 0;
-    80002088:	0404a223          	sw	zero,68(s1)
-  p->runnable_time = 0;
-    8000208c:	0404a423          	sw	zero,72(s1)
+    80001fa4:	4785                	li	a5,1
+    80001fa6:	00fa2c23          	sw	a5,24(s4)
+  p->last_cpu = -1;
+    80001faa:	57fd                	li	a5,-1
+    80001fac:	16fa2423          	sw	a5,360(s4)
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
-    80002090:	fffff097          	auipc	ra,0xfffff
-    80002094:	a64080e7          	jalr	-1436(ra) # 80000af4 <kalloc>
-    80002098:	8aaa                	mv	s5,a0
-    8000209a:	e4c8                	sd	a0,136(s1)
-    8000209c:	cd25                	beqz	a0,80002114 <allocproc+0x20a>
+    80001fb0:	fffff097          	auipc	ra,0xfffff
+    80001fb4:	b44080e7          	jalr	-1212(ra) # 80000af4 <kalloc>
+    80001fb8:	8aaa                	mv	s5,a0
+    80001fba:	04aa3c23          	sd	a0,88(s4)
+    80001fbe:	c135                	beqz	a0,80002022 <allocproc+0x12a>
   p->pagetable = proc_pagetable(p);
-    8000209e:	854e                	mv	a0,s3
-    800020a0:	00000097          	auipc	ra,0x0
-    800020a4:	bbc080e7          	jalr	-1092(ra) # 80001c5c <proc_pagetable>
-    800020a8:	84aa                	mv	s1,a0
-    800020aa:	19800793          	li	a5,408
-    800020ae:	02f90733          	mul	a4,s2,a5
-    800020b2:	00010797          	auipc	a5,0x10
-    800020b6:	6be78793          	addi	a5,a5,1726 # 80012770 <proc>
-    800020ba:	97ba                	add	a5,a5,a4
-    800020bc:	e3c8                	sd	a0,128(a5)
+    80001fc0:	8526                	mv	a0,s1
+    80001fc2:	00000097          	auipc	ra,0x0
+    80001fc6:	dcc080e7          	jalr	-564(ra) # 80001d8e <proc_pagetable>
+    80001fca:	8a2a                	mv	s4,a0
+    80001fcc:	19000793          	li	a5,400
+    80001fd0:	02f90733          	mul	a4,s2,a5
+    80001fd4:	00010797          	auipc	a5,0x10
+    80001fd8:	83c78793          	addi	a5,a5,-1988 # 80011810 <proc>
+    80001fdc:	97ba                	add	a5,a5,a4
+    80001fde:	eba8                	sd	a0,80(a5)
   if(p->pagetable == 0){
-    800020be:	c53d                	beqz	a0,8000212c <allocproc+0x222>
+    80001fe0:	cd29                	beqz	a0,8000203a <allocproc+0x142>
   memset(&p->context, 0, sizeof(p->context));
-    800020c0:	090a0513          	addi	a0,s4,144
-    800020c4:	00010497          	auipc	s1,0x10
-    800020c8:	6ac48493          	addi	s1,s1,1708 # 80012770 <proc>
-    800020cc:	07000613          	li	a2,112
-    800020d0:	4581                	li	a1,0
-    800020d2:	9526                	add	a0,a0,s1
-    800020d4:	fffff097          	auipc	ra,0xfffff
-    800020d8:	c0c080e7          	jalr	-1012(ra) # 80000ce0 <memset>
+    80001fe2:	06098513          	addi	a0,s3,96 # 1060 <_entry-0x7fffefa0>
+    80001fe6:	00010997          	auipc	s3,0x10
+    80001fea:	82a98993          	addi	s3,s3,-2006 # 80011810 <proc>
+    80001fee:	07000613          	li	a2,112
+    80001ff2:	4581                	li	a1,0
+    80001ff4:	954e                	add	a0,a0,s3
+    80001ff6:	fffff097          	auipc	ra,0xfffff
+    80001ffa:	cea080e7          	jalr	-790(ra) # 80000ce0 <memset>
   p->context.ra = (uint64)forkret;
-    800020dc:	19800793          	li	a5,408
-    800020e0:	02f90933          	mul	s2,s2,a5
-    800020e4:	9926                	add	s2,s2,s1
-    800020e6:	00000797          	auipc	a5,0x0
-    800020ea:	af478793          	addi	a5,a5,-1292 # 80001bda <forkret>
-    800020ee:	08f93823          	sd	a5,144(s2)
+    80001ffe:	19000793          	li	a5,400
+    80002002:	02f90933          	mul	s2,s2,a5
+    80002006:	994e                	add	s2,s2,s3
+    80002008:	00000797          	auipc	a5,0x0
+    8000200c:	d0678793          	addi	a5,a5,-762 # 80001d0e <forkret>
+    80002010:	06f93023          	sd	a5,96(s2)
   p->context.sp = p->kstack + PGSIZE;
-    800020f2:	07093783          	ld	a5,112(s2)
-    800020f6:	6705                	lui	a4,0x1
-    800020f8:	97ba                	add	a5,a5,a4
-    800020fa:	08f93c23          	sd	a5,152(s2)
+    80002014:	04093783          	ld	a5,64(s2)
+    80002018:	6705                	lui	a4,0x1
+    8000201a:	97ba                	add	a5,a5,a4
+    8000201c:	06f93423          	sd	a5,104(s2)
   return p;
-    800020fe:	b535                	j	80001f2a <allocproc+0x20>
-        unused_list_tail = p->next_proc;
-    80002100:	00008717          	auipc	a4,0x8
-    80002104:	b2f72823          	sw	a5,-1232(a4) # 80009c30 <unused_list_tail>
-    80002108:	b715                	j	8000202c <allocproc+0x122>
-        unused_list_head = p->prev_proc;
-    8000210a:	00008717          	auipc	a4,0x8
-    8000210e:	b2f72523          	sw	a5,-1238(a4) # 80009c34 <unused_list_head>
-    80002112:	b555                	j	80001fb6 <allocproc+0xac>
+    80002020:	bf35                	j	80001f5c <allocproc+0x64>
     freeproc(p);
-    80002114:	854e                	mv	a0,s3
-    80002116:	00000097          	auipc	ra,0x0
-    8000211a:	c34080e7          	jalr	-972(ra) # 80001d4a <freeproc>
+    80002022:	8526                	mv	a0,s1
+    80002024:	00000097          	auipc	ra,0x0
+    80002028:	e58080e7          	jalr	-424(ra) # 80001e7c <freeproc>
     release(&p->lock);
-    8000211e:	854e                	mv	a0,s3
-    80002120:	fffff097          	auipc	ra,0xfffff
-    80002124:	b78080e7          	jalr	-1160(ra) # 80000c98 <release>
+    8000202c:	8526                	mv	a0,s1
+    8000202e:	fffff097          	auipc	ra,0xfffff
+    80002032:	c6a080e7          	jalr	-918(ra) # 80000c98 <release>
     return 0;
-    80002128:	89d6                	mv	s3,s5
-    8000212a:	b501                	j	80001f2a <allocproc+0x20>
+    80002036:	84d6                	mv	s1,s5
+    80002038:	b715                	j	80001f5c <allocproc+0x64>
     freeproc(p);
-    8000212c:	854e                	mv	a0,s3
-    8000212e:	00000097          	auipc	ra,0x0
-    80002132:	c1c080e7          	jalr	-996(ra) # 80001d4a <freeproc>
+    8000203a:	8526                	mv	a0,s1
+    8000203c:	00000097          	auipc	ra,0x0
+    80002040:	e40080e7          	jalr	-448(ra) # 80001e7c <freeproc>
     release(&p->lock);
-    80002136:	854e                	mv	a0,s3
-    80002138:	fffff097          	auipc	ra,0xfffff
-    8000213c:	b60080e7          	jalr	-1184(ra) # 80000c98 <release>
+    80002044:	8526                	mv	a0,s1
+    80002046:	fffff097          	auipc	ra,0xfffff
+    8000204a:	c52080e7          	jalr	-942(ra) # 80000c98 <release>
     return 0;
-    80002140:	89a6                	mv	s3,s1
-    80002142:	b3e5                	j	80001f2a <allocproc+0x20>
-
-0000000080002144 <str_compare>:
-{
-    80002144:	1141                	addi	sp,sp,-16
-    80002146:	e422                	sd	s0,8(sp)
-    80002148:	0800                	addi	s0,sp,16
-      c1 = (unsigned char) *s1++;
-    8000214a:	0505                	addi	a0,a0,1
-    8000214c:	fff54783          	lbu	a5,-1(a0)
-      c2 = (unsigned char) *s2++;
-    80002150:	0585                	addi	a1,a1,1
-    80002152:	fff5c703          	lbu	a4,-1(a1) # 1ffffff <_entry-0x7e000001>
-      if (c1 == '\0')
-    80002156:	c791                	beqz	a5,80002162 <str_compare+0x1e>
-  while (c1 == c2);
-    80002158:	fee789e3          	beq	a5,a4,8000214a <str_compare+0x6>
-  return c1 - c2;
-    8000215c:	40e7853b          	subw	a0,a5,a4
-    80002160:	a019                	j	80002166 <str_compare+0x22>
-        return c1 - c2;
-    80002162:	40e0053b          	negw	a0,a4
-}
-    80002166:	6422                	ld	s0,8(sp)
-    80002168:	0141                	addi	sp,sp,16
-    8000216a:	8082                	ret
-
-000000008000216c <userinit>:
-{
-    8000216c:	1101                	addi	sp,sp,-32
-    8000216e:	ec06                	sd	ra,24(sp)
-    80002170:	e822                	sd	s0,16(sp)
-    80002172:	e426                	sd	s1,8(sp)
-    80002174:	e04a                	sd	s2,0(sp)
-    80002176:	1000                	addi	s0,sp,32
+    8000204e:	84d2                	mv	s1,s4
+    80002050:	b731                	j	80001f5c <allocproc+0x64>
+  return 0;
+    80002052:	4481                	li	s1,0
+    80002054:	b721                	j	80001f5c <allocproc+0x64>
+
+0000000080002056 <userinit>:
+{
+    80002056:	1101                	addi	sp,sp,-32
+    80002058:	ec06                	sd	ra,24(sp)
+    8000205a:	e822                	sd	s0,16(sp)
+    8000205c:	e426                	sd	s1,8(sp)
+    8000205e:	1000                	addi	s0,sp,32
   p = allocproc();
-    80002178:	00000097          	auipc	ra,0x0
-    8000217c:	d92080e7          	jalr	-622(ra) # 80001f0a <allocproc>
-    80002180:	84aa                	mv	s1,a0
+    80002060:	00000097          	auipc	ra,0x0
+    80002064:	e98080e7          	jalr	-360(ra) # 80001ef8 <allocproc>
+    80002068:	84aa                	mv	s1,a0
   initproc = p;
-    80002182:	00008797          	auipc	a5,0x8
-    80002186:	eaa7b323          	sd	a0,-346(a5) # 8000a028 <initproc>
+    8000206a:	00007797          	auipc	a5,0x7
+    8000206e:	fca7b323          	sd	a0,-58(a5) # 80009030 <initproc>
   uvminit(p->pagetable, initcode, sizeof(initcode));
-    8000218a:	03400613          	li	a2,52
-    8000218e:	00008597          	auipc	a1,0x8
-    80002192:	ac258593          	addi	a1,a1,-1342 # 80009c50 <initcode>
-    80002196:	6148                	ld	a0,128(a0)
-    80002198:	fffff097          	auipc	ra,0xfffff
-    8000219c:	1d8080e7          	jalr	472(ra) # 80001370 <uvminit>
+    80002072:	03400613          	li	a2,52
+    80002076:	00007597          	auipc	a1,0x7
+    8000207a:	8aa58593          	addi	a1,a1,-1878 # 80008920 <initcode>
+    8000207e:	6928                	ld	a0,80(a0)
+    80002080:	fffff097          	auipc	ra,0xfffff
+    80002084:	2e8080e7          	jalr	744(ra) # 80001368 <uvminit>
   p->sz = PGSIZE;
-    800021a0:	6785                	lui	a5,0x1
-    800021a2:	fcbc                	sd	a5,120(s1)
+    80002088:	6785                	lui	a5,0x1
+    8000208a:	e4bc                	sd	a5,72(s1)
   p->trapframe->epc = 0;      // user program counter
-    800021a4:	64d8                	ld	a4,136(s1)
-    800021a6:	00073c23          	sd	zero,24(a4)
+    8000208c:	6cb8                	ld	a4,88(s1)
+    8000208e:	00073c23          	sd	zero,24(a4) # 1018 <_entry-0x7fffefe8>
   p->trapframe->sp = PGSIZE;  // user stack pointer
-    800021aa:	64d8                	ld	a4,136(s1)
-    800021ac:	fb1c                	sd	a5,48(a4)
+    80002092:	6cb8                	ld	a4,88(s1)
+    80002094:	fb1c                	sd	a5,48(a4)
   safestrcpy(p->name, "initcode", sizeof(p->name));
-    800021ae:	4641                	li	a2,16
-    800021b0:	00007597          	auipc	a1,0x7
-    800021b4:	13058593          	addi	a1,a1,304 # 800092e0 <digits+0x2a0>
-    800021b8:	18848513          	addi	a0,s1,392
-    800021bc:	fffff097          	auipc	ra,0xfffff
-    800021c0:	c76080e7          	jalr	-906(ra) # 80000e32 <safestrcpy>
+    80002096:	4641                	li	a2,16
+    80002098:	00006597          	auipc	a1,0x6
+    8000209c:	1f058593          	addi	a1,a1,496 # 80008288 <digits+0x248>
+    800020a0:	15848513          	addi	a0,s1,344
+    800020a4:	fffff097          	auipc	ra,0xfffff
+    800020a8:	d8e080e7          	jalr	-626(ra) # 80000e32 <safestrcpy>
   p->cwd = namei("/");
-    800021c4:	00007517          	auipc	a0,0x7
-    800021c8:	12c50513          	addi	a0,a0,300 # 800092f0 <digits+0x2b0>
-    800021cc:	00003097          	auipc	ra,0x3
-    800021d0:	320080e7          	jalr	800(ra) # 800054ec <namei>
-    800021d4:	18a4b023          	sd	a0,384(s1)
+    800020ac:	00006517          	auipc	a0,0x6
+    800020b0:	1ec50513          	addi	a0,a0,492 # 80008298 <digits+0x258>
+    800020b4:	00002097          	auipc	ra,0x2
+    800020b8:	334080e7          	jalr	820(ra) # 800043e8 <namei>
+    800020bc:	14a4b823          	sd	a0,336(s1)
   p->state = RUNNABLE;
-    800021d8:	478d                	li	a5,3
-    800021da:	cc9c                	sw	a5,24(s1)
-  p->last_runnable_time = ticks;
-    800021dc:	00008797          	auipc	a5,0x8
-    800021e0:	e787a783          	lw	a5,-392(a5) # 8000a054 <ticks>
-    800021e4:	dcdc                	sw	a5,60(s1)
-    800021e6:	8792                	mv	a5,tp
-  int id = r_tp();
-    800021e8:	0007871b          	sext.w	a4,a5
-  c->cpu_id = id;
-    800021ec:	00010617          	auipc	a2,0x10
-    800021f0:	0d460613          	addi	a2,a2,212 # 800122c0 <cpus>
-    800021f4:	00371793          	slli	a5,a4,0x3
-    800021f8:	00e786b3          	add	a3,a5,a4
-    800021fc:	0692                	slli	a3,a3,0x4
-    800021fe:	96b2                	add	a3,a3,a2
-    80002200:	08e6a423          	sw	a4,136(a3)
-  if (mycpu()->runnable_list_head == -1)
-    80002204:	0806a703          	lw	a4,128(a3)
-    80002208:	57fd                	li	a5,-1
-    8000220a:	06f70c63          	beq	a4,a5,80002282 <userinit+0x116>
-    printf("runnable1");
-    8000220e:	00007517          	auipc	a0,0x7
-    80002212:	10a50513          	addi	a0,a0,266 # 80009318 <digits+0x2d8>
-    80002216:	ffffe097          	auipc	ra,0xffffe
-    8000221a:	372080e7          	jalr	882(ra) # 80000588 <printf>
-    8000221e:	8792                	mv	a5,tp
-  int id = r_tp();
-    80002220:	0007871b          	sext.w	a4,a5
-  c->cpu_id = id;
-    80002224:	00010917          	auipc	s2,0x10
-    80002228:	09c90913          	addi	s2,s2,156 # 800122c0 <cpus>
-    8000222c:	00371793          	slli	a5,a4,0x3
-    80002230:	00e786b3          	add	a3,a5,a4
-    80002234:	0692                	slli	a3,a3,0x4
-    80002236:	96ca                	add	a3,a3,s2
-    80002238:	08e6a423          	sw	a4,136(a3)
-    add_proc_to_list(mycpu()->runnable_list_tail, p);
-    8000223c:	85a6                	mv	a1,s1
-    8000223e:	0846a503          	lw	a0,132(a3)
-    80002242:	fffff097          	auipc	ra,0xfffff
-    80002246:	604080e7          	jalr	1540(ra) # 80001846 <add_proc_to_list>
-    8000224a:	8792                	mv	a5,tp
-  int id = r_tp();
-    8000224c:	0007871b          	sext.w	a4,a5
-  c->cpu_id = id;
-    80002250:	00371793          	slli	a5,a4,0x3
-    80002254:	00e786b3          	add	a3,a5,a4
-    80002258:	0692                	slli	a3,a3,0x4
-    8000225a:	96ca                	add	a3,a3,s2
-    8000225c:	08e6a423          	sw	a4,136(a3)
-    mycpu()->runnable_list_tail = p->proc_ind;
-    80002260:	4cf4                	lw	a3,92(s1)
-    80002262:	97ba                	add	a5,a5,a4
-    80002264:	0792                	slli	a5,a5,0x4
-    80002266:	993e                	add	s2,s2,a5
-    80002268:	08d92223          	sw	a3,132(s2)
+    800020c0:	478d                	li	a5,3
+    800020c2:	cc9c                	sw	a5,24(s1)
+  append(l, p);
+    800020c4:	85a6                	mv	a1,s1
+    800020c6:	0000f517          	auipc	a0,0xf
+    800020ca:	29250513          	addi	a0,a0,658 # 80011358 <cpus+0x88>
+    800020ce:	fffff097          	auipc	ra,0xfffff
+    800020d2:	7b8080e7          	jalr	1976(ra) # 80001886 <append>
   release(&p->lock);
-    8000226c:	8526                	mv	a0,s1
-    8000226e:	fffff097          	auipc	ra,0xfffff
-    80002272:	a2a080e7          	jalr	-1494(ra) # 80000c98 <release>
-}
-    80002276:	60e2                	ld	ra,24(sp)
-    80002278:	6442                	ld	s0,16(sp)
-    8000227a:	64a2                	ld	s1,8(sp)
-    8000227c:	6902                	ld	s2,0(sp)
-    8000227e:	6105                	addi	sp,sp,32
-    80002280:	8082                	ret
-    printf("init runnable: %d            1\n", p->proc_ind);
-    80002282:	4cec                	lw	a1,92(s1)
-    80002284:	00007517          	auipc	a0,0x7
-    80002288:	07450513          	addi	a0,a0,116 # 800092f8 <digits+0x2b8>
-    8000228c:	ffffe097          	auipc	ra,0xffffe
-    80002290:	2fc080e7          	jalr	764(ra) # 80000588 <printf>
-    80002294:	8792                	mv	a5,tp
-  int id = r_tp();
-    80002296:	0007869b          	sext.w	a3,a5
-  c->cpu_id = id;
-    8000229a:	00010717          	auipc	a4,0x10
-    8000229e:	02670713          	addi	a4,a4,38 # 800122c0 <cpus>
-    800022a2:	00369793          	slli	a5,a3,0x3
-    800022a6:	00d78633          	add	a2,a5,a3
-    800022aa:	0612                	slli	a2,a2,0x4
-    800022ac:	963a                	add	a2,a2,a4
-    800022ae:	08d62423          	sw	a3,136(a2)
-    mycpu()->runnable_list_head = p->proc_ind;
-    800022b2:	4cf0                	lw	a2,92(s1)
-    800022b4:	97b6                	add	a5,a5,a3
-    800022b6:	0792                	slli	a5,a5,0x4
-    800022b8:	97ba                	add	a5,a5,a4
-    800022ba:	08c7a023          	sw	a2,128(a5)
-    800022be:	8792                	mv	a5,tp
-  int id = r_tp();
-    800022c0:	0007869b          	sext.w	a3,a5
-  c->cpu_id = id;
-    800022c4:	00369793          	slli	a5,a3,0x3
-    800022c8:	00d78633          	add	a2,a5,a3
-    800022cc:	0612                	slli	a2,a2,0x4
-    800022ce:	963a                	add	a2,a2,a4
-    800022d0:	08d62423          	sw	a3,136(a2)
-    mycpu()->runnable_list_tail = p->proc_ind;
-    800022d4:	4cf0                	lw	a2,92(s1)
-    800022d6:	97b6                	add	a5,a5,a3
-    800022d8:	0792                	slli	a5,a5,0x4
-    800022da:	973e                	add	a4,a4,a5
-    800022dc:	08c72223          	sw	a2,132(a4)
-    800022e0:	b771                	j	8000226c <userinit+0x100>
-
-00000000800022e2 <growproc>:
-{
-    800022e2:	1101                	addi	sp,sp,-32
-    800022e4:	ec06                	sd	ra,24(sp)
-    800022e6:	e822                	sd	s0,16(sp)
-    800022e8:	e426                	sd	s1,8(sp)
-    800022ea:	e04a                	sd	s2,0(sp)
-    800022ec:	1000                	addi	s0,sp,32
-    800022ee:	84aa                	mv	s1,a0
+    800020d6:	8526                	mv	a0,s1
+    800020d8:	fffff097          	auipc	ra,0xfffff
+    800020dc:	bc0080e7          	jalr	-1088(ra) # 80000c98 <release>
+}
+    800020e0:	60e2                	ld	ra,24(sp)
+    800020e2:	6442                	ld	s0,16(sp)
+    800020e4:	64a2                	ld	s1,8(sp)
+    800020e6:	6105                	addi	sp,sp,32
+    800020e8:	8082                	ret
+
+00000000800020ea <growproc>:
+{
+    800020ea:	1101                	addi	sp,sp,-32
+    800020ec:	ec06                	sd	ra,24(sp)
+    800020ee:	e822                	sd	s0,16(sp)
+    800020f0:	e426                	sd	s1,8(sp)
+    800020f2:	e04a                	sd	s2,0(sp)
+    800020f4:	1000                	addi	s0,sp,32
+    800020f6:	84aa                	mv	s1,a0
   struct proc *p = myproc();
-    800022f0:	00000097          	auipc	ra,0x0
-    800022f4:	8a4080e7          	jalr	-1884(ra) # 80001b94 <myproc>
-    800022f8:	892a                	mv	s2,a0
+    800020f8:	00000097          	auipc	ra,0x0
+    800020fc:	bd8080e7          	jalr	-1064(ra) # 80001cd0 <myproc>
+    80002100:	892a                	mv	s2,a0
   sz = p->sz;
-    800022fa:	7d2c                	ld	a1,120(a0)
-    800022fc:	0005861b          	sext.w	a2,a1
+    80002102:	652c                	ld	a1,72(a0)
+    80002104:	0005861b          	sext.w	a2,a1
   if(n > 0){
-    80002300:	00904f63          	bgtz	s1,8000231e <growproc+0x3c>
+    80002108:	00904f63          	bgtz	s1,80002126 <growproc+0x3c>
   } else if(n < 0){
-    80002304:	0204cc63          	bltz	s1,8000233c <growproc+0x5a>
+    8000210c:	0204cc63          	bltz	s1,80002144 <growproc+0x5a>
   p->sz = sz;
-    80002308:	1602                	slli	a2,a2,0x20
-    8000230a:	9201                	srli	a2,a2,0x20
-    8000230c:	06c93c23          	sd	a2,120(s2)
+    80002110:	1602                	slli	a2,a2,0x20
+    80002112:	9201                	srli	a2,a2,0x20
+    80002114:	04c93423          	sd	a2,72(s2)
   return 0;
-    80002310:	4501                	li	a0,0
-}
-    80002312:	60e2                	ld	ra,24(sp)
-    80002314:	6442                	ld	s0,16(sp)
-    80002316:	64a2                	ld	s1,8(sp)
-    80002318:	6902                	ld	s2,0(sp)
-    8000231a:	6105                	addi	sp,sp,32
-    8000231c:	8082                	ret
+    80002118:	4501                	li	a0,0
+}
+    8000211a:	60e2                	ld	ra,24(sp)
+    8000211c:	6442                	ld	s0,16(sp)
+    8000211e:	64a2                	ld	s1,8(sp)
+    80002120:	6902                	ld	s2,0(sp)
+    80002122:	6105                	addi	sp,sp,32
+    80002124:	8082                	ret
     if((sz = uvmalloc(p->pagetable, sz, sz + n)) == 0) {
-    8000231e:	9e25                	addw	a2,a2,s1
-    80002320:	1602                	slli	a2,a2,0x20
-    80002322:	9201                	srli	a2,a2,0x20
-    80002324:	1582                	slli	a1,a1,0x20
-    80002326:	9181                	srli	a1,a1,0x20
-    80002328:	6148                	ld	a0,128(a0)
-    8000232a:	fffff097          	auipc	ra,0xfffff
-    8000232e:	100080e7          	jalr	256(ra) # 8000142a <uvmalloc>
-    80002332:	0005061b          	sext.w	a2,a0
-    80002336:	fa69                	bnez	a2,80002308 <growproc+0x26>
+    80002126:	9e25                	addw	a2,a2,s1
+    80002128:	1602                	slli	a2,a2,0x20
+    8000212a:	9201                	srli	a2,a2,0x20
+    8000212c:	1582                	slli	a1,a1,0x20
+    8000212e:	9181                	srli	a1,a1,0x20
+    80002130:	6928                	ld	a0,80(a0)
+    80002132:	fffff097          	auipc	ra,0xfffff
+    80002136:	2f0080e7          	jalr	752(ra) # 80001422 <uvmalloc>
+    8000213a:	0005061b          	sext.w	a2,a0
+    8000213e:	fa69                	bnez	a2,80002110 <growproc+0x26>
       return -1;
-    80002338:	557d                	li	a0,-1
-    8000233a:	bfe1                	j	80002312 <growproc+0x30>
+    80002140:	557d                	li	a0,-1
+    80002142:	bfe1                	j	8000211a <growproc+0x30>
     sz = uvmdealloc(p->pagetable, sz, sz + n);
-    8000233c:	9e25                	addw	a2,a2,s1
-    8000233e:	1602                	slli	a2,a2,0x20
-    80002340:	9201                	srli	a2,a2,0x20
-    80002342:	1582                	slli	a1,a1,0x20
-    80002344:	9181                	srli	a1,a1,0x20
-    80002346:	6148                	ld	a0,128(a0)
-    80002348:	fffff097          	auipc	ra,0xfffff
-    8000234c:	09a080e7          	jalr	154(ra) # 800013e2 <uvmdealloc>
-    80002350:	0005061b          	sext.w	a2,a0
-    80002354:	bf55                	j	80002308 <growproc+0x26>
-
-0000000080002356 <fork>:
-{
-    80002356:	7139                	addi	sp,sp,-64
-    80002358:	fc06                	sd	ra,56(sp)
-    8000235a:	f822                	sd	s0,48(sp)
-    8000235c:	f426                	sd	s1,40(sp)
-    8000235e:	f04a                	sd	s2,32(sp)
-    80002360:	ec4e                	sd	s3,24(sp)
-    80002362:	e852                	sd	s4,16(sp)
-    80002364:	e456                	sd	s5,8(sp)
-    80002366:	0080                	addi	s0,sp,64
+    80002144:	9e25                	addw	a2,a2,s1
+    80002146:	1602                	slli	a2,a2,0x20
+    80002148:	9201                	srli	a2,a2,0x20
+    8000214a:	1582                	slli	a1,a1,0x20
+    8000214c:	9181                	srli	a1,a1,0x20
+    8000214e:	6928                	ld	a0,80(a0)
+    80002150:	fffff097          	auipc	ra,0xfffff
+    80002154:	28a080e7          	jalr	650(ra) # 800013da <uvmdealloc>
+    80002158:	0005061b          	sext.w	a2,a0
+    8000215c:	bf55                	j	80002110 <growproc+0x26>
+
+000000008000215e <min_num_procs_cpu>:
+min_num_procs_cpu(void){
+    8000215e:	1141                	addi	sp,sp,-16
+    80002160:	e422                	sd	s0,8(sp)
+    80002162:	0800                	addi	s0,sp,16
+  int min_cpu_proc_cnt = min_cpu->proc_cnt;
+    80002164:	0000f517          	auipc	a0,0xf
+    80002168:	1ec52503          	lw	a0,492(a0) # 80011350 <cpus+0x80>
+  for(c = cpus + 1; c < &cpus[NCPU] && c != NULL ; c++){
+    8000216c:	0000f797          	auipc	a5,0xf
+    80002170:	20c78793          	addi	a5,a5,524 # 80011378 <cpus+0xa8>
+    80002174:	0000f617          	auipc	a2,0xf
+    80002178:	69c60613          	addi	a2,a2,1692 # 80011810 <proc>
+    8000217c:	a039                	j	8000218a <min_num_procs_cpu+0x2c>
+    8000217e:	0007051b          	sext.w	a0,a4
+    80002182:	0a878793          	addi	a5,a5,168
+    80002186:	00c78a63          	beq	a5,a2,8000219a <min_num_procs_cpu+0x3c>
+    if (c->proc_cnt < min_cpu_proc_cnt) {
+    8000218a:	0807a703          	lw	a4,128(a5)
+    8000218e:	0007069b          	sext.w	a3,a4
+    80002192:	fed556e3          	bge	a0,a3,8000217e <min_num_procs_cpu+0x20>
+    80002196:	872a                	mv	a4,a0
+    80002198:	b7dd                	j	8000217e <min_num_procs_cpu+0x20>
+} 
+    8000219a:	6422                	ld	s0,8(sp)
+    8000219c:	0141                	addi	sp,sp,16
+    8000219e:	8082                	ret
+
+00000000800021a0 <fork>:
+{
+    800021a0:	7179                	addi	sp,sp,-48
+    800021a2:	f406                	sd	ra,40(sp)
+    800021a4:	f022                	sd	s0,32(sp)
+    800021a6:	ec26                	sd	s1,24(sp)
+    800021a8:	e84a                	sd	s2,16(sp)
+    800021aa:	e44e                	sd	s3,8(sp)
+    800021ac:	e052                	sd	s4,0(sp)
+    800021ae:	1800                	addi	s0,sp,48
   struct proc *p = myproc();
-    80002368:	00000097          	auipc	ra,0x0
-    8000236c:	82c080e7          	jalr	-2004(ra) # 80001b94 <myproc>
-    80002370:	89aa                	mv	s3,a0
+    800021b0:	00000097          	auipc	ra,0x0
+    800021b4:	b20080e7          	jalr	-1248(ra) # 80001cd0 <myproc>
+    800021b8:	89aa                	mv	s3,a0
   if((np = allocproc()) == 0){
-    80002372:	00000097          	auipc	ra,0x0
-    80002376:	b98080e7          	jalr	-1128(ra) # 80001f0a <allocproc>
-    8000237a:	20050663          	beqz	a0,80002586 <fork+0x230>
-    8000237e:	892a                	mv	s2,a0
+    800021ba:	00000097          	auipc	ra,0x0
+    800021be:	d3e080e7          	jalr	-706(ra) # 80001ef8 <allocproc>
+    800021c2:	16050863          	beqz	a0,80002332 <fork+0x192>
+    800021c6:	892a                	mv	s2,a0
   if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
-    80002380:	0789b603          	ld	a2,120(s3)
-    80002384:	614c                	ld	a1,128(a0)
-    80002386:	0809b503          	ld	a0,128(s3)
-    8000238a:	fffff097          	auipc	ra,0xfffff
-    8000238e:	1ec080e7          	jalr	492(ra) # 80001576 <uvmcopy>
-    80002392:	04054663          	bltz	a0,800023de <fork+0x88>
+    800021c8:	0489b603          	ld	a2,72(s3)
+    800021cc:	692c                	ld	a1,80(a0)
+    800021ce:	0509b503          	ld	a0,80(s3)
+    800021d2:	fffff097          	auipc	ra,0xfffff
+    800021d6:	39c080e7          	jalr	924(ra) # 8000156e <uvmcopy>
+    800021da:	04054663          	bltz	a0,80002226 <fork+0x86>
   np->sz = p->sz;
-    80002396:	0789b783          	ld	a5,120(s3)
-    8000239a:	06f93c23          	sd	a5,120(s2)
+    800021de:	0489b783          	ld	a5,72(s3)
+    800021e2:	04f93423          	sd	a5,72(s2)
   *(np->trapframe) = *(p->trapframe);
-    8000239e:	0889b683          	ld	a3,136(s3)
-    800023a2:	87b6                	mv	a5,a3
-    800023a4:	08893703          	ld	a4,136(s2)
-    800023a8:	12068693          	addi	a3,a3,288
-    800023ac:	0007b803          	ld	a6,0(a5)
-    800023b0:	6788                	ld	a0,8(a5)
-    800023b2:	6b8c                	ld	a1,16(a5)
-    800023b4:	6f90                	ld	a2,24(a5)
-    800023b6:	01073023          	sd	a6,0(a4)
-    800023ba:	e708                	sd	a0,8(a4)
-    800023bc:	eb0c                	sd	a1,16(a4)
-    800023be:	ef10                	sd	a2,24(a4)
-    800023c0:	02078793          	addi	a5,a5,32
-    800023c4:	02070713          	addi	a4,a4,32
-    800023c8:	fed792e3          	bne	a5,a3,800023ac <fork+0x56>
+    800021e6:	0589b683          	ld	a3,88(s3)
+    800021ea:	87b6                	mv	a5,a3
+    800021ec:	05893703          	ld	a4,88(s2)
+    800021f0:	12068693          	addi	a3,a3,288
+    800021f4:	0007b803          	ld	a6,0(a5)
+    800021f8:	6788                	ld	a0,8(a5)
+    800021fa:	6b8c                	ld	a1,16(a5)
+    800021fc:	6f90                	ld	a2,24(a5)
+    800021fe:	01073023          	sd	a6,0(a4)
+    80002202:	e708                	sd	a0,8(a4)
+    80002204:	eb0c                	sd	a1,16(a4)
+    80002206:	ef10                	sd	a2,24(a4)
+    80002208:	02078793          	addi	a5,a5,32
+    8000220c:	02070713          	addi	a4,a4,32
+    80002210:	fed792e3          	bne	a5,a3,800021f4 <fork+0x54>
   np->trapframe->a0 = 0;
-    800023cc:	08893783          	ld	a5,136(s2)
-    800023d0:	0607b823          	sd	zero,112(a5)
-    800023d4:	10000493          	li	s1,256
+    80002214:	05893783          	ld	a5,88(s2)
+    80002218:	0607b823          	sd	zero,112(a5)
+    8000221c:	0d000493          	li	s1,208
   for(i = 0; i < NOFILE; i++)
-    800023d8:	18000a13          	li	s4,384
-    800023dc:	a03d                	j	8000240a <fork+0xb4>
+    80002220:	15000a13          	li	s4,336
+    80002224:	a03d                	j	80002252 <fork+0xb2>
     freeproc(np);
-    800023de:	854a                	mv	a0,s2
-    800023e0:	00000097          	auipc	ra,0x0
-    800023e4:	96a080e7          	jalr	-1686(ra) # 80001d4a <freeproc>
+    80002226:	854a                	mv	a0,s2
+    80002228:	00000097          	auipc	ra,0x0
+    8000222c:	c54080e7          	jalr	-940(ra) # 80001e7c <freeproc>
     release(&np->lock);
-    800023e8:	854a                	mv	a0,s2
-    800023ea:	fffff097          	auipc	ra,0xfffff
-    800023ee:	8ae080e7          	jalr	-1874(ra) # 80000c98 <release>
+    80002230:	854a                	mv	a0,s2
+    80002232:	fffff097          	auipc	ra,0xfffff
+    80002236:	a66080e7          	jalr	-1434(ra) # 80000c98 <release>
     return -1;
-    800023f2:	5a7d                	li	s4,-1
-    800023f4:	aa39                	j	80002512 <fork+0x1bc>
+    8000223a:	5a7d                	li	s4,-1
+    8000223c:	a8d9                	j	80002312 <fork+0x172>
       np->ofile[i] = filedup(p->ofile[i]);
-    800023f6:	00003097          	auipc	ra,0x3
-    800023fa:	78c080e7          	jalr	1932(ra) # 80005b82 <filedup>
-    800023fe:	009907b3          	add	a5,s2,s1
-    80002402:	e388                	sd	a0,0(a5)
+    8000223e:	00003097          	auipc	ra,0x3
+    80002242:	840080e7          	jalr	-1984(ra) # 80004a7e <filedup>
+    80002246:	009907b3          	add	a5,s2,s1
+    8000224a:	e388                	sd	a0,0(a5)
   for(i = 0; i < NOFILE; i++)
-    80002404:	04a1                	addi	s1,s1,8
-    80002406:	01448763          	beq	s1,s4,80002414 <fork+0xbe>
+    8000224c:	04a1                	addi	s1,s1,8
+    8000224e:	01448763          	beq	s1,s4,8000225c <fork+0xbc>
     if(p->ofile[i])
-    8000240a:	009987b3          	add	a5,s3,s1
-    8000240e:	6388                	ld	a0,0(a5)
-    80002410:	f17d                	bnez	a0,800023f6 <fork+0xa0>
-    80002412:	bfcd                	j	80002404 <fork+0xae>
+    80002252:	009987b3          	add	a5,s3,s1
+    80002256:	6388                	ld	a0,0(a5)
+    80002258:	f17d                	bnez	a0,8000223e <fork+0x9e>
+    8000225a:	bfcd                	j	8000224c <fork+0xac>
   np->cwd = idup(p->cwd);
-    80002414:	1809b503          	ld	a0,384(s3)
-    80002418:	00003097          	auipc	ra,0x3
-    8000241c:	8e0080e7          	jalr	-1824(ra) # 80004cf8 <idup>
-    80002420:	18a93023          	sd	a0,384(s2)
+    8000225c:	1509b503          	ld	a0,336(s3)
+    80002260:	00002097          	auipc	ra,0x2
+    80002264:	994080e7          	jalr	-1644(ra) # 80003bf4 <idup>
+    80002268:	14a93823          	sd	a0,336(s2)
   safestrcpy(np->name, p->name, sizeof(p->name));
-    80002424:	4641                	li	a2,16
-    80002426:	18898593          	addi	a1,s3,392
-    8000242a:	18890513          	addi	a0,s2,392
-    8000242e:	fffff097          	auipc	ra,0xfffff
-    80002432:	a04080e7          	jalr	-1532(ra) # 80000e32 <safestrcpy>
+    8000226c:	4641                	li	a2,16
+    8000226e:	15898593          	addi	a1,s3,344
+    80002272:	15890513          	addi	a0,s2,344
+    80002276:	fffff097          	auipc	ra,0xfffff
+    8000227a:	bbc080e7          	jalr	-1092(ra) # 80000e32 <safestrcpy>
   pid = np->pid;
-    80002436:	03092a03          	lw	s4,48(s2)
+    8000227e:	03092a03          	lw	s4,48(s2)
   release(&np->lock);
-    8000243a:	854a                	mv	a0,s2
-    8000243c:	fffff097          	auipc	ra,0xfffff
-    80002440:	85c080e7          	jalr	-1956(ra) # 80000c98 <release>
+    80002282:	854a                	mv	a0,s2
+    80002284:	fffff097          	auipc	ra,0xfffff
+    80002288:	a14080e7          	jalr	-1516(ra) # 80000c98 <release>
   acquire(&wait_lock);
-    80002444:	00010497          	auipc	s1,0x10
-    80002448:	e7c48493          	addi	s1,s1,-388 # 800122c0 <cpus>
-    8000244c:	00010a97          	auipc	s5,0x10
-    80002450:	30ca8a93          	addi	s5,s5,780 # 80012758 <wait_lock>
-    80002454:	8556                	mv	a0,s5
-    80002456:	ffffe097          	auipc	ra,0xffffe
-    8000245a:	78e080e7          	jalr	1934(ra) # 80000be4 <acquire>
+    8000228c:	0000f497          	auipc	s1,0xf
+    80002290:	02c48493          	addi	s1,s1,44 # 800112b8 <wait_lock>
+    80002294:	8526                	mv	a0,s1
+    80002296:	fffff097          	auipc	ra,0xfffff
+    8000229a:	94e080e7          	jalr	-1714(ra) # 80000be4 <acquire>
   np->parent = p;
-    8000245e:	07393423          	sd	s3,104(s2)
+    8000229e:	03393c23          	sd	s3,56(s2)
   release(&wait_lock);
-    80002462:	8556                	mv	a0,s5
-    80002464:	fffff097          	auipc	ra,0xfffff
-    80002468:	834080e7          	jalr	-1996(ra) # 80000c98 <release>
+    800022a2:	8526                	mv	a0,s1
+    800022a4:	fffff097          	auipc	ra,0xfffff
+    800022a8:	9f4080e7          	jalr	-1548(ra) # 80000c98 <release>
   acquire(&np->lock);
-    8000246c:	854a                	mv	a0,s2
-    8000246e:	ffffe097          	auipc	ra,0xffffe
-    80002472:	776080e7          	jalr	1910(ra) # 80000be4 <acquire>
+    800022ac:	854a                	mv	a0,s2
+    800022ae:	fffff097          	auipc	ra,0xfffff
+    800022b2:	936080e7          	jalr	-1738(ra) # 80000be4 <acquire>
   np->state = RUNNABLE;
-    80002476:	478d                	li	a5,3
-    80002478:	00f92c23          	sw	a5,24(s2)
-  np->last_runnable_time = ticks;
-    8000247c:	00008797          	auipc	a5,0x8
-    80002480:	bd87a783          	lw	a5,-1064(a5) # 8000a054 <ticks>
-    80002484:	02f92e23          	sw	a5,60(s2)
-    80002488:	8792                	mv	a5,tp
-  int id = r_tp();
-    8000248a:	0007871b          	sext.w	a4,a5
-  c->cpu_id = id;
-    8000248e:	00371793          	slli	a5,a4,0x3
-    80002492:	00e786b3          	add	a3,a5,a4
-    80002496:	0692                	slli	a3,a3,0x4
-    80002498:	96a6                	add	a3,a3,s1
-    8000249a:	08e6a423          	sw	a4,136(a3)
-  if (mycpu()->runnable_list_head == -1)
-    8000249e:	0806a703          	lw	a4,128(a3)
-    800024a2:	57fd                	li	a5,-1
-    800024a4:	08f70163          	beq	a4,a5,80002526 <fork+0x1d0>
-    printf("runnable2");
-    800024a8:	00007517          	auipc	a0,0x7
-    800024ac:	ea850513          	addi	a0,a0,-344 # 80009350 <digits+0x310>
-    800024b0:	ffffe097          	auipc	ra,0xffffe
-    800024b4:	0d8080e7          	jalr	216(ra) # 80000588 <printf>
-    800024b8:	8792                	mv	a5,tp
-  int id = r_tp();
-    800024ba:	0007871b          	sext.w	a4,a5
-  c->cpu_id = id;
-    800024be:	00010497          	auipc	s1,0x10
-    800024c2:	e0248493          	addi	s1,s1,-510 # 800122c0 <cpus>
-    800024c6:	00371793          	slli	a5,a4,0x3
-    800024ca:	00e786b3          	add	a3,a5,a4
-    800024ce:	0692                	slli	a3,a3,0x4
-    800024d0:	96a6                	add	a3,a3,s1
-    800024d2:	08e6a423          	sw	a4,136(a3)
-    add_proc_to_list(mycpu()->runnable_list_tail, np);
-    800024d6:	85ca                	mv	a1,s2
-    800024d8:	0846a503          	lw	a0,132(a3)
-    800024dc:	fffff097          	auipc	ra,0xfffff
-    800024e0:	36a080e7          	jalr	874(ra) # 80001846 <add_proc_to_list>
-    800024e4:	8792                	mv	a5,tp
-  int id = r_tp();
-    800024e6:	0007871b          	sext.w	a4,a5
-  c->cpu_id = id;
-    800024ea:	00371793          	slli	a5,a4,0x3
-    800024ee:	00e786b3          	add	a3,a5,a4
-    800024f2:	0692                	slli	a3,a3,0x4
-    800024f4:	96a6                	add	a3,a3,s1
-    800024f6:	08e6a423          	sw	a4,136(a3)
-    mycpu()->runnable_list_tail = np->proc_ind;
-    800024fa:	05c92683          	lw	a3,92(s2)
-    800024fe:	97ba                	add	a5,a5,a4
-    80002500:	0792                	slli	a5,a5,0x4
-    80002502:	94be                	add	s1,s1,a5
-    80002504:	08d4a223          	sw	a3,132(s1)
+    800022b6:	478d                	li	a5,3
+    800022b8:	00f92c23          	sw	a5,24(s2)
+  int last_cpu = p->last_cpu; 
+    800022bc:	1689a783          	lw	a5,360(s3)
+  np->last_cpu = last_cpu;
+    800022c0:	16f92423          	sw	a5,360(s2)
+  if (flag == 1)
+    800022c4:	00007717          	auipc	a4,0x7
+    800022c8:	d6472703          	lw	a4,-668(a4) # 80009028 <flag>
+    800022cc:	4785                	li	a5,1
+    800022ce:	04f70b63          	beq	a4,a5,80002324 <fork+0x184>
+  inc_cpu(&cpus[np->last_cpu]);
+    800022d2:	0000f497          	auipc	s1,0xf
+    800022d6:	ffe48493          	addi	s1,s1,-2 # 800112d0 <cpus>
+    800022da:	16892503          	lw	a0,360(s2)
+    800022de:	0a800993          	li	s3,168
+    800022e2:	03350533          	mul	a0,a0,s3
+    800022e6:	9526                	add	a0,a0,s1
+    800022e8:	fffff097          	auipc	ra,0xfffff
+    800022ec:	556080e7          	jalr	1366(ra) # 8000183e <inc_cpu>
+  append(&(cpus[np->last_cpu].runnable_list), np); 
+    800022f0:	16892503          	lw	a0,360(s2)
+    800022f4:	03350533          	mul	a0,a0,s3
+    800022f8:	08850513          	addi	a0,a0,136
+    800022fc:	85ca                	mv	a1,s2
+    800022fe:	9526                	add	a0,a0,s1
+    80002300:	fffff097          	auipc	ra,0xfffff
+    80002304:	586080e7          	jalr	1414(ra) # 80001886 <append>
   release(&np->lock);
-    80002508:	854a                	mv	a0,s2
-    8000250a:	ffffe097          	auipc	ra,0xffffe
-    8000250e:	78e080e7          	jalr	1934(ra) # 80000c98 <release>
-}
-    80002512:	8552                	mv	a0,s4
-    80002514:	70e2                	ld	ra,56(sp)
-    80002516:	7442                	ld	s0,48(sp)
-    80002518:	74a2                	ld	s1,40(sp)
-    8000251a:	7902                	ld	s2,32(sp)
-    8000251c:	69e2                	ld	s3,24(sp)
-    8000251e:	6a42                	ld	s4,16(sp)
-    80002520:	6aa2                	ld	s5,8(sp)
-    80002522:	6121                	addi	sp,sp,64
-    80002524:	8082                	ret
-    printf("init runnable %d                 2\n", p->proc_ind);
-    80002526:	05c9a583          	lw	a1,92(s3)
-    8000252a:	00007517          	auipc	a0,0x7
-    8000252e:	dfe50513          	addi	a0,a0,-514 # 80009328 <digits+0x2e8>
-    80002532:	ffffe097          	auipc	ra,0xffffe
-    80002536:	056080e7          	jalr	86(ra) # 80000588 <printf>
-    8000253a:	8792                	mv	a5,tp
-  int id = r_tp();
-    8000253c:	0007869b          	sext.w	a3,a5
-  c->cpu_id = id;
-    80002540:	00369793          	slli	a5,a3,0x3
-    80002544:	00d78633          	add	a2,a5,a3
-    80002548:	0612                	slli	a2,a2,0x4
-    8000254a:	9626                	add	a2,a2,s1
-    8000254c:	08d62423          	sw	a3,136(a2)
-    mycpu()->runnable_list_head = np->proc_ind;
-    80002550:	05c92603          	lw	a2,92(s2)
-    80002554:	97b6                	add	a5,a5,a3
-    80002556:	0792                	slli	a5,a5,0x4
-    80002558:	97a6                	add	a5,a5,s1
-    8000255a:	08c7a023          	sw	a2,128(a5)
-    8000255e:	8792                	mv	a5,tp
-  int id = r_tp();
-    80002560:	0007869b          	sext.w	a3,a5
-  c->cpu_id = id;
-    80002564:	00369793          	slli	a5,a3,0x3
-    80002568:	00d78633          	add	a2,a5,a3
-    8000256c:	0612                	slli	a2,a2,0x4
-    8000256e:	9626                	add	a2,a2,s1
-    80002570:	08d62423          	sw	a3,136(a2)
-    mycpu()->runnable_list_tail = np->proc_ind;
-    80002574:	05c92603          	lw	a2,92(s2)
-    80002578:	97b6                	add	a5,a5,a3
-    8000257a:	0792                	slli	a5,a5,0x4
-    8000257c:	00f48733          	add	a4,s1,a5
-    80002580:	08c72223          	sw	a2,132(a4)
-    80002584:	b751                	j	80002508 <fork+0x1b2>
+    80002308:	854a                	mv	a0,s2
+    8000230a:	fffff097          	auipc	ra,0xfffff
+    8000230e:	98e080e7          	jalr	-1650(ra) # 80000c98 <release>
+}
+    80002312:	8552                	mv	a0,s4
+    80002314:	70a2                	ld	ra,40(sp)
+    80002316:	7402                	ld	s0,32(sp)
+    80002318:	64e2                	ld	s1,24(sp)
+    8000231a:	6942                	ld	s2,16(sp)
+    8000231c:	69a2                	ld	s3,8(sp)
+    8000231e:	6a02                	ld	s4,0(sp)
+    80002320:	6145                	addi	sp,sp,48
+    80002322:	8082                	ret
+    np->last_cpu = min_num_procs_cpu();
+    80002324:	00000097          	auipc	ra,0x0
+    80002328:	e3a080e7          	jalr	-454(ra) # 8000215e <min_num_procs_cpu>
+    8000232c:	16a92423          	sw	a0,360(s2)
+    80002330:	b74d                	j	800022d2 <fork+0x132>
     return -1;
-    80002586:	5a7d                	li	s4,-1
-    80002588:	b769                	j	80002512 <fork+0x1bc>
-
-000000008000258a <unpause_system>:
-{
-    8000258a:	7179                	addi	sp,sp,-48
-    8000258c:	f406                	sd	ra,40(sp)
-    8000258e:	f022                	sd	s0,32(sp)
-    80002590:	ec26                	sd	s1,24(sp)
-    80002592:	e84a                	sd	s2,16(sp)
-    80002594:	e44e                	sd	s3,8(sp)
-    80002596:	1800                	addi	s0,sp,48
-  for(p = proc; p < &proc[NPROC]; p++) 
-    80002598:	00010497          	auipc	s1,0x10
-    8000259c:	1d848493          	addi	s1,s1,472 # 80012770 <proc>
-      if(p->paused == 1) 
-    800025a0:	4985                	li	s3,1
-  for(p = proc; p < &proc[NPROC]; p++) 
-    800025a2:	00016917          	auipc	s2,0x16
-    800025a6:	7ce90913          	addi	s2,s2,1998 # 80018d70 <tickslock>
-    800025aa:	a811                	j	800025be <unpause_system+0x34>
-      release(&p->lock);
-    800025ac:	8526                	mv	a0,s1
-    800025ae:	ffffe097          	auipc	ra,0xffffe
-    800025b2:	6ea080e7          	jalr	1770(ra) # 80000c98 <release>
-  for(p = proc; p < &proc[NPROC]; p++) 
-    800025b6:	19848493          	addi	s1,s1,408
-    800025ba:	01248d63          	beq	s1,s2,800025d4 <unpause_system+0x4a>
-      acquire(&p->lock);
-    800025be:	8526                	mv	a0,s1
-    800025c0:	ffffe097          	auipc	ra,0xffffe
-    800025c4:	624080e7          	jalr	1572(ra) # 80000be4 <acquire>
-      if(p->paused == 1) 
-    800025c8:	40bc                	lw	a5,64(s1)
-    800025ca:	ff3791e3          	bne	a5,s3,800025ac <unpause_system+0x22>
-        p->paused = 0;
-    800025ce:	0404a023          	sw	zero,64(s1)
-    800025d2:	bfe9                	j	800025ac <unpause_system+0x22>
-} 
-    800025d4:	70a2                	ld	ra,40(sp)
-    800025d6:	7402                	ld	s0,32(sp)
-    800025d8:	64e2                	ld	s1,24(sp)
-    800025da:	6942                	ld	s2,16(sp)
-    800025dc:	69a2                	ld	s3,8(sp)
-    800025de:	6145                	addi	sp,sp,48
-    800025e0:	8082                	ret
-
-00000000800025e2 <SJF_scheduler>:
-{
-    800025e2:	711d                	addi	sp,sp,-96
-    800025e4:	ec86                	sd	ra,88(sp)
-    800025e6:	e8a2                	sd	s0,80(sp)
-    800025e8:	e4a6                	sd	s1,72(sp)
-    800025ea:	e0ca                	sd	s2,64(sp)
-    800025ec:	fc4e                	sd	s3,56(sp)
-    800025ee:	f852                	sd	s4,48(sp)
-    800025f0:	f456                	sd	s5,40(sp)
-    800025f2:	f05a                	sd	s6,32(sp)
-    800025f4:	ec5e                	sd	s7,24(sp)
-    800025f6:	e862                	sd	s8,16(sp)
-    800025f8:	e466                	sd	s9,8(sp)
-    800025fa:	e06a                	sd	s10,0(sp)
-    800025fc:	1080                	addi	s0,sp,96
-    800025fe:	8792                	mv	a5,tp
-  int id = r_tp();
-    80002600:	2781                	sext.w	a5,a5
-  c->cpu_id = id;
-    80002602:	00010617          	auipc	a2,0x10
-    80002606:	cbe60613          	addi	a2,a2,-834 # 800122c0 <cpus>
-    8000260a:	00379713          	slli	a4,a5,0x3
-    8000260e:	00f706b3          	add	a3,a4,a5
-    80002612:	0692                	slli	a3,a3,0x4
-    80002614:	96b2                	add	a3,a3,a2
-    80002616:	08f6a423          	sw	a5,136(a3)
-  c->proc = 0;
-    8000261a:	0006b023          	sd	zero,0(a3)
-      swtch(&c->context, &p_of_min->context);
-    8000261e:	973e                	add	a4,a4,a5
-    80002620:	0712                	slli	a4,a4,0x4
-    80002622:	0721                	addi	a4,a4,8
-    80002624:	00e60d33          	add	s10,a2,a4
-    struct proc* p_of_min = proc;
-    80002628:	00010a97          	auipc	s5,0x10
-    8000262c:	148a8a93          	addi	s5,s5,328 # 80012770 <proc>
-    uint min = INT_MAX;
-    80002630:	80000b37          	lui	s6,0x80000
-    80002634:	fffb4b13          	not	s6,s6
-           should_switch = 1;
-    80002638:	4a05                	li	s4,1
-    8000263a:	89d2                	mv	s3,s4
-      c->proc = p_of_min;
-    8000263c:	8bb6                	mv	s7,a3
-    8000263e:	a091                	j	80002682 <SJF_scheduler+0xa0>
-    for(p = proc; p < &proc[NPROC]; p++) {
-    80002640:	19878793          	addi	a5,a5,408
-    80002644:	00d78c63          	beq	a5,a3,8000265c <SJF_scheduler+0x7a>
-       if(p->state == RUNNABLE) {
-    80002648:	4f98                	lw	a4,24(a5)
-    8000264a:	fec71be3          	bne	a4,a2,80002640 <SJF_scheduler+0x5e>
-         if (p->mean_ticks < min)
-    8000264e:	5bd8                	lw	a4,52(a5)
-    80002650:	feb778e3          	bgeu	a4,a1,80002640 <SJF_scheduler+0x5e>
-    80002654:	84be                	mv	s1,a5
-           min = p->mean_ticks;
-    80002656:	85ba                	mv	a1,a4
-           should_switch = 1;
-    80002658:	894e                	mv	s2,s3
-    8000265a:	b7dd                	j	80002640 <SJF_scheduler+0x5e>
-    acquire(&p_of_min->lock);
-    8000265c:	8c26                	mv	s8,s1
-    8000265e:	8526                	mv	a0,s1
-    80002660:	ffffe097          	auipc	ra,0xffffe
-    80002664:	584080e7          	jalr	1412(ra) # 80000be4 <acquire>
-    if (should_switch == 1 && p_of_min->state == RUNNABLE && p_of_min->paused == 0){
-    80002668:	03490d63          	beq	s2,s4,800026a2 <SJF_scheduler+0xc0>
-    release(&p_of_min->lock);
-    8000266c:	8562                	mv	a0,s8
-    8000266e:	ffffe097          	auipc	ra,0xffffe
-    80002672:	62a080e7          	jalr	1578(ra) # 80000c98 <release>
-    if (pause_flag == 1) 
-    80002676:	00008797          	auipc	a5,0x8
-    8000267a:	9da7a783          	lw	a5,-1574(a5) # 8000a050 <pause_flag>
-    8000267e:	0b478163          	beq	a5,s4,80002720 <SJF_scheduler+0x13e>
-  asm volatile("csrr %0, sstatus" : "=r" (x) );
-    80002682:	100027f3          	csrr	a5,sstatus
-  w_sstatus(r_sstatus() | SSTATUS_SIE);
-    80002686:	0027e793          	ori	a5,a5,2
-  asm volatile("csrw sstatus, %0" : : "r" (x));
-    8000268a:	10079073          	csrw	sstatus,a5
-    int should_switch = 0;
-    8000268e:	4901                	li	s2,0
-    struct proc* p_of_min = proc;
-    80002690:	84d6                	mv	s1,s5
-    uint min = INT_MAX;
-    80002692:	85da                	mv	a1,s6
-    for(p = proc; p < &proc[NPROC]; p++) {
-    80002694:	87d6                	mv	a5,s5
-       if(p->state == RUNNABLE) {
-    80002696:	460d                	li	a2,3
-    for(p = proc; p < &proc[NPROC]; p++) {
-    80002698:	00016697          	auipc	a3,0x16
-    8000269c:	6d868693          	addi	a3,a3,1752 # 80018d70 <tickslock>
-    800026a0:	b765                	j	80002648 <SJF_scheduler+0x66>
-    if (should_switch == 1 && p_of_min->state == RUNNABLE && p_of_min->paused == 0){
-    800026a2:	4c98                	lw	a4,24(s1)
-    800026a4:	478d                	li	a5,3
-    800026a6:	fcf713e3          	bne	a4,a5,8000266c <SJF_scheduler+0x8a>
-    800026aa:	40bc                	lw	a5,64(s1)
-    800026ac:	f3e1                	bnez	a5,8000266c <SJF_scheduler+0x8a>
-      p_of_min->state = RUNNING;
-    800026ae:	4791                	li	a5,4
-    800026b0:	cc9c                	sw	a5,24(s1)
-      p_of_min->start_running_time = ticks;
-    800026b2:	00008c97          	auipc	s9,0x8
-    800026b6:	9a2c8c93          	addi	s9,s9,-1630 # 8000a054 <ticks>
-    800026ba:	000ca903          	lw	s2,0(s9)
-    800026be:	0524a823          	sw	s2,80(s1)
-      p_of_min->runnable_time += ticks - p_of_min->last_runnable_time;
-    800026c2:	44bc                	lw	a5,72(s1)
-    800026c4:	012787bb          	addw	a5,a5,s2
-    800026c8:	5cd8                	lw	a4,60(s1)
-    800026ca:	9f99                	subw	a5,a5,a4
-    800026cc:	c4bc                	sw	a5,72(s1)
-      c->proc = p_of_min;
-    800026ce:	009bb023          	sd	s1,0(s7)
-      swtch(&c->context, &p_of_min->context);
-    800026d2:	09048593          	addi	a1,s1,144
-    800026d6:	856a                	mv	a0,s10
-    800026d8:	00001097          	auipc	ra,0x1
-    800026dc:	540080e7          	jalr	1344(ra) # 80003c18 <swtch>
-      p_of_min->last_ticks= ticks - before_swtch;
-    800026e0:	000ca783          	lw	a5,0(s9)
-    800026e4:	4127893b          	subw	s2,a5,s2
-    800026e8:	0324ac23          	sw	s2,56(s1)
-      p_of_min->mean_ticks=((10 - rate) * p->mean_ticks + p->last_ticks * (rate)) / 10 ;
-    800026ec:	00007617          	auipc	a2,0x7
-    800026f0:	55462603          	lw	a2,1364(a2) # 80009c40 <rate>
-    800026f4:	46a9                	li	a3,10
-    800026f6:	40c687bb          	subw	a5,a3,a2
-    800026fa:	00016717          	auipc	a4,0x16
-    800026fe:	07670713          	addi	a4,a4,118 # 80018770 <proc+0x6000>
-    80002702:	63472583          	lw	a1,1588(a4)
-    80002706:	02b787bb          	mulw	a5,a5,a1
-    8000270a:	63872703          	lw	a4,1592(a4)
-    8000270e:	02c7073b          	mulw	a4,a4,a2
-    80002712:	9fb9                	addw	a5,a5,a4
-    80002714:	02d7d7bb          	divuw	a5,a5,a3
-    80002718:	d8dc                	sw	a5,52(s1)
-      c->proc = 0;
-    8000271a:	000bb023          	sd	zero,0(s7)
-    8000271e:	b7b9                	j	8000266c <SJF_scheduler+0x8a>
-      if (wake_up_time <= ticks) 
-    80002720:	00008717          	auipc	a4,0x8
-    80002724:	92c72703          	lw	a4,-1748(a4) # 8000a04c <wake_up_time>
-    80002728:	00008797          	auipc	a5,0x8
-    8000272c:	92c7a783          	lw	a5,-1748(a5) # 8000a054 <ticks>
-    80002730:	f4e7e9e3          	bltu	a5,a4,80002682 <SJF_scheduler+0xa0>
-        pause_flag = 0;
-    80002734:	00008797          	auipc	a5,0x8
-    80002738:	9007ae23          	sw	zero,-1764(a5) # 8000a050 <pause_flag>
-        unpause_system();
-    8000273c:	00000097          	auipc	ra,0x0
-    80002740:	e4e080e7          	jalr	-434(ra) # 8000258a <unpause_system>
-    80002744:	bf3d                	j	80002682 <SJF_scheduler+0xa0>
-
-0000000080002746 <FCFS_scheduler>:
-{
-    80002746:	7119                	addi	sp,sp,-128
-    80002748:	fc86                	sd	ra,120(sp)
-    8000274a:	f8a2                	sd	s0,112(sp)
-    8000274c:	f4a6                	sd	s1,104(sp)
-    8000274e:	f0ca                	sd	s2,96(sp)
-    80002750:	ecce                	sd	s3,88(sp)
-    80002752:	e8d2                	sd	s4,80(sp)
-    80002754:	e4d6                	sd	s5,72(sp)
-    80002756:	e0da                	sd	s6,64(sp)
-    80002758:	fc5e                	sd	s7,56(sp)
-    8000275a:	f862                	sd	s8,48(sp)
-    8000275c:	f466                	sd	s9,40(sp)
-    8000275e:	f06a                	sd	s10,32(sp)
-    80002760:	ec6e                	sd	s11,24(sp)
-    80002762:	0100                	addi	s0,sp,128
-  asm volatile("mv %0, tp" : "=r" (x) );
-    80002764:	8792                	mv	a5,tp
+    80002332:	5a7d                	li	s4,-1
+    80002334:	bff9                	j	80002312 <fork+0x172>
+
+0000000080002336 <scheduler>:
+{
+    80002336:	715d                	addi	sp,sp,-80
+    80002338:	e486                	sd	ra,72(sp)
+    8000233a:	e0a2                	sd	s0,64(sp)
+    8000233c:	fc26                	sd	s1,56(sp)
+    8000233e:	f84a                	sd	s2,48(sp)
+    80002340:	f44e                	sd	s3,40(sp)
+    80002342:	f052                	sd	s4,32(sp)
+    80002344:	ec56                	sd	s5,24(sp)
+    80002346:	e85a                	sd	s6,16(sp)
+    80002348:	e45e                	sd	s7,8(sp)
+    8000234a:	e062                	sd	s8,0(sp)
+    8000234c:	0880                	addi	s0,sp,80
+    8000234e:	8712                	mv	a4,tp
   int id = r_tp();
-    80002766:	2781                	sext.w	a5,a5
-  c->cpu_id = id;
-    80002768:	00010617          	auipc	a2,0x10
-    8000276c:	b5860613          	addi	a2,a2,-1192 # 800122c0 <cpus>
-    80002770:	00379713          	slli	a4,a5,0x3
-    80002774:	00f706b3          	add	a3,a4,a5
-    80002778:	0692                	slli	a3,a3,0x4
-    8000277a:	96b2                	add	a3,a3,a2
-    8000277c:	08f6a423          	sw	a5,136(a3)
+    80002350:	2701                	sext.w	a4,a4
   c->proc = 0;
-    80002780:	0006b023          	sd	zero,0(a3)
-        swtch(&c->context, &p_of_min->context);
-    80002784:	973e                	add	a4,a4,a5
-    80002786:	0712                	slli	a4,a4,0x4
-    80002788:	0721                	addi	a4,a4,8
-    8000278a:	9732                	add	a4,a4,a2
-    8000278c:	f8e43423          	sd	a4,-120(s0)
-  int should_switch = 0;
-    80002790:	4b01                	li	s6,0
-    struct proc *p_of_min = proc;
-    80002792:	00010c17          	auipc	s8,0x10
-    80002796:	fdec0c13          	addi	s8,s8,-34 # 80012770 <proc>
-    uint minlast_runnable = INT_MAX;
-    8000279a:	80000d37          	lui	s10,0x80000
-    8000279e:	fffd4d13          	not	s10,s10
-          should_switch = 1;
-    800027a2:	4c85                	li	s9,1
-    800027a4:	8be6                	mv	s7,s9
-        c->proc = p_of_min;
-    800027a6:	8db6                	mv	s11,a3
-    800027a8:	a095                	j	8000280c <FCFS_scheduler+0xc6>
-      release(&p->lock);
-    800027aa:	8526                	mv	a0,s1
-    800027ac:	ffffe097          	auipc	ra,0xffffe
-    800027b0:	4ec080e7          	jalr	1260(ra) # 80000c98 <release>
-    for(p = proc; p < &proc[NPROC]; p++) 
-    800027b4:	19848493          	addi	s1,s1,408
-    800027b8:	03248463          	beq	s1,s2,800027e0 <FCFS_scheduler+0x9a>
-      acquire(&p->lock);
-    800027bc:	8526                	mv	a0,s1
-    800027be:	ffffe097          	auipc	ra,0xffffe
-    800027c2:	426080e7          	jalr	1062(ra) # 80000be4 <acquire>
-      if(p->state == RUNNABLE && p->paused == 0) 
-    800027c6:	4c9c                	lw	a5,24(s1)
-    800027c8:	ff3791e3          	bne	a5,s3,800027aa <FCFS_scheduler+0x64>
-    800027cc:	40bc                	lw	a5,64(s1)
-    800027ce:	fff1                	bnez	a5,800027aa <FCFS_scheduler+0x64>
-        if(p->last_runnable_time <= minlast_runnable)
-    800027d0:	5cdc                	lw	a5,60(s1)
-    800027d2:	fcfa6ce3          	bltu	s4,a5,800027aa <FCFS_scheduler+0x64>
-          minlast_runnable = p->mean_ticks;
-    800027d6:	0344aa03          	lw	s4,52(s1)
-    800027da:	8aa6                	mv	s5,s1
-          should_switch = 1;
-    800027dc:	8b5e                	mv	s6,s7
-    800027de:	b7f1                	j	800027aa <FCFS_scheduler+0x64>
-    acquire(&p_of_min->lock);
-    800027e0:	8956                	mv	s2,s5
-    800027e2:	8556                	mv	a0,s5
-    800027e4:	ffffe097          	auipc	ra,0xffffe
-    800027e8:	400080e7          	jalr	1024(ra) # 80000be4 <acquire>
-    if (p_of_min->paused == 0)
-    800027ec:	040aa483          	lw	s1,64(s5)
-    800027f0:	e099                	bnez	s1,800027f6 <FCFS_scheduler+0xb0>
-      if (should_switch == 1 && p_of_min->pid > -1)
-    800027f2:	039b0c63          	beq	s6,s9,8000282a <FCFS_scheduler+0xe4>
-    release(&p_of_min->lock);
-    800027f6:	854a                	mv	a0,s2
-    800027f8:	ffffe097          	auipc	ra,0xffffe
-    800027fc:	4a0080e7          	jalr	1184(ra) # 80000c98 <release>
-    if (pause_flag == 1) 
-    80002800:	00008797          	auipc	a5,0x8
-    80002804:	8507a783          	lw	a5,-1968(a5) # 8000a050 <pause_flag>
-    80002808:	07978463          	beq	a5,s9,80002870 <FCFS_scheduler+0x12a>
+    80002352:	0a800793          	li	a5,168
+    80002356:	02f707b3          	mul	a5,a4,a5
+    8000235a:	0000f697          	auipc	a3,0xf
+    8000235e:	f4668693          	addi	a3,a3,-186 # 800112a0 <pid_lock>
+    80002362:	96be                	add	a3,a3,a5
+    80002364:	0206b823          	sd	zero,48(a3)
+        remove(&(c->runnable_list), p);
+    80002368:	0000fb17          	auipc	s6,0xf
+    8000236c:	f68b0b13          	addi	s6,s6,-152 # 800112d0 <cpus>
+    80002370:	08878b93          	addi	s7,a5,136
+    80002374:	9bda                	add	s7,s7,s6
+        swtch(&c->context, &p->context);
+    80002376:	07a1                	addi	a5,a5,8
+    80002378:	9b3e                	add	s6,s6,a5
+    while(!(c->runnable_list.head == -1)) {
+    8000237a:	89b6                	mv	s3,a3
+      if(p->state == RUNNABLE) {
+    8000237c:	0000fa17          	auipc	s4,0xf
+    80002380:	494a0a13          	addi	s4,s4,1172 # 80011810 <proc>
+    80002384:	19000a93          	li	s5,400
   asm volatile("csrr %0, sstatus" : "=r" (x) );
-    8000280c:	100027f3          	csrr	a5,sstatus
+    80002388:	100027f3          	csrr	a5,sstatus
   w_sstatus(r_sstatus() | SSTATUS_SIE);
-    80002810:	0027e793          	ori	a5,a5,2
+    8000238c:	0027e793          	ori	a5,a5,2
   asm volatile("csrw sstatus, %0" : : "r" (x));
-    80002814:	10079073          	csrw	sstatus,a5
-    struct proc *p_of_min = proc;
-    80002818:	8ae2                	mv	s5,s8
-    uint minlast_runnable = INT_MAX;
-    8000281a:	8a6a                	mv	s4,s10
-    for(p = proc; p < &proc[NPROC]; p++) 
-    8000281c:	84e2                	mv	s1,s8
-      if(p->state == RUNNABLE && p->paused == 0) 
-    8000281e:	498d                	li	s3,3
-    for(p = proc; p < &proc[NPROC]; p++) 
-    80002820:	00016917          	auipc	s2,0x16
-    80002824:	55090913          	addi	s2,s2,1360 # 80018d70 <tickslock>
-    80002828:	bf51                	j	800027bc <FCFS_scheduler+0x76>
-      if (should_switch == 1 && p_of_min->pid > -1)
-    8000282a:	030aa783          	lw	a5,48(s5)
-    8000282e:	fc07c4e3          	bltz	a5,800027f6 <FCFS_scheduler+0xb0>
-        p_of_min->state = RUNNING;
-    80002832:	4791                	li	a5,4
-    80002834:	00faac23          	sw	a5,24(s5)
-        p_of_min->start_running_time = ticks;
-    80002838:	00008717          	auipc	a4,0x8
-    8000283c:	81c72703          	lw	a4,-2020(a4) # 8000a054 <ticks>
-    80002840:	04eaa823          	sw	a4,80(s5)
-        p_of_min->runnable_time += ticks - p_of_min->last_runnable_time;
-    80002844:	048aa783          	lw	a5,72(s5)
-    80002848:	9fb9                	addw	a5,a5,a4
-    8000284a:	03caa703          	lw	a4,60(s5)
-    8000284e:	9f99                	subw	a5,a5,a4
-    80002850:	04faa423          	sw	a5,72(s5)
-        c->proc = p_of_min;
-    80002854:	015db023          	sd	s5,0(s11)
-        swtch(&c->context, &p_of_min->context);
-    80002858:	090a8593          	addi	a1,s5,144
-    8000285c:	f8843503          	ld	a0,-120(s0)
-    80002860:	00001097          	auipc	ra,0x1
-    80002864:	3b8080e7          	jalr	952(ra) # 80003c18 <swtch>
+    80002390:	10079073          	csrw	sstatus,a5
+    80002394:	490d                	li	s2,3
+    while(!(c->runnable_list.head == -1)) {
+    80002396:	0b89a783          	lw	a5,184(s3)
+    8000239a:	56fd                	li	a3,-1
+      if(p->state == RUNNABLE) {
+    8000239c:	03578733          	mul	a4,a5,s5
+    800023a0:	9752                	add	a4,a4,s4
+    while(!(c->runnable_list.head == -1)) {
+    800023a2:	fed783e3          	beq	a5,a3,80002388 <scheduler+0x52>
+      if(p->state == RUNNABLE) {
+    800023a6:	4f10                	lw	a2,24(a4)
+    800023a8:	ff261de3          	bne	a2,s2,800023a2 <scheduler+0x6c>
+    800023ac:	035784b3          	mul	s1,a5,s5
+      p = &proc[c->runnable_list.head];
+    800023b0:	01448c33          	add	s8,s1,s4
+        acquire(&p->lock);
+    800023b4:	8562                	mv	a0,s8
+    800023b6:	fffff097          	auipc	ra,0xfffff
+    800023ba:	82e080e7          	jalr	-2002(ra) # 80000be4 <acquire>
+        remove(&(c->runnable_list), p);
+    800023be:	85e2                	mv	a1,s8
+    800023c0:	855e                	mv	a0,s7
+    800023c2:	fffff097          	auipc	ra,0xfffff
+    800023c6:	58c080e7          	jalr	1420(ra) # 8000194e <remove>
+        p->state = RUNNING;
+    800023ca:	4791                	li	a5,4
+    800023cc:	00fc2c23          	sw	a5,24(s8)
+        c->proc = p;
+    800023d0:	0389b823          	sd	s8,48(s3)
+        p->last_cpu = c->cpu_id;
+    800023d4:	0b49a783          	lw	a5,180(s3)
+    800023d8:	16fc2423          	sw	a5,360(s8)
+        swtch(&c->context, &p->context);
+    800023dc:	06048593          	addi	a1,s1,96
+    800023e0:	95d2                	add	a1,a1,s4
+    800023e2:	855a                	mv	a0,s6
+    800023e4:	00000097          	auipc	ra,0x0
+    800023e8:	7a0080e7          	jalr	1952(ra) # 80002b84 <swtch>
         c->proc = 0;
-    80002868:	000db023          	sd	zero,0(s11)
-        should_switch = 0;
-    8000286c:	8b26                	mv	s6,s1
-    8000286e:	b761                	j	800027f6 <FCFS_scheduler+0xb0>
-      if (wake_up_time <= ticks) 
-    80002870:	00007717          	auipc	a4,0x7
-    80002874:	7dc72703          	lw	a4,2012(a4) # 8000a04c <wake_up_time>
-    80002878:	00007797          	auipc	a5,0x7
-    8000287c:	7dc7a783          	lw	a5,2012(a5) # 8000a054 <ticks>
-    80002880:	f8e7e6e3          	bltu	a5,a4,8000280c <FCFS_scheduler+0xc6>
-        pause_flag = 0;
-    80002884:	00007797          	auipc	a5,0x7
-    80002888:	7c07a623          	sw	zero,1996(a5) # 8000a050 <pause_flag>
-        unpause_system();
-    8000288c:	00000097          	auipc	ra,0x0
-    80002890:	cfe080e7          	jalr	-770(ra) # 8000258a <unpause_system>
-    80002894:	bfa5                	j	8000280c <FCFS_scheduler+0xc6>
-
-0000000080002896 <scheduler>:
-{
-    80002896:	7159                	addi	sp,sp,-112
-    80002898:	f486                	sd	ra,104(sp)
-    8000289a:	f0a2                	sd	s0,96(sp)
-    8000289c:	eca6                	sd	s1,88(sp)
-    8000289e:	e8ca                	sd	s2,80(sp)
-    800028a0:	e4ce                	sd	s3,72(sp)
-    800028a2:	e0d2                	sd	s4,64(sp)
-    800028a4:	fc56                	sd	s5,56(sp)
-    800028a6:	f85a                	sd	s6,48(sp)
-    800028a8:	f45e                	sd	s7,40(sp)
-    800028aa:	f062                	sd	s8,32(sp)
-    800028ac:	ec66                	sd	s9,24(sp)
-    800028ae:	e86a                	sd	s10,16(sp)
-    800028b0:	e46e                	sd	s11,8(sp)
-    800028b2:	1880                	addi	s0,sp,112
-  asm volatile("mv %0, tp" : "=r" (x) );
-    800028b4:	8792                	mv	a5,tp
-  int id = r_tp();
-    800028b6:	2781                	sext.w	a5,a5
-  c->cpu_id = id;
-    800028b8:	00010c17          	auipc	s8,0x10
-    800028bc:	a08c0c13          	addi	s8,s8,-1528 # 800122c0 <cpus>
-    800028c0:	00379713          	slli	a4,a5,0x3
-    800028c4:	00f706b3          	add	a3,a4,a5
-    800028c8:	0692                	slli	a3,a3,0x4
-    800028ca:	96e2                	add	a3,a3,s8
-    800028cc:	08f6a423          	sw	a5,136(a3)
-  c->proc = 0;
-    800028d0:	0006b023          	sd	zero,0(a3)
-      swtch(&c->context, &p->context);
-    800028d4:	973e                	add	a4,a4,a5
-    800028d6:	0712                	slli	a4,a4,0x4
-    800028d8:	0721                	addi	a4,a4,8
-    800028da:	9c3a                	add	s8,s8,a4
-    printf("start sched\n");
-    800028dc:	00007a17          	auipc	s4,0x7
-    800028e0:	a84a0a13          	addi	s4,s4,-1404 # 80009360 <digits+0x320>
-    if (c->runnable_list_head != -1)
-    800028e4:	8936                	mv	s2,a3
-    800028e6:	59fd                	li	s3,-1
-    800028e8:	19800b13          	li	s6,408
-      p = &proc[c->runnable_list_head];
-    800028ec:	00010a97          	auipc	s5,0x10
-    800028f0:	e84a8a93          	addi	s5,s5,-380 # 80012770 <proc>
-      printf("proc ind: %d\n", c->runnable_list_head);
-    800028f4:	00007c97          	auipc	s9,0x7
-    800028f8:	a7cc8c93          	addi	s9,s9,-1412 # 80009370 <digits+0x330>
-        proc[p->prev_proc].next_proc = -1;
-    800028fc:	5bfd                	li	s7,-1
-    800028fe:	a0d1                	j	800029c2 <scheduler+0x12c>
-        c->runnable_list_head = -1;
-    80002900:	09792023          	sw	s7,128(s2)
-        c->runnable_list_tail = -1;
-    80002904:	09792223          	sw	s7,132(s2)
-        printf("No head & tail");
-    80002908:	00007517          	auipc	a0,0x7
-    8000290c:	a8850513          	addi	a0,a0,-1400 # 80009390 <digits+0x350>
-    80002910:	ffffe097          	auipc	ra,0xffffe
-    80002914:	c78080e7          	jalr	-904(ra) # 80000588 <printf>
-      if (res == 3){
-    80002918:	a899                	j	8000296e <scheduler+0xd8>
-        c->runnable_list_head = p->next_proc;
-    8000291a:	036487b3          	mul	a5,s1,s6
-    8000291e:	97d6                	add	a5,a5,s5
-    80002920:	53ac                	lw	a1,96(a5)
-    80002922:	08b92023          	sw	a1,128(s2)
-        if (proc[p->next_proc].next_proc == -1)
-    80002926:	036587b3          	mul	a5,a1,s6
-    8000292a:	97d6                	add	a5,a5,s5
-    8000292c:	53bc                	lw	a5,96(a5)
-    8000292e:	03378063          	beq	a5,s3,8000294e <scheduler+0xb8>
-        proc[p->next_proc].prev_proc = -1;
-    80002932:	036587b3          	mul	a5,a1,s6
-    80002936:	97d6                	add	a5,a5,s5
-    80002938:	0777a223          	sw	s7,100(a5)
-        printf("New head: %d\n", c->runnable_list_head);
-    8000293c:	00007517          	auipc	a0,0x7
-    80002940:	a6450513          	addi	a0,a0,-1436 # 800093a0 <digits+0x360>
-    80002944:	ffffe097          	auipc	ra,0xffffe
-    80002948:	c44080e7          	jalr	-956(ra) # 80000588 <printf>
-      if (res == 3){
-    8000294c:	a00d                	j	8000296e <scheduler+0xd8>
-          c->runnable_list_tail = p->next_proc;
-    8000294e:	08b92223          	sw	a1,132(s2)
-    80002952:	b7c5                	j	80002932 <scheduler+0x9c>
-        proc[p->prev_proc].next_proc = -1;
-    80002954:	036787b3          	mul	a5,a5,s6
-    80002958:	97d6                	add	a5,a5,s5
-    8000295a:	0777a023          	sw	s7,96(a5)
-        printf("No tail");
-    8000295e:	00007517          	auipc	a0,0x7
-    80002962:	a5250513          	addi	a0,a0,-1454 # 800093b0 <digits+0x370>
-    80002966:	ffffe097          	auipc	ra,0xffffe
-    8000296a:	c22080e7          	jalr	-990(ra) # 80000588 <printf>
-      acquire(&p->lock);
-    8000296e:	856a                	mv	a0,s10
-    80002970:	ffffe097          	auipc	ra,0xffffe
-    80002974:	274080e7          	jalr	628(ra) # 80000be4 <acquire>
-      p->prev_proc = -1;
-    80002978:	036484b3          	mul	s1,s1,s6
-    8000297c:	94d6                	add	s1,s1,s5
-    8000297e:	0774a223          	sw	s7,100(s1)
-      p->next_proc = -1;
-    80002982:	0774a023          	sw	s7,96(s1)
-      p->state = RUNNING;
-    80002986:	4791                	li	a5,4
-    80002988:	cc9c                	sw	a5,24(s1)
-      p->cpu_num = c->cpu_id;
-    8000298a:	08892783          	lw	a5,136(s2)
-    8000298e:	ccbc                	sw	a5,88(s1)
-      c->proc = p;
-    80002990:	01a93023          	sd	s10,0(s2)
-      swtch(&c->context, &p->context);
-    80002994:	090d8593          	addi	a1,s11,144
-    80002998:	95d6                	add	a1,a1,s5
-    8000299a:	8562                	mv	a0,s8
-    8000299c:	00001097          	auipc	ra,0x1
-    800029a0:	27c080e7          	jalr	636(ra) # 80003c18 <swtch>
-      c->proc = 0;
-    800029a4:	00093023          	sd	zero,0(s2)
-      release(&p->lock);
-    800029a8:	856a                	mv	a0,s10
-    800029aa:	ffffe097          	auipc	ra,0xffffe
-    800029ae:	2ee080e7          	jalr	750(ra) # 80000c98 <release>
-      printf("end sched\n");
-    800029b2:	00007517          	auipc	a0,0x7
-    800029b6:	a0650513          	addi	a0,a0,-1530 # 800093b8 <digits+0x378>
-    800029ba:	ffffe097          	auipc	ra,0xffffe
-    800029be:	bce080e7          	jalr	-1074(ra) # 80000588 <printf>
-  asm volatile("csrr %0, sstatus" : "=r" (x) );
-    800029c2:	100027f3          	csrr	a5,sstatus
-  w_sstatus(r_sstatus() | SSTATUS_SIE);
-    800029c6:	0027e793          	ori	a5,a5,2
-  asm volatile("csrw sstatus, %0" : : "r" (x));
-    800029ca:	10079073          	csrw	sstatus,a5
-    printf("start sched\n");
-    800029ce:	8552                	mv	a0,s4
-    800029d0:	ffffe097          	auipc	ra,0xffffe
-    800029d4:	bb8080e7          	jalr	-1096(ra) # 80000588 <printf>
-    if (c->runnable_list_head != -1)
-    800029d8:	08092483          	lw	s1,128(s2)
-    800029dc:	ff3483e3          	beq	s1,s3,800029c2 <scheduler+0x12c>
-      p = &proc[c->runnable_list_head];
-    800029e0:	03648db3          	mul	s11,s1,s6
-    800029e4:	015d8d33          	add	s10,s11,s5
-      printf("proc ind: %d\n", c->runnable_list_head);
-    800029e8:	85a6                	mv	a1,s1
-    800029ea:	8566                	mv	a0,s9
-    800029ec:	ffffe097          	auipc	ra,0xffffe
-    800029f0:	b9c080e7          	jalr	-1124(ra) # 80000588 <printf>
-      printf("runnable3");
-    800029f4:	00007517          	auipc	a0,0x7
-    800029f8:	98c50513          	addi	a0,a0,-1652 # 80009380 <digits+0x340>
-    800029fc:	ffffe097          	auipc	ra,0xffffe
-    80002a00:	b8c080e7          	jalr	-1140(ra) # 80000588 <printf>
-      int res = remove_proc_from_list(p->proc_ind); 
-    80002a04:	05cd2503          	lw	a0,92(s10) # ffffffff8000005c <end+0xfffffffefffd805c>
-    80002a08:	fffff097          	auipc	ra,0xfffff
-    80002a0c:	ebc080e7          	jalr	-324(ra) # 800018c4 <remove_proc_from_list>
-      if (res == 1)
-    80002a10:	4785                	li	a5,1
-    80002a12:	eef507e3          	beq	a0,a5,80002900 <scheduler+0x6a>
-      if (res == 2)
-    80002a16:	4789                	li	a5,2
-    80002a18:	f0f501e3          	beq	a0,a5,8000291a <scheduler+0x84>
-      if (res == 3){
-    80002a1c:	478d                	li	a5,3
-    80002a1e:	f4f518e3          	bne	a0,a5,8000296e <scheduler+0xd8>
-        c->runnable_list_tail = p->prev_proc;
-    80002a22:	036487b3          	mul	a5,s1,s6
-    80002a26:	97d6                	add	a5,a5,s5
-    80002a28:	53fc                	lw	a5,100(a5)
-    80002a2a:	08f92223          	sw	a5,132(s2)
-        if (proc[p->prev_proc].prev_proc == -1)
-    80002a2e:	03678733          	mul	a4,a5,s6
-    80002a32:	9756                	add	a4,a4,s5
-    80002a34:	5378                	lw	a4,100(a4)
-    80002a36:	f1371fe3          	bne	a4,s3,80002954 <scheduler+0xbe>
-          c->runnable_list_head = p->prev_proc;
-    80002a3a:	08f92023          	sw	a5,128(s2)
-    80002a3e:	bf19                	j	80002954 <scheduler+0xbe>
-
-0000000080002a40 <sched>:
-{
-    80002a40:	7179                	addi	sp,sp,-48
-    80002a42:	f406                	sd	ra,40(sp)
-    80002a44:	f022                	sd	s0,32(sp)
-    80002a46:	ec26                	sd	s1,24(sp)
-    80002a48:	e84a                	sd	s2,16(sp)
-    80002a4a:	e44e                	sd	s3,8(sp)
-    80002a4c:	1800                	addi	s0,sp,48
+    800023ec:	0209b823          	sd	zero,48(s3)
+        release(&p->lock);
+    800023f0:	8562                	mv	a0,s8
+    800023f2:	fffff097          	auipc	ra,0xfffff
+    800023f6:	8a6080e7          	jalr	-1882(ra) # 80000c98 <release>
+    800023fa:	bf71                	j	80002396 <scheduler+0x60>
+
+00000000800023fc <sched>:
+{
+    800023fc:	7179                	addi	sp,sp,-48
+    800023fe:	f406                	sd	ra,40(sp)
+    80002400:	f022                	sd	s0,32(sp)
+    80002402:	ec26                	sd	s1,24(sp)
+    80002404:	e84a                	sd	s2,16(sp)
+    80002406:	e44e                	sd	s3,8(sp)
+    80002408:	e052                	sd	s4,0(sp)
+    8000240a:	1800                	addi	s0,sp,48
   struct proc *p = myproc();
-    80002a4e:	fffff097          	auipc	ra,0xfffff
-    80002a52:	146080e7          	jalr	326(ra) # 80001b94 <myproc>
-    80002a56:	892a                	mv	s2,a0
+    8000240c:	00000097          	auipc	ra,0x0
+    80002410:	8c4080e7          	jalr	-1852(ra) # 80001cd0 <myproc>
+    80002414:	84aa                	mv	s1,a0
   if(!holding(&p->lock))
-    80002a58:	ffffe097          	auipc	ra,0xffffe
-    80002a5c:	112080e7          	jalr	274(ra) # 80000b6a <holding>
-    80002a60:	c55d                	beqz	a0,80002b0e <sched+0xce>
+    80002416:	ffffe097          	auipc	ra,0xffffe
+    8000241a:	754080e7          	jalr	1876(ra) # 80000b6a <holding>
+    8000241e:	c541                	beqz	a0,800024a6 <sched+0xaa>
   asm volatile("mv %0, tp" : "=r" (x) );
-    80002a62:	8792                	mv	a5,tp
-  int id = r_tp();
-    80002a64:	0007871b          	sext.w	a4,a5
-  c->cpu_id = id;
-    80002a68:	00010617          	auipc	a2,0x10
-    80002a6c:	85860613          	addi	a2,a2,-1960 # 800122c0 <cpus>
-    80002a70:	00371793          	slli	a5,a4,0x3
-    80002a74:	00e786b3          	add	a3,a5,a4
-    80002a78:	0692                	slli	a3,a3,0x4
-    80002a7a:	96b2                	add	a3,a3,a2
-    80002a7c:	08e6a423          	sw	a4,136(a3)
+    80002420:	8792                	mv	a5,tp
   if(mycpu()->noff != 1)
-    80002a80:	5eb8                	lw	a4,120(a3)
-    80002a82:	4785                	li	a5,1
-    80002a84:	08f71d63          	bne	a4,a5,80002b1e <sched+0xde>
+    80002422:	2781                	sext.w	a5,a5
+    80002424:	0a800713          	li	a4,168
+    80002428:	02e787b3          	mul	a5,a5,a4
+    8000242c:	0000f717          	auipc	a4,0xf
+    80002430:	e7470713          	addi	a4,a4,-396 # 800112a0 <pid_lock>
+    80002434:	97ba                	add	a5,a5,a4
+    80002436:	0a87a703          	lw	a4,168(a5)
+    8000243a:	4785                	li	a5,1
+    8000243c:	06f71d63          	bne	a4,a5,800024b6 <sched+0xba>
   if(p->state == RUNNING)
-    80002a88:	01892703          	lw	a4,24(s2)
-    80002a8c:	4791                	li	a5,4
-    80002a8e:	0af70063          	beq	a4,a5,80002b2e <sched+0xee>
+    80002440:	4c98                	lw	a4,24(s1)
+    80002442:	4791                	li	a5,4
+    80002444:	08f70163          	beq	a4,a5,800024c6 <sched+0xca>
   asm volatile("csrr %0, sstatus" : "=r" (x) );
-    80002a92:	100027f3          	csrr	a5,sstatus
+    80002448:	100027f3          	csrr	a5,sstatus
   return (x & SSTATUS_SIE) != 0;
-    80002a96:	8b89                	andi	a5,a5,2
+    8000244c:	8b89                	andi	a5,a5,2
   if(intr_get())
-    80002a98:	e3dd                	bnez	a5,80002b3e <sched+0xfe>
+    8000244e:	e7c1                	bnez	a5,800024d6 <sched+0xda>
   asm volatile("mv %0, tp" : "=r" (x) );
-    80002a9a:	8792                	mv	a5,tp
-  int id = r_tp();
-    80002a9c:	0007871b          	sext.w	a4,a5
-  c->cpu_id = id;
-    80002aa0:	00010497          	auipc	s1,0x10
-    80002aa4:	82048493          	addi	s1,s1,-2016 # 800122c0 <cpus>
-    80002aa8:	00371793          	slli	a5,a4,0x3
-    80002aac:	00e786b3          	add	a3,a5,a4
-    80002ab0:	0692                	slli	a3,a3,0x4
-    80002ab2:	96a6                	add	a3,a3,s1
-    80002ab4:	08e6a423          	sw	a4,136(a3)
+    80002450:	8792                	mv	a5,tp
   intena = mycpu()->intena;
-    80002ab8:	07c6a983          	lw	s3,124(a3)
-    80002abc:	8592                	mv	a1,tp
-  int id = r_tp();
-    80002abe:	0005879b          	sext.w	a5,a1
-  c->cpu_id = id;
-    80002ac2:	00379593          	slli	a1,a5,0x3
-    80002ac6:	00f58733          	add	a4,a1,a5
-    80002aca:	0712                	slli	a4,a4,0x4
-    80002acc:	9726                	add	a4,a4,s1
-    80002ace:	08f72423          	sw	a5,136(a4)
+    80002452:	0000f917          	auipc	s2,0xf
+    80002456:	e4e90913          	addi	s2,s2,-434 # 800112a0 <pid_lock>
+    8000245a:	2781                	sext.w	a5,a5
+    8000245c:	0a800993          	li	s3,168
+    80002460:	033787b3          	mul	a5,a5,s3
+    80002464:	97ca                	add	a5,a5,s2
+    80002466:	0ac7aa03          	lw	s4,172(a5)
+    8000246a:	8792                	mv	a5,tp
   swtch(&p->context, &mycpu()->context);
-    80002ad2:	95be                	add	a1,a1,a5
-    80002ad4:	0592                	slli	a1,a1,0x4
-    80002ad6:	05a1                	addi	a1,a1,8
-    80002ad8:	95a6                	add	a1,a1,s1
-    80002ada:	09090513          	addi	a0,s2,144
-    80002ade:	00001097          	auipc	ra,0x1
-    80002ae2:	13a080e7          	jalr	314(ra) # 80003c18 <swtch>
-    80002ae6:	8792                	mv	a5,tp
-  int id = r_tp();
-    80002ae8:	0007871b          	sext.w	a4,a5
-  c->cpu_id = id;
-    80002aec:	00371793          	slli	a5,a4,0x3
-    80002af0:	00e786b3          	add	a3,a5,a4
-    80002af4:	0692                	slli	a3,a3,0x4
-    80002af6:	96a6                	add	a3,a3,s1
-    80002af8:	08e6a423          	sw	a4,136(a3)
+    8000246c:	2781                	sext.w	a5,a5
+    8000246e:	033787b3          	mul	a5,a5,s3
+    80002472:	0000f597          	auipc	a1,0xf
+    80002476:	e6658593          	addi	a1,a1,-410 # 800112d8 <cpus+0x8>
+    8000247a:	95be                	add	a1,a1,a5
+    8000247c:	06048513          	addi	a0,s1,96
+    80002480:	00000097          	auipc	ra,0x0
+    80002484:	704080e7          	jalr	1796(ra) # 80002b84 <swtch>
+    80002488:	8792                	mv	a5,tp
   mycpu()->intena = intena;
-    80002afc:	0736ae23          	sw	s3,124(a3)
-}
-    80002b00:	70a2                	ld	ra,40(sp)
-    80002b02:	7402                	ld	s0,32(sp)
-    80002b04:	64e2                	ld	s1,24(sp)
-    80002b06:	6942                	ld	s2,16(sp)
-    80002b08:	69a2                	ld	s3,8(sp)
-    80002b0a:	6145                	addi	sp,sp,48
-    80002b0c:	8082                	ret
+    8000248a:	2781                	sext.w	a5,a5
+    8000248c:	033787b3          	mul	a5,a5,s3
+    80002490:	97ca                	add	a5,a5,s2
+    80002492:	0b47a623          	sw	s4,172(a5)
+}
+    80002496:	70a2                	ld	ra,40(sp)
+    80002498:	7402                	ld	s0,32(sp)
+    8000249a:	64e2                	ld	s1,24(sp)
+    8000249c:	6942                	ld	s2,16(sp)
+    8000249e:	69a2                	ld	s3,8(sp)
+    800024a0:	6a02                	ld	s4,0(sp)
+    800024a2:	6145                	addi	sp,sp,48
+    800024a4:	8082                	ret
     panic("sched p->lock");
-    80002b0e:	00007517          	auipc	a0,0x7
-    80002b12:	8ba50513          	addi	a0,a0,-1862 # 800093c8 <digits+0x388>
-    80002b16:	ffffe097          	auipc	ra,0xffffe
-    80002b1a:	a28080e7          	jalr	-1496(ra) # 8000053e <panic>
+    800024a6:	00006517          	auipc	a0,0x6
+    800024aa:	dfa50513          	addi	a0,a0,-518 # 800082a0 <digits+0x260>
+    800024ae:	ffffe097          	auipc	ra,0xffffe
+    800024b2:	090080e7          	jalr	144(ra) # 8000053e <panic>
     panic("sched locks");
-    80002b1e:	00007517          	auipc	a0,0x7
-    80002b22:	8ba50513          	addi	a0,a0,-1862 # 800093d8 <digits+0x398>
-    80002b26:	ffffe097          	auipc	ra,0xffffe
-    80002b2a:	a18080e7          	jalr	-1512(ra) # 8000053e <panic>
+    800024b6:	00006517          	auipc	a0,0x6
+    800024ba:	dfa50513          	addi	a0,a0,-518 # 800082b0 <digits+0x270>
+    800024be:	ffffe097          	auipc	ra,0xffffe
+    800024c2:	080080e7          	jalr	128(ra) # 8000053e <panic>
     panic("sched running");
-    80002b2e:	00007517          	auipc	a0,0x7
-    80002b32:	8ba50513          	addi	a0,a0,-1862 # 800093e8 <digits+0x3a8>
-    80002b36:	ffffe097          	auipc	ra,0xffffe
-    80002b3a:	a08080e7          	jalr	-1528(ra) # 8000053e <panic>
+    800024c6:	00006517          	auipc	a0,0x6
+    800024ca:	dfa50513          	addi	a0,a0,-518 # 800082c0 <digits+0x280>
+    800024ce:	ffffe097          	auipc	ra,0xffffe
+    800024d2:	070080e7          	jalr	112(ra) # 8000053e <panic>
     panic("sched interruptible");
-    80002b3e:	00007517          	auipc	a0,0x7
-    80002b42:	8ba50513          	addi	a0,a0,-1862 # 800093f8 <digits+0x3b8>
-    80002b46:	ffffe097          	auipc	ra,0xffffe
-    80002b4a:	9f8080e7          	jalr	-1544(ra) # 8000053e <panic>
-
-0000000080002b4e <yield>:
-{
-    80002b4e:	1101                	addi	sp,sp,-32
-    80002b50:	ec06                	sd	ra,24(sp)
-    80002b52:	e822                	sd	s0,16(sp)
-    80002b54:	e426                	sd	s1,8(sp)
-    80002b56:	e04a                	sd	s2,0(sp)
-    80002b58:	1000                	addi	s0,sp,32
+    800024d6:	00006517          	auipc	a0,0x6
+    800024da:	dfa50513          	addi	a0,a0,-518 # 800082d0 <digits+0x290>
+    800024de:	ffffe097          	auipc	ra,0xffffe
+    800024e2:	060080e7          	jalr	96(ra) # 8000053e <panic>
+
+00000000800024e6 <yield>:
+{
+    800024e6:	1101                	addi	sp,sp,-32
+    800024e8:	ec06                	sd	ra,24(sp)
+    800024ea:	e822                	sd	s0,16(sp)
+    800024ec:	e426                	sd	s1,8(sp)
+    800024ee:	1000                	addi	s0,sp,32
   struct proc *p = myproc();
-    80002b5a:	fffff097          	auipc	ra,0xfffff
-    80002b5e:	03a080e7          	jalr	58(ra) # 80001b94 <myproc>
-    80002b62:	84aa                	mv	s1,a0
+    800024f0:	fffff097          	auipc	ra,0xfffff
+    800024f4:	7e0080e7          	jalr	2016(ra) # 80001cd0 <myproc>
+    800024f8:	84aa                	mv	s1,a0
   acquire(&p->lock);
-    80002b64:	ffffe097          	auipc	ra,0xffffe
-    80002b68:	080080e7          	jalr	128(ra) # 80000be4 <acquire>
+    800024fa:	ffffe097          	auipc	ra,0xffffe
+    800024fe:	6ea080e7          	jalr	1770(ra) # 80000be4 <acquire>
   p->state = RUNNABLE;
-    80002b6c:	478d                	li	a5,3
-    80002b6e:	cc9c                	sw	a5,24(s1)
-  p->last_runnable_time = ticks;
-    80002b70:	00007797          	auipc	a5,0x7
-    80002b74:	4e47a783          	lw	a5,1252(a5) # 8000a054 <ticks>
-    80002b78:	dcdc                	sw	a5,60(s1)
-    80002b7a:	8792                	mv	a5,tp
-  int id = r_tp();
-    80002b7c:	0007871b          	sext.w	a4,a5
-  c->cpu_id = id;
-    80002b80:	0000f617          	auipc	a2,0xf
-    80002b84:	74060613          	addi	a2,a2,1856 # 800122c0 <cpus>
-    80002b88:	00371793          	slli	a5,a4,0x3
-    80002b8c:	00e786b3          	add	a3,a5,a4
-    80002b90:	0692                	slli	a3,a3,0x4
-    80002b92:	96b2                	add	a3,a3,a2
-    80002b94:	08e6a423          	sw	a4,136(a3)
-   if (mycpu()->runnable_list_head == -1)
-    80002b98:	0806a703          	lw	a4,128(a3)
-    80002b9c:	57fd                	li	a5,-1
-    80002b9e:	08f70063          	beq	a4,a5,80002c1e <yield+0xd0>
-    printf("runnable8");
-    80002ba2:	00007517          	auipc	a0,0x7
-    80002ba6:	89650513          	addi	a0,a0,-1898 # 80009438 <digits+0x3f8>
-    80002baa:	ffffe097          	auipc	ra,0xffffe
-    80002bae:	9de080e7          	jalr	-1570(ra) # 80000588 <printf>
-    80002bb2:	8792                	mv	a5,tp
-  int id = r_tp();
-    80002bb4:	0007871b          	sext.w	a4,a5
-  c->cpu_id = id;
-    80002bb8:	0000f917          	auipc	s2,0xf
-    80002bbc:	70890913          	addi	s2,s2,1800 # 800122c0 <cpus>
-    80002bc0:	00371793          	slli	a5,a4,0x3
-    80002bc4:	00e786b3          	add	a3,a5,a4
-    80002bc8:	0692                	slli	a3,a3,0x4
-    80002bca:	96ca                	add	a3,a3,s2
-    80002bcc:	08e6a423          	sw	a4,136(a3)
-    add_proc_to_list(mycpu()->runnable_list_tail, p);
-    80002bd0:	85a6                	mv	a1,s1
-    80002bd2:	0846a503          	lw	a0,132(a3)
-    80002bd6:	fffff097          	auipc	ra,0xfffff
-    80002bda:	c70080e7          	jalr	-912(ra) # 80001846 <add_proc_to_list>
-    80002bde:	8792                	mv	a5,tp
-  int id = r_tp();
-    80002be0:	0007871b          	sext.w	a4,a5
-  c->cpu_id = id;
-    80002be4:	00371793          	slli	a5,a4,0x3
-    80002be8:	00e786b3          	add	a3,a5,a4
-    80002bec:	0692                	slli	a3,a3,0x4
-    80002bee:	96ca                	add	a3,a3,s2
-    80002bf0:	08e6a423          	sw	a4,136(a3)
-    mycpu()->runnable_list_tail = p->proc_ind;
-    80002bf4:	4cf4                	lw	a3,92(s1)
-    80002bf6:	97ba                	add	a5,a5,a4
-    80002bf8:	0792                	slli	a5,a5,0x4
-    80002bfa:	993e                	add	s2,s2,a5
-    80002bfc:	08d92223          	sw	a3,132(s2)
+    80002502:	478d                	li	a5,3
+    80002504:	cc9c                	sw	a5,24(s1)
+    80002506:	8792                	mv	a5,tp
+  append(&(mycpu()->runnable_list), p);
+    80002508:	2781                	sext.w	a5,a5
+    8000250a:	0a800513          	li	a0,168
+    8000250e:	02a787b3          	mul	a5,a5,a0
+    80002512:	85a6                	mv	a1,s1
+    80002514:	0000f517          	auipc	a0,0xf
+    80002518:	e4450513          	addi	a0,a0,-444 # 80011358 <cpus+0x88>
+    8000251c:	953e                	add	a0,a0,a5
+    8000251e:	fffff097          	auipc	ra,0xfffff
+    80002522:	368080e7          	jalr	872(ra) # 80001886 <append>
   sched();
-    80002c00:	00000097          	auipc	ra,0x0
-    80002c04:	e40080e7          	jalr	-448(ra) # 80002a40 <sched>
+    80002526:	00000097          	auipc	ra,0x0
+    8000252a:	ed6080e7          	jalr	-298(ra) # 800023fc <sched>
   release(&p->lock);
-    80002c08:	8526                	mv	a0,s1
-    80002c0a:	ffffe097          	auipc	ra,0xffffe
-    80002c0e:	08e080e7          	jalr	142(ra) # 80000c98 <release>
-}
-    80002c12:	60e2                	ld	ra,24(sp)
-    80002c14:	6442                	ld	s0,16(sp)
-    80002c16:	64a2                	ld	s1,8(sp)
-    80002c18:	6902                	ld	s2,0(sp)
-    80002c1a:	6105                	addi	sp,sp,32
-    80002c1c:	8082                	ret
-     printf("init runnable : %d                   8\n", p->proc_ind);
-    80002c1e:	4cec                	lw	a1,92(s1)
-    80002c20:	00006517          	auipc	a0,0x6
-    80002c24:	7f050513          	addi	a0,a0,2032 # 80009410 <digits+0x3d0>
-    80002c28:	ffffe097          	auipc	ra,0xffffe
-    80002c2c:	960080e7          	jalr	-1696(ra) # 80000588 <printf>
-    80002c30:	8792                	mv	a5,tp
-  int id = r_tp();
-    80002c32:	0007869b          	sext.w	a3,a5
-  c->cpu_id = id;
-    80002c36:	0000f717          	auipc	a4,0xf
-    80002c3a:	68a70713          	addi	a4,a4,1674 # 800122c0 <cpus>
-    80002c3e:	00369793          	slli	a5,a3,0x3
-    80002c42:	00d78633          	add	a2,a5,a3
-    80002c46:	0612                	slli	a2,a2,0x4
-    80002c48:	963a                	add	a2,a2,a4
-    80002c4a:	08d62423          	sw	a3,136(a2)
-    mycpu()->runnable_list_head = p->proc_ind;
-    80002c4e:	4cf0                	lw	a2,92(s1)
-    80002c50:	97b6                	add	a5,a5,a3
-    80002c52:	0792                	slli	a5,a5,0x4
-    80002c54:	97ba                	add	a5,a5,a4
-    80002c56:	08c7a023          	sw	a2,128(a5)
-    80002c5a:	8792                	mv	a5,tp
-  int id = r_tp();
-    80002c5c:	0007869b          	sext.w	a3,a5
-  c->cpu_id = id;
-    80002c60:	00369793          	slli	a5,a3,0x3
-    80002c64:	00d78633          	add	a2,a5,a3
-    80002c68:	0612                	slli	a2,a2,0x4
-    80002c6a:	963a                	add	a2,a2,a4
-    80002c6c:	08d62423          	sw	a3,136(a2)
-    mycpu()->runnable_list_tail = p->proc_ind;
-    80002c70:	4cf0                	lw	a2,92(s1)
-    80002c72:	97b6                	add	a5,a5,a3
-    80002c74:	0792                	slli	a5,a5,0x4
-    80002c76:	973e                	add	a4,a4,a5
-    80002c78:	08c72223          	sw	a2,132(a4)
-    80002c7c:	b751                	j	80002c00 <yield+0xb2>
-
-0000000080002c7e <sleep>:
+    8000252e:	8526                	mv	a0,s1
+    80002530:	ffffe097          	auipc	ra,0xffffe
+    80002534:	768080e7          	jalr	1896(ra) # 80000c98 <release>
+}
+    80002538:	60e2                	ld	ra,24(sp)
+    8000253a:	6442                	ld	s0,16(sp)
+    8000253c:	64a2                	ld	s1,8(sp)
+    8000253e:	6105                	addi	sp,sp,32
+    80002540:	8082                	ret
+
+0000000080002542 <sleep>:
 
 // Atomically release lock and sleep on chan.
 // Reacquires lock when awakened.
 void
 sleep(void *chan, struct spinlock *lk)
 {
-    80002c7e:	7179                	addi	sp,sp,-48
-    80002c80:	f406                	sd	ra,40(sp)
-    80002c82:	f022                	sd	s0,32(sp)
-    80002c84:	ec26                	sd	s1,24(sp)
-    80002c86:	e84a                	sd	s2,16(sp)
-    80002c88:	e44e                	sd	s3,8(sp)
-    80002c8a:	1800                	addi	s0,sp,48
-    80002c8c:	89aa                	mv	s3,a0
-    80002c8e:	892e                	mv	s2,a1
-  // TODO: remove from RUNNABLE and add to SLEEPING
+    80002542:	7179                	addi	sp,sp,-48
+    80002544:	f406                	sd	ra,40(sp)
+    80002546:	f022                	sd	s0,32(sp)
+    80002548:	ec26                	sd	s1,24(sp)
+    8000254a:	e84a                	sd	s2,16(sp)
+    8000254c:	e44e                	sd	s3,8(sp)
+    8000254e:	1800                	addi	s0,sp,48
+    80002550:	89aa                	mv	s3,a0
+    80002552:	892e                	mv	s2,a1
   struct proc *p = myproc();
-    80002c90:	fffff097          	auipc	ra,0xfffff
-    80002c94:	f04080e7          	jalr	-252(ra) # 80001b94 <myproc>
-    80002c98:	84aa                	mv	s1,a0
+    80002554:	fffff097          	auipc	ra,0xfffff
+    80002558:	77c080e7          	jalr	1916(ra) # 80001cd0 <myproc>
+    8000255c:	84aa                	mv	s1,a0
   // Once we hold p->lock, we can be
   // guaranteed that we won't miss any wakeup
   // (wakeup locks p->lock),
   // so it's okay to release lk.
 
-  acquire(&p->lock);  //DOC: sleeplock1
-    80002c9a:	ffffe097          	auipc	ra,0xffffe
-    80002c9e:	f4a080e7          	jalr	-182(ra) # 80000be4 <acquire>
+  acquire(&p->lock);
+    8000255e:	ffffe097          	auipc	ra,0xffffe
+    80002562:	686080e7          	jalr	1670(ra) # 80000be4 <acquire>
   release(lk);
-    80002ca2:	854a                	mv	a0,s2
-    80002ca4:	ffffe097          	auipc	ra,0xffffe
-    80002ca8:	ff4080e7          	jalr	-12(ra) # 80000c98 <release>
-
-  //Ass2
-  printf("runnable ");
-    80002cac:	00006517          	auipc	a0,0x6
-    80002cb0:	79c50513          	addi	a0,a0,1948 # 80009448 <digits+0x408>
-    80002cb4:	ffffe097          	auipc	ra,0xffffe
-    80002cb8:	8d4080e7          	jalr	-1836(ra) # 80000588 <printf>
-  int res = remove_proc_from_list(p->proc_ind); 
-    80002cbc:	4ce8                	lw	a0,92(s1)
-    80002cbe:	fffff097          	auipc	ra,0xfffff
-    80002cc2:	c06080e7          	jalr	-1018(ra) # 800018c4 <remove_proc_from_list>
-  if (res == 1)
-    80002cc6:	4785                	li	a5,1
-    80002cc8:	08f50f63          	beq	a0,a5,80002d66 <sleep+0xe8>
-  {
-    mycpu()->runnable_list_head = -1;
-    mycpu()->runnable_list_tail = -1;
-    printf("4 no head & tail");
-  }
-  if (res == 2)
-    80002ccc:	4789                	li	a5,2
-    80002cce:	0ef50463          	beq	a0,a5,80002db6 <sleep+0x138>
-    if (proc[p->next_proc].next_proc == -1)
-      mycpu()->runnable_list_tail = p->next_proc;
-    proc[p->next_proc].prev_proc = -1;
-    printf("4 no head ");
-  }
-  if (res == 3){
-    80002cd2:	478d                	li	a5,3
-    80002cd4:	16f50a63          	beq	a0,a5,80002e48 <sleep+0x1ca>
-      mycpu()->runnable_list_head = p->prev_proc;
-    proc[p->prev_proc].next_proc = -1;
-    printf("4 no tail");
-  }
-
-  p->next_proc = -1;
-    80002cd8:	57fd                	li	a5,-1
-    80002cda:	d0bc                	sw	a5,96(s1)
-  p->prev_proc = -1;
-    80002cdc:	d0fc                	sw	a5,100(s1)
+    80002566:	854a                	mv	a0,s2
+    80002568:	ffffe097          	auipc	ra,0xffffe
+    8000256c:	730080e7          	jalr	1840(ra) # 80000c98 <release>
 
   // Go to sleep.
   p->chan = chan;
-    80002cde:	0334b023          	sd	s3,32(s1)
+    80002570:	0334b023          	sd	s3,32(s1)
   p->state = SLEEPING;
-    80002ce2:	4789                	li	a5,2
-    80002ce4:	cc9c                	sw	a5,24(s1)
-  p->start_sleeping_time = ticks;
-    80002ce6:	00007797          	auipc	a5,0x7
-    80002cea:	36e7a783          	lw	a5,878(a5) # 8000a054 <ticks>
-    80002cee:	c8fc                	sw	a5,84(s1)
-
-  if (sleeping_list_tail != -1){
-    80002cf0:	00007717          	auipc	a4,0x7
-    80002cf4:	f4872703          	lw	a4,-184(a4) # 80009c38 <sleeping_list_tail>
-    80002cf8:	57fd                	li	a5,-1
-    80002cfa:	1ef70663          	beq	a4,a5,80002ee6 <sleep+0x268>
-    printf("sleeping");
-    80002cfe:	00006517          	auipc	a0,0x6
-    80002d02:	79250513          	addi	a0,a0,1938 # 80009490 <digits+0x450>
-    80002d06:	ffffe097          	auipc	ra,0xffffe
-    80002d0a:	882080e7          	jalr	-1918(ra) # 80000588 <printf>
-    add_proc_to_list(sleeping_list_tail, p);
-    80002d0e:	85a6                	mv	a1,s1
-    80002d10:	00007517          	auipc	a0,0x7
-    80002d14:	f2852503          	lw	a0,-216(a0) # 80009c38 <sleeping_list_tail>
-    80002d18:	fffff097          	auipc	ra,0xfffff
-    80002d1c:	b2e080e7          	jalr	-1234(ra) # 80001846 <add_proc_to_list>
-    if (sleeping_list_head == -1)
-    80002d20:	00007717          	auipc	a4,0x7
-    80002d24:	f1c72703          	lw	a4,-228(a4) # 80009c3c <sleeping_list_head>
-    80002d28:	57fd                	li	a5,-1
-    80002d2a:	1af70863          	beq	a4,a5,80002eda <sleep+0x25c>
-      {
-        sleeping_list_head = p->proc_ind;
-      }
-    sleeping_list_tail = p->proc_ind;
-    80002d2e:	4cfc                	lw	a5,92(s1)
-    80002d30:	00007717          	auipc	a4,0x7
-    80002d34:	f0f72423          	sw	a5,-248(a4) # 80009c38 <sleeping_list_tail>
-    printf("head in sleeping\n");
-    sleeping_list_tail =  p->proc_ind;
-    sleeping_list_head = p->proc_ind;
-  }
+    80002574:	4789                	li	a5,2
+    80002576:	cc9c                	sw	a5,24(s1)
+
+  struct linked_list *add_to_SLEEPING_list = &sleeping_list;
+  append(add_to_SLEEPING_list, p);
+    80002578:	85a6                	mv	a1,s1
+    8000257a:	00006517          	auipc	a0,0x6
+    8000257e:	34650513          	addi	a0,a0,838 # 800088c0 <sleeping_list>
+    80002582:	fffff097          	auipc	ra,0xfffff
+    80002586:	304080e7          	jalr	772(ra) # 80001886 <append>
 
   sched();
-    80002d38:	00000097          	auipc	ra,0x0
-    80002d3c:	d08080e7          	jalr	-760(ra) # 80002a40 <sched>
+    8000258a:	00000097          	auipc	ra,0x0
+    8000258e:	e72080e7          	jalr	-398(ra) # 800023fc <sched>
 
   // Tidy up.
   p->chan = 0;
-    80002d40:	0204b023          	sd	zero,32(s1)
+    80002592:	0204b023          	sd	zero,32(s1)
 
   // Reacquire original lock.
   release(&p->lock);
-    80002d44:	8526                	mv	a0,s1
-    80002d46:	ffffe097          	auipc	ra,0xffffe
-    80002d4a:	f52080e7          	jalr	-174(ra) # 80000c98 <release>
+    80002596:	8526                	mv	a0,s1
+    80002598:	ffffe097          	auipc	ra,0xffffe
+    8000259c:	700080e7          	jalr	1792(ra) # 80000c98 <release>
   acquire(lk);
-    80002d4e:	854a                	mv	a0,s2
-    80002d50:	ffffe097          	auipc	ra,0xffffe
-    80002d54:	e94080e7          	jalr	-364(ra) # 80000be4 <acquire>
-}
-    80002d58:	70a2                	ld	ra,40(sp)
-    80002d5a:	7402                	ld	s0,32(sp)
-    80002d5c:	64e2                	ld	s1,24(sp)
-    80002d5e:	6942                	ld	s2,16(sp)
-    80002d60:	69a2                	ld	s3,8(sp)
-    80002d62:	6145                	addi	sp,sp,48
-    80002d64:	8082                	ret
-    80002d66:	8792                	mv	a5,tp
-  int id = r_tp();
-    80002d68:	0007869b          	sext.w	a3,a5
-  c->cpu_id = id;
-    80002d6c:	0000f717          	auipc	a4,0xf
-    80002d70:	55470713          	addi	a4,a4,1364 # 800122c0 <cpus>
-    80002d74:	00369793          	slli	a5,a3,0x3
-    80002d78:	00d78633          	add	a2,a5,a3
-    80002d7c:	0612                	slli	a2,a2,0x4
-    80002d7e:	963a                	add	a2,a2,a4
-    80002d80:	08d62423          	sw	a3,136(a2)
-    mycpu()->runnable_list_head = -1;
-    80002d84:	55fd                	li	a1,-1
-    80002d86:	08b62023          	sw	a1,128(a2)
-    80002d8a:	8792                	mv	a5,tp
-  int id = r_tp();
-    80002d8c:	0007869b          	sext.w	a3,a5
-  c->cpu_id = id;
-    80002d90:	00369793          	slli	a5,a3,0x3
-    80002d94:	00d78633          	add	a2,a5,a3
-    80002d98:	0612                	slli	a2,a2,0x4
-    80002d9a:	963a                	add	a2,a2,a4
-    80002d9c:	08d62423          	sw	a3,136(a2)
-    mycpu()->runnable_list_tail = -1;
-    80002da0:	08b62223          	sw	a1,132(a2)
-    printf("4 no head & tail");
-    80002da4:	00006517          	auipc	a0,0x6
-    80002da8:	6b450513          	addi	a0,a0,1716 # 80009458 <digits+0x418>
-    80002dac:	ffffd097          	auipc	ra,0xffffd
-    80002db0:	7dc080e7          	jalr	2012(ra) # 80000588 <printf>
-  if (res == 3){
-    80002db4:	b715                	j	80002cd8 <sleep+0x5a>
-    80002db6:	8792                	mv	a5,tp
-  int id = r_tp();
-    80002db8:	0007871b          	sext.w	a4,a5
-  c->cpu_id = id;
-    80002dbc:	0000f617          	auipc	a2,0xf
-    80002dc0:	50460613          	addi	a2,a2,1284 # 800122c0 <cpus>
-    80002dc4:	00371793          	slli	a5,a4,0x3
-    80002dc8:	00e786b3          	add	a3,a5,a4
-    80002dcc:	0692                	slli	a3,a3,0x4
-    80002dce:	96b2                	add	a3,a3,a2
-    80002dd0:	08e6a423          	sw	a4,136(a3)
-    mycpu()->runnable_list_head = p->next_proc;
-    80002dd4:	50b4                	lw	a3,96(s1)
-    80002dd6:	97ba                	add	a5,a5,a4
-    80002dd8:	0792                	slli	a5,a5,0x4
-    80002dda:	97b2                	add	a5,a5,a2
-    80002ddc:	08d7a023          	sw	a3,128(a5)
-    if (proc[p->next_proc].next_proc == -1)
-    80002de0:	19800793          	li	a5,408
-    80002de4:	02f686b3          	mul	a3,a3,a5
-    80002de8:	00010797          	auipc	a5,0x10
-    80002dec:	98878793          	addi	a5,a5,-1656 # 80012770 <proc>
-    80002df0:	96be                	add	a3,a3,a5
-    80002df2:	52b8                	lw	a4,96(a3)
-    80002df4:	57fd                	li	a5,-1
-    80002df6:	02f70763          	beq	a4,a5,80002e24 <sleep+0x1a6>
-    proc[p->next_proc].prev_proc = -1;
-    80002dfa:	50bc                	lw	a5,96(s1)
-    80002dfc:	19800713          	li	a4,408
-    80002e00:	02e78733          	mul	a4,a5,a4
-    80002e04:	00010797          	auipc	a5,0x10
-    80002e08:	96c78793          	addi	a5,a5,-1684 # 80012770 <proc>
-    80002e0c:	97ba                	add	a5,a5,a4
-    80002e0e:	577d                	li	a4,-1
-    80002e10:	d3f8                	sw	a4,100(a5)
-    printf("4 no head ");
-    80002e12:	00006517          	auipc	a0,0x6
-    80002e16:	65e50513          	addi	a0,a0,1630 # 80009470 <digits+0x430>
-    80002e1a:	ffffd097          	auipc	ra,0xffffd
-    80002e1e:	76e080e7          	jalr	1902(ra) # 80000588 <printf>
-  if (res == 3){
-    80002e22:	bd5d                	j	80002cd8 <sleep+0x5a>
-    80002e24:	8792                	mv	a5,tp
-  int id = r_tp();
-    80002e26:	0007871b          	sext.w	a4,a5
-  c->cpu_id = id;
-    80002e2a:	00371793          	slli	a5,a4,0x3
-    80002e2e:	00e786b3          	add	a3,a5,a4
-    80002e32:	0692                	slli	a3,a3,0x4
-    80002e34:	96b2                	add	a3,a3,a2
-    80002e36:	08e6a423          	sw	a4,136(a3)
-      mycpu()->runnable_list_tail = p->next_proc;
-    80002e3a:	50b4                	lw	a3,96(s1)
-    80002e3c:	97ba                	add	a5,a5,a4
-    80002e3e:	0792                	slli	a5,a5,0x4
-    80002e40:	97b2                	add	a5,a5,a2
-    80002e42:	08d7a223          	sw	a3,132(a5)
-    80002e46:	bf55                	j	80002dfa <sleep+0x17c>
-    80002e48:	8792                	mv	a5,tp
-  int id = r_tp();
-    80002e4a:	0007871b          	sext.w	a4,a5
-  c->cpu_id = id;
-    80002e4e:	0000f617          	auipc	a2,0xf
-    80002e52:	47260613          	addi	a2,a2,1138 # 800122c0 <cpus>
-    80002e56:	00371793          	slli	a5,a4,0x3
-    80002e5a:	00e786b3          	add	a3,a5,a4
-    80002e5e:	0692                	slli	a3,a3,0x4
-    80002e60:	96b2                	add	a3,a3,a2
-    80002e62:	08e6a423          	sw	a4,136(a3)
-    mycpu()->runnable_list_tail = p->prev_proc;
-    80002e66:	50f4                	lw	a3,100(s1)
-    80002e68:	97ba                	add	a5,a5,a4
-    80002e6a:	0792                	slli	a5,a5,0x4
-    80002e6c:	97b2                	add	a5,a5,a2
-    80002e6e:	08d7a223          	sw	a3,132(a5)
-    if (proc[p->prev_proc].prev_proc == -1)
-    80002e72:	19800793          	li	a5,408
-    80002e76:	02f686b3          	mul	a3,a3,a5
-    80002e7a:	00010797          	auipc	a5,0x10
-    80002e7e:	8f678793          	addi	a5,a5,-1802 # 80012770 <proc>
-    80002e82:	96be                	add	a3,a3,a5
-    80002e84:	52f8                	lw	a4,100(a3)
-    80002e86:	57fd                	li	a5,-1
-    80002e88:	02f70763          	beq	a4,a5,80002eb6 <sleep+0x238>
-    proc[p->prev_proc].next_proc = -1;
-    80002e8c:	50fc                	lw	a5,100(s1)
-    80002e8e:	19800713          	li	a4,408
-    80002e92:	02e78733          	mul	a4,a5,a4
-    80002e96:	00010797          	auipc	a5,0x10
-    80002e9a:	8da78793          	addi	a5,a5,-1830 # 80012770 <proc>
-    80002e9e:	97ba                	add	a5,a5,a4
-    80002ea0:	577d                	li	a4,-1
-    80002ea2:	d3b8                	sw	a4,96(a5)
-    printf("4 no tail");
-    80002ea4:	00006517          	auipc	a0,0x6
-    80002ea8:	5dc50513          	addi	a0,a0,1500 # 80009480 <digits+0x440>
-    80002eac:	ffffd097          	auipc	ra,0xffffd
-    80002eb0:	6dc080e7          	jalr	1756(ra) # 80000588 <printf>
-    80002eb4:	b515                	j	80002cd8 <sleep+0x5a>
-    80002eb6:	8792                	mv	a5,tp
-  int id = r_tp();
-    80002eb8:	0007871b          	sext.w	a4,a5
-  c->cpu_id = id;
-    80002ebc:	00371793          	slli	a5,a4,0x3
-    80002ec0:	00e786b3          	add	a3,a5,a4
-    80002ec4:	0692                	slli	a3,a3,0x4
-    80002ec6:	96b2                	add	a3,a3,a2
-    80002ec8:	08e6a423          	sw	a4,136(a3)
-      mycpu()->runnable_list_head = p->prev_proc;
-    80002ecc:	50f4                	lw	a3,100(s1)
-    80002ece:	97ba                	add	a5,a5,a4
-    80002ed0:	0792                	slli	a5,a5,0x4
-    80002ed2:	97b2                	add	a5,a5,a2
-    80002ed4:	08d7a023          	sw	a3,128(a5)
-    80002ed8:	bf55                	j	80002e8c <sleep+0x20e>
-        sleeping_list_head = p->proc_ind;
-    80002eda:	4cfc                	lw	a5,92(s1)
-    80002edc:	00007717          	auipc	a4,0x7
-    80002ee0:	d6f72023          	sw	a5,-672(a4) # 80009c3c <sleeping_list_head>
-    80002ee4:	b5a9                	j	80002d2e <sleep+0xb0>
-    printf("head in sleeping\n");
-    80002ee6:	00006517          	auipc	a0,0x6
-    80002eea:	5ba50513          	addi	a0,a0,1466 # 800094a0 <digits+0x460>
-    80002eee:	ffffd097          	auipc	ra,0xffffd
-    80002ef2:	69a080e7          	jalr	1690(ra) # 80000588 <printf>
-    sleeping_list_tail =  p->proc_ind;
-    80002ef6:	4cfc                	lw	a5,92(s1)
-    80002ef8:	00007717          	auipc	a4,0x7
-    80002efc:	d4f72023          	sw	a5,-704(a4) # 80009c38 <sleeping_list_tail>
-    sleeping_list_head = p->proc_ind;
-    80002f00:	00007717          	auipc	a4,0x7
-    80002f04:	d2f72e23          	sw	a5,-708(a4) # 80009c3c <sleeping_list_head>
-    80002f08:	bd05                	j	80002d38 <sleep+0xba>
-
-0000000080002f0a <wait>:
-{
-    80002f0a:	711d                	addi	sp,sp,-96
-    80002f0c:	ec86                	sd	ra,88(sp)
-    80002f0e:	e8a2                	sd	s0,80(sp)
-    80002f10:	e4a6                	sd	s1,72(sp)
-    80002f12:	e0ca                	sd	s2,64(sp)
-    80002f14:	fc4e                	sd	s3,56(sp)
-    80002f16:	f852                	sd	s4,48(sp)
-    80002f18:	f456                	sd	s5,40(sp)
-    80002f1a:	f05a                	sd	s6,32(sp)
-    80002f1c:	ec5e                	sd	s7,24(sp)
-    80002f1e:	e862                	sd	s8,16(sp)
-    80002f20:	e466                	sd	s9,8(sp)
-    80002f22:	1080                	addi	s0,sp,96
-    80002f24:	8b2a                	mv	s6,a0
+    800025a0:	854a                	mv	a0,s2
+    800025a2:	ffffe097          	auipc	ra,0xffffe
+    800025a6:	642080e7          	jalr	1602(ra) # 80000be4 <acquire>
+}
+    800025aa:	70a2                	ld	ra,40(sp)
+    800025ac:	7402                	ld	s0,32(sp)
+    800025ae:	64e2                	ld	s1,24(sp)
+    800025b0:	6942                	ld	s2,16(sp)
+    800025b2:	69a2                	ld	s3,8(sp)
+    800025b4:	6145                	addi	sp,sp,48
+    800025b6:	8082                	ret
+
+00000000800025b8 <wait>:
+{
+    800025b8:	715d                	addi	sp,sp,-80
+    800025ba:	e486                	sd	ra,72(sp)
+    800025bc:	e0a2                	sd	s0,64(sp)
+    800025be:	fc26                	sd	s1,56(sp)
+    800025c0:	f84a                	sd	s2,48(sp)
+    800025c2:	f44e                	sd	s3,40(sp)
+    800025c4:	f052                	sd	s4,32(sp)
+    800025c6:	ec56                	sd	s5,24(sp)
+    800025c8:	e85a                	sd	s6,16(sp)
+    800025ca:	e45e                	sd	s7,8(sp)
+    800025cc:	e062                	sd	s8,0(sp)
+    800025ce:	0880                	addi	s0,sp,80
+    800025d0:	8b2a                	mv	s6,a0
   struct proc *p = myproc();
-    80002f26:	fffff097          	auipc	ra,0xfffff
-    80002f2a:	c6e080e7          	jalr	-914(ra) # 80001b94 <myproc>
-    80002f2e:	892a                	mv	s2,a0
+    800025d2:	fffff097          	auipc	ra,0xfffff
+    800025d6:	6fe080e7          	jalr	1790(ra) # 80001cd0 <myproc>
+    800025da:	892a                	mv	s2,a0
   acquire(&wait_lock);
-    80002f30:	00010517          	auipc	a0,0x10
-    80002f34:	82850513          	addi	a0,a0,-2008 # 80012758 <wait_lock>
-    80002f38:	ffffe097          	auipc	ra,0xffffe
-    80002f3c:	cac080e7          	jalr	-852(ra) # 80000be4 <acquire>
+    800025dc:	0000f517          	auipc	a0,0xf
+    800025e0:	cdc50513          	addi	a0,a0,-804 # 800112b8 <wait_lock>
+    800025e4:	ffffe097          	auipc	ra,0xffffe
+    800025e8:	600080e7          	jalr	1536(ra) # 80000be4 <acquire>
     havekids = 0;
-    80002f40:	4b81                	li	s7,0
+    800025ec:	4b81                	li	s7,0
         if(np->state == ZOMBIE){
-    80002f42:	4a15                	li	s4,5
+    800025ee:	4a15                	li	s4,5
     for(np = proc; np < &proc[NPROC]; np++){
-    80002f44:	00016997          	auipc	s3,0x16
-    80002f48:	e2c98993          	addi	s3,s3,-468 # 80018d70 <tickslock>
+    800025f0:	00015997          	auipc	s3,0x15
+    800025f4:	62098993          	addi	s3,s3,1568 # 80017c10 <tickslock>
         havekids = 1;
-    80002f4c:	4a85                	li	s5,1
-      p->sleeping_time += ticks - p->start_sleeping_time;
-    80002f4e:	00007c97          	auipc	s9,0x7
-    80002f52:	106c8c93          	addi	s9,s9,262 # 8000a054 <ticks>
+    800025f8:	4a85                	li	s5,1
     sleep(p, &wait_lock);  //DOC: wait-sleep
-    80002f56:	00010c17          	auipc	s8,0x10
-    80002f5a:	802c0c13          	addi	s8,s8,-2046 # 80012758 <wait_lock>
+    800025fa:	0000fc17          	auipc	s8,0xf
+    800025fe:	cbec0c13          	addi	s8,s8,-834 # 800112b8 <wait_lock>
     havekids = 0;
-    80002f5e:	875e                	mv	a4,s7
+    80002602:	875e                	mv	a4,s7
     for(np = proc; np < &proc[NPROC]; np++){
-    80002f60:	00010497          	auipc	s1,0x10
-    80002f64:	81048493          	addi	s1,s1,-2032 # 80012770 <proc>
-    80002f68:	a0bd                	j	80002fd6 <wait+0xcc>
+    80002604:	0000f497          	auipc	s1,0xf
+    80002608:	20c48493          	addi	s1,s1,524 # 80011810 <proc>
+    8000260c:	a0bd                	j	8000267a <wait+0xc2>
           pid = np->pid;
-    80002f6a:	0304a983          	lw	s3,48(s1)
+    8000260e:	0304a983          	lw	s3,48(s1)
           if(addr != 0 && copyout(p->pagetable, addr, (char *)&np->xstate,
-    80002f6e:	000b0e63          	beqz	s6,80002f8a <wait+0x80>
-    80002f72:	4691                	li	a3,4
-    80002f74:	02c48613          	addi	a2,s1,44
-    80002f78:	85da                	mv	a1,s6
-    80002f7a:	08093503          	ld	a0,128(s2)
-    80002f7e:	ffffe097          	auipc	ra,0xffffe
-    80002f82:	6fc080e7          	jalr	1788(ra) # 8000167a <copyout>
-    80002f86:	02054563          	bltz	a0,80002fb0 <wait+0xa6>
+    80002612:	000b0e63          	beqz	s6,8000262e <wait+0x76>
+    80002616:	4691                	li	a3,4
+    80002618:	02c48613          	addi	a2,s1,44
+    8000261c:	85da                	mv	a1,s6
+    8000261e:	05093503          	ld	a0,80(s2)
+    80002622:	fffff097          	auipc	ra,0xfffff
+    80002626:	050080e7          	jalr	80(ra) # 80001672 <copyout>
+    8000262a:	02054563          	bltz	a0,80002654 <wait+0x9c>
           freeproc(np);
-    80002f8a:	8526                	mv	a0,s1
-    80002f8c:	fffff097          	auipc	ra,0xfffff
-    80002f90:	dbe080e7          	jalr	-578(ra) # 80001d4a <freeproc>
+    8000262e:	8526                	mv	a0,s1
+    80002630:	00000097          	auipc	ra,0x0
+    80002634:	84c080e7          	jalr	-1972(ra) # 80001e7c <freeproc>
           release(&np->lock);
-    80002f94:	8526                	mv	a0,s1
-    80002f96:	ffffe097          	auipc	ra,0xffffe
-    80002f9a:	d02080e7          	jalr	-766(ra) # 80000c98 <release>
+    80002638:	8526                	mv	a0,s1
+    8000263a:	ffffe097          	auipc	ra,0xffffe
+    8000263e:	65e080e7          	jalr	1630(ra) # 80000c98 <release>
           release(&wait_lock);
-    80002f9e:	0000f517          	auipc	a0,0xf
-    80002fa2:	7ba50513          	addi	a0,a0,1978 # 80012758 <wait_lock>
-    80002fa6:	ffffe097          	auipc	ra,0xffffe
-    80002faa:	cf2080e7          	jalr	-782(ra) # 80000c98 <release>
+    80002642:	0000f517          	auipc	a0,0xf
+    80002646:	c7650513          	addi	a0,a0,-906 # 800112b8 <wait_lock>
+    8000264a:	ffffe097          	auipc	ra,0xffffe
+    8000264e:	64e080e7          	jalr	1614(ra) # 80000c98 <release>
           return pid;
-    80002fae:	a09d                	j	80003014 <wait+0x10a>
+    80002652:	a09d                	j	800026b8 <wait+0x100>
             release(&np->lock);
-    80002fb0:	8526                	mv	a0,s1
-    80002fb2:	ffffe097          	auipc	ra,0xffffe
-    80002fb6:	ce6080e7          	jalr	-794(ra) # 80000c98 <release>
+    80002654:	8526                	mv	a0,s1
+    80002656:	ffffe097          	auipc	ra,0xffffe
+    8000265a:	642080e7          	jalr	1602(ra) # 80000c98 <release>
             release(&wait_lock);
-    80002fba:	0000f517          	auipc	a0,0xf
-    80002fbe:	79e50513          	addi	a0,a0,1950 # 80012758 <wait_lock>
-    80002fc2:	ffffe097          	auipc	ra,0xffffe
-    80002fc6:	cd6080e7          	jalr	-810(ra) # 80000c98 <release>
+    8000265e:	0000f517          	auipc	a0,0xf
+    80002662:	c5a50513          	addi	a0,a0,-934 # 800112b8 <wait_lock>
+    80002666:	ffffe097          	auipc	ra,0xffffe
+    8000266a:	632080e7          	jalr	1586(ra) # 80000c98 <release>
             return -1;
-    80002fca:	59fd                	li	s3,-1
-    80002fcc:	a0a1                	j	80003014 <wait+0x10a>
+    8000266e:	59fd                	li	s3,-1
+    80002670:	a0a1                	j	800026b8 <wait+0x100>
     for(np = proc; np < &proc[NPROC]; np++){
-    80002fce:	19848493          	addi	s1,s1,408
-    80002fd2:	03348463          	beq	s1,s3,80002ffa <wait+0xf0>
+    80002672:	19048493          	addi	s1,s1,400
+    80002676:	03348463          	beq	s1,s3,8000269e <wait+0xe6>
       if(np->parent == p){
-    80002fd6:	74bc                	ld	a5,104(s1)
-    80002fd8:	ff279be3          	bne	a5,s2,80002fce <wait+0xc4>
+    8000267a:	7c9c                	ld	a5,56(s1)
+    8000267c:	ff279be3          	bne	a5,s2,80002672 <wait+0xba>
         acquire(&np->lock);
-    80002fdc:	8526                	mv	a0,s1
-    80002fde:	ffffe097          	auipc	ra,0xffffe
-    80002fe2:	c06080e7          	jalr	-1018(ra) # 80000be4 <acquire>
+    80002680:	8526                	mv	a0,s1
+    80002682:	ffffe097          	auipc	ra,0xffffe
+    80002686:	562080e7          	jalr	1378(ra) # 80000be4 <acquire>
         if(np->state == ZOMBIE){
-    80002fe6:	4c9c                	lw	a5,24(s1)
-    80002fe8:	f94781e3          	beq	a5,s4,80002f6a <wait+0x60>
+    8000268a:	4c9c                	lw	a5,24(s1)
+    8000268c:	f94781e3          	beq	a5,s4,8000260e <wait+0x56>
         release(&np->lock);
-    80002fec:	8526                	mv	a0,s1
-    80002fee:	ffffe097          	auipc	ra,0xffffe
-    80002ff2:	caa080e7          	jalr	-854(ra) # 80000c98 <release>
+    80002690:	8526                	mv	a0,s1
+    80002692:	ffffe097          	auipc	ra,0xffffe
+    80002696:	606080e7          	jalr	1542(ra) # 80000c98 <release>
         havekids = 1;
-    80002ff6:	8756                	mv	a4,s5
-    80002ff8:	bfd9                	j	80002fce <wait+0xc4>
+    8000269a:	8756                	mv	a4,s5
+    8000269c:	bfd9                	j	80002672 <wait+0xba>
     if(!havekids || p->killed){
-    80002ffa:	c701                	beqz	a4,80003002 <wait+0xf8>
-    80002ffc:	02892783          	lw	a5,40(s2)
-    80003000:	cb85                	beqz	a5,80003030 <wait+0x126>
+    8000269e:	c701                	beqz	a4,800026a6 <wait+0xee>
+    800026a0:	02892783          	lw	a5,40(s2)
+    800026a4:	c79d                	beqz	a5,800026d2 <wait+0x11a>
       release(&wait_lock);
-    80003002:	0000f517          	auipc	a0,0xf
-    80003006:	75650513          	addi	a0,a0,1878 # 80012758 <wait_lock>
-    8000300a:	ffffe097          	auipc	ra,0xffffe
-    8000300e:	c8e080e7          	jalr	-882(ra) # 80000c98 <release>
+    800026a6:	0000f517          	auipc	a0,0xf
+    800026aa:	c1250513          	addi	a0,a0,-1006 # 800112b8 <wait_lock>
+    800026ae:	ffffe097          	auipc	ra,0xffffe
+    800026b2:	5ea080e7          	jalr	1514(ra) # 80000c98 <release>
       return -1;
-    80003012:	59fd                	li	s3,-1
-}
-    80003014:	854e                	mv	a0,s3
-    80003016:	60e6                	ld	ra,88(sp)
-    80003018:	6446                	ld	s0,80(sp)
-    8000301a:	64a6                	ld	s1,72(sp)
-    8000301c:	6906                	ld	s2,64(sp)
-    8000301e:	79e2                	ld	s3,56(sp)
-    80003020:	7a42                	ld	s4,48(sp)
-    80003022:	7aa2                	ld	s5,40(sp)
-    80003024:	7b02                	ld	s6,32(sp)
-    80003026:	6be2                	ld	s7,24(sp)
-    80003028:	6c42                	ld	s8,16(sp)
-    8000302a:	6ca2                	ld	s9,8(sp)
-    8000302c:	6125                	addi	sp,sp,96
-    8000302e:	8082                	ret
-    if (p->state == RUNNING)
-    80003030:	01892783          	lw	a5,24(s2)
-    80003034:	4711                	li	a4,4
-    80003036:	02e78063          	beq	a5,a4,80003056 <wait+0x14c>
-     if (p->state == RUNNABLE)
-    8000303a:	470d                	li	a4,3
-    8000303c:	02e79e63          	bne	a5,a4,80003078 <wait+0x16e>
-      p->runnable_time += ticks - p->last_runnable_time;
-    80003040:	04892783          	lw	a5,72(s2)
-    80003044:	000ca703          	lw	a4,0(s9)
-    80003048:	9fb9                	addw	a5,a5,a4
-    8000304a:	03c92703          	lw	a4,60(s2)
-    8000304e:	9f99                	subw	a5,a5,a4
-    80003050:	04f92423          	sw	a5,72(s2)
-    if (p->state == SLEEPING)
-    80003054:	a819                	j	8000306a <wait+0x160>
-      p->running_time += ticks - p->start_running_time;
-    80003056:	04492783          	lw	a5,68(s2)
-    8000305a:	000ca703          	lw	a4,0(s9)
-    8000305e:	9fb9                	addw	a5,a5,a4
-    80003060:	05092703          	lw	a4,80(s2)
-    80003064:	9f99                	subw	a5,a5,a4
-    80003066:	04f92223          	sw	a5,68(s2)
+    800026b6:	59fd                	li	s3,-1
+}
+    800026b8:	854e                	mv	a0,s3
+    800026ba:	60a6                	ld	ra,72(sp)
+    800026bc:	6406                	ld	s0,64(sp)
+    800026be:	74e2                	ld	s1,56(sp)
+    800026c0:	7942                	ld	s2,48(sp)
+    800026c2:	79a2                	ld	s3,40(sp)
+    800026c4:	7a02                	ld	s4,32(sp)
+    800026c6:	6ae2                	ld	s5,24(sp)
+    800026c8:	6b42                	ld	s6,16(sp)
+    800026ca:	6ba2                	ld	s7,8(sp)
+    800026cc:	6c02                	ld	s8,0(sp)
+    800026ce:	6161                	addi	sp,sp,80
+    800026d0:	8082                	ret
     sleep(p, &wait_lock);  //DOC: wait-sleep
-    8000306a:	85e2                	mv	a1,s8
-    8000306c:	854a                	mv	a0,s2
-    8000306e:	00000097          	auipc	ra,0x0
-    80003072:	c10080e7          	jalr	-1008(ra) # 80002c7e <sleep>
+    800026d2:	85e2                	mv	a1,s8
+    800026d4:	854a                	mv	a0,s2
+    800026d6:	00000097          	auipc	ra,0x0
+    800026da:	e6c080e7          	jalr	-404(ra) # 80002542 <sleep>
     havekids = 0;
-    80003076:	b5e5                	j	80002f5e <wait+0x54>
-    if (p->state == SLEEPING)
-    80003078:	4709                	li	a4,2
-    8000307a:	fee798e3          	bne	a5,a4,8000306a <wait+0x160>
-      p->sleeping_time += ticks - p->start_sleeping_time;
-    8000307e:	04c92783          	lw	a5,76(s2)
-    80003082:	000ca703          	lw	a4,0(s9)
-    80003086:	9fb9                	addw	a5,a5,a4
-    80003088:	05492703          	lw	a4,84(s2)
-    8000308c:	9f99                	subw	a5,a5,a4
-    8000308e:	04f92623          	sw	a5,76(s2)
-    80003092:	bfe1                	j	8000306a <wait+0x160>
-
-0000000080003094 <wakeup>:
+    800026de:	b715                	j	80002602 <wait+0x4a>
+
+00000000800026e0 <wakeup>:
 
 // Wake up all processes sleeping on chan.
 // Must be called without any p->lock.
 void
 wakeup(void *chan)
 {
-    80003094:	711d                	addi	sp,sp,-96
-    80003096:	ec86                	sd	ra,88(sp)
-    80003098:	e8a2                	sd	s0,80(sp)
-    8000309a:	e4a6                	sd	s1,72(sp)
-    8000309c:	e0ca                	sd	s2,64(sp)
-    8000309e:	fc4e                	sd	s3,56(sp)
-    800030a0:	f852                	sd	s4,48(sp)
-    800030a2:	f456                	sd	s5,40(sp)
-    800030a4:	f05a                	sd	s6,32(sp)
-    800030a6:	ec5e                	sd	s7,24(sp)
-    800030a8:	e862                	sd	s8,16(sp)
-    800030aa:	e466                	sd	s9,8(sp)
-    800030ac:	1080                	addi	s0,sp,96
-    800030ae:	89aa                	mv	s3,a0
-  // TODO: go threw all SLEEPING and pick one to wake up- remove from SLEEPING and add to RUNNABLE.
+    800026e0:	7119                	addi	sp,sp,-128
+    800026e2:	fc86                	sd	ra,120(sp)
+    800026e4:	f8a2                	sd	s0,112(sp)
+    800026e6:	f4a6                	sd	s1,104(sp)
+    800026e8:	f0ca                	sd	s2,96(sp)
+    800026ea:	ecce                	sd	s3,88(sp)
+    800026ec:	e8d2                	sd	s4,80(sp)
+    800026ee:	e4d6                	sd	s5,72(sp)
+    800026f0:	e0da                	sd	s6,64(sp)
+    800026f2:	fc5e                	sd	s7,56(sp)
+    800026f4:	f862                	sd	s8,48(sp)
+    800026f6:	f466                	sd	s9,40(sp)
+    800026f8:	f06a                	sd	s10,32(sp)
+    800026fa:	ec6e                	sd	s11,24(sp)
+    800026fc:	0100                	addi	s0,sp,128
   struct proc *p;
-  
-  while (sleeping_list_head != -1)
-    800030b0:	00007b97          	auipc	s7,0x7
-    800030b4:	b8cb8b93          	addi	s7,s7,-1140 # 80009c3c <sleeping_list_head>
-    800030b8:	597d                	li	s2,-1
-  {
-    p = &proc[sleeping_list_head];
-    if (p->chan == chan)
-    800030ba:	0000fa97          	auipc	s5,0xf
-    800030be:	6b6a8a93          	addi	s5,s5,1718 # 80012770 <proc>
-    800030c2:	19800a13          	li	s4,408
-            sleeping_list_tail = p->next_proc;
-          proc[p->next_proc].prev_proc = -1;
-          printf("5 no head ");
-        }
-        if (res == 3){
-          sleeping_list_tail = p->prev_proc;
-    800030c6:	00007c17          	auipc	s8,0x7
-    800030ca:	b72c0c13          	addi	s8,s8,-1166 # 80009c38 <sleeping_list_tail>
-        p->prev_proc = -1;
-        p->next_proc = -1;
-        release(&p->lock);
-
-        
-        if (cpus[p->cpu_num].runnable_list_head == -1)
-    800030ce:	0000fb17          	auipc	s6,0xf
-    800030d2:	1f2b0b13          	addi	s6,s6,498 # 800122c0 <cpus>
-  while (sleeping_list_head != -1)
-    800030d6:	000ba483          	lw	s1,0(s7)
-    if (p->chan == chan)
-    800030da:	03448733          	mul	a4,s1,s4
-    800030de:	9756                	add	a4,a4,s5
-  while (sleeping_list_head != -1)
-    800030e0:	19248863          	beq	s1,s2,80003270 <wakeup+0x1dc>
-    if (p->chan == chan)
-    800030e4:	731c                	ld	a5,32(a4)
-    800030e6:	ff379de3          	bne	a5,s3,800030e0 <wakeup+0x4c>
-      printf("wakeup\n"); 
-    800030ea:	00006517          	auipc	a0,0x6
-    800030ee:	3ce50513          	addi	a0,a0,974 # 800094b8 <digits+0x478>
-    800030f2:	ffffd097          	auipc	ra,0xffffd
-    800030f6:	496080e7          	jalr	1174(ra) # 80000588 <printf>
-      printf("sleeping");
-    800030fa:	00006517          	auipc	a0,0x6
-    800030fe:	39650513          	addi	a0,a0,918 # 80009490 <digits+0x450>
-    80003102:	ffffd097          	auipc	ra,0xffffd
-    80003106:	486080e7          	jalr	1158(ra) # 80000588 <printf>
-      int res = remove_proc_from_list(p->proc_ind); 
-    8000310a:	034487b3          	mul	a5,s1,s4
-    8000310e:	97d6                	add	a5,a5,s5
-    80003110:	4fe8                	lw	a0,92(a5)
-    80003112:	ffffe097          	auipc	ra,0xffffe
-    80003116:	7b2080e7          	jalr	1970(ra) # 800018c4 <remove_proc_from_list>
-        if (res == 1)
-    8000311a:	4785                	li	a5,1
-    8000311c:	04f50263          	beq	a0,a5,80003160 <wakeup+0xcc>
-        if (res == 2)
-    80003120:	4789                	li	a5,2
-    80003122:	04f50d63          	beq	a0,a5,8000317c <wakeup+0xe8>
-        if (res == 3){
-    80003126:	478d                	li	a5,3
-    80003128:	08f51363          	bne	a0,a5,800031ae <wakeup+0x11a>
-          sleeping_list_tail = p->prev_proc;
-    8000312c:	034487b3          	mul	a5,s1,s4
-    80003130:	97d6                	add	a5,a5,s5
-    80003132:	53fc                	lw	a5,100(a5)
-    80003134:	00fc2023          	sw	a5,0(s8)
-          if (proc[p->prev_proc].prev_proc == -1)
-    80003138:	03478733          	mul	a4,a5,s4
-    8000313c:	9756                	add	a4,a4,s5
-    8000313e:	5378                	lw	a4,100(a4)
-    80003140:	0f270c63          	beq	a4,s2,80003238 <wakeup+0x1a4>
-          proc[p->prev_proc].next_proc = -1;
-    80003144:	034787b3          	mul	a5,a5,s4
-    80003148:	97d6                	add	a5,a5,s5
-    8000314a:	577d                	li	a4,-1
-    8000314c:	d3b8                	sw	a4,96(a5)
-          printf("5 no tail");
-    8000314e:	00006517          	auipc	a0,0x6
-    80003152:	39a50513          	addi	a0,a0,922 # 800094e8 <digits+0x4a8>
-    80003156:	ffffd097          	auipc	ra,0xffffd
-    8000315a:	432080e7          	jalr	1074(ra) # 80000588 <printf>
-    8000315e:	a881                	j	800031ae <wakeup+0x11a>
-          sleeping_list_head = -1;
-    80003160:	57fd                	li	a5,-1
-    80003162:	00fba023          	sw	a5,0(s7)
-          sleeping_list_tail = -1;
-    80003166:	00fc2023          	sw	a5,0(s8)
-          printf("5 no head & tail");
-    8000316a:	00006517          	auipc	a0,0x6
-    8000316e:	35650513          	addi	a0,a0,854 # 800094c0 <digits+0x480>
-    80003172:	ffffd097          	auipc	ra,0xffffd
-    80003176:	416080e7          	jalr	1046(ra) # 80000588 <printf>
-        if (res == 3){
-    8000317a:	a815                	j	800031ae <wakeup+0x11a>
-          sleeping_list_head = p->next_proc;
-    8000317c:	034487b3          	mul	a5,s1,s4
-    80003180:	97d6                	add	a5,a5,s5
-    80003182:	53bc                	lw	a5,96(a5)
-    80003184:	00fba023          	sw	a5,0(s7)
-          if (proc[p->next_proc].next_proc == -1)
-    80003188:	03478733          	mul	a4,a5,s4
-    8000318c:	9756                	add	a4,a4,s5
-    8000318e:	5338                	lw	a4,96(a4)
-    80003190:	0b270163          	beq	a4,s2,80003232 <wakeup+0x19e>
-          proc[p->next_proc].prev_proc = -1;
-    80003194:	034787b3          	mul	a5,a5,s4
-    80003198:	97d6                	add	a5,a5,s5
-    8000319a:	577d                	li	a4,-1
-    8000319c:	d3f8                	sw	a4,100(a5)
-          printf("5 no head ");
-    8000319e:	00006517          	auipc	a0,0x6
-    800031a2:	33a50513          	addi	a0,a0,826 # 800094d8 <digits+0x498>
-    800031a6:	ffffd097          	auipc	ra,0xffffd
-    800031aa:	3e2080e7          	jalr	994(ra) # 80000588 <printf>
-    p = &proc[sleeping_list_head];
-    800031ae:	03448cb3          	mul	s9,s1,s4
-    800031b2:	9cd6                	add	s9,s9,s5
-        acquire(&p->lock);
-    800031b4:	8566                	mv	a0,s9
-    800031b6:	ffffe097          	auipc	ra,0xffffe
-    800031ba:	a2e080e7          	jalr	-1490(ra) # 80000be4 <acquire>
+  int empty = -1;
+  int curr = sleeping_list.head;
+    800026fe:	00006497          	auipc	s1,0x6
+    80002702:	1c24a483          	lw	s1,450(s1) # 800088c0 <sleeping_list>
+
+  while(curr != empty) {
+    80002706:	57fd                	li	a5,-1
+    80002708:	0cf48f63          	beq	s1,a5,800027e6 <wakeup+0x106>
+    8000270c:	8b2a                	mv	s6,a0
+    p = &proc[curr];
+    8000270e:	19000a13          	li	s4,400
+    80002712:	0000f997          	auipc	s3,0xf
+    80002716:	0fe98993          	addi	s3,s3,254 # 80011810 <proc>
+    if(p != myproc()){
+      acquire(&p->lock);
+      if(p->state == SLEEPING && p->chan == chan) {
+    8000271a:	4a89                	li	s5,2
+        struct linked_list *remove_from_SLEEPING_list = &sleeping_list;
+        remove(remove_from_SLEEPING_list, p);
+    8000271c:	00006d97          	auipc	s11,0x6
+    80002720:	1a4d8d93          	addi	s11,s11,420 # 800088c0 <sleeping_list>
         p->state = RUNNABLE;
-    800031be:	478d                	li	a5,3
-    800031c0:	00fcac23          	sw	a5,24(s9)
-        p->prev_proc = -1;
-    800031c4:	57fd                	li	a5,-1
-    800031c6:	06fca223          	sw	a5,100(s9)
-        p->next_proc = -1;
-    800031ca:	06fca023          	sw	a5,96(s9)
-        release(&p->lock);
-    800031ce:	8566                	mv	a0,s9
-    800031d0:	ffffe097          	auipc	ra,0xffffe
-    800031d4:	ac8080e7          	jalr	-1336(ra) # 80000c98 <release>
-        if (cpus[p->cpu_num].runnable_list_head == -1)
-    800031d8:	058ca703          	lw	a4,88(s9)
-    800031dc:	00371793          	slli	a5,a4,0x3
-    800031e0:	97ba                	add	a5,a5,a4
-    800031e2:	0792                	slli	a5,a5,0x4
-    800031e4:	97da                	add	a5,a5,s6
-    800031e6:	0807a783          	lw	a5,128(a5)
-    800031ea:	05278a63          	beq	a5,s2,8000323e <wakeup+0x1aa>
-          cpus[p->cpu_num].runnable_list_head = p->proc_ind;
-          cpus[p->cpu_num].runnable_list_tail = p->proc_ind;
-        }
-        else
-        {
-          printf("runnable4");
-    800031ee:	00006517          	auipc	a0,0x6
-    800031f2:	33250513          	addi	a0,a0,818 # 80009520 <digits+0x4e0>
-    800031f6:	ffffd097          	auipc	ra,0xffffd
-    800031fa:	392080e7          	jalr	914(ra) # 80000588 <printf>
-          add_proc_to_list(cpus[p->cpu_num].runnable_list_tail, p);
-    800031fe:	034484b3          	mul	s1,s1,s4
-    80003202:	94d6                	add	s1,s1,s5
-    80003204:	4cb8                	lw	a4,88(s1)
-    80003206:	00371793          	slli	a5,a4,0x3
-    8000320a:	97ba                	add	a5,a5,a4
-    8000320c:	0792                	slli	a5,a5,0x4
-    8000320e:	97da                	add	a5,a5,s6
-    80003210:	85e6                	mv	a1,s9
-    80003212:	0847a503          	lw	a0,132(a5)
-    80003216:	ffffe097          	auipc	ra,0xffffe
-    8000321a:	630080e7          	jalr	1584(ra) # 80001846 <add_proc_to_list>
-          cpus[p->cpu_num].runnable_list_tail = p->proc_ind;
-    8000321e:	4cb8                	lw	a4,88(s1)
-    80003220:	00371793          	slli	a5,a4,0x3
-    80003224:	97ba                	add	a5,a5,a4
-    80003226:	0792                	slli	a5,a5,0x4
-    80003228:	97da                	add	a5,a5,s6
-    8000322a:	4cf8                	lw	a4,92(s1)
-    8000322c:	08e7a223          	sw	a4,132(a5)
-    80003230:	b55d                	j	800030d6 <wakeup+0x42>
-            sleeping_list_tail = p->next_proc;
-    80003232:	00fc2023          	sw	a5,0(s8)
-    80003236:	bfb9                	j	80003194 <wakeup+0x100>
-            sleeping_list_head = p->prev_proc;
-    80003238:	00fba023          	sw	a5,0(s7)
-    8000323c:	b721                	j	80003144 <wakeup+0xb0>
-          printf("init runnable %d                  4\n", p->proc_ind);
-    8000323e:	05cca583          	lw	a1,92(s9)
-    80003242:	00006517          	auipc	a0,0x6
-    80003246:	2b650513          	addi	a0,a0,694 # 800094f8 <digits+0x4b8>
-    8000324a:	ffffd097          	auipc	ra,0xffffd
-    8000324e:	33e080e7          	jalr	830(ra) # 80000588 <printf>
-          cpus[p->cpu_num].runnable_list_head = p->proc_ind;
-    80003252:	058ca683          	lw	a3,88(s9)
-    80003256:	05cca603          	lw	a2,92(s9)
-    8000325a:	00369793          	slli	a5,a3,0x3
-    8000325e:	00d78733          	add	a4,a5,a3
-    80003262:	0712                	slli	a4,a4,0x4
-    80003264:	975a                	add	a4,a4,s6
-    80003266:	08c72023          	sw	a2,128(a4)
-          cpus[p->cpu_num].runnable_list_tail = p->proc_ind;
-    8000326a:	08c72223          	sw	a2,132(a4)
-    8000326e:	b5a5                	j	800030d6 <wakeup+0x42>
-  //     }
-  //     release(&p->lock);
-  //   }
-  // }
+    80002724:	4d0d                	li	s10,3
+
+        if (flag == 1)
+    80002726:	00007c97          	auipc	s9,0x7
+    8000272a:	902c8c93          	addi	s9,s9,-1790 # 80009028 <flag>
+    8000272e:	4c05                	li	s8,1
+          p->last_cpu = min_num_procs_cpu();
+
+        inc_cpu(&cpus[p->last_cpu]);
+    80002730:	0000fb97          	auipc	s7,0xf
+    80002734:	ba0b8b93          	addi	s7,s7,-1120 # 800112d0 <cpus>
+    80002738:	a8b1                	j	80002794 <wakeup+0xb4>
+    8000273a:	034487b3          	mul	a5,s1,s4
+    8000273e:	97ce                	add	a5,a5,s3
+    80002740:	f8f43423          	sd	a5,-120(s0)
+    80002744:	1687a503          	lw	a0,360(a5)
+    80002748:	0a800713          	li	a4,168
+    8000274c:	02e50533          	mul	a0,a0,a4
+    80002750:	955e                	add	a0,a0,s7
+    80002752:	fffff097          	auipc	ra,0xfffff
+    80002756:	0ec080e7          	jalr	236(ra) # 8000183e <inc_cpu>
+        append(&cpus[p->last_cpu].runnable_list, p);
+    8000275a:	f8843783          	ld	a5,-120(s0)
+    8000275e:	1687a503          	lw	a0,360(a5)
+    80002762:	0a800713          	li	a4,168
+    80002766:	02e50533          	mul	a0,a0,a4
+    8000276a:	08850513          	addi	a0,a0,136
+    8000276e:	85ca                	mv	a1,s2
+    80002770:	955e                	add	a0,a0,s7
+    80002772:	fffff097          	auipc	ra,0xfffff
+    80002776:	114080e7          	jalr	276(ra) # 80001886 <append>
+      }
+      release(&p->lock);
+    8000277a:	854a                	mv	a0,s2
+    8000277c:	ffffe097          	auipc	ra,0xffffe
+    80002780:	51c080e7          	jalr	1308(ra) # 80000c98 <release>
+    }
+  curr = p->next_proc;
+    80002784:	034484b3          	mul	s1,s1,s4
+    80002788:	94ce                	add	s1,s1,s3
+    8000278a:	16c4a483          	lw	s1,364(s1)
+  while(curr != empty) {
+    8000278e:	57fd                	li	a5,-1
+    80002790:	04f48b63          	beq	s1,a5,800027e6 <wakeup+0x106>
+    p = &proc[curr];
+    80002794:	03448933          	mul	s2,s1,s4
+    80002798:	994e                	add	s2,s2,s3
+    if(p != myproc()){
+    8000279a:	fffff097          	auipc	ra,0xfffff
+    8000279e:	536080e7          	jalr	1334(ra) # 80001cd0 <myproc>
+    800027a2:	fea901e3          	beq	s2,a0,80002784 <wakeup+0xa4>
+      acquire(&p->lock);
+    800027a6:	854a                	mv	a0,s2
+    800027a8:	ffffe097          	auipc	ra,0xffffe
+    800027ac:	43c080e7          	jalr	1084(ra) # 80000be4 <acquire>
+      if(p->state == SLEEPING && p->chan == chan) {
+    800027b0:	01892783          	lw	a5,24(s2)
+    800027b4:	fd5793e3          	bne	a5,s5,8000277a <wakeup+0x9a>
+    800027b8:	02093783          	ld	a5,32(s2)
+    800027bc:	fb679fe3          	bne	a5,s6,8000277a <wakeup+0x9a>
+        remove(remove_from_SLEEPING_list, p);
+    800027c0:	85ca                	mv	a1,s2
+    800027c2:	856e                	mv	a0,s11
+    800027c4:	fffff097          	auipc	ra,0xfffff
+    800027c8:	18a080e7          	jalr	394(ra) # 8000194e <remove>
+        p->state = RUNNABLE;
+    800027cc:	01a92c23          	sw	s10,24(s2)
+        if (flag == 1)
+    800027d0:	000ca783          	lw	a5,0(s9)
+    800027d4:	f78793e3          	bne	a5,s8,8000273a <wakeup+0x5a>
+          p->last_cpu = min_num_procs_cpu();
+    800027d8:	00000097          	auipc	ra,0x0
+    800027dc:	986080e7          	jalr	-1658(ra) # 8000215e <min_num_procs_cpu>
+    800027e0:	16a92423          	sw	a0,360(s2)
+    800027e4:	bf99                	j	8000273a <wakeup+0x5a>
   }
 }
-    80003270:	60e6                	ld	ra,88(sp)
-    80003272:	6446                	ld	s0,80(sp)
-    80003274:	64a6                	ld	s1,72(sp)
-    80003276:	6906                	ld	s2,64(sp)
-    80003278:	79e2                	ld	s3,56(sp)
-    8000327a:	7a42                	ld	s4,48(sp)
-    8000327c:	7aa2                	ld	s5,40(sp)
-    8000327e:	7b02                	ld	s6,32(sp)
-    80003280:	6be2                	ld	s7,24(sp)
-    80003282:	6c42                	ld	s8,16(sp)
-    80003284:	6ca2                	ld	s9,8(sp)
-    80003286:	6125                	addi	sp,sp,96
-    80003288:	8082                	ret
-
-000000008000328a <reparent>:
-{
-    8000328a:	7179                	addi	sp,sp,-48
-    8000328c:	f406                	sd	ra,40(sp)
-    8000328e:	f022                	sd	s0,32(sp)
-    80003290:	ec26                	sd	s1,24(sp)
-    80003292:	e84a                	sd	s2,16(sp)
-    80003294:	e44e                	sd	s3,8(sp)
-    80003296:	e052                	sd	s4,0(sp)
-    80003298:	1800                	addi	s0,sp,48
-    8000329a:	892a                	mv	s2,a0
+    800027e6:	70e6                	ld	ra,120(sp)
+    800027e8:	7446                	ld	s0,112(sp)
+    800027ea:	74a6                	ld	s1,104(sp)
+    800027ec:	7906                	ld	s2,96(sp)
+    800027ee:	69e6                	ld	s3,88(sp)
+    800027f0:	6a46                	ld	s4,80(sp)
+    800027f2:	6aa6                	ld	s5,72(sp)
+    800027f4:	6b06                	ld	s6,64(sp)
+    800027f6:	7be2                	ld	s7,56(sp)
+    800027f8:	7c42                	ld	s8,48(sp)
+    800027fa:	7ca2                	ld	s9,40(sp)
+    800027fc:	7d02                	ld	s10,32(sp)
+    800027fe:	6de2                	ld	s11,24(sp)
+    80002800:	6109                	addi	sp,sp,128
+    80002802:	8082                	ret
+
+0000000080002804 <reparent>:
+{
+    80002804:	7179                	addi	sp,sp,-48
+    80002806:	f406                	sd	ra,40(sp)
+    80002808:	f022                	sd	s0,32(sp)
+    8000280a:	ec26                	sd	s1,24(sp)
+    8000280c:	e84a                	sd	s2,16(sp)
+    8000280e:	e44e                	sd	s3,8(sp)
+    80002810:	e052                	sd	s4,0(sp)
+    80002812:	1800                	addi	s0,sp,48
+    80002814:	892a                	mv	s2,a0
   for(pp = proc; pp < &proc[NPROC]; pp++){
-    8000329c:	0000f497          	auipc	s1,0xf
-    800032a0:	4d448493          	addi	s1,s1,1236 # 80012770 <proc>
+    80002816:	0000f497          	auipc	s1,0xf
+    8000281a:	ffa48493          	addi	s1,s1,-6 # 80011810 <proc>
       pp->parent = initproc;
-    800032a4:	00007a17          	auipc	s4,0x7
-    800032a8:	d84a0a13          	addi	s4,s4,-636 # 8000a028 <initproc>
+    8000281e:	00007a17          	auipc	s4,0x7
+    80002822:	812a0a13          	addi	s4,s4,-2030 # 80009030 <initproc>
   for(pp = proc; pp < &proc[NPROC]; pp++){
-    800032ac:	00016997          	auipc	s3,0x16
-    800032b0:	ac498993          	addi	s3,s3,-1340 # 80018d70 <tickslock>
-    800032b4:	a029                	j	800032be <reparent+0x34>
-    800032b6:	19848493          	addi	s1,s1,408
-    800032ba:	01348d63          	beq	s1,s3,800032d4 <reparent+0x4a>
+    80002826:	00015997          	auipc	s3,0x15
+    8000282a:	3ea98993          	addi	s3,s3,1002 # 80017c10 <tickslock>
+    8000282e:	a029                	j	80002838 <reparent+0x34>
+    80002830:	19048493          	addi	s1,s1,400
+    80002834:	01348d63          	beq	s1,s3,8000284e <reparent+0x4a>
     if(pp->parent == p){
-    800032be:	74bc                	ld	a5,104(s1)
-    800032c0:	ff279be3          	bne	a5,s2,800032b6 <reparent+0x2c>
+    80002838:	7c9c                	ld	a5,56(s1)
+    8000283a:	ff279be3          	bne	a5,s2,80002830 <reparent+0x2c>
       pp->parent = initproc;
-    800032c4:	000a3503          	ld	a0,0(s4)
-    800032c8:	f4a8                	sd	a0,104(s1)
+    8000283e:	000a3503          	ld	a0,0(s4)
+    80002842:	fc88                	sd	a0,56(s1)
       wakeup(initproc);
-    800032ca:	00000097          	auipc	ra,0x0
-    800032ce:	dca080e7          	jalr	-566(ra) # 80003094 <wakeup>
-    800032d2:	b7d5                	j	800032b6 <reparent+0x2c>
-}
-    800032d4:	70a2                	ld	ra,40(sp)
-    800032d6:	7402                	ld	s0,32(sp)
-    800032d8:	64e2                	ld	s1,24(sp)
-    800032da:	6942                	ld	s2,16(sp)
-    800032dc:	69a2                	ld	s3,8(sp)
-    800032de:	6a02                	ld	s4,0(sp)
-    800032e0:	6145                	addi	sp,sp,48
-    800032e2:	8082                	ret
-
-00000000800032e4 <exit>:
-{
-    800032e4:	7179                	addi	sp,sp,-48
-    800032e6:	f406                	sd	ra,40(sp)
-    800032e8:	f022                	sd	s0,32(sp)
-    800032ea:	ec26                	sd	s1,24(sp)
-    800032ec:	e84a                	sd	s2,16(sp)
-    800032ee:	e44e                	sd	s3,8(sp)
-    800032f0:	e052                	sd	s4,0(sp)
-    800032f2:	1800                	addi	s0,sp,48
-    800032f4:	8a2a                	mv	s4,a0
+    80002844:	00000097          	auipc	ra,0x0
+    80002848:	e9c080e7          	jalr	-356(ra) # 800026e0 <wakeup>
+    8000284c:	b7d5                	j	80002830 <reparent+0x2c>
+}
+    8000284e:	70a2                	ld	ra,40(sp)
+    80002850:	7402                	ld	s0,32(sp)
+    80002852:	64e2                	ld	s1,24(sp)
+    80002854:	6942                	ld	s2,16(sp)
+    80002856:	69a2                	ld	s3,8(sp)
+    80002858:	6a02                	ld	s4,0(sp)
+    8000285a:	6145                	addi	sp,sp,48
+    8000285c:	8082                	ret
+
+000000008000285e <exit>:
+{
+    8000285e:	7179                	addi	sp,sp,-48
+    80002860:	f406                	sd	ra,40(sp)
+    80002862:	f022                	sd	s0,32(sp)
+    80002864:	ec26                	sd	s1,24(sp)
+    80002866:	e84a                	sd	s2,16(sp)
+    80002868:	e44e                	sd	s3,8(sp)
+    8000286a:	e052                	sd	s4,0(sp)
+    8000286c:	1800                	addi	s0,sp,48
+    8000286e:	8a2a                	mv	s4,a0
   struct proc *p = myproc();
-    800032f6:	fffff097          	auipc	ra,0xfffff
-    800032fa:	89e080e7          	jalr	-1890(ra) # 80001b94 <myproc>
-    800032fe:	892a                	mv	s2,a0
+    80002870:	fffff097          	auipc	ra,0xfffff
+    80002874:	460080e7          	jalr	1120(ra) # 80001cd0 <myproc>
+    80002878:	89aa                	mv	s3,a0
   if(p == initproc)
-    80003300:	00007797          	auipc	a5,0x7
-    80003304:	d287b783          	ld	a5,-728(a5) # 8000a028 <initproc>
-    80003308:	10050493          	addi	s1,a0,256
-    8000330c:	18050993          	addi	s3,a0,384
-    80003310:	02a79363          	bne	a5,a0,80003336 <exit+0x52>
+    8000287a:	00006797          	auipc	a5,0x6
+    8000287e:	7b67b783          	ld	a5,1974(a5) # 80009030 <initproc>
+    80002882:	0d050493          	addi	s1,a0,208
+    80002886:	15050913          	addi	s2,a0,336
+    8000288a:	02a79363          	bne	a5,a0,800028b0 <exit+0x52>
     panic("init exiting");
-    80003314:	00006517          	auipc	a0,0x6
-    80003318:	21c50513          	addi	a0,a0,540 # 80009530 <digits+0x4f0>
-    8000331c:	ffffd097          	auipc	ra,0xffffd
-    80003320:	222080e7          	jalr	546(ra) # 8000053e <panic>
+    8000288e:	00006517          	auipc	a0,0x6
+    80002892:	a5a50513          	addi	a0,a0,-1446 # 800082e8 <digits+0x2a8>
+    80002896:	ffffe097          	auipc	ra,0xffffe
+    8000289a:	ca8080e7          	jalr	-856(ra) # 8000053e <panic>
       fileclose(f);
-    80003324:	00003097          	auipc	ra,0x3
-    80003328:	8b0080e7          	jalr	-1872(ra) # 80005bd4 <fileclose>
+    8000289e:	00002097          	auipc	ra,0x2
+    800028a2:	232080e7          	jalr	562(ra) # 80004ad0 <fileclose>
       p->ofile[fd] = 0;
-    8000332c:	0004b023          	sd	zero,0(s1)
+    800028a6:	0004b023          	sd	zero,0(s1)
   for(int fd = 0; fd < NOFILE; fd++){
-    80003330:	04a1                	addi	s1,s1,8
-    80003332:	00998563          	beq	s3,s1,8000333c <exit+0x58>
+    800028aa:	04a1                	addi	s1,s1,8
+    800028ac:	01248563          	beq	s1,s2,800028b6 <exit+0x58>
     if(p->ofile[fd]){
-    80003336:	6088                	ld	a0,0(s1)
-    80003338:	f575                	bnez	a0,80003324 <exit+0x40>
-    8000333a:	bfdd                	j	80003330 <exit+0x4c>
-  if ( str_compare(p->name, "init") != 0 && str_compare(p->name, "sh") != 0 ) 
-    8000333c:	18890493          	addi	s1,s2,392
-    80003340:	00006597          	auipc	a1,0x6
-    80003344:	20058593          	addi	a1,a1,512 # 80009540 <digits+0x500>
-    80003348:	8526                	mv	a0,s1
-    8000334a:	fffff097          	auipc	ra,0xfffff
-    8000334e:	dfa080e7          	jalr	-518(ra) # 80002144 <str_compare>
-    80003352:	e97d                	bnez	a0,80003448 <exit+0x164>
+    800028b0:	6088                	ld	a0,0(s1)
+    800028b2:	f575                	bnez	a0,8000289e <exit+0x40>
+    800028b4:	bfdd                	j	800028aa <exit+0x4c>
   begin_op();
-    80003354:	00002097          	auipc	ra,0x2
-    80003358:	3b4080e7          	jalr	948(ra) # 80005708 <begin_op>
+    800028b6:	00002097          	auipc	ra,0x2
+    800028ba:	d4e080e7          	jalr	-690(ra) # 80004604 <begin_op>
   iput(p->cwd);
-    8000335c:	18093503          	ld	a0,384(s2)
-    80003360:	00002097          	auipc	ra,0x2
-    80003364:	b90080e7          	jalr	-1136(ra) # 80004ef0 <iput>
+    800028be:	1509b503          	ld	a0,336(s3)
+    800028c2:	00001097          	auipc	ra,0x1
+    800028c6:	52a080e7          	jalr	1322(ra) # 80003dec <iput>
   end_op();
-    80003368:	00002097          	auipc	ra,0x2
-    8000336c:	420080e7          	jalr	1056(ra) # 80005788 <end_op>
+    800028ca:	00002097          	auipc	ra,0x2
+    800028ce:	dba080e7          	jalr	-582(ra) # 80004684 <end_op>
   p->cwd = 0;
-    80003370:	18093023          	sd	zero,384(s2)
+    800028d2:	1409b823          	sd	zero,336(s3)
   acquire(&wait_lock);
-    80003374:	0000f517          	auipc	a0,0xf
-    80003378:	3e450513          	addi	a0,a0,996 # 80012758 <wait_lock>
-    8000337c:	ffffe097          	auipc	ra,0xffffe
-    80003380:	868080e7          	jalr	-1944(ra) # 80000be4 <acquire>
+    800028d6:	0000f497          	auipc	s1,0xf
+    800028da:	9e248493          	addi	s1,s1,-1566 # 800112b8 <wait_lock>
+    800028de:	8526                	mv	a0,s1
+    800028e0:	ffffe097          	auipc	ra,0xffffe
+    800028e4:	304080e7          	jalr	772(ra) # 80000be4 <acquire>
   reparent(p);
-    80003384:	854a                	mv	a0,s2
-    80003386:	00000097          	auipc	ra,0x0
-    8000338a:	f04080e7          	jalr	-252(ra) # 8000328a <reparent>
+    800028e8:	854e                	mv	a0,s3
+    800028ea:	00000097          	auipc	ra,0x0
+    800028ee:	f1a080e7          	jalr	-230(ra) # 80002804 <reparent>
   wakeup(p->parent);
-    8000338e:	06893503          	ld	a0,104(s2)
-    80003392:	00000097          	auipc	ra,0x0
-    80003396:	d02080e7          	jalr	-766(ra) # 80003094 <wakeup>
+    800028f2:	0389b503          	ld	a0,56(s3)
+    800028f6:	00000097          	auipc	ra,0x0
+    800028fa:	dea080e7          	jalr	-534(ra) # 800026e0 <wakeup>
   acquire(&p->lock);
-    8000339a:	854a                	mv	a0,s2
-    8000339c:	ffffe097          	auipc	ra,0xffffe
-    800033a0:	848080e7          	jalr	-1976(ra) # 80000be4 <acquire>
+    800028fe:	854e                	mv	a0,s3
+    80002900:	ffffe097          	auipc	ra,0xffffe
+    80002904:	2e4080e7          	jalr	740(ra) # 80000be4 <acquire>
   p->xstate = status;
-    800033a4:	03492623          	sw	s4,44(s2)
+    80002908:	0349a623          	sw	s4,44(s3)
   p->state = ZOMBIE;
-    800033a8:	4795                	li	a5,5
-    800033aa:	00f92c23          	sw	a5,24(s2)
-  p->running_time += ticks - p->start_running_time;
-    800033ae:	04492783          	lw	a5,68(s2)
-    800033b2:	00007717          	auipc	a4,0x7
-    800033b6:	ca272703          	lw	a4,-862(a4) # 8000a054 <ticks>
-    800033ba:	9fb9                	addw	a5,a5,a4
-    800033bc:	05092703          	lw	a4,80(s2)
-    800033c0:	9f99                	subw	a5,a5,a4
-    800033c2:	04f92223          	sw	a5,68(s2)
-  printf("runnable ");
-    800033c6:	00006517          	auipc	a0,0x6
-    800033ca:	08250513          	addi	a0,a0,130 # 80009448 <digits+0x408>
-    800033ce:	ffffd097          	auipc	ra,0xffffd
-    800033d2:	1ba080e7          	jalr	442(ra) # 80000588 <printf>
-  int res = remove_proc_from_list(p->proc_ind); 
-    800033d6:	05c92503          	lw	a0,92(s2)
-    800033da:	ffffe097          	auipc	ra,0xffffe
-    800033de:	4ea080e7          	jalr	1258(ra) # 800018c4 <remove_proc_from_list>
-  if (res == 1)
-    800033e2:	4785                	li	a5,1
-    800033e4:	10f50863          	beq	a0,a5,800034f4 <exit+0x210>
-  if (res == 2)
-    800033e8:	4789                	li	a5,2
-    800033ea:	14f50763          	beq	a0,a5,80003538 <exit+0x254>
-  if (res == 3){
-    800033ee:	478d                	li	a5,3
-    800033f0:	1cf50a63          	beq	a0,a5,800035c4 <exit+0x2e0>
-  p->next_proc = -1;
-    800033f4:	57fd                	li	a5,-1
-    800033f6:	06f92023          	sw	a5,96(s2)
-  p->prev_proc = -1;
-    800033fa:	06f92223          	sw	a5,100(s2)
-  if (zombie_list_tail != -1){
-    800033fe:	00007717          	auipc	a4,0x7
-    80003402:	82a72703          	lw	a4,-2006(a4) # 80009c28 <zombie_list_tail>
-    80003406:	57fd                	li	a5,-1
-    80003408:	24f71463          	bne	a4,a5,80003650 <exit+0x36c>
-    zombie_list_tail = zombie_list_head = p->proc_ind;
-    8000340c:	05c92783          	lw	a5,92(s2)
-    80003410:	00007717          	auipc	a4,0x7
-    80003414:	80f72e23          	sw	a5,-2020(a4) # 80009c2c <zombie_list_head>
-    80003418:	00007717          	auipc	a4,0x7
-    8000341c:	80f72823          	sw	a5,-2032(a4) # 80009c28 <zombie_list_tail>
+    8000290c:	4795                	li	a5,5
+    8000290e:	00f9ac23          	sw	a5,24(s3)
+  append(&zombie_list, p); 
+    80002912:	85ce                	mv	a1,s3
+    80002914:	00006517          	auipc	a0,0x6
+    80002918:	fcc50513          	addi	a0,a0,-52 # 800088e0 <zombie_list>
+    8000291c:	fffff097          	auipc	ra,0xfffff
+    80002920:	f6a080e7          	jalr	-150(ra) # 80001886 <append>
   release(&wait_lock);
-    80003420:	0000f517          	auipc	a0,0xf
-    80003424:	33850513          	addi	a0,a0,824 # 80012758 <wait_lock>
-    80003428:	ffffe097          	auipc	ra,0xffffe
-    8000342c:	870080e7          	jalr	-1936(ra) # 80000c98 <release>
+    80002924:	8526                	mv	a0,s1
+    80002926:	ffffe097          	auipc	ra,0xffffe
+    8000292a:	372080e7          	jalr	882(ra) # 80000c98 <release>
   sched();
-    80003430:	fffff097          	auipc	ra,0xfffff
-    80003434:	610080e7          	jalr	1552(ra) # 80002a40 <sched>
+    8000292e:	00000097          	auipc	ra,0x0
+    80002932:	ace080e7          	jalr	-1330(ra) # 800023fc <sched>
   panic("zombie exit");
-    80003438:	00006517          	auipc	a0,0x6
-    8000343c:	15050513          	addi	a0,a0,336 # 80009588 <digits+0x548>
-    80003440:	ffffd097          	auipc	ra,0xffffd
-    80003444:	0fe080e7          	jalr	254(ra) # 8000053e <panic>
-  if ( str_compare(p->name, "init") != 0 && str_compare(p->name, "sh") != 0 ) 
-    80003448:	00006597          	auipc	a1,0x6
-    8000344c:	10058593          	addi	a1,a1,256 # 80009548 <digits+0x508>
-    80003450:	8526                	mv	a0,s1
-    80003452:	fffff097          	auipc	ra,0xfffff
-    80003456:	cf2080e7          	jalr	-782(ra) # 80002144 <str_compare>
-    8000345a:	ee050de3          	beqz	a0,80003354 <exit+0x70>
-    sleeping_processes_mean = ((sleeping_processes_mean * p_counter)+ p->sleeping_time)/(p_counter+1);
-    8000345e:	00007597          	auipc	a1,0x7
-    80003462:	bde58593          	addi	a1,a1,-1058 # 8000a03c <p_counter>
-    80003466:	4194                	lw	a3,0(a1)
-    80003468:	0016871b          	addiw	a4,a3,1
-    8000346c:	00007617          	auipc	a2,0x7
-    80003470:	bdc60613          	addi	a2,a2,-1060 # 8000a048 <sleeping_processes_mean>
-    80003474:	421c                	lw	a5,0(a2)
-    80003476:	02d787bb          	mulw	a5,a5,a3
-    8000347a:	04c92503          	lw	a0,76(s2)
-    8000347e:	9fa9                	addw	a5,a5,a0
-    80003480:	02e7d7bb          	divuw	a5,a5,a4
-    80003484:	c21c                	sw	a5,0(a2)
-    running_processes_mean = ((running_processes_mean * p_counter)+ p->running_time)/(p_counter+1);
-    80003486:	04492603          	lw	a2,68(s2)
-    8000348a:	00007517          	auipc	a0,0x7
-    8000348e:	bba50513          	addi	a0,a0,-1094 # 8000a044 <running_processes_mean>
-    80003492:	411c                	lw	a5,0(a0)
-    80003494:	02d787bb          	mulw	a5,a5,a3
-    80003498:	9fb1                	addw	a5,a5,a2
-    8000349a:	02e7d7bb          	divuw	a5,a5,a4
-    8000349e:	c11c                	sw	a5,0(a0)
-    runnable_processes_mean = ((runnable_processes_mean * p_counter)+ p->runnable_time)/(p_counter+1);
-    800034a0:	00007517          	auipc	a0,0x7
-    800034a4:	ba050513          	addi	a0,a0,-1120 # 8000a040 <runnable_processes_mean>
-    800034a8:	411c                	lw	a5,0(a0)
-    800034aa:	02d787bb          	mulw	a5,a5,a3
-    800034ae:	04892683          	lw	a3,72(s2)
-    800034b2:	9fb5                	addw	a5,a5,a3
-    800034b4:	02e7d7bb          	divuw	a5,a5,a4
-    800034b8:	c11c                	sw	a5,0(a0)
-    p_counter += 1;
-    800034ba:	c198                	sw	a4,0(a1)
-    program_time += p->running_time;
-    800034bc:	00007697          	auipc	a3,0x7
-    800034c0:	b7c68693          	addi	a3,a3,-1156 # 8000a038 <program_time>
-    800034c4:	429c                	lw	a5,0(a3)
-    800034c6:	00c7873b          	addw	a4,a5,a2
-    800034ca:	c298                	sw	a4,0(a3)
-    cpu_utilization = (program_time* 100) / (ticks - start_time) ;
-    800034cc:	06400793          	li	a5,100
-    800034d0:	02e787bb          	mulw	a5,a5,a4
-    800034d4:	00007717          	auipc	a4,0x7
-    800034d8:	b8072703          	lw	a4,-1152(a4) # 8000a054 <ticks>
-    800034dc:	00007697          	auipc	a3,0x7
-    800034e0:	b586a683          	lw	a3,-1192(a3) # 8000a034 <start_time>
-    800034e4:	9f15                	subw	a4,a4,a3
-    800034e6:	02e7d7bb          	divuw	a5,a5,a4
-    800034ea:	00007717          	auipc	a4,0x7
-    800034ee:	b4f72323          	sw	a5,-1210(a4) # 8000a030 <cpu_utilization>
-    800034f2:	b58d                	j	80003354 <exit+0x70>
-    800034f4:	8612                	mv	a2,tp
-  int id = r_tp();
-    800034f6:	2601                	sext.w	a2,a2
-  c->cpu_id = id;
-    800034f8:	0000f797          	auipc	a5,0xf
-    800034fc:	dc878793          	addi	a5,a5,-568 # 800122c0 <cpus>
-    80003500:	09000693          	li	a3,144
-    80003504:	02d60733          	mul	a4,a2,a3
-    80003508:	973e                	add	a4,a4,a5
-    8000350a:	08c72423          	sw	a2,136(a4)
-    mycpu()->runnable_list_head = -1;
-    8000350e:	567d                	li	a2,-1
-    80003510:	08c72023          	sw	a2,128(a4)
-    80003514:	8712                	mv	a4,tp
-  int id = r_tp();
-    80003516:	2701                	sext.w	a4,a4
-  c->cpu_id = id;
-    80003518:	02d706b3          	mul	a3,a4,a3
-    8000351c:	97b6                	add	a5,a5,a3
-    8000351e:	08e7a423          	sw	a4,136(a5)
-    mycpu()->runnable_list_tail = -1;
-    80003522:	08c7a223          	sw	a2,132(a5)
-    printf("3 no head & tail");
-    80003526:	00006517          	auipc	a0,0x6
-    8000352a:	02a50513          	addi	a0,a0,42 # 80009550 <digits+0x510>
-    8000352e:	ffffd097          	auipc	ra,0xffffd
-    80003532:	05a080e7          	jalr	90(ra) # 80000588 <printf>
-  if (res == 3){
-    80003536:	bd7d                	j	800033f4 <exit+0x110>
-    80003538:	8792                	mv	a5,tp
-  int id = r_tp();
-    8000353a:	2781                	sext.w	a5,a5
-  c->cpu_id = id;
-    8000353c:	09000713          	li	a4,144
-    80003540:	02e786b3          	mul	a3,a5,a4
-    80003544:	0000f717          	auipc	a4,0xf
-    80003548:	d7c70713          	addi	a4,a4,-644 # 800122c0 <cpus>
-    8000354c:	9736                	add	a4,a4,a3
-    8000354e:	08f72423          	sw	a5,136(a4)
-    mycpu()->runnable_list_head = p->next_proc;
-    80003552:	06092783          	lw	a5,96(s2)
-    80003556:	08f72023          	sw	a5,128(a4)
-    if (proc[p->next_proc].next_proc == -1)
-    8000355a:	19800713          	li	a4,408
-    8000355e:	02e787b3          	mul	a5,a5,a4
-    80003562:	0000f717          	auipc	a4,0xf
-    80003566:	20e70713          	addi	a4,a4,526 # 80012770 <proc>
-    8000356a:	97ba                	add	a5,a5,a4
-    8000356c:	53b8                	lw	a4,96(a5)
-    8000356e:	57fd                	li	a5,-1
-    80003570:	02f70863          	beq	a4,a5,800035a0 <exit+0x2bc>
-    proc[p->next_proc].prev_proc = -1;
-    80003574:	06092783          	lw	a5,96(s2)
-    80003578:	19800713          	li	a4,408
-    8000357c:	02e78733          	mul	a4,a5,a4
-    80003580:	0000f797          	auipc	a5,0xf
-    80003584:	1f078793          	addi	a5,a5,496 # 80012770 <proc>
-    80003588:	97ba                	add	a5,a5,a4
-    8000358a:	577d                	li	a4,-1
-    8000358c:	d3f8                	sw	a4,100(a5)
-    printf("3 no head");
-    8000358e:	00006517          	auipc	a0,0x6
-    80003592:	fda50513          	addi	a0,a0,-38 # 80009568 <digits+0x528>
-    80003596:	ffffd097          	auipc	ra,0xffffd
-    8000359a:	ff2080e7          	jalr	-14(ra) # 80000588 <printf>
-  if (res == 3){
-    8000359e:	bd99                	j	800033f4 <exit+0x110>
-    800035a0:	8712                	mv	a4,tp
-  int id = r_tp();
-    800035a2:	2701                	sext.w	a4,a4
-  c->cpu_id = id;
-    800035a4:	09000793          	li	a5,144
-    800035a8:	02f706b3          	mul	a3,a4,a5
-    800035ac:	0000f797          	auipc	a5,0xf
-    800035b0:	d1478793          	addi	a5,a5,-748 # 800122c0 <cpus>
-    800035b4:	97b6                	add	a5,a5,a3
-    800035b6:	08e7a423          	sw	a4,136(a5)
-      mycpu()->runnable_list_tail = p->next_proc;
-    800035ba:	06092703          	lw	a4,96(s2)
-    800035be:	08e7a223          	sw	a4,132(a5)
-    800035c2:	bf4d                	j	80003574 <exit+0x290>
-    800035c4:	8792                	mv	a5,tp
-  int id = r_tp();
-    800035c6:	2781                	sext.w	a5,a5
-  c->cpu_id = id;
-    800035c8:	09000713          	li	a4,144
-    800035cc:	02e786b3          	mul	a3,a5,a4
-    800035d0:	0000f717          	auipc	a4,0xf
-    800035d4:	cf070713          	addi	a4,a4,-784 # 800122c0 <cpus>
-    800035d8:	9736                	add	a4,a4,a3
-    800035da:	08f72423          	sw	a5,136(a4)
-    mycpu()->runnable_list_tail = p->prev_proc;
-    800035de:	06492783          	lw	a5,100(s2)
-    800035e2:	08f72223          	sw	a5,132(a4)
-    if (proc[p->prev_proc].prev_proc == -1)
-    800035e6:	19800713          	li	a4,408
-    800035ea:	02e787b3          	mul	a5,a5,a4
-    800035ee:	0000f717          	auipc	a4,0xf
-    800035f2:	18270713          	addi	a4,a4,386 # 80012770 <proc>
-    800035f6:	97ba                	add	a5,a5,a4
-    800035f8:	53f8                	lw	a4,100(a5)
-    800035fa:	57fd                	li	a5,-1
-    800035fc:	02f70863          	beq	a4,a5,8000362c <exit+0x348>
-    proc[p->prev_proc].next_proc = -1;
-    80003600:	06492783          	lw	a5,100(s2)
-    80003604:	19800713          	li	a4,408
-    80003608:	02e78733          	mul	a4,a5,a4
-    8000360c:	0000f797          	auipc	a5,0xf
-    80003610:	16478793          	addi	a5,a5,356 # 80012770 <proc>
-    80003614:	97ba                	add	a5,a5,a4
-    80003616:	577d                	li	a4,-1
-    80003618:	d3b8                	sw	a4,96(a5)
-    printf("3 no tail");
-    8000361a:	00006517          	auipc	a0,0x6
-    8000361e:	f5e50513          	addi	a0,a0,-162 # 80009578 <digits+0x538>
-    80003622:	ffffd097          	auipc	ra,0xffffd
-    80003626:	f66080e7          	jalr	-154(ra) # 80000588 <printf>
-    8000362a:	b3e9                	j	800033f4 <exit+0x110>
-    8000362c:	8712                	mv	a4,tp
-  int id = r_tp();
-    8000362e:	2701                	sext.w	a4,a4
-  c->cpu_id = id;
-    80003630:	09000793          	li	a5,144
-    80003634:	02f706b3          	mul	a3,a4,a5
-    80003638:	0000f797          	auipc	a5,0xf
-    8000363c:	c8878793          	addi	a5,a5,-888 # 800122c0 <cpus>
-    80003640:	97b6                	add	a5,a5,a3
-    80003642:	08e7a423          	sw	a4,136(a5)
-      mycpu()->runnable_list_head = p->prev_proc;
-    80003646:	06492703          	lw	a4,100(s2)
-    8000364a:	08e7a023          	sw	a4,128(a5)
-    8000364e:	bf4d                	j	80003600 <exit+0x31c>
-    printf("zombie");
-    80003650:	00006517          	auipc	a0,0x6
-    80003654:	c2850513          	addi	a0,a0,-984 # 80009278 <digits+0x238>
-    80003658:	ffffd097          	auipc	ra,0xffffd
-    8000365c:	f30080e7          	jalr	-208(ra) # 80000588 <printf>
-    add_proc_to_list(zombie_list_tail, p);
-    80003660:	85ca                	mv	a1,s2
-    80003662:	00006517          	auipc	a0,0x6
-    80003666:	5c652503          	lw	a0,1478(a0) # 80009c28 <zombie_list_tail>
-    8000366a:	ffffe097          	auipc	ra,0xffffe
-    8000366e:	1dc080e7          	jalr	476(ra) # 80001846 <add_proc_to_list>
-     if (zombie_list_head == -1)
-    80003672:	00006717          	auipc	a4,0x6
-    80003676:	5ba72703          	lw	a4,1466(a4) # 80009c2c <zombie_list_head>
-    8000367a:	57fd                	li	a5,-1
-    8000367c:	00f70963          	beq	a4,a5,8000368e <exit+0x3aa>
-    zombie_list_tail = p->proc_ind;
-    80003680:	05c92783          	lw	a5,92(s2)
-    80003684:	00006717          	auipc	a4,0x6
-    80003688:	5af72223          	sw	a5,1444(a4) # 80009c28 <zombie_list_tail>
-    8000368c:	bb51                	j	80003420 <exit+0x13c>
-        zombie_list_head = p->proc_ind;
-    8000368e:	05c92783          	lw	a5,92(s2)
-    80003692:	00006717          	auipc	a4,0x6
-    80003696:	58f72d23          	sw	a5,1434(a4) # 80009c2c <zombie_list_head>
-    8000369a:	b7dd                	j	80003680 <exit+0x39c>
-
-000000008000369c <kill>:
+    80002936:	00006517          	auipc	a0,0x6
+    8000293a:	9c250513          	addi	a0,a0,-1598 # 800082f8 <digits+0x2b8>
+    8000293e:	ffffe097          	auipc	ra,0xffffe
+    80002942:	c00080e7          	jalr	-1024(ra) # 8000053e <panic>
+
+0000000080002946 <kill>:
 // Kill the process with the given pid.
 // The victim won't exit until it tries to return
 // to user space (see usertrap() in trap.c).
 int
 kill(int pid)
 {
-    8000369c:	7179                	addi	sp,sp,-48
-    8000369e:	f406                	sd	ra,40(sp)
-    800036a0:	f022                	sd	s0,32(sp)
-    800036a2:	ec26                	sd	s1,24(sp)
-    800036a4:	e84a                	sd	s2,16(sp)
-    800036a6:	e44e                	sd	s3,8(sp)
-    800036a8:	1800                	addi	s0,sp,48
-    800036aa:	892a                	mv	s2,a0
+    80002946:	7179                	addi	sp,sp,-48
+    80002948:	f406                	sd	ra,40(sp)
+    8000294a:	f022                	sd	s0,32(sp)
+    8000294c:	ec26                	sd	s1,24(sp)
+    8000294e:	e84a                	sd	s2,16(sp)
+    80002950:	e44e                	sd	s3,8(sp)
+    80002952:	1800                	addi	s0,sp,48
+    80002954:	892a                	mv	s2,a0
   struct proc *p;
 
   for(p = proc; p < &proc[NPROC]; p++){
-    800036ac:	0000f497          	auipc	s1,0xf
-    800036b0:	0c448493          	addi	s1,s1,196 # 80012770 <proc>
-    800036b4:	00015997          	auipc	s3,0x15
-    800036b8:	6bc98993          	addi	s3,s3,1724 # 80018d70 <tickslock>
+    80002956:	0000f497          	auipc	s1,0xf
+    8000295a:	eba48493          	addi	s1,s1,-326 # 80011810 <proc>
+    8000295e:	00015997          	auipc	s3,0x15
+    80002962:	2b298993          	addi	s3,s3,690 # 80017c10 <tickslock>
     acquire(&p->lock);
-    800036bc:	8526                	mv	a0,s1
-    800036be:	ffffd097          	auipc	ra,0xffffd
-    800036c2:	526080e7          	jalr	1318(ra) # 80000be4 <acquire>
+    80002966:	8526                	mv	a0,s1
+    80002968:	ffffe097          	auipc	ra,0xffffe
+    8000296c:	27c080e7          	jalr	636(ra) # 80000be4 <acquire>
     if(p->pid == pid){
-    800036c6:	589c                	lw	a5,48(s1)
-    800036c8:	01278d63          	beq	a5,s2,800036e2 <kill+0x46>
-        p->last_runnable_time = ticks;
+    80002970:	589c                	lw	a5,48(s1)
+    80002972:	01278d63          	beq	a5,s2,8000298c <kill+0x46>
+        p->state = RUNNABLE;
       }
       release(&p->lock);
       return 0;
     }
     release(&p->lock);
-    800036cc:	8526                	mv	a0,s1
-    800036ce:	ffffd097          	auipc	ra,0xffffd
-    800036d2:	5ca080e7          	jalr	1482(ra) # 80000c98 <release>
+    80002976:	8526                	mv	a0,s1
+    80002978:	ffffe097          	auipc	ra,0xffffe
+    8000297c:	320080e7          	jalr	800(ra) # 80000c98 <release>
   for(p = proc; p < &proc[NPROC]; p++){
-    800036d6:	19848493          	addi	s1,s1,408
-    800036da:	ff3491e3          	bne	s1,s3,800036bc <kill+0x20>
+    80002980:	19048493          	addi	s1,s1,400
+    80002984:	ff3491e3          	bne	s1,s3,80002966 <kill+0x20>
   }
   return -1;
-    800036de:	557d                	li	a0,-1
-    800036e0:	a829                	j	800036fa <kill+0x5e>
+    80002988:	557d                	li	a0,-1
+    8000298a:	a829                	j	800029a4 <kill+0x5e>
       p->killed = 1;
-    800036e2:	4785                	li	a5,1
-    800036e4:	d49c                	sw	a5,40(s1)
+    8000298c:	4785                	li	a5,1
+    8000298e:	d49c                	sw	a5,40(s1)
       if(p->state == SLEEPING){
-    800036e6:	4c98                	lw	a4,24(s1)
-    800036e8:	4789                	li	a5,2
-    800036ea:	00f70f63          	beq	a4,a5,80003708 <kill+0x6c>
+    80002990:	4c98                	lw	a4,24(s1)
+    80002992:	4789                	li	a5,2
+    80002994:	00f70f63          	beq	a4,a5,800029b2 <kill+0x6c>
       release(&p->lock);
-    800036ee:	8526                	mv	a0,s1
-    800036f0:	ffffd097          	auipc	ra,0xffffd
-    800036f4:	5a8080e7          	jalr	1448(ra) # 80000c98 <release>
+    80002998:	8526                	mv	a0,s1
+    8000299a:	ffffe097          	auipc	ra,0xffffe
+    8000299e:	2fe080e7          	jalr	766(ra) # 80000c98 <release>
       return 0;
-    800036f8:	4501                	li	a0,0
-}
-    800036fa:	70a2                	ld	ra,40(sp)
-    800036fc:	7402                	ld	s0,32(sp)
-    800036fe:	64e2                	ld	s1,24(sp)
-    80003700:	6942                	ld	s2,16(sp)
-    80003702:	69a2                	ld	s3,8(sp)
-    80003704:	6145                	addi	sp,sp,48
-    80003706:	8082                	ret
+    800029a2:	4501                	li	a0,0
+}
+    800029a4:	70a2                	ld	ra,40(sp)
+    800029a6:	7402                	ld	s0,32(sp)
+    800029a8:	64e2                	ld	s1,24(sp)
+    800029aa:	6942                	ld	s2,16(sp)
+    800029ac:	69a2                	ld	s3,8(sp)
+    800029ae:	6145                	addi	sp,sp,48
+    800029b0:	8082                	ret
         p->state = RUNNABLE;
-    80003708:	478d                	li	a5,3
-    8000370a:	cc9c                	sw	a5,24(s1)
-        p->sleeping_time += ticks - p->start_sleeping_time;
-    8000370c:	00007717          	auipc	a4,0x7
-    80003710:	94872703          	lw	a4,-1720(a4) # 8000a054 <ticks>
-    80003714:	44fc                	lw	a5,76(s1)
-    80003716:	9fb9                	addw	a5,a5,a4
-    80003718:	48f4                	lw	a3,84(s1)
-    8000371a:	9f95                	subw	a5,a5,a3
-    8000371c:	c4fc                	sw	a5,76(s1)
-        p->last_runnable_time = ticks;
-    8000371e:	dcd8                	sw	a4,60(s1)
-    80003720:	b7f9                	j	800036ee <kill+0x52>
-
-0000000080003722 <print_stats>:
-
-int 
-print_stats(void)
-{
-    80003722:	1141                	addi	sp,sp,-16
-    80003724:	e406                	sd	ra,8(sp)
-    80003726:	e022                	sd	s0,0(sp)
-    80003728:	0800                	addi	s0,sp,16
-  printf("sleeping_processes_mean: %d\n", sleeping_processes_mean);
-    8000372a:	00007597          	auipc	a1,0x7
-    8000372e:	91e5a583          	lw	a1,-1762(a1) # 8000a048 <sleeping_processes_mean>
-    80003732:	00006517          	auipc	a0,0x6
-    80003736:	e6650513          	addi	a0,a0,-410 # 80009598 <digits+0x558>
-    8000373a:	ffffd097          	auipc	ra,0xffffd
-    8000373e:	e4e080e7          	jalr	-434(ra) # 80000588 <printf>
-  printf("runnable_processes_mean: %d\n", runnable_processes_mean);
-    80003742:	00007597          	auipc	a1,0x7
-    80003746:	8fe5a583          	lw	a1,-1794(a1) # 8000a040 <runnable_processes_mean>
-    8000374a:	00006517          	auipc	a0,0x6
-    8000374e:	e6e50513          	addi	a0,a0,-402 # 800095b8 <digits+0x578>
-    80003752:	ffffd097          	auipc	ra,0xffffd
-    80003756:	e36080e7          	jalr	-458(ra) # 80000588 <printf>
-  printf("running_processes_mean: %d\n", running_processes_mean);
-    8000375a:	00007597          	auipc	a1,0x7
-    8000375e:	8ea5a583          	lw	a1,-1814(a1) # 8000a044 <running_processes_mean>
-    80003762:	00006517          	auipc	a0,0x6
-    80003766:	e7650513          	addi	a0,a0,-394 # 800095d8 <digits+0x598>
-    8000376a:	ffffd097          	auipc	ra,0xffffd
-    8000376e:	e1e080e7          	jalr	-482(ra) # 80000588 <printf>
-  printf("program_time: %d\n", program_time);
-    80003772:	00007597          	auipc	a1,0x7
-    80003776:	8c65a583          	lw	a1,-1850(a1) # 8000a038 <program_time>
-    8000377a:	00006517          	auipc	a0,0x6
-    8000377e:	e7e50513          	addi	a0,a0,-386 # 800095f8 <digits+0x5b8>
-    80003782:	ffffd097          	auipc	ra,0xffffd
-    80003786:	e06080e7          	jalr	-506(ra) # 80000588 <printf>
-  printf("cpu_utilization: %d\n", cpu_utilization);
-    8000378a:	00007597          	auipc	a1,0x7
-    8000378e:	8a65a583          	lw	a1,-1882(a1) # 8000a030 <cpu_utilization>
-    80003792:	00006517          	auipc	a0,0x6
-    80003796:	e7e50513          	addi	a0,a0,-386 # 80009610 <digits+0x5d0>
-    8000379a:	ffffd097          	auipc	ra,0xffffd
-    8000379e:	dee080e7          	jalr	-530(ra) # 80000588 <printf>
-  printf("ticks: %d\n", ticks);
-    800037a2:	00007597          	auipc	a1,0x7
-    800037a6:	8b25a583          	lw	a1,-1870(a1) # 8000a054 <ticks>
-    800037aa:	00006517          	auipc	a0,0x6
-    800037ae:	e7e50513          	addi	a0,a0,-386 # 80009628 <digits+0x5e8>
-    800037b2:	ffffd097          	auipc	ra,0xffffd
-    800037b6:	dd6080e7          	jalr	-554(ra) # 80000588 <printf>
-  return 0;
-}
-    800037ba:	4501                	li	a0,0
-    800037bc:	60a2                	ld	ra,8(sp)
-    800037be:	6402                	ld	s0,0(sp)
-    800037c0:	0141                	addi	sp,sp,16
-    800037c2:	8082                	ret
-
-00000000800037c4 <set_cpu>:
-// Ass2
-int
-set_cpu(int cpu_num)
-{
-  // TODO
-  if (cpu_num > NCPU)
-    800037c4:	47a1                	li	a5,8
-    800037c6:	0aa7cd63          	blt	a5,a0,80003880 <set_cpu+0xbc>
-{
-    800037ca:	1101                	addi	sp,sp,-32
-    800037cc:	ec06                	sd	ra,24(sp)
-    800037ce:	e822                	sd	s0,16(sp)
-    800037d0:	e426                	sd	s1,8(sp)
-    800037d2:	e04a                	sd	s2,0(sp)
-    800037d4:	1000                	addi	s0,sp,32
-    return -1;
-
-  struct cpu* c;
-  for(c = cpus; c < &cpus[NCPU]; c++)
-    800037d6:	0000f497          	auipc	s1,0xf
-    800037da:	aea48493          	addi	s1,s1,-1302 # 800122c0 <cpus>
-    800037de:	0000f717          	auipc	a4,0xf
-    800037e2:	f6270713          	addi	a4,a4,-158 # 80012740 <pid_lock>
-  {
-    if (c->cpu_id == cpu_num)
-    800037e6:	0884a783          	lw	a5,136(s1)
-    800037ea:	00a78d63          	beq	a5,a0,80003804 <set_cpu+0x40>
-  for(c = cpus; c < &cpus[NCPU]; c++)
-    800037ee:	09048493          	addi	s1,s1,144
-    800037f2:	fee49ae3          	bne	s1,a4,800037e6 <set_cpu+0x22>
-      }
-      
-      return 0;
-    }
-  }
-  return -1;
-    800037f6:	557d                	li	a0,-1
-}
-    800037f8:	60e2                	ld	ra,24(sp)
-    800037fa:	6442                	ld	s0,16(sp)
-    800037fc:	64a2                	ld	s1,8(sp)
-    800037fe:	6902                	ld	s2,0(sp)
-    80003800:	6105                	addi	sp,sp,32
-    80003802:	8082                	ret
-      if (c->runnable_list_head == -1)
-    80003804:	0804a703          	lw	a4,128(s1)
-    80003808:	57fd                	li	a5,-1
-    8000380a:	02f70f63          	beq	a4,a5,80003848 <set_cpu+0x84>
-        printf("runnable5");
-    8000380e:	00006517          	auipc	a0,0x6
-    80003812:	e5250513          	addi	a0,a0,-430 # 80009660 <digits+0x620>
-    80003816:	ffffd097          	auipc	ra,0xffffd
-    8000381a:	d72080e7          	jalr	-654(ra) # 80000588 <printf>
-        add_proc_to_list(c->runnable_list_tail, myproc());
-    8000381e:	0844a903          	lw	s2,132(s1)
-    80003822:	ffffe097          	auipc	ra,0xffffe
-    80003826:	372080e7          	jalr	882(ra) # 80001b94 <myproc>
-    8000382a:	85aa                	mv	a1,a0
-    8000382c:	854a                	mv	a0,s2
-    8000382e:	ffffe097          	auipc	ra,0xffffe
-    80003832:	018080e7          	jalr	24(ra) # 80001846 <add_proc_to_list>
-        c->runnable_list_tail = myproc()->proc_ind;
-    80003836:	ffffe097          	auipc	ra,0xffffe
-    8000383a:	35e080e7          	jalr	862(ra) # 80001b94 <myproc>
-    8000383e:	4d7c                	lw	a5,92(a0)
-    80003840:	08f4a223          	sw	a5,132(s1)
-      return 0;
-    80003844:	4501                	li	a0,0
-    80003846:	bf4d                	j	800037f8 <set_cpu+0x34>
-        printf("init runnable %d                   5\n", proc->proc_ind);
-    80003848:	0000f597          	auipc	a1,0xf
-    8000384c:	f845a583          	lw	a1,-124(a1) # 800127cc <proc+0x5c>
-    80003850:	00006517          	auipc	a0,0x6
-    80003854:	de850513          	addi	a0,a0,-536 # 80009638 <digits+0x5f8>
-    80003858:	ffffd097          	auipc	ra,0xffffd
-    8000385c:	d30080e7          	jalr	-720(ra) # 80000588 <printf>
-        c->runnable_list_tail = myproc()->proc_ind;
-    80003860:	ffffe097          	auipc	ra,0xffffe
-    80003864:	334080e7          	jalr	820(ra) # 80001b94 <myproc>
-    80003868:	4d7c                	lw	a5,92(a0)
-    8000386a:	08f4a223          	sw	a5,132(s1)
-        c->runnable_list_head = myproc()->proc_ind;
-    8000386e:	ffffe097          	auipc	ra,0xffffe
-    80003872:	326080e7          	jalr	806(ra) # 80001b94 <myproc>
-    80003876:	4d7c                	lw	a5,92(a0)
-    80003878:	08f4a023          	sw	a5,128(s1)
-      return 0;
-    8000387c:	4501                	li	a0,0
-    8000387e:	bfad                	j	800037f8 <set_cpu+0x34>
-    return -1;
-    80003880:	557d                	li	a0,-1
-}
-    80003882:	8082                	ret
-
-0000000080003884 <get_cpu>:
-
-
-int
-get_cpu()
-{
-    80003884:	1141                	addi	sp,sp,-16
-    80003886:	e422                	sd	s0,8(sp)
-    80003888:	0800                	addi	s0,sp,16
-    8000388a:	8512                	mv	a0,tp
-  // TODO
-  return cpuid();
-}
-    8000388c:	2501                	sext.w	a0,a0
-    8000388e:	6422                	ld	s0,8(sp)
-    80003890:	0141                	addi	sp,sp,16
-    80003892:	8082                	ret
-
-0000000080003894 <pause_system>:
-
-
-int
-pause_system(int seconds)
-{
-    80003894:	711d                	addi	sp,sp,-96
-    80003896:	ec86                	sd	ra,88(sp)
-    80003898:	e8a2                	sd	s0,80(sp)
-    8000389a:	e4a6                	sd	s1,72(sp)
-    8000389c:	e0ca                	sd	s2,64(sp)
-    8000389e:	fc4e                	sd	s3,56(sp)
-    800038a0:	f852                	sd	s4,48(sp)
-    800038a2:	f456                	sd	s5,40(sp)
-    800038a4:	f05a                	sd	s6,32(sp)
-    800038a6:	ec5e                	sd	s7,24(sp)
-    800038a8:	e862                	sd	s8,16(sp)
-    800038aa:	e466                	sd	s9,8(sp)
-    800038ac:	1080                	addi	s0,sp,96
-    800038ae:	84aa                	mv	s1,a0
-  struct proc *p;
-  struct proc *myProcess = myproc();
-    800038b0:	ffffe097          	auipc	ra,0xffffe
-    800038b4:	2e4080e7          	jalr	740(ra) # 80001b94 <myproc>
-    800038b8:	8b2a                	mv	s6,a0
-
-  pause_flag = 1;
-    800038ba:	4785                	li	a5,1
-    800038bc:	00006717          	auipc	a4,0x6
-    800038c0:	78f72a23          	sw	a5,1940(a4) # 8000a050 <pause_flag>
-
-  wake_up_time = ticks + (seconds * 10);
-    800038c4:	0024979b          	slliw	a5,s1,0x2
-    800038c8:	9fa5                	addw	a5,a5,s1
-    800038ca:	0017979b          	slliw	a5,a5,0x1
-    800038ce:	00006717          	auipc	a4,0x6
-    800038d2:	78672703          	lw	a4,1926(a4) # 8000a054 <ticks>
-    800038d6:	9fb9                	addw	a5,a5,a4
-    800038d8:	00006717          	auipc	a4,0x6
-    800038dc:	76f72a23          	sw	a5,1908(a4) # 8000a04c <wake_up_time>
-
-  for(p = proc; p < &proc[NPROC]; p++)
-    800038e0:	0000f497          	auipc	s1,0xf
-    800038e4:	e9048493          	addi	s1,s1,-368 # 80012770 <proc>
-  {
-    acquire(&p->lock);
-    if(p->state == RUNNING)
-    800038e8:	4991                	li	s3,4
-    {
-      if ( str_compare(p->name, "init") != 0 && str_compare(p->name, "sh") != 0 ) {
-    800038ea:	00006a97          	auipc	s5,0x6
-    800038ee:	c56a8a93          	addi	s5,s5,-938 # 80009540 <digits+0x500>
-    800038f2:	00006b97          	auipc	s7,0x6
-    800038f6:	c56b8b93          	addi	s7,s7,-938 # 80009548 <digits+0x508>
-        if (p != myProcess) {
-          p->paused = 1;
-    800038fa:	4c85                	li	s9,1
-          p->running_time += ticks - p->start_running_time;
-    800038fc:	00006c17          	auipc	s8,0x6
-    80003900:	758c0c13          	addi	s8,s8,1880 # 8000a054 <ticks>
-  for(p = proc; p < &proc[NPROC]; p++)
-    80003904:	00015917          	auipc	s2,0x15
-    80003908:	46c90913          	addi	s2,s2,1132 # 80018d70 <tickslock>
-    8000390c:	a811                	j	80003920 <pause_system+0x8c>
-          yield();
-        }
-      }
-    }
-    release(&p->lock);
-    8000390e:	8526                	mv	a0,s1
-    80003910:	ffffd097          	auipc	ra,0xffffd
-    80003914:	388080e7          	jalr	904(ra) # 80000c98 <release>
-  for(p = proc; p < &proc[NPROC]; p++)
-    80003918:	19848493          	addi	s1,s1,408
-    8000391c:	05248a63          	beq	s1,s2,80003970 <pause_system+0xdc>
-    acquire(&p->lock);
-    80003920:	8526                	mv	a0,s1
-    80003922:	ffffd097          	auipc	ra,0xffffd
-    80003926:	2c2080e7          	jalr	706(ra) # 80000be4 <acquire>
-    if(p->state == RUNNING)
-    8000392a:	4c9c                	lw	a5,24(s1)
-    8000392c:	ff3791e3          	bne	a5,s3,8000390e <pause_system+0x7a>
-      if ( str_compare(p->name, "init") != 0 && str_compare(p->name, "sh") != 0 ) {
-    80003930:	18848a13          	addi	s4,s1,392
-    80003934:	85d6                	mv	a1,s5
-    80003936:	8552                	mv	a0,s4
-    80003938:	fffff097          	auipc	ra,0xfffff
-    8000393c:	80c080e7          	jalr	-2036(ra) # 80002144 <str_compare>
-    80003940:	d579                	beqz	a0,8000390e <pause_system+0x7a>
-    80003942:	85de                	mv	a1,s7
-    80003944:	8552                	mv	a0,s4
-    80003946:	ffffe097          	auipc	ra,0xffffe
-    8000394a:	7fe080e7          	jalr	2046(ra) # 80002144 <str_compare>
-    8000394e:	d161                	beqz	a0,8000390e <pause_system+0x7a>
-        if (p != myProcess) {
-    80003950:	fa9b0fe3          	beq	s6,s1,8000390e <pause_system+0x7a>
-          p->paused = 1;
-    80003954:	0594a023          	sw	s9,64(s1)
-          p->running_time += ticks - p->start_running_time;
-    80003958:	40fc                	lw	a5,68(s1)
-    8000395a:	000c2703          	lw	a4,0(s8)
-    8000395e:	9fb9                	addw	a5,a5,a4
-    80003960:	48b8                	lw	a4,80(s1)
-    80003962:	9f99                	subw	a5,a5,a4
-    80003964:	c0fc                	sw	a5,68(s1)
-          yield();
-    80003966:	fffff097          	auipc	ra,0xfffff
-    8000396a:	1e8080e7          	jalr	488(ra) # 80002b4e <yield>
-    8000396e:	b745                	j	8000390e <pause_system+0x7a>
-  }
-  if ( str_compare(myProcess->name, "init") != 0 && str_compare(myProcess->name, "sh") != 0 ) 
-    80003970:	188b0493          	addi	s1,s6,392
-    80003974:	00006597          	auipc	a1,0x6
-    80003978:	bcc58593          	addi	a1,a1,-1076 # 80009540 <digits+0x500>
-    8000397c:	8526                	mv	a0,s1
-    8000397e:	ffffe097          	auipc	ra,0xffffe
-    80003982:	7c6080e7          	jalr	1990(ra) # 80002144 <str_compare>
-    80003986:	ed19                	bnez	a0,800039a4 <pause_system+0x110>
-    myProcess->running_time += ticks - myProcess->start_running_time;
-    release(&myProcess->lock);
-    yield();
-  }
-  return 0;
-}
-    80003988:	4501                	li	a0,0
-    8000398a:	60e6                	ld	ra,88(sp)
-    8000398c:	6446                	ld	s0,80(sp)
-    8000398e:	64a6                	ld	s1,72(sp)
-    80003990:	6906                	ld	s2,64(sp)
-    80003992:	79e2                	ld	s3,56(sp)
-    80003994:	7a42                	ld	s4,48(sp)
-    80003996:	7aa2                	ld	s5,40(sp)
-    80003998:	7b02                	ld	s6,32(sp)
-    8000399a:	6be2                	ld	s7,24(sp)
-    8000399c:	6c42                	ld	s8,16(sp)
-    8000399e:	6ca2                	ld	s9,8(sp)
-    800039a0:	6125                	addi	sp,sp,96
-    800039a2:	8082                	ret
-  if ( str_compare(myProcess->name, "init") != 0 && str_compare(myProcess->name, "sh") != 0 ) 
-    800039a4:	00006597          	auipc	a1,0x6
-    800039a8:	ba458593          	addi	a1,a1,-1116 # 80009548 <digits+0x508>
-    800039ac:	8526                	mv	a0,s1
-    800039ae:	ffffe097          	auipc	ra,0xffffe
-    800039b2:	796080e7          	jalr	1942(ra) # 80002144 <str_compare>
-    800039b6:	d969                	beqz	a0,80003988 <pause_system+0xf4>
-    acquire(&myProcess->lock);
-    800039b8:	855a                	mv	a0,s6
-    800039ba:	ffffd097          	auipc	ra,0xffffd
-    800039be:	22a080e7          	jalr	554(ra) # 80000be4 <acquire>
-    myProcess->paused = 1;
-    800039c2:	4785                	li	a5,1
-    800039c4:	04fb2023          	sw	a5,64(s6)
-    myProcess->running_time += ticks - myProcess->start_running_time;
-    800039c8:	044b2783          	lw	a5,68(s6)
-    800039cc:	00006717          	auipc	a4,0x6
-    800039d0:	68872703          	lw	a4,1672(a4) # 8000a054 <ticks>
-    800039d4:	9fb9                	addw	a5,a5,a4
-    800039d6:	050b2703          	lw	a4,80(s6)
-    800039da:	9f99                	subw	a5,a5,a4
-    800039dc:	04fb2223          	sw	a5,68(s6)
-    release(&myProcess->lock);
-    800039e0:	855a                	mv	a0,s6
-    800039e2:	ffffd097          	auipc	ra,0xffffd
-    800039e6:	2b6080e7          	jalr	694(ra) # 80000c98 <release>
-    yield();
-    800039ea:	fffff097          	auipc	ra,0xfffff
-    800039ee:	164080e7          	jalr	356(ra) # 80002b4e <yield>
-    800039f2:	bf59                	j	80003988 <pause_system+0xf4>
+    800029b2:	478d                	li	a5,3
+    800029b4:	cc9c                	sw	a5,24(s1)
+    800029b6:	b7cd                	j	80002998 <kill+0x52>
 
-00000000800039f4 <kill_system>:
+00000000800029b8 <either_copyout>:
+// Copy to either a user address, or kernel address,
 // depending on usr_dst.
 // Returns 0 on success, -1 on error.
-
-int
-kill_system(void) 
-{
-    800039f4:	7139                	addi	sp,sp,-64
-    800039f6:	fc06                	sd	ra,56(sp)
-    800039f8:	f822                	sd	s0,48(sp)
-    800039fa:	f426                	sd	s1,40(sp)
-    800039fc:	f04a                	sd	s2,32(sp)
-    800039fe:	ec4e                	sd	s3,24(sp)
-    80003a00:	e852                	sd	s4,16(sp)
-    80003a02:	e456                	sd	s5,8(sp)
-    80003a04:	e05a                	sd	s6,0(sp)
-    80003a06:	0080                	addi	s0,sp,64
-  struct proc *p;
-  struct proc *myProcess = myproc();
-    80003a08:	ffffe097          	auipc	ra,0xffffe
-    80003a0c:	18c080e7          	jalr	396(ra) # 80001b94 <myproc>
-    80003a10:	8b2a                	mv	s6,a0
-
-  for (p = proc; p < &proc[NPROC]; p++) {
-    80003a12:	0000f497          	auipc	s1,0xf
-    80003a16:	ee648493          	addi	s1,s1,-282 # 800128f8 <proc+0x188>
-    80003a1a:	00015a17          	auipc	s4,0x15
-    80003a1e:	4dea0a13          	addi	s4,s4,1246 # 80018ef8 <bcache+0x170>
-    if ( str_compare(p->name, "init") != 0 && str_compare(p->name, "sh") != 0 ) {
-    80003a22:	00006997          	auipc	s3,0x6
-    80003a26:	b1e98993          	addi	s3,s3,-1250 # 80009540 <digits+0x500>
-    80003a2a:	00006a97          	auipc	s5,0x6
-    80003a2e:	b1ea8a93          	addi	s5,s5,-1250 # 80009548 <digits+0x508>
-    80003a32:	a029                	j	80003a3c <kill_system+0x48>
-  for (p = proc; p < &proc[NPROC]; p++) {
-    80003a34:	19848493          	addi	s1,s1,408
-    80003a38:	03448b63          	beq	s1,s4,80003a6e <kill_system+0x7a>
-    if ( str_compare(p->name, "init") != 0 && str_compare(p->name, "sh") != 0 ) {
-    80003a3c:	85ce                	mv	a1,s3
-    80003a3e:	8526                	mv	a0,s1
-    80003a40:	ffffe097          	auipc	ra,0xffffe
-    80003a44:	704080e7          	jalr	1796(ra) # 80002144 <str_compare>
-    80003a48:	d575                	beqz	a0,80003a34 <kill_system+0x40>
-    80003a4a:	85d6                	mv	a1,s5
-    80003a4c:	8526                	mv	a0,s1
-    80003a4e:	ffffe097          	auipc	ra,0xffffe
-    80003a52:	6f6080e7          	jalr	1782(ra) # 80002144 <str_compare>
-    80003a56:	dd79                	beqz	a0,80003a34 <kill_system+0x40>
-      if (p != myProcess) {
-    80003a58:	e7848793          	addi	a5,s1,-392
-    80003a5c:	fcfb0ce3          	beq	s6,a5,80003a34 <kill_system+0x40>
-        kill(p->pid);      
-    80003a60:	ea84a503          	lw	a0,-344(s1)
-    80003a64:	00000097          	auipc	ra,0x0
-    80003a68:	c38080e7          	jalr	-968(ra) # 8000369c <kill>
-    80003a6c:	b7e1                	j	80003a34 <kill_system+0x40>
-      }
-    }
-  }
-  if ( str_compare(myProcess->name, "init") != 0 && str_compare(myProcess->name, "sh") != 0 ) {
-    80003a6e:	188b0493          	addi	s1,s6,392
-    80003a72:	00006597          	auipc	a1,0x6
-    80003a76:	ace58593          	addi	a1,a1,-1330 # 80009540 <digits+0x500>
-    80003a7a:	8526                	mv	a0,s1
-    80003a7c:	ffffe097          	auipc	ra,0xffffe
-    80003a80:	6c8080e7          	jalr	1736(ra) # 80002144 <str_compare>
-    80003a84:	ed01                	bnez	a0,80003a9c <kill_system+0xa8>
-    kill(myProcess->pid);
-  }
-  return 0;
-}
-    80003a86:	4501                	li	a0,0
-    80003a88:	70e2                	ld	ra,56(sp)
-    80003a8a:	7442                	ld	s0,48(sp)
-    80003a8c:	74a2                	ld	s1,40(sp)
-    80003a8e:	7902                	ld	s2,32(sp)
-    80003a90:	69e2                	ld	s3,24(sp)
-    80003a92:	6a42                	ld	s4,16(sp)
-    80003a94:	6aa2                	ld	s5,8(sp)
-    80003a96:	6b02                	ld	s6,0(sp)
-    80003a98:	6121                	addi	sp,sp,64
-    80003a9a:	8082                	ret
-  if ( str_compare(myProcess->name, "init") != 0 && str_compare(myProcess->name, "sh") != 0 ) {
-    80003a9c:	00006597          	auipc	a1,0x6
-    80003aa0:	aac58593          	addi	a1,a1,-1364 # 80009548 <digits+0x508>
-    80003aa4:	8526                	mv	a0,s1
-    80003aa6:	ffffe097          	auipc	ra,0xffffe
-    80003aaa:	69e080e7          	jalr	1694(ra) # 80002144 <str_compare>
-    80003aae:	dd61                	beqz	a0,80003a86 <kill_system+0x92>
-    kill(myProcess->pid);
-    80003ab0:	030b2503          	lw	a0,48(s6)
-    80003ab4:	00000097          	auipc	ra,0x0
-    80003ab8:	be8080e7          	jalr	-1048(ra) # 8000369c <kill>
-    80003abc:	b7e9                	j	80003a86 <kill_system+0x92>
-
-0000000080003abe <either_copyout>:
-
 int
 either_copyout(int user_dst, uint64 dst, void *src, uint64 len)
 {
-    80003abe:	7179                	addi	sp,sp,-48
-    80003ac0:	f406                	sd	ra,40(sp)
-    80003ac2:	f022                	sd	s0,32(sp)
-    80003ac4:	ec26                	sd	s1,24(sp)
-    80003ac6:	e84a                	sd	s2,16(sp)
-    80003ac8:	e44e                	sd	s3,8(sp)
-    80003aca:	e052                	sd	s4,0(sp)
-    80003acc:	1800                	addi	s0,sp,48
-    80003ace:	84aa                	mv	s1,a0
-    80003ad0:	892e                	mv	s2,a1
-    80003ad2:	89b2                	mv	s3,a2
-    80003ad4:	8a36                	mv	s4,a3
+    800029b8:	7179                	addi	sp,sp,-48
+    800029ba:	f406                	sd	ra,40(sp)
+    800029bc:	f022                	sd	s0,32(sp)
+    800029be:	ec26                	sd	s1,24(sp)
+    800029c0:	e84a                	sd	s2,16(sp)
+    800029c2:	e44e                	sd	s3,8(sp)
+    800029c4:	e052                	sd	s4,0(sp)
+    800029c6:	1800                	addi	s0,sp,48
+    800029c8:	84aa                	mv	s1,a0
+    800029ca:	892e                	mv	s2,a1
+    800029cc:	89b2                	mv	s3,a2
+    800029ce:	8a36                	mv	s4,a3
   struct proc *p = myproc();
-    80003ad6:	ffffe097          	auipc	ra,0xffffe
-    80003ada:	0be080e7          	jalr	190(ra) # 80001b94 <myproc>
+    800029d0:	fffff097          	auipc	ra,0xfffff
+    800029d4:	300080e7          	jalr	768(ra) # 80001cd0 <myproc>
   if(user_dst){
-    80003ade:	c08d                	beqz	s1,80003b00 <either_copyout+0x42>
+    800029d8:	c08d                	beqz	s1,800029fa <either_copyout+0x42>
     return copyout(p->pagetable, dst, src, len);
-    80003ae0:	86d2                	mv	a3,s4
-    80003ae2:	864e                	mv	a2,s3
-    80003ae4:	85ca                	mv	a1,s2
-    80003ae6:	6148                	ld	a0,128(a0)
-    80003ae8:	ffffe097          	auipc	ra,0xffffe
-    80003aec:	b92080e7          	jalr	-1134(ra) # 8000167a <copyout>
+    800029da:	86d2                	mv	a3,s4
+    800029dc:	864e                	mv	a2,s3
+    800029de:	85ca                	mv	a1,s2
+    800029e0:	6928                	ld	a0,80(a0)
+    800029e2:	fffff097          	auipc	ra,0xfffff
+    800029e6:	c90080e7          	jalr	-880(ra) # 80001672 <copyout>
   } else {
     memmove((char *)dst, src, len);
     return 0;
   }
 }
-    80003af0:	70a2                	ld	ra,40(sp)
-    80003af2:	7402                	ld	s0,32(sp)
-    80003af4:	64e2                	ld	s1,24(sp)
-    80003af6:	6942                	ld	s2,16(sp)
-    80003af8:	69a2                	ld	s3,8(sp)
-    80003afa:	6a02                	ld	s4,0(sp)
-    80003afc:	6145                	addi	sp,sp,48
-    80003afe:	8082                	ret
+    800029ea:	70a2                	ld	ra,40(sp)
+    800029ec:	7402                	ld	s0,32(sp)
+    800029ee:	64e2                	ld	s1,24(sp)
+    800029f0:	6942                	ld	s2,16(sp)
+    800029f2:	69a2                	ld	s3,8(sp)
+    800029f4:	6a02                	ld	s4,0(sp)
+    800029f6:	6145                	addi	sp,sp,48
+    800029f8:	8082                	ret
     memmove((char *)dst, src, len);
-    80003b00:	000a061b          	sext.w	a2,s4
-    80003b04:	85ce                	mv	a1,s3
-    80003b06:	854a                	mv	a0,s2
-    80003b08:	ffffd097          	auipc	ra,0xffffd
-    80003b0c:	238080e7          	jalr	568(ra) # 80000d40 <memmove>
+    800029fa:	000a061b          	sext.w	a2,s4
+    800029fe:	85ce                	mv	a1,s3
+    80002a00:	854a                	mv	a0,s2
+    80002a02:	ffffe097          	auipc	ra,0xffffe
+    80002a06:	33e080e7          	jalr	830(ra) # 80000d40 <memmove>
     return 0;
-    80003b10:	8526                	mv	a0,s1
-    80003b12:	bff9                	j	80003af0 <either_copyout+0x32>
+    80002a0a:	8526                	mv	a0,s1
+    80002a0c:	bff9                	j	800029ea <either_copyout+0x32>
 
-0000000080003b14 <either_copyin>:
+0000000080002a0e <either_copyin>:
 // Copy from either a user address, or kernel address,
 // depending on usr_src.
 // Returns 0 on success, -1 on error.
 int
 either_copyin(void *dst, int user_src, uint64 src, uint64 len)
 {
-    80003b14:	7179                	addi	sp,sp,-48
-    80003b16:	f406                	sd	ra,40(sp)
-    80003b18:	f022                	sd	s0,32(sp)
-    80003b1a:	ec26                	sd	s1,24(sp)
-    80003b1c:	e84a                	sd	s2,16(sp)
-    80003b1e:	e44e                	sd	s3,8(sp)
-    80003b20:	e052                	sd	s4,0(sp)
-    80003b22:	1800                	addi	s0,sp,48
-    80003b24:	892a                	mv	s2,a0
-    80003b26:	84ae                	mv	s1,a1
-    80003b28:	89b2                	mv	s3,a2
-    80003b2a:	8a36                	mv	s4,a3
+    80002a0e:	7179                	addi	sp,sp,-48
+    80002a10:	f406                	sd	ra,40(sp)
+    80002a12:	f022                	sd	s0,32(sp)
+    80002a14:	ec26                	sd	s1,24(sp)
+    80002a16:	e84a                	sd	s2,16(sp)
+    80002a18:	e44e                	sd	s3,8(sp)
+    80002a1a:	e052                	sd	s4,0(sp)
+    80002a1c:	1800                	addi	s0,sp,48
+    80002a1e:	892a                	mv	s2,a0
+    80002a20:	84ae                	mv	s1,a1
+    80002a22:	89b2                	mv	s3,a2
+    80002a24:	8a36                	mv	s4,a3
   struct proc *p = myproc();
-    80003b2c:	ffffe097          	auipc	ra,0xffffe
-    80003b30:	068080e7          	jalr	104(ra) # 80001b94 <myproc>
+    80002a26:	fffff097          	auipc	ra,0xfffff
+    80002a2a:	2aa080e7          	jalr	682(ra) # 80001cd0 <myproc>
   if(user_src){
-    80003b34:	c08d                	beqz	s1,80003b56 <either_copyin+0x42>
+    80002a2e:	c08d                	beqz	s1,80002a50 <either_copyin+0x42>
     return copyin(p->pagetable, dst, src, len);
-    80003b36:	86d2                	mv	a3,s4
-    80003b38:	864e                	mv	a2,s3
-    80003b3a:	85ca                	mv	a1,s2
-    80003b3c:	6148                	ld	a0,128(a0)
-    80003b3e:	ffffe097          	auipc	ra,0xffffe
-    80003b42:	bc8080e7          	jalr	-1080(ra) # 80001706 <copyin>
+    80002a30:	86d2                	mv	a3,s4
+    80002a32:	864e                	mv	a2,s3
+    80002a34:	85ca                	mv	a1,s2
+    80002a36:	6928                	ld	a0,80(a0)
+    80002a38:	fffff097          	auipc	ra,0xfffff
+    80002a3c:	cc6080e7          	jalr	-826(ra) # 800016fe <copyin>
   } else {
     memmove(dst, (char*)src, len);
     return 0;
   }
 }
-    80003b46:	70a2                	ld	ra,40(sp)
-    80003b48:	7402                	ld	s0,32(sp)
-    80003b4a:	64e2                	ld	s1,24(sp)
-    80003b4c:	6942                	ld	s2,16(sp)
-    80003b4e:	69a2                	ld	s3,8(sp)
-    80003b50:	6a02                	ld	s4,0(sp)
-    80003b52:	6145                	addi	sp,sp,48
-    80003b54:	8082                	ret
+    80002a40:	70a2                	ld	ra,40(sp)
+    80002a42:	7402                	ld	s0,32(sp)
+    80002a44:	64e2                	ld	s1,24(sp)
+    80002a46:	6942                	ld	s2,16(sp)
+    80002a48:	69a2                	ld	s3,8(sp)
+    80002a4a:	6a02                	ld	s4,0(sp)
+    80002a4c:	6145                	addi	sp,sp,48
+    80002a4e:	8082                	ret
     memmove(dst, (char*)src, len);
-    80003b56:	000a061b          	sext.w	a2,s4
-    80003b5a:	85ce                	mv	a1,s3
-    80003b5c:	854a                	mv	a0,s2
-    80003b5e:	ffffd097          	auipc	ra,0xffffd
-    80003b62:	1e2080e7          	jalr	482(ra) # 80000d40 <memmove>
+    80002a50:	000a061b          	sext.w	a2,s4
+    80002a54:	85ce                	mv	a1,s3
+    80002a56:	854a                	mv	a0,s2
+    80002a58:	ffffe097          	auipc	ra,0xffffe
+    80002a5c:	2e8080e7          	jalr	744(ra) # 80000d40 <memmove>
     return 0;
-    80003b66:	8526                	mv	a0,s1
-    80003b68:	bff9                	j	80003b46 <either_copyin+0x32>
+    80002a60:	8526                	mv	a0,s1
+    80002a62:	bff9                	j	80002a40 <either_copyin+0x32>
+
+0000000080002a64 <procdump>:
 
-0000000080003b6a <procdump>:
 // Print a process listing to console.  For debugging.
 // Runs when user types ^P on console.
-// No lock to avoid wedging a stuck machine further.
+// No lock to avoid wedging a stuck machine further..
 void
-procdump(void)
-{
-    80003b6a:	715d                	addi	sp,sp,-80
-    80003b6c:	e486                	sd	ra,72(sp)
-    80003b6e:	e0a2                	sd	s0,64(sp)
-    80003b70:	fc26                	sd	s1,56(sp)
-    80003b72:	f84a                	sd	s2,48(sp)
-    80003b74:	f44e                	sd	s3,40(sp)
-    80003b76:	f052                	sd	s4,32(sp)
-    80003b78:	ec56                	sd	s5,24(sp)
-    80003b7a:	e85a                	sd	s6,16(sp)
-    80003b7c:	e45e                	sd	s7,8(sp)
-    80003b7e:	0880                	addi	s0,sp,80
+procdump(void){
+    80002a64:	715d                	addi	sp,sp,-80
+    80002a66:	e486                	sd	ra,72(sp)
+    80002a68:	e0a2                	sd	s0,64(sp)
+    80002a6a:	fc26                	sd	s1,56(sp)
+    80002a6c:	f84a                	sd	s2,48(sp)
+    80002a6e:	f44e                	sd	s3,40(sp)
+    80002a70:	f052                	sd	s4,32(sp)
+    80002a72:	ec56                	sd	s5,24(sp)
+    80002a74:	e85a                	sd	s6,16(sp)
+    80002a76:	e45e                	sd	s7,8(sp)
+    80002a78:	0880                	addi	s0,sp,80
   [ZOMBIE]    "zombie"
   };
   struct proc *p;
   char *state;
 
   printf("\n");
-    80003b80:	00006517          	auipc	a0,0x6
-    80003b84:	a8850513          	addi	a0,a0,-1400 # 80009608 <digits+0x5c8>
-    80003b88:	ffffd097          	auipc	ra,0xffffd
-    80003b8c:	a00080e7          	jalr	-1536(ra) # 80000588 <printf>
+    80002a7a:	00005517          	auipc	a0,0x5
+    80002a7e:	64e50513          	addi	a0,a0,1614 # 800080c8 <digits+0x88>
+    80002a82:	ffffe097          	auipc	ra,0xffffe
+    80002a86:	b06080e7          	jalr	-1274(ra) # 80000588 <printf>
   for(p = proc; p < &proc[NPROC]; p++){
-    80003b90:	0000f497          	auipc	s1,0xf
-    80003b94:	d6848493          	addi	s1,s1,-664 # 800128f8 <proc+0x188>
-    80003b98:	00015917          	auipc	s2,0x15
-    80003b9c:	36090913          	addi	s2,s2,864 # 80018ef8 <bcache+0x170>
+    80002a8a:	0000f497          	auipc	s1,0xf
+    80002a8e:	ede48493          	addi	s1,s1,-290 # 80011968 <proc+0x158>
+    80002a92:	00015917          	auipc	s2,0x15
+    80002a96:	2d690913          	addi	s2,s2,726 # 80017d68 <bcache+0x140>
     if(p->state == UNUSED)
       continue;
     if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
-    80003ba0:	4b15                	li	s6,5
+    80002a9a:	4b15                	li	s6,5
       state = states[p->state];
     else
-      state = "???";
-    80003ba2:	00006997          	auipc	s3,0x6
-    80003ba6:	ace98993          	addi	s3,s3,-1330 # 80009670 <digits+0x630>
+      state = "???"; 
+    80002a9c:	00006997          	auipc	s3,0x6
+    80002aa0:	86c98993          	addi	s3,s3,-1940 # 80008308 <digits+0x2c8>
     printf("%d %s %s", p->pid, state, p->name);
-    80003baa:	00006a97          	auipc	s5,0x6
-    80003bae:	acea8a93          	addi	s5,s5,-1330 # 80009678 <digits+0x638>
+    80002aa4:	00006a97          	auipc	s5,0x6
+    80002aa8:	86ca8a93          	addi	s5,s5,-1940 # 80008310 <digits+0x2d0>
     printf("\n");
-    80003bb2:	00006a17          	auipc	s4,0x6
-    80003bb6:	a56a0a13          	addi	s4,s4,-1450 # 80009608 <digits+0x5c8>
+    80002aac:	00005a17          	auipc	s4,0x5
+    80002ab0:	61ca0a13          	addi	s4,s4,1564 # 800080c8 <digits+0x88>
     if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
-    80003bba:	00006b97          	auipc	s7,0x6
-    80003bbe:	ae6b8b93          	addi	s7,s7,-1306 # 800096a0 <states.1850>
-    80003bc2:	a00d                	j	80003be4 <procdump+0x7a>
+    80002ab4:	00006b97          	auipc	s7,0x6
+    80002ab8:	894b8b93          	addi	s7,s7,-1900 # 80008348 <states.1791>
+    80002abc:	a00d                	j	80002ade <procdump+0x7a>
     printf("%d %s %s", p->pid, state, p->name);
-    80003bc4:	ea86a583          	lw	a1,-344(a3)
-    80003bc8:	8556                	mv	a0,s5
-    80003bca:	ffffd097          	auipc	ra,0xffffd
-    80003bce:	9be080e7          	jalr	-1602(ra) # 80000588 <printf>
+    80002abe:	ed86a583          	lw	a1,-296(a3)
+    80002ac2:	8556                	mv	a0,s5
+    80002ac4:	ffffe097          	auipc	ra,0xffffe
+    80002ac8:	ac4080e7          	jalr	-1340(ra) # 80000588 <printf>
     printf("\n");
-    80003bd2:	8552                	mv	a0,s4
-    80003bd4:	ffffd097          	auipc	ra,0xffffd
-    80003bd8:	9b4080e7          	jalr	-1612(ra) # 80000588 <printf>
+    80002acc:	8552                	mv	a0,s4
+    80002ace:	ffffe097          	auipc	ra,0xffffe
+    80002ad2:	aba080e7          	jalr	-1350(ra) # 80000588 <printf>
   for(p = proc; p < &proc[NPROC]; p++){
-    80003bdc:	19848493          	addi	s1,s1,408
-    80003be0:	03248163          	beq	s1,s2,80003c02 <procdump+0x98>
+    80002ad6:	19048493          	addi	s1,s1,400
+    80002ada:	03248163          	beq	s1,s2,80002afc <procdump+0x98>
     if(p->state == UNUSED)
-    80003be4:	86a6                	mv	a3,s1
-    80003be6:	e904a783          	lw	a5,-368(s1)
-    80003bea:	dbed                	beqz	a5,80003bdc <procdump+0x72>
-      state = "???";
-    80003bec:	864e                	mv	a2,s3
+    80002ade:	86a6                	mv	a3,s1
+    80002ae0:	ec04a783          	lw	a5,-320(s1)
+    80002ae4:	dbed                	beqz	a5,80002ad6 <procdump+0x72>
+      state = "???"; 
+    80002ae6:	864e                	mv	a2,s3
     if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
-    80003bee:	fcfb6be3          	bltu	s6,a5,80003bc4 <procdump+0x5a>
-    80003bf2:	1782                	slli	a5,a5,0x20
-    80003bf4:	9381                	srli	a5,a5,0x20
-    80003bf6:	078e                	slli	a5,a5,0x3
-    80003bf8:	97de                	add	a5,a5,s7
-    80003bfa:	6390                	ld	a2,0(a5)
-    80003bfc:	f661                	bnez	a2,80003bc4 <procdump+0x5a>
-      state = "???";
-    80003bfe:	864e                	mv	a2,s3
-    80003c00:	b7d1                	j	80003bc4 <procdump+0x5a>
+    80002ae8:	fcfb6be3          	bltu	s6,a5,80002abe <procdump+0x5a>
+    80002aec:	1782                	slli	a5,a5,0x20
+    80002aee:	9381                	srli	a5,a5,0x20
+    80002af0:	078e                	slli	a5,a5,0x3
+    80002af2:	97de                	add	a5,a5,s7
+    80002af4:	6390                	ld	a2,0(a5)
+    80002af6:	f661                	bnez	a2,80002abe <procdump+0x5a>
+      state = "???"; 
+    80002af8:	864e                	mv	a2,s3
+    80002afa:	b7d1                	j	80002abe <procdump+0x5a>
   }
 }
-    80003c02:	60a6                	ld	ra,72(sp)
-    80003c04:	6406                	ld	s0,64(sp)
-    80003c06:	74e2                	ld	s1,56(sp)
-    80003c08:	7942                	ld	s2,48(sp)
-    80003c0a:	79a2                	ld	s3,40(sp)
-    80003c0c:	7a02                	ld	s4,32(sp)
-    80003c0e:	6ae2                	ld	s5,24(sp)
-    80003c10:	6b42                	ld	s6,16(sp)
-    80003c12:	6ba2                	ld	s7,8(sp)
-    80003c14:	6161                	addi	sp,sp,80
-    80003c16:	8082                	ret
-
-0000000080003c18 <swtch>:
-    80003c18:	00153023          	sd	ra,0(a0)
-    80003c1c:	00253423          	sd	sp,8(a0)
-    80003c20:	e900                	sd	s0,16(a0)
-    80003c22:	ed04                	sd	s1,24(a0)
-    80003c24:	03253023          	sd	s2,32(a0)
-    80003c28:	03353423          	sd	s3,40(a0)
-    80003c2c:	03453823          	sd	s4,48(a0)
-    80003c30:	03553c23          	sd	s5,56(a0)
-    80003c34:	05653023          	sd	s6,64(a0)
-    80003c38:	05753423          	sd	s7,72(a0)
-    80003c3c:	05853823          	sd	s8,80(a0)
-    80003c40:	05953c23          	sd	s9,88(a0)
-    80003c44:	07a53023          	sd	s10,96(a0)
-    80003c48:	07b53423          	sd	s11,104(a0)
-    80003c4c:	0005b083          	ld	ra,0(a1)
-    80003c50:	0085b103          	ld	sp,8(a1)
-    80003c54:	6980                	ld	s0,16(a1)
-    80003c56:	6d84                	ld	s1,24(a1)
-    80003c58:	0205b903          	ld	s2,32(a1)
-    80003c5c:	0285b983          	ld	s3,40(a1)
-    80003c60:	0305ba03          	ld	s4,48(a1)
-    80003c64:	0385ba83          	ld	s5,56(a1)
-    80003c68:	0405bb03          	ld	s6,64(a1)
-    80003c6c:	0485bb83          	ld	s7,72(a1)
-    80003c70:	0505bc03          	ld	s8,80(a1)
-    80003c74:	0585bc83          	ld	s9,88(a1)
-    80003c78:	0605bd03          	ld	s10,96(a1)
-    80003c7c:	0685bd83          	ld	s11,104(a1)
-    80003c80:	8082                	ret
-
-0000000080003c82 <trapinit>:
+    80002afc:	60a6                	ld	ra,72(sp)
+    80002afe:	6406                	ld	s0,64(sp)
+    80002b00:	74e2                	ld	s1,56(sp)
+    80002b02:	7942                	ld	s2,48(sp)
+    80002b04:	79a2                	ld	s3,40(sp)
+    80002b06:	7a02                	ld	s4,32(sp)
+    80002b08:	6ae2                	ld	s5,24(sp)
+    80002b0a:	6b42                	ld	s6,16(sp)
+    80002b0c:	6ba2                	ld	s7,8(sp)
+    80002b0e:	6161                	addi	sp,sp,80
+    80002b10:	8082                	ret
+
+0000000080002b12 <set_cpu>:
+
+// move process to different CPU. 
+int
+set_cpu(int cpu_num) {
+  int fail = -1;
+  if(cpu_num < NCPU) {
+    80002b12:	479d                	li	a5,7
+    80002b14:	04a7e863          	bltu	a5,a0,80002b64 <set_cpu+0x52>
+set_cpu(int cpu_num) {
+    80002b18:	1101                	addi	sp,sp,-32
+    80002b1a:	ec06                	sd	ra,24(sp)
+    80002b1c:	e822                	sd	s0,16(sp)
+    80002b1e:	e426                	sd	s1,8(sp)
+    80002b20:	1000                	addi	s0,sp,32
+    80002b22:	84aa                	mv	s1,a0
+   if(cpu_num >= 0) {
+     struct cpu *c = &cpus[cpu_num];
+     if(c != NULL) {
+        acquire(&myproc()->lock);
+    80002b24:	fffff097          	auipc	ra,0xfffff
+    80002b28:	1ac080e7          	jalr	428(ra) # 80001cd0 <myproc>
+    80002b2c:	ffffe097          	auipc	ra,0xffffe
+    80002b30:	0b8080e7          	jalr	184(ra) # 80000be4 <acquire>
+        myproc()->last_cpu = cpu_num;
+    80002b34:	fffff097          	auipc	ra,0xfffff
+    80002b38:	19c080e7          	jalr	412(ra) # 80001cd0 <myproc>
+    80002b3c:	16952423          	sw	s1,360(a0)
+        release(&myproc()->lock);
+    80002b40:	fffff097          	auipc	ra,0xfffff
+    80002b44:	190080e7          	jalr	400(ra) # 80001cd0 <myproc>
+    80002b48:	ffffe097          	auipc	ra,0xffffe
+    80002b4c:	150080e7          	jalr	336(ra) # 80000c98 <release>
+
+        // RUNNING -> RUNNABLE
+        yield();
+    80002b50:	00000097          	auipc	ra,0x0
+    80002b54:	996080e7          	jalr	-1642(ra) # 800024e6 <yield>
+        return cpu_num;
+    80002b58:	8526                	mv	a0,s1
+      }
+    }
+  }
+  return fail;
+}
+    80002b5a:	60e2                	ld	ra,24(sp)
+    80002b5c:	6442                	ld	s0,16(sp)
+    80002b5e:	64a2                	ld	s1,8(sp)
+    80002b60:	6105                	addi	sp,sp,32
+    80002b62:	8082                	ret
+  return fail;
+    80002b64:	557d                	li	a0,-1
+}
+    80002b66:	8082                	ret
+
+0000000080002b68 <get_cpu>:
+
+
+// returns current CPU.
+int
+get_cpu(void){
+    80002b68:	1141                	addi	sp,sp,-16
+    80002b6a:	e406                	sd	ra,8(sp)
+    80002b6c:	e022                	sd	s0,0(sp)
+    80002b6e:	0800                	addi	s0,sp,16
+
+  // If process was not chosen by any cpy the value of myproc()->last_cpu is -1.
+  return myproc()->last_cpu;
+    80002b70:	fffff097          	auipc	ra,0xfffff
+    80002b74:	160080e7          	jalr	352(ra) # 80001cd0 <myproc>
+}
+    80002b78:	16852503          	lw	a0,360(a0)
+    80002b7c:	60a2                	ld	ra,8(sp)
+    80002b7e:	6402                	ld	s0,0(sp)
+    80002b80:	0141                	addi	sp,sp,16
+    80002b82:	8082                	ret
+
+0000000080002b84 <swtch>:
+    80002b84:	00153023          	sd	ra,0(a0)
+    80002b88:	00253423          	sd	sp,8(a0)
+    80002b8c:	e900                	sd	s0,16(a0)
+    80002b8e:	ed04                	sd	s1,24(a0)
+    80002b90:	03253023          	sd	s2,32(a0)
+    80002b94:	03353423          	sd	s3,40(a0)
+    80002b98:	03453823          	sd	s4,48(a0)
+    80002b9c:	03553c23          	sd	s5,56(a0)
+    80002ba0:	05653023          	sd	s6,64(a0)
+    80002ba4:	05753423          	sd	s7,72(a0)
+    80002ba8:	05853823          	sd	s8,80(a0)
+    80002bac:	05953c23          	sd	s9,88(a0)
+    80002bb0:	07a53023          	sd	s10,96(a0)
+    80002bb4:	07b53423          	sd	s11,104(a0)
+    80002bb8:	0005b083          	ld	ra,0(a1)
+    80002bbc:	0085b103          	ld	sp,8(a1)
+    80002bc0:	6980                	ld	s0,16(a1)
+    80002bc2:	6d84                	ld	s1,24(a1)
+    80002bc4:	0205b903          	ld	s2,32(a1)
+    80002bc8:	0285b983          	ld	s3,40(a1)
+    80002bcc:	0305ba03          	ld	s4,48(a1)
+    80002bd0:	0385ba83          	ld	s5,56(a1)
+    80002bd4:	0405bb03          	ld	s6,64(a1)
+    80002bd8:	0485bb83          	ld	s7,72(a1)
+    80002bdc:	0505bc03          	ld	s8,80(a1)
+    80002be0:	0585bc83          	ld	s9,88(a1)
+    80002be4:	0605bd03          	ld	s10,96(a1)
+    80002be8:	0685bd83          	ld	s11,104(a1)
+    80002bec:	8082                	ret
+
+0000000080002bee <trapinit>:
 
 extern int devintr();
 
 void
 trapinit(void)
 {
-    80003c82:	1141                	addi	sp,sp,-16
-    80003c84:	e406                	sd	ra,8(sp)
-    80003c86:	e022                	sd	s0,0(sp)
-    80003c88:	0800                	addi	s0,sp,16
+    80002bee:	1141                	addi	sp,sp,-16
+    80002bf0:	e406                	sd	ra,8(sp)
+    80002bf2:	e022                	sd	s0,0(sp)
+    80002bf4:	0800                	addi	s0,sp,16
   initlock(&tickslock, "time");
-    80003c8a:	00006597          	auipc	a1,0x6
-    80003c8e:	a4658593          	addi	a1,a1,-1466 # 800096d0 <states.1850+0x30>
-    80003c92:	00015517          	auipc	a0,0x15
-    80003c96:	0de50513          	addi	a0,a0,222 # 80018d70 <tickslock>
-    80003c9a:	ffffd097          	auipc	ra,0xffffd
-    80003c9e:	eba080e7          	jalr	-326(ra) # 80000b54 <initlock>
+    80002bf6:	00005597          	auipc	a1,0x5
+    80002bfa:	78258593          	addi	a1,a1,1922 # 80008378 <states.1791+0x30>
+    80002bfe:	00015517          	auipc	a0,0x15
+    80002c02:	01250513          	addi	a0,a0,18 # 80017c10 <tickslock>
+    80002c06:	ffffe097          	auipc	ra,0xffffe
+    80002c0a:	f4e080e7          	jalr	-178(ra) # 80000b54 <initlock>
 }
-    80003ca2:	60a2                	ld	ra,8(sp)
-    80003ca4:	6402                	ld	s0,0(sp)
-    80003ca6:	0141                	addi	sp,sp,16
-    80003ca8:	8082                	ret
+    80002c0e:	60a2                	ld	ra,8(sp)
+    80002c10:	6402                	ld	s0,0(sp)
+    80002c12:	0141                	addi	sp,sp,16
+    80002c14:	8082                	ret
 
-0000000080003caa <trapinithart>:
+0000000080002c16 <trapinithart>:
 
 // set up to take exceptions and traps while in the kernel.
 void
 trapinithart(void)
 {
-    80003caa:	1141                	addi	sp,sp,-16
-    80003cac:	e422                	sd	s0,8(sp)
-    80003cae:	0800                	addi	s0,sp,16
+    80002c16:	1141                	addi	sp,sp,-16
+    80002c18:	e422                	sd	s0,8(sp)
+    80002c1a:	0800                	addi	s0,sp,16
   asm volatile("csrw stvec, %0" : : "r" (x));
-    80003cb0:	00003797          	auipc	a5,0x3
-    80003cb4:	54078793          	addi	a5,a5,1344 # 800071f0 <kernelvec>
-    80003cb8:	10579073          	csrw	stvec,a5
+    80002c1c:	00003797          	auipc	a5,0x3
+    80002c20:	4d478793          	addi	a5,a5,1236 # 800060f0 <kernelvec>
+    80002c24:	10579073          	csrw	stvec,a5
   w_stvec((uint64)kernelvec);
 }
-    80003cbc:	6422                	ld	s0,8(sp)
-    80003cbe:	0141                	addi	sp,sp,16
-    80003cc0:	8082                	ret
+    80002c28:	6422                	ld	s0,8(sp)
+    80002c2a:	0141                	addi	sp,sp,16
+    80002c2c:	8082                	ret
 
-0000000080003cc2 <usertrapret>:
+0000000080002c2e <usertrapret>:
 //
 // return to user space
 //
 void
 usertrapret(void)
 {
-    80003cc2:	1141                	addi	sp,sp,-16
-    80003cc4:	e406                	sd	ra,8(sp)
-    80003cc6:	e022                	sd	s0,0(sp)
-    80003cc8:	0800                	addi	s0,sp,16
+    80002c2e:	1141                	addi	sp,sp,-16
+    80002c30:	e406                	sd	ra,8(sp)
+    80002c32:	e022                	sd	s0,0(sp)
+    80002c34:	0800                	addi	s0,sp,16
   struct proc *p = myproc();
-    80003cca:	ffffe097          	auipc	ra,0xffffe
-    80003cce:	eca080e7          	jalr	-310(ra) # 80001b94 <myproc>
+    80002c36:	fffff097          	auipc	ra,0xfffff
+    80002c3a:	09a080e7          	jalr	154(ra) # 80001cd0 <myproc>
   asm volatile("csrr %0, sstatus" : "=r" (x) );
-    80003cd2:	100027f3          	csrr	a5,sstatus
+    80002c3e:	100027f3          	csrr	a5,sstatus
   w_sstatus(r_sstatus() & ~SSTATUS_SIE);
-    80003cd6:	9bf5                	andi	a5,a5,-3
+    80002c42:	9bf5                	andi	a5,a5,-3
   asm volatile("csrw sstatus, %0" : : "r" (x));
-    80003cd8:	10079073          	csrw	sstatus,a5
+    80002c44:	10079073          	csrw	sstatus,a5
   // kerneltrap() to usertrap(), so turn off interrupts until
   // we're back in user space, where usertrap() is correct.
   intr_off();
 
   // send syscalls, interrupts, and exceptions to trampoline.S
   w_stvec(TRAMPOLINE + (uservec - trampoline));
-    80003cdc:	00004617          	auipc	a2,0x4
-    80003ce0:	32460613          	addi	a2,a2,804 # 80008000 <_trampoline>
-    80003ce4:	00004697          	auipc	a3,0x4
-    80003ce8:	31c68693          	addi	a3,a3,796 # 80008000 <_trampoline>
-    80003cec:	8e91                	sub	a3,a3,a2
-    80003cee:	040007b7          	lui	a5,0x4000
-    80003cf2:	17fd                	addi	a5,a5,-1
-    80003cf4:	07b2                	slli	a5,a5,0xc
-    80003cf6:	96be                	add	a3,a3,a5
+    80002c48:	00004617          	auipc	a2,0x4
+    80002c4c:	3b860613          	addi	a2,a2,952 # 80007000 <_trampoline>
+    80002c50:	00004697          	auipc	a3,0x4
+    80002c54:	3b068693          	addi	a3,a3,944 # 80007000 <_trampoline>
+    80002c58:	8e91                	sub	a3,a3,a2
+    80002c5a:	040007b7          	lui	a5,0x4000
+    80002c5e:	17fd                	addi	a5,a5,-1
+    80002c60:	07b2                	slli	a5,a5,0xc
+    80002c62:	96be                	add	a3,a3,a5
   asm volatile("csrw stvec, %0" : : "r" (x));
-    80003cf8:	10569073          	csrw	stvec,a3
+    80002c64:	10569073          	csrw	stvec,a3
 
   // set up trapframe values that uservec will need when
   // the process next re-enters the kernel.
   p->trapframe->kernel_satp = r_satp();         // kernel page table
-    80003cfc:	6558                	ld	a4,136(a0)
+    80002c68:	6d38                	ld	a4,88(a0)
   asm volatile("csrr %0, satp" : "=r" (x) );
-    80003cfe:	180026f3          	csrr	a3,satp
-    80003d02:	e314                	sd	a3,0(a4)
+    80002c6a:	180026f3          	csrr	a3,satp
+    80002c6e:	e314                	sd	a3,0(a4)
   p->trapframe->kernel_sp = p->kstack + PGSIZE; // process's kernel stack
-    80003d04:	6558                	ld	a4,136(a0)
-    80003d06:	7934                	ld	a3,112(a0)
-    80003d08:	6585                	lui	a1,0x1
-    80003d0a:	96ae                	add	a3,a3,a1
-    80003d0c:	e714                	sd	a3,8(a4)
+    80002c70:	6d38                	ld	a4,88(a0)
+    80002c72:	6134                	ld	a3,64(a0)
+    80002c74:	6585                	lui	a1,0x1
+    80002c76:	96ae                	add	a3,a3,a1
+    80002c78:	e714                	sd	a3,8(a4)
   p->trapframe->kernel_trap = (uint64)usertrap;
-    80003d0e:	6558                	ld	a4,136(a0)
-    80003d10:	00000697          	auipc	a3,0x0
-    80003d14:	13868693          	addi	a3,a3,312 # 80003e48 <usertrap>
-    80003d18:	eb14                	sd	a3,16(a4)
+    80002c7a:	6d38                	ld	a4,88(a0)
+    80002c7c:	00000697          	auipc	a3,0x0
+    80002c80:	13868693          	addi	a3,a3,312 # 80002db4 <usertrap>
+    80002c84:	eb14                	sd	a3,16(a4)
   p->trapframe->kernel_hartid = r_tp();         // hartid for cpuid()
-    80003d1a:	6558                	ld	a4,136(a0)
+    80002c86:	6d38                	ld	a4,88(a0)
   asm volatile("mv %0, tp" : "=r" (x) );
-    80003d1c:	8692                	mv	a3,tp
-    80003d1e:	f314                	sd	a3,32(a4)
+    80002c88:	8692                	mv	a3,tp
+    80002c8a:	f314                	sd	a3,32(a4)
   asm volatile("csrr %0, sstatus" : "=r" (x) );
-    80003d20:	100026f3          	csrr	a3,sstatus
+    80002c8c:	100026f3          	csrr	a3,sstatus
   // set up the registers that trampoline.S's sret will use
   // to get to user space.
   
   // set S Previous Privilege mode to User.
   unsigned long x = r_sstatus();
   x &= ~SSTATUS_SPP; // clear SPP to 0 for user mode
-    80003d24:	eff6f693          	andi	a3,a3,-257
+    80002c90:	eff6f693          	andi	a3,a3,-257
   x |= SSTATUS_SPIE; // enable interrupts in user mode
-    80003d28:	0206e693          	ori	a3,a3,32
+    80002c94:	0206e693          	ori	a3,a3,32
   asm volatile("csrw sstatus, %0" : : "r" (x));
-    80003d2c:	10069073          	csrw	sstatus,a3
+    80002c98:	10069073          	csrw	sstatus,a3
   w_sstatus(x);
 
   // set S Exception Program Counter to the saved user pc.
   w_sepc(p->trapframe->epc);
-    80003d30:	6558                	ld	a4,136(a0)
+    80002c9c:	6d38                	ld	a4,88(a0)
   asm volatile("csrw sepc, %0" : : "r" (x));
-    80003d32:	6f18                	ld	a4,24(a4)
-    80003d34:	14171073          	csrw	sepc,a4
+    80002c9e:	6f18                	ld	a4,24(a4)
+    80002ca0:	14171073          	csrw	sepc,a4
 
   // tell trampoline.S the user page table to switch to.
   uint64 satp = MAKE_SATP(p->pagetable);
-    80003d38:	614c                	ld	a1,128(a0)
-    80003d3a:	81b1                	srli	a1,a1,0xc
+    80002ca4:	692c                	ld	a1,80(a0)
+    80002ca6:	81b1                	srli	a1,a1,0xc
 
   // jump to trampoline.S at the top of memory, which 
   // switches to the user page table, restores user registers,
   // and switches to user mode with sret.
   uint64 fn = TRAMPOLINE + (userret - trampoline);
-    80003d3c:	00004717          	auipc	a4,0x4
-    80003d40:	35470713          	addi	a4,a4,852 # 80008090 <userret>
-    80003d44:	8f11                	sub	a4,a4,a2
-    80003d46:	97ba                	add	a5,a5,a4
+    80002ca8:	00004717          	auipc	a4,0x4
+    80002cac:	3e870713          	addi	a4,a4,1000 # 80007090 <userret>
+    80002cb0:	8f11                	sub	a4,a4,a2
+    80002cb2:	97ba                	add	a5,a5,a4
   ((void (*)(uint64,uint64))fn)(TRAPFRAME, satp);
-    80003d48:	577d                	li	a4,-1
-    80003d4a:	177e                	slli	a4,a4,0x3f
-    80003d4c:	8dd9                	or	a1,a1,a4
-    80003d4e:	02000537          	lui	a0,0x2000
-    80003d52:	157d                	addi	a0,a0,-1
-    80003d54:	0536                	slli	a0,a0,0xd
-    80003d56:	9782                	jalr	a5
-}
-    80003d58:	60a2                	ld	ra,8(sp)
-    80003d5a:	6402                	ld	s0,0(sp)
-    80003d5c:	0141                	addi	sp,sp,16
-    80003d5e:	8082                	ret
-
-0000000080003d60 <clockintr>:
+    80002cb4:	577d                	li	a4,-1
+    80002cb6:	177e                	slli	a4,a4,0x3f
+    80002cb8:	8dd9                	or	a1,a1,a4
+    80002cba:	02000537          	lui	a0,0x2000
+    80002cbe:	157d                	addi	a0,a0,-1
+    80002cc0:	0536                	slli	a0,a0,0xd
+    80002cc2:	9782                	jalr	a5
+}
+    80002cc4:	60a2                	ld	ra,8(sp)
+    80002cc6:	6402                	ld	s0,0(sp)
+    80002cc8:	0141                	addi	sp,sp,16
+    80002cca:	8082                	ret
+
+0000000080002ccc <clockintr>:
   w_sstatus(sstatus);
 }
 
 void
 clockintr()
 {
-    80003d60:	1101                	addi	sp,sp,-32
-    80003d62:	ec06                	sd	ra,24(sp)
-    80003d64:	e822                	sd	s0,16(sp)
-    80003d66:	e426                	sd	s1,8(sp)
-    80003d68:	1000                	addi	s0,sp,32
+    80002ccc:	1101                	addi	sp,sp,-32
+    80002cce:	ec06                	sd	ra,24(sp)
+    80002cd0:	e822                	sd	s0,16(sp)
+    80002cd2:	e426                	sd	s1,8(sp)
+    80002cd4:	1000                	addi	s0,sp,32
   acquire(&tickslock);
-    80003d6a:	00015497          	auipc	s1,0x15
-    80003d6e:	00648493          	addi	s1,s1,6 # 80018d70 <tickslock>
-    80003d72:	8526                	mv	a0,s1
-    80003d74:	ffffd097          	auipc	ra,0xffffd
-    80003d78:	e70080e7          	jalr	-400(ra) # 80000be4 <acquire>
+    80002cd6:	00015497          	auipc	s1,0x15
+    80002cda:	f3a48493          	addi	s1,s1,-198 # 80017c10 <tickslock>
+    80002cde:	8526                	mv	a0,s1
+    80002ce0:	ffffe097          	auipc	ra,0xffffe
+    80002ce4:	f04080e7          	jalr	-252(ra) # 80000be4 <acquire>
   ticks++;
-    80003d7c:	00006517          	auipc	a0,0x6
-    80003d80:	2d850513          	addi	a0,a0,728 # 8000a054 <ticks>
-    80003d84:	411c                	lw	a5,0(a0)
-    80003d86:	2785                	addiw	a5,a5,1
-    80003d88:	c11c                	sw	a5,0(a0)
+    80002ce8:	00006517          	auipc	a0,0x6
+    80002cec:	35050513          	addi	a0,a0,848 # 80009038 <ticks>
+    80002cf0:	411c                	lw	a5,0(a0)
+    80002cf2:	2785                	addiw	a5,a5,1
+    80002cf4:	c11c                	sw	a5,0(a0)
   wakeup(&ticks);
-    80003d8a:	fffff097          	auipc	ra,0xfffff
-    80003d8e:	30a080e7          	jalr	778(ra) # 80003094 <wakeup>
+    80002cf6:	00000097          	auipc	ra,0x0
+    80002cfa:	9ea080e7          	jalr	-1558(ra) # 800026e0 <wakeup>
   release(&tickslock);
-    80003d92:	8526                	mv	a0,s1
-    80003d94:	ffffd097          	auipc	ra,0xffffd
-    80003d98:	f04080e7          	jalr	-252(ra) # 80000c98 <release>
+    80002cfe:	8526                	mv	a0,s1
+    80002d00:	ffffe097          	auipc	ra,0xffffe
+    80002d04:	f98080e7          	jalr	-104(ra) # 80000c98 <release>
 }
-    80003d9c:	60e2                	ld	ra,24(sp)
-    80003d9e:	6442                	ld	s0,16(sp)
-    80003da0:	64a2                	ld	s1,8(sp)
-    80003da2:	6105                	addi	sp,sp,32
-    80003da4:	8082                	ret
+    80002d08:	60e2                	ld	ra,24(sp)
+    80002d0a:	6442                	ld	s0,16(sp)
+    80002d0c:	64a2                	ld	s1,8(sp)
+    80002d0e:	6105                	addi	sp,sp,32
+    80002d10:	8082                	ret
 
-0000000080003da6 <devintr>:
+0000000080002d12 <devintr>:
 // returns 2 if timer interrupt,
 // 1 if other device,
 // 0 if not recognized.
 int
 devintr()
 {
-    80003da6:	1101                	addi	sp,sp,-32
-    80003da8:	ec06                	sd	ra,24(sp)
-    80003daa:	e822                	sd	s0,16(sp)
-    80003dac:	e426                	sd	s1,8(sp)
-    80003dae:	1000                	addi	s0,sp,32
+    80002d12:	1101                	addi	sp,sp,-32
+    80002d14:	ec06                	sd	ra,24(sp)
+    80002d16:	e822                	sd	s0,16(sp)
+    80002d18:	e426                	sd	s1,8(sp)
+    80002d1a:	1000                	addi	s0,sp,32
   asm volatile("csrr %0, scause" : "=r" (x) );
-    80003db0:	14202773          	csrr	a4,scause
+    80002d1c:	14202773          	csrr	a4,scause
   uint64 scause = r_scause();
 
   if((scause & 0x8000000000000000L) &&
-    80003db4:	00074d63          	bltz	a4,80003dce <devintr+0x28>
+    80002d20:	00074d63          	bltz	a4,80002d3a <devintr+0x28>
     // now allowed to interrupt again.
     if(irq)
       plic_complete(irq);
 
     return 1;
   } else if(scause == 0x8000000000000001L){
-    80003db8:	57fd                	li	a5,-1
-    80003dba:	17fe                	slli	a5,a5,0x3f
-    80003dbc:	0785                	addi	a5,a5,1
+    80002d24:	57fd                	li	a5,-1
+    80002d26:	17fe                	slli	a5,a5,0x3f
+    80002d28:	0785                	addi	a5,a5,1
     // the SSIP bit in sip.
     w_sip(r_sip() & ~2);
 
     return 2;
   } else {
     return 0;
-    80003dbe:	4501                	li	a0,0
+    80002d2a:	4501                	li	a0,0
   } else if(scause == 0x8000000000000001L){
-    80003dc0:	06f70363          	beq	a4,a5,80003e26 <devintr+0x80>
+    80002d2c:	06f70363          	beq	a4,a5,80002d92 <devintr+0x80>
   }
 }
-    80003dc4:	60e2                	ld	ra,24(sp)
-    80003dc6:	6442                	ld	s0,16(sp)
-    80003dc8:	64a2                	ld	s1,8(sp)
-    80003dca:	6105                	addi	sp,sp,32
-    80003dcc:	8082                	ret
+    80002d30:	60e2                	ld	ra,24(sp)
+    80002d32:	6442                	ld	s0,16(sp)
+    80002d34:	64a2                	ld	s1,8(sp)
+    80002d36:	6105                	addi	sp,sp,32
+    80002d38:	8082                	ret
      (scause & 0xff) == 9){
-    80003dce:	0ff77793          	andi	a5,a4,255
+    80002d3a:	0ff77793          	andi	a5,a4,255
   if((scause & 0x8000000000000000L) &&
-    80003dd2:	46a5                	li	a3,9
-    80003dd4:	fed792e3          	bne	a5,a3,80003db8 <devintr+0x12>
+    80002d3e:	46a5                	li	a3,9
+    80002d40:	fed792e3          	bne	a5,a3,80002d24 <devintr+0x12>
     int irq = plic_claim();
-    80003dd8:	00003097          	auipc	ra,0x3
-    80003ddc:	520080e7          	jalr	1312(ra) # 800072f8 <plic_claim>
-    80003de0:	84aa                	mv	s1,a0
+    80002d44:	00003097          	auipc	ra,0x3
+    80002d48:	4b4080e7          	jalr	1204(ra) # 800061f8 <plic_claim>
+    80002d4c:	84aa                	mv	s1,a0
     if(irq == UART0_IRQ){
-    80003de2:	47a9                	li	a5,10
-    80003de4:	02f50763          	beq	a0,a5,80003e12 <devintr+0x6c>
+    80002d4e:	47a9                	li	a5,10
+    80002d50:	02f50763          	beq	a0,a5,80002d7e <devintr+0x6c>
     } else if(irq == VIRTIO0_IRQ){
-    80003de8:	4785                	li	a5,1
-    80003dea:	02f50963          	beq	a0,a5,80003e1c <devintr+0x76>
+    80002d54:	4785                	li	a5,1
+    80002d56:	02f50963          	beq	a0,a5,80002d88 <devintr+0x76>
     return 1;
-    80003dee:	4505                	li	a0,1
+    80002d5a:	4505                	li	a0,1
     } else if(irq){
-    80003df0:	d8f1                	beqz	s1,80003dc4 <devintr+0x1e>
+    80002d5c:	d8f1                	beqz	s1,80002d30 <devintr+0x1e>
       printf("unexpected interrupt irq=%d\n", irq);
-    80003df2:	85a6                	mv	a1,s1
-    80003df4:	00006517          	auipc	a0,0x6
-    80003df8:	8e450513          	addi	a0,a0,-1820 # 800096d8 <states.1850+0x38>
-    80003dfc:	ffffc097          	auipc	ra,0xffffc
-    80003e00:	78c080e7          	jalr	1932(ra) # 80000588 <printf>
+    80002d5e:	85a6                	mv	a1,s1
+    80002d60:	00005517          	auipc	a0,0x5
+    80002d64:	62050513          	addi	a0,a0,1568 # 80008380 <states.1791+0x38>
+    80002d68:	ffffe097          	auipc	ra,0xffffe
+    80002d6c:	820080e7          	jalr	-2016(ra) # 80000588 <printf>
       plic_complete(irq);
-    80003e04:	8526                	mv	a0,s1
-    80003e06:	00003097          	auipc	ra,0x3
-    80003e0a:	516080e7          	jalr	1302(ra) # 8000731c <plic_complete>
+    80002d70:	8526                	mv	a0,s1
+    80002d72:	00003097          	auipc	ra,0x3
+    80002d76:	4aa080e7          	jalr	1194(ra) # 8000621c <plic_complete>
     return 1;
-    80003e0e:	4505                	li	a0,1
-    80003e10:	bf55                	j	80003dc4 <devintr+0x1e>
+    80002d7a:	4505                	li	a0,1
+    80002d7c:	bf55                	j	80002d30 <devintr+0x1e>
       uartintr();
-    80003e12:	ffffd097          	auipc	ra,0xffffd
-    80003e16:	b96080e7          	jalr	-1130(ra) # 800009a8 <uartintr>
-    80003e1a:	b7ed                	j	80003e04 <devintr+0x5e>
+    80002d7e:	ffffe097          	auipc	ra,0xffffe
+    80002d82:	c2a080e7          	jalr	-982(ra) # 800009a8 <uartintr>
+    80002d86:	b7ed                	j	80002d70 <devintr+0x5e>
       virtio_disk_intr();
-    80003e1c:	00004097          	auipc	ra,0x4
-    80003e20:	9e0080e7          	jalr	-1568(ra) # 800077fc <virtio_disk_intr>
-    80003e24:	b7c5                	j	80003e04 <devintr+0x5e>
+    80002d88:	00004097          	auipc	ra,0x4
+    80002d8c:	974080e7          	jalr	-1676(ra) # 800066fc <virtio_disk_intr>
+    80002d90:	b7c5                	j	80002d70 <devintr+0x5e>
     if(cpuid() == 0){
-    80003e26:	ffffe097          	auipc	ra,0xffffe
-    80003e2a:	d32080e7          	jalr	-718(ra) # 80001b58 <cpuid>
-    80003e2e:	c901                	beqz	a0,80003e3e <devintr+0x98>
+    80002d92:	fffff097          	auipc	ra,0xfffff
+    80002d96:	f0c080e7          	jalr	-244(ra) # 80001c9e <cpuid>
+    80002d9a:	c901                	beqz	a0,80002daa <devintr+0x98>
   asm volatile("csrr %0, sip" : "=r" (x) );
-    80003e30:	144027f3          	csrr	a5,sip
+    80002d9c:	144027f3          	csrr	a5,sip
     w_sip(r_sip() & ~2);
-    80003e34:	9bf5                	andi	a5,a5,-3
+    80002da0:	9bf5                	andi	a5,a5,-3
   asm volatile("csrw sip, %0" : : "r" (x));
-    80003e36:	14479073          	csrw	sip,a5
+    80002da2:	14479073          	csrw	sip,a5
     return 2;
-    80003e3a:	4509                	li	a0,2
-    80003e3c:	b761                	j	80003dc4 <devintr+0x1e>
+    80002da6:	4509                	li	a0,2
+    80002da8:	b761                	j	80002d30 <devintr+0x1e>
       clockintr();
-    80003e3e:	00000097          	auipc	ra,0x0
-    80003e42:	f22080e7          	jalr	-222(ra) # 80003d60 <clockintr>
-    80003e46:	b7ed                	j	80003e30 <devintr+0x8a>
-
-0000000080003e48 <usertrap>:
-{
-    80003e48:	1101                	addi	sp,sp,-32
-    80003e4a:	ec06                	sd	ra,24(sp)
-    80003e4c:	e822                	sd	s0,16(sp)
-    80003e4e:	e426                	sd	s1,8(sp)
-    80003e50:	1000                	addi	s0,sp,32
+    80002daa:	00000097          	auipc	ra,0x0
+    80002dae:	f22080e7          	jalr	-222(ra) # 80002ccc <clockintr>
+    80002db2:	b7ed                	j	80002d9c <devintr+0x8a>
+
+0000000080002db4 <usertrap>:
+{
+    80002db4:	1101                	addi	sp,sp,-32
+    80002db6:	ec06                	sd	ra,24(sp)
+    80002db8:	e822                	sd	s0,16(sp)
+    80002dba:	e426                	sd	s1,8(sp)
+    80002dbc:	e04a                	sd	s2,0(sp)
+    80002dbe:	1000                	addi	s0,sp,32
   asm volatile("csrr %0, sstatus" : "=r" (x) );
-    80003e52:	100027f3          	csrr	a5,sstatus
+    80002dc0:	100027f3          	csrr	a5,sstatus
   if((r_sstatus() & SSTATUS_SPP) != 0)
-    80003e56:	1007f793          	andi	a5,a5,256
-    80003e5a:	e3a5                	bnez	a5,80003eba <usertrap+0x72>
+    80002dc4:	1007f793          	andi	a5,a5,256
+    80002dc8:	e3ad                	bnez	a5,80002e2a <usertrap+0x76>
   asm volatile("csrw stvec, %0" : : "r" (x));
-    80003e5c:	00003797          	auipc	a5,0x3
-    80003e60:	39478793          	addi	a5,a5,916 # 800071f0 <kernelvec>
-    80003e64:	10579073          	csrw	stvec,a5
+    80002dca:	00003797          	auipc	a5,0x3
+    80002dce:	32678793          	addi	a5,a5,806 # 800060f0 <kernelvec>
+    80002dd2:	10579073          	csrw	stvec,a5
   struct proc *p = myproc();
-    80003e68:	ffffe097          	auipc	ra,0xffffe
-    80003e6c:	d2c080e7          	jalr	-724(ra) # 80001b94 <myproc>
-    80003e70:	84aa                	mv	s1,a0
+    80002dd6:	fffff097          	auipc	ra,0xfffff
+    80002dda:	efa080e7          	jalr	-262(ra) # 80001cd0 <myproc>
+    80002dde:	84aa                	mv	s1,a0
   p->trapframe->epc = r_sepc();
-    80003e72:	655c                	ld	a5,136(a0)
+    80002de0:	6d3c                	ld	a5,88(a0)
   asm volatile("csrr %0, sepc" : "=r" (x) );
-    80003e74:	14102773          	csrr	a4,sepc
-    80003e78:	ef98                	sd	a4,24(a5)
+    80002de2:	14102773          	csrr	a4,sepc
+    80002de6:	ef98                	sd	a4,24(a5)
   asm volatile("csrr %0, scause" : "=r" (x) );
-    80003e7a:	14202773          	csrr	a4,scause
+    80002de8:	14202773          	csrr	a4,scause
   if(r_scause() == 8){
-    80003e7e:	47a1                	li	a5,8
-    80003e80:	04f71b63          	bne	a4,a5,80003ed6 <usertrap+0x8e>
+    80002dec:	47a1                	li	a5,8
+    80002dee:	04f71c63          	bne	a4,a5,80002e46 <usertrap+0x92>
     if(p->killed)
-    80003e84:	551c                	lw	a5,40(a0)
-    80003e86:	e3b1                	bnez	a5,80003eca <usertrap+0x82>
+    80002df2:	551c                	lw	a5,40(a0)
+    80002df4:	e3b9                	bnez	a5,80002e3a <usertrap+0x86>
     p->trapframe->epc += 4;
-    80003e88:	64d8                	ld	a4,136(s1)
-    80003e8a:	6f1c                	ld	a5,24(a4)
-    80003e8c:	0791                	addi	a5,a5,4
-    80003e8e:	ef1c                	sd	a5,24(a4)
+    80002df6:	6cb8                	ld	a4,88(s1)
+    80002df8:	6f1c                	ld	a5,24(a4)
+    80002dfa:	0791                	addi	a5,a5,4
+    80002dfc:	ef1c                	sd	a5,24(a4)
   asm volatile("csrr %0, sstatus" : "=r" (x) );
-    80003e90:	100027f3          	csrr	a5,sstatus
+    80002dfe:	100027f3          	csrr	a5,sstatus
   w_sstatus(r_sstatus() | SSTATUS_SIE);
-    80003e94:	0027e793          	ori	a5,a5,2
+    80002e02:	0027e793          	ori	a5,a5,2
   asm volatile("csrw sstatus, %0" : : "r" (x));
-    80003e98:	10079073          	csrw	sstatus,a5
+    80002e06:	10079073          	csrw	sstatus,a5
     syscall();
-    80003e9c:	00000097          	auipc	ra,0x0
-    80003ea0:	2f0080e7          	jalr	752(ra) # 8000418c <syscall>
+    80002e0a:	00000097          	auipc	ra,0x0
+    80002e0e:	2e0080e7          	jalr	736(ra) # 800030ea <syscall>
   if(p->killed)
-    80003ea4:	549c                	lw	a5,40(s1)
-    80003ea6:	e7b5                	bnez	a5,80003f12 <usertrap+0xca>
+    80002e12:	549c                	lw	a5,40(s1)
+    80002e14:	ebc1                	bnez	a5,80002ea4 <usertrap+0xf0>
   usertrapret();
-    80003ea8:	00000097          	auipc	ra,0x0
-    80003eac:	e1a080e7          	jalr	-486(ra) # 80003cc2 <usertrapret>
-}
-    80003eb0:	60e2                	ld	ra,24(sp)
-    80003eb2:	6442                	ld	s0,16(sp)
-    80003eb4:	64a2                	ld	s1,8(sp)
-    80003eb6:	6105                	addi	sp,sp,32
-    80003eb8:	8082                	ret
+    80002e16:	00000097          	auipc	ra,0x0
+    80002e1a:	e18080e7          	jalr	-488(ra) # 80002c2e <usertrapret>
+}
+    80002e1e:	60e2                	ld	ra,24(sp)
+    80002e20:	6442                	ld	s0,16(sp)
+    80002e22:	64a2                	ld	s1,8(sp)
+    80002e24:	6902                	ld	s2,0(sp)
+    80002e26:	6105                	addi	sp,sp,32
+    80002e28:	8082                	ret
     panic("usertrap: not from user mode");
-    80003eba:	00006517          	auipc	a0,0x6
-    80003ebe:	83e50513          	addi	a0,a0,-1986 # 800096f8 <states.1850+0x58>
-    80003ec2:	ffffc097          	auipc	ra,0xffffc
-    80003ec6:	67c080e7          	jalr	1660(ra) # 8000053e <panic>
+    80002e2a:	00005517          	auipc	a0,0x5
+    80002e2e:	57650513          	addi	a0,a0,1398 # 800083a0 <states.1791+0x58>
+    80002e32:	ffffd097          	auipc	ra,0xffffd
+    80002e36:	70c080e7          	jalr	1804(ra) # 8000053e <panic>
       exit(-1);
-    80003eca:	557d                	li	a0,-1
-    80003ecc:	fffff097          	auipc	ra,0xfffff
-    80003ed0:	418080e7          	jalr	1048(ra) # 800032e4 <exit>
-    80003ed4:	bf55                	j	80003e88 <usertrap+0x40>
+    80002e3a:	557d                	li	a0,-1
+    80002e3c:	00000097          	auipc	ra,0x0
+    80002e40:	a22080e7          	jalr	-1502(ra) # 8000285e <exit>
+    80002e44:	bf4d                	j	80002df6 <usertrap+0x42>
   } else if((which_dev = devintr()) != 0){
-    80003ed6:	00000097          	auipc	ra,0x0
-    80003eda:	ed0080e7          	jalr	-304(ra) # 80003da6 <devintr>
-    80003ede:	f179                	bnez	a0,80003ea4 <usertrap+0x5c>
+    80002e46:	00000097          	auipc	ra,0x0
+    80002e4a:	ecc080e7          	jalr	-308(ra) # 80002d12 <devintr>
+    80002e4e:	892a                	mv	s2,a0
+    80002e50:	c501                	beqz	a0,80002e58 <usertrap+0xa4>
+  if(p->killed)
+    80002e52:	549c                	lw	a5,40(s1)
+    80002e54:	c3a1                	beqz	a5,80002e94 <usertrap+0xe0>
+    80002e56:	a815                	j	80002e8a <usertrap+0xd6>
   asm volatile("csrr %0, scause" : "=r" (x) );
-    80003ee0:	142025f3          	csrr	a1,scause
+    80002e58:	142025f3          	csrr	a1,scause
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
-    80003ee4:	5890                	lw	a2,48(s1)
-    80003ee6:	00006517          	auipc	a0,0x6
-    80003eea:	83250513          	addi	a0,a0,-1998 # 80009718 <states.1850+0x78>
-    80003eee:	ffffc097          	auipc	ra,0xffffc
-    80003ef2:	69a080e7          	jalr	1690(ra) # 80000588 <printf>
+    80002e5c:	5890                	lw	a2,48(s1)
+    80002e5e:	00005517          	auipc	a0,0x5
+    80002e62:	56250513          	addi	a0,a0,1378 # 800083c0 <states.1791+0x78>
+    80002e66:	ffffd097          	auipc	ra,0xffffd
+    80002e6a:	722080e7          	jalr	1826(ra) # 80000588 <printf>
   asm volatile("csrr %0, sepc" : "=r" (x) );
-    80003ef6:	141025f3          	csrr	a1,sepc
+    80002e6e:	141025f3          	csrr	a1,sepc
   asm volatile("csrr %0, stval" : "=r" (x) );
-    80003efa:	14302673          	csrr	a2,stval
+    80002e72:	14302673          	csrr	a2,stval
     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
-    80003efe:	00006517          	auipc	a0,0x6
-    80003f02:	84a50513          	addi	a0,a0,-1974 # 80009748 <states.1850+0xa8>
-    80003f06:	ffffc097          	auipc	ra,0xffffc
-    80003f0a:	682080e7          	jalr	1666(ra) # 80000588 <printf>
+    80002e76:	00005517          	auipc	a0,0x5
+    80002e7a:	57a50513          	addi	a0,a0,1402 # 800083f0 <states.1791+0xa8>
+    80002e7e:	ffffd097          	auipc	ra,0xffffd
+    80002e82:	70a080e7          	jalr	1802(ra) # 80000588 <printf>
     p->killed = 1;
-    80003f0e:	4785                	li	a5,1
-    80003f10:	d49c                	sw	a5,40(s1)
+    80002e86:	4785                	li	a5,1
+    80002e88:	d49c                	sw	a5,40(s1)
     exit(-1);
-    80003f12:	557d                	li	a0,-1
-    80003f14:	fffff097          	auipc	ra,0xfffff
-    80003f18:	3d0080e7          	jalr	976(ra) # 800032e4 <exit>
-    80003f1c:	b771                	j	80003ea8 <usertrap+0x60>
-
-0000000080003f1e <kerneltrap>:
-{
-    80003f1e:	7179                	addi	sp,sp,-48
-    80003f20:	f406                	sd	ra,40(sp)
-    80003f22:	f022                	sd	s0,32(sp)
-    80003f24:	ec26                	sd	s1,24(sp)
-    80003f26:	e84a                	sd	s2,16(sp)
-    80003f28:	e44e                	sd	s3,8(sp)
-    80003f2a:	e052                	sd	s4,0(sp)
-    80003f2c:	1800                	addi	s0,sp,48
+    80002e8a:	557d                	li	a0,-1
+    80002e8c:	00000097          	auipc	ra,0x0
+    80002e90:	9d2080e7          	jalr	-1582(ra) # 8000285e <exit>
+  if(which_dev == 2)
+    80002e94:	4789                	li	a5,2
+    80002e96:	f8f910e3          	bne	s2,a5,80002e16 <usertrap+0x62>
+    yield();
+    80002e9a:	fffff097          	auipc	ra,0xfffff
+    80002e9e:	64c080e7          	jalr	1612(ra) # 800024e6 <yield>
+    80002ea2:	bf95                	j	80002e16 <usertrap+0x62>
+  int which_dev = 0;
+    80002ea4:	4901                	li	s2,0
+    80002ea6:	b7d5                	j	80002e8a <usertrap+0xd6>
+
+0000000080002ea8 <kerneltrap>:
+{
+    80002ea8:	7179                	addi	sp,sp,-48
+    80002eaa:	f406                	sd	ra,40(sp)
+    80002eac:	f022                	sd	s0,32(sp)
+    80002eae:	ec26                	sd	s1,24(sp)
+    80002eb0:	e84a                	sd	s2,16(sp)
+    80002eb2:	e44e                	sd	s3,8(sp)
+    80002eb4:	1800                	addi	s0,sp,48
   asm volatile("csrr %0, sepc" : "=r" (x) );
-    80003f2e:	14102973          	csrr	s2,sepc
+    80002eb6:	14102973          	csrr	s2,sepc
   asm volatile("csrr %0, sstatus" : "=r" (x) );
-    80003f32:	100024f3          	csrr	s1,sstatus
+    80002eba:	100024f3          	csrr	s1,sstatus
   asm volatile("csrr %0, scause" : "=r" (x) );
-    80003f36:	142029f3          	csrr	s3,scause
-  if((sstatus & SSTATUS_SPP) == 0){
-    80003f3a:	1004f793          	andi	a5,s1,256
-    80003f3e:	cb8d                	beqz	a5,80003f70 <kerneltrap+0x52>
+    80002ebe:	142029f3          	csrr	s3,scause
+  if((sstatus & SSTATUS_SPP) == 0)
+    80002ec2:	1004f793          	andi	a5,s1,256
+    80002ec6:	cb85                	beqz	a5,80002ef6 <kerneltrap+0x4e>
   asm volatile("csrr %0, sstatus" : "=r" (x) );
-    80003f40:	100027f3          	csrr	a5,sstatus
+    80002ec8:	100027f3          	csrr	a5,sstatus
   return (x & SSTATUS_SIE) != 0;
-    80003f44:	8b89                	andi	a5,a5,2
+    80002ecc:	8b89                	andi	a5,a5,2
   if(intr_get() != 0)
-    80003f46:	ef8d                	bnez	a5,80003f80 <kerneltrap+0x62>
+    80002ece:	ef85                	bnez	a5,80002f06 <kerneltrap+0x5e>
   if((which_dev = devintr()) == 0){
-    80003f48:	00000097          	auipc	ra,0x0
-    80003f4c:	e5e080e7          	jalr	-418(ra) # 80003da6 <devintr>
-    80003f50:	c121                	beqz	a0,80003f90 <kerneltrap+0x72>
-  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING){
-    80003f52:	4789                	li	a5,2
-    80003f54:	06f50b63          	beq	a0,a5,80003fca <kerneltrap+0xac>
+    80002ed0:	00000097          	auipc	ra,0x0
+    80002ed4:	e42080e7          	jalr	-446(ra) # 80002d12 <devintr>
+    80002ed8:	cd1d                	beqz	a0,80002f16 <kerneltrap+0x6e>
+  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING)
+    80002eda:	4789                	li	a5,2
+    80002edc:	06f50a63          	beq	a0,a5,80002f50 <kerneltrap+0xa8>
   asm volatile("csrw sepc, %0" : : "r" (x));
-    80003f58:	14191073          	csrw	sepc,s2
+    80002ee0:	14191073          	csrw	sepc,s2
   asm volatile("csrw sstatus, %0" : : "r" (x));
-    80003f5c:	10049073          	csrw	sstatus,s1
-}
-    80003f60:	70a2                	ld	ra,40(sp)
-    80003f62:	7402                	ld	s0,32(sp)
-    80003f64:	64e2                	ld	s1,24(sp)
-    80003f66:	6942                	ld	s2,16(sp)
-    80003f68:	69a2                	ld	s3,8(sp)
-    80003f6a:	6a02                	ld	s4,0(sp)
-    80003f6c:	6145                	addi	sp,sp,48
-    80003f6e:	8082                	ret
+    80002ee4:	10049073          	csrw	sstatus,s1
+}
+    80002ee8:	70a2                	ld	ra,40(sp)
+    80002eea:	7402                	ld	s0,32(sp)
+    80002eec:	64e2                	ld	s1,24(sp)
+    80002eee:	6942                	ld	s2,16(sp)
+    80002ef0:	69a2                	ld	s3,8(sp)
+    80002ef2:	6145                	addi	sp,sp,48
+    80002ef4:	8082                	ret
     panic("kerneltrap: not from supervisor mode");
-    80003f70:	00005517          	auipc	a0,0x5
-    80003f74:	7f850513          	addi	a0,a0,2040 # 80009768 <states.1850+0xc8>
-    80003f78:	ffffc097          	auipc	ra,0xffffc
-    80003f7c:	5c6080e7          	jalr	1478(ra) # 8000053e <panic>
+    80002ef6:	00005517          	auipc	a0,0x5
+    80002efa:	51a50513          	addi	a0,a0,1306 # 80008410 <states.1791+0xc8>
+    80002efe:	ffffd097          	auipc	ra,0xffffd
+    80002f02:	640080e7          	jalr	1600(ra) # 8000053e <panic>
     panic("kerneltrap: interrupts enabled");
-    80003f80:	00006517          	auipc	a0,0x6
-    80003f84:	81050513          	addi	a0,a0,-2032 # 80009790 <states.1850+0xf0>
-    80003f88:	ffffc097          	auipc	ra,0xffffc
-    80003f8c:	5b6080e7          	jalr	1462(ra) # 8000053e <panic>
+    80002f06:	00005517          	auipc	a0,0x5
+    80002f0a:	53250513          	addi	a0,a0,1330 # 80008438 <states.1791+0xf0>
+    80002f0e:	ffffd097          	auipc	ra,0xffffd
+    80002f12:	630080e7          	jalr	1584(ra) # 8000053e <panic>
     printf("scause %p\n", scause);
-    80003f90:	85ce                	mv	a1,s3
-    80003f92:	00006517          	auipc	a0,0x6
-    80003f96:	81e50513          	addi	a0,a0,-2018 # 800097b0 <states.1850+0x110>
-    80003f9a:	ffffc097          	auipc	ra,0xffffc
-    80003f9e:	5ee080e7          	jalr	1518(ra) # 80000588 <printf>
+    80002f16:	85ce                	mv	a1,s3
+    80002f18:	00005517          	auipc	a0,0x5
+    80002f1c:	54050513          	addi	a0,a0,1344 # 80008458 <states.1791+0x110>
+    80002f20:	ffffd097          	auipc	ra,0xffffd
+    80002f24:	668080e7          	jalr	1640(ra) # 80000588 <printf>
   asm volatile("csrr %0, sepc" : "=r" (x) );
-    80003fa2:	141025f3          	csrr	a1,sepc
+    80002f28:	141025f3          	csrr	a1,sepc
   asm volatile("csrr %0, stval" : "=r" (x) );
-    80003fa6:	14302673          	csrr	a2,stval
+    80002f2c:	14302673          	csrr	a2,stval
     printf("sepc=%p stval=%p\n", r_sepc(), r_stval());
-    80003faa:	00006517          	auipc	a0,0x6
-    80003fae:	81650513          	addi	a0,a0,-2026 # 800097c0 <states.1850+0x120>
-    80003fb2:	ffffc097          	auipc	ra,0xffffc
-    80003fb6:	5d6080e7          	jalr	1494(ra) # 80000588 <printf>
+    80002f30:	00005517          	auipc	a0,0x5
+    80002f34:	53850513          	addi	a0,a0,1336 # 80008468 <states.1791+0x120>
+    80002f38:	ffffd097          	auipc	ra,0xffffd
+    80002f3c:	650080e7          	jalr	1616(ra) # 80000588 <printf>
     panic("kerneltrap");
-    80003fba:	00006517          	auipc	a0,0x6
-    80003fbe:	81e50513          	addi	a0,a0,-2018 # 800097d8 <states.1850+0x138>
-    80003fc2:	ffffc097          	auipc	ra,0xffffc
-    80003fc6:	57c080e7          	jalr	1404(ra) # 8000053e <panic>
-  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING){
-    80003fca:	ffffe097          	auipc	ra,0xffffe
-    80003fce:	bca080e7          	jalr	-1078(ra) # 80001b94 <myproc>
-    80003fd2:	d159                	beqz	a0,80003f58 <kerneltrap+0x3a>
-    80003fd4:	ffffe097          	auipc	ra,0xffffe
-    80003fd8:	bc0080e7          	jalr	-1088(ra) # 80001b94 <myproc>
-    80003fdc:	4d18                	lw	a4,24(a0)
-    80003fde:	4791                	li	a5,4
-    80003fe0:	f6f71ce3          	bne	a4,a5,80003f58 <kerneltrap+0x3a>
-    myproc()->running_time += ticks - myproc()->start_running_time;
-    80003fe4:	00006a17          	auipc	s4,0x6
-    80003fe8:	070a2a03          	lw	s4,112(s4) # 8000a054 <ticks>
-    80003fec:	ffffe097          	auipc	ra,0xffffe
-    80003ff0:	ba8080e7          	jalr	-1112(ra) # 80001b94 <myproc>
-    80003ff4:	05052983          	lw	s3,80(a0)
-    80003ff8:	ffffe097          	auipc	ra,0xffffe
-    80003ffc:	b9c080e7          	jalr	-1124(ra) # 80001b94 <myproc>
-    80004000:	417c                	lw	a5,68(a0)
-    80004002:	014787bb          	addw	a5,a5,s4
-    80004006:	413787bb          	subw	a5,a5,s3
-    8000400a:	c17c                	sw	a5,68(a0)
+    80002f40:	00005517          	auipc	a0,0x5
+    80002f44:	54050513          	addi	a0,a0,1344 # 80008480 <states.1791+0x138>
+    80002f48:	ffffd097          	auipc	ra,0xffffd
+    80002f4c:	5f6080e7          	jalr	1526(ra) # 8000053e <panic>
+  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING)
+    80002f50:	fffff097          	auipc	ra,0xfffff
+    80002f54:	d80080e7          	jalr	-640(ra) # 80001cd0 <myproc>
+    80002f58:	d541                	beqz	a0,80002ee0 <kerneltrap+0x38>
+    80002f5a:	fffff097          	auipc	ra,0xfffff
+    80002f5e:	d76080e7          	jalr	-650(ra) # 80001cd0 <myproc>
+    80002f62:	4d18                	lw	a4,24(a0)
+    80002f64:	4791                	li	a5,4
+    80002f66:	f6f71de3          	bne	a4,a5,80002ee0 <kerneltrap+0x38>
     yield();
-    8000400c:	fffff097          	auipc	ra,0xfffff
-    80004010:	b42080e7          	jalr	-1214(ra) # 80002b4e <yield>
-    80004014:	b791                	j	80003f58 <kerneltrap+0x3a>
+    80002f6a:	fffff097          	auipc	ra,0xfffff
+    80002f6e:	57c080e7          	jalr	1404(ra) # 800024e6 <yield>
+    80002f72:	b7bd                	j	80002ee0 <kerneltrap+0x38>
 
-0000000080004016 <argraw>:
+0000000080002f74 <argraw>:
   return strlen(buf);
 }
 
 static uint64
 argraw(int n)
 {
-    80004016:	1101                	addi	sp,sp,-32
-    80004018:	ec06                	sd	ra,24(sp)
-    8000401a:	e822                	sd	s0,16(sp)
-    8000401c:	e426                	sd	s1,8(sp)
-    8000401e:	1000                	addi	s0,sp,32
-    80004020:	84aa                	mv	s1,a0
+    80002f74:	1101                	addi	sp,sp,-32
+    80002f76:	ec06                	sd	ra,24(sp)
+    80002f78:	e822                	sd	s0,16(sp)
+    80002f7a:	e426                	sd	s1,8(sp)
+    80002f7c:	1000                	addi	s0,sp,32
+    80002f7e:	84aa                	mv	s1,a0
   struct proc *p = myproc();
-    80004022:	ffffe097          	auipc	ra,0xffffe
-    80004026:	b72080e7          	jalr	-1166(ra) # 80001b94 <myproc>
+    80002f80:	fffff097          	auipc	ra,0xfffff
+    80002f84:	d50080e7          	jalr	-688(ra) # 80001cd0 <myproc>
   switch (n) {
-    8000402a:	4795                	li	a5,5
-    8000402c:	0497e163          	bltu	a5,s1,8000406e <argraw+0x58>
-    80004030:	048a                	slli	s1,s1,0x2
-    80004032:	00005717          	auipc	a4,0x5
-    80004036:	7de70713          	addi	a4,a4,2014 # 80009810 <states.1850+0x170>
-    8000403a:	94ba                	add	s1,s1,a4
-    8000403c:	409c                	lw	a5,0(s1)
-    8000403e:	97ba                	add	a5,a5,a4
-    80004040:	8782                	jr	a5
+    80002f88:	4795                	li	a5,5
+    80002f8a:	0497e163          	bltu	a5,s1,80002fcc <argraw+0x58>
+    80002f8e:	048a                	slli	s1,s1,0x2
+    80002f90:	00005717          	auipc	a4,0x5
+    80002f94:	52870713          	addi	a4,a4,1320 # 800084b8 <states.1791+0x170>
+    80002f98:	94ba                	add	s1,s1,a4
+    80002f9a:	409c                	lw	a5,0(s1)
+    80002f9c:	97ba                	add	a5,a5,a4
+    80002f9e:	8782                	jr	a5
   case 0:
     return p->trapframe->a0;
-    80004042:	655c                	ld	a5,136(a0)
-    80004044:	7ba8                	ld	a0,112(a5)
+    80002fa0:	6d3c                	ld	a5,88(a0)
+    80002fa2:	7ba8                	ld	a0,112(a5)
   case 5:
     return p->trapframe->a5;
   }
   panic("argraw");
   return -1;
 }
-    80004046:	60e2                	ld	ra,24(sp)
-    80004048:	6442                	ld	s0,16(sp)
-    8000404a:	64a2                	ld	s1,8(sp)
-    8000404c:	6105                	addi	sp,sp,32
-    8000404e:	8082                	ret
+    80002fa4:	60e2                	ld	ra,24(sp)
+    80002fa6:	6442                	ld	s0,16(sp)
+    80002fa8:	64a2                	ld	s1,8(sp)
+    80002faa:	6105                	addi	sp,sp,32
+    80002fac:	8082                	ret
     return p->trapframe->a1;
-    80004050:	655c                	ld	a5,136(a0)
-    80004052:	7fa8                	ld	a0,120(a5)
-    80004054:	bfcd                	j	80004046 <argraw+0x30>
+    80002fae:	6d3c                	ld	a5,88(a0)
+    80002fb0:	7fa8                	ld	a0,120(a5)
+    80002fb2:	bfcd                	j	80002fa4 <argraw+0x30>
     return p->trapframe->a2;
-    80004056:	655c                	ld	a5,136(a0)
-    80004058:	63c8                	ld	a0,128(a5)
-    8000405a:	b7f5                	j	80004046 <argraw+0x30>
+    80002fb4:	6d3c                	ld	a5,88(a0)
+    80002fb6:	63c8                	ld	a0,128(a5)
+    80002fb8:	b7f5                	j	80002fa4 <argraw+0x30>
     return p->trapframe->a3;
-    8000405c:	655c                	ld	a5,136(a0)
-    8000405e:	67c8                	ld	a0,136(a5)
-    80004060:	b7dd                	j	80004046 <argraw+0x30>
+    80002fba:	6d3c                	ld	a5,88(a0)
+    80002fbc:	67c8                	ld	a0,136(a5)
+    80002fbe:	b7dd                	j	80002fa4 <argraw+0x30>
     return p->trapframe->a4;
-    80004062:	655c                	ld	a5,136(a0)
-    80004064:	6bc8                	ld	a0,144(a5)
-    80004066:	b7c5                	j	80004046 <argraw+0x30>
+    80002fc0:	6d3c                	ld	a5,88(a0)
+    80002fc2:	6bc8                	ld	a0,144(a5)
+    80002fc4:	b7c5                	j	80002fa4 <argraw+0x30>
     return p->trapframe->a5;
-    80004068:	655c                	ld	a5,136(a0)
-    8000406a:	6fc8                	ld	a0,152(a5)
-    8000406c:	bfe9                	j	80004046 <argraw+0x30>
+    80002fc6:	6d3c                	ld	a5,88(a0)
+    80002fc8:	6fc8                	ld	a0,152(a5)
+    80002fca:	bfe9                	j	80002fa4 <argraw+0x30>
   panic("argraw");
-    8000406e:	00005517          	auipc	a0,0x5
-    80004072:	77a50513          	addi	a0,a0,1914 # 800097e8 <states.1850+0x148>
-    80004076:	ffffc097          	auipc	ra,0xffffc
-    8000407a:	4c8080e7          	jalr	1224(ra) # 8000053e <panic>
-
-000000008000407e <fetchaddr>:
-{
-    8000407e:	1101                	addi	sp,sp,-32
-    80004080:	ec06                	sd	ra,24(sp)
-    80004082:	e822                	sd	s0,16(sp)
-    80004084:	e426                	sd	s1,8(sp)
-    80004086:	e04a                	sd	s2,0(sp)
-    80004088:	1000                	addi	s0,sp,32
-    8000408a:	84aa                	mv	s1,a0
-    8000408c:	892e                	mv	s2,a1
+    80002fcc:	00005517          	auipc	a0,0x5
+    80002fd0:	4c450513          	addi	a0,a0,1220 # 80008490 <states.1791+0x148>
+    80002fd4:	ffffd097          	auipc	ra,0xffffd
+    80002fd8:	56a080e7          	jalr	1386(ra) # 8000053e <panic>
+
+0000000080002fdc <fetchaddr>:
+{
+    80002fdc:	1101                	addi	sp,sp,-32
+    80002fde:	ec06                	sd	ra,24(sp)
+    80002fe0:	e822                	sd	s0,16(sp)
+    80002fe2:	e426                	sd	s1,8(sp)
+    80002fe4:	e04a                	sd	s2,0(sp)
+    80002fe6:	1000                	addi	s0,sp,32
+    80002fe8:	84aa                	mv	s1,a0
+    80002fea:	892e                	mv	s2,a1
   struct proc *p = myproc();
-    8000408e:	ffffe097          	auipc	ra,0xffffe
-    80004092:	b06080e7          	jalr	-1274(ra) # 80001b94 <myproc>
+    80002fec:	fffff097          	auipc	ra,0xfffff
+    80002ff0:	ce4080e7          	jalr	-796(ra) # 80001cd0 <myproc>
   if(addr >= p->sz || addr+sizeof(uint64) > p->sz)
-    80004096:	7d3c                	ld	a5,120(a0)
-    80004098:	02f4f863          	bgeu	s1,a5,800040c8 <fetchaddr+0x4a>
-    8000409c:	00848713          	addi	a4,s1,8
-    800040a0:	02e7e663          	bltu	a5,a4,800040cc <fetchaddr+0x4e>
+    80002ff4:	653c                	ld	a5,72(a0)
+    80002ff6:	02f4f863          	bgeu	s1,a5,80003026 <fetchaddr+0x4a>
+    80002ffa:	00848713          	addi	a4,s1,8
+    80002ffe:	02e7e663          	bltu	a5,a4,8000302a <fetchaddr+0x4e>
   if(copyin(p->pagetable, (char *)ip, addr, sizeof(*ip)) != 0)
-    800040a4:	46a1                	li	a3,8
-    800040a6:	8626                	mv	a2,s1
-    800040a8:	85ca                	mv	a1,s2
-    800040aa:	6148                	ld	a0,128(a0)
-    800040ac:	ffffd097          	auipc	ra,0xffffd
-    800040b0:	65a080e7          	jalr	1626(ra) # 80001706 <copyin>
-    800040b4:	00a03533          	snez	a0,a0
-    800040b8:	40a00533          	neg	a0,a0
-}
-    800040bc:	60e2                	ld	ra,24(sp)
-    800040be:	6442                	ld	s0,16(sp)
-    800040c0:	64a2                	ld	s1,8(sp)
-    800040c2:	6902                	ld	s2,0(sp)
-    800040c4:	6105                	addi	sp,sp,32
-    800040c6:	8082                	ret
+    80003002:	46a1                	li	a3,8
+    80003004:	8626                	mv	a2,s1
+    80003006:	85ca                	mv	a1,s2
+    80003008:	6928                	ld	a0,80(a0)
+    8000300a:	ffffe097          	auipc	ra,0xffffe
+    8000300e:	6f4080e7          	jalr	1780(ra) # 800016fe <copyin>
+    80003012:	00a03533          	snez	a0,a0
+    80003016:	40a00533          	neg	a0,a0
+}
+    8000301a:	60e2                	ld	ra,24(sp)
+    8000301c:	6442                	ld	s0,16(sp)
+    8000301e:	64a2                	ld	s1,8(sp)
+    80003020:	6902                	ld	s2,0(sp)
+    80003022:	6105                	addi	sp,sp,32
+    80003024:	8082                	ret
     return -1;
-    800040c8:	557d                	li	a0,-1
-    800040ca:	bfcd                	j	800040bc <fetchaddr+0x3e>
-    800040cc:	557d                	li	a0,-1
-    800040ce:	b7fd                	j	800040bc <fetchaddr+0x3e>
-
-00000000800040d0 <fetchstr>:
-{
-    800040d0:	7179                	addi	sp,sp,-48
-    800040d2:	f406                	sd	ra,40(sp)
-    800040d4:	f022                	sd	s0,32(sp)
-    800040d6:	ec26                	sd	s1,24(sp)
-    800040d8:	e84a                	sd	s2,16(sp)
-    800040da:	e44e                	sd	s3,8(sp)
-    800040dc:	1800                	addi	s0,sp,48
-    800040de:	892a                	mv	s2,a0
-    800040e0:	84ae                	mv	s1,a1
-    800040e2:	89b2                	mv	s3,a2
+    80003026:	557d                	li	a0,-1
+    80003028:	bfcd                	j	8000301a <fetchaddr+0x3e>
+    8000302a:	557d                	li	a0,-1
+    8000302c:	b7fd                	j	8000301a <fetchaddr+0x3e>
+
+000000008000302e <fetchstr>:
+{
+    8000302e:	7179                	addi	sp,sp,-48
+    80003030:	f406                	sd	ra,40(sp)
+    80003032:	f022                	sd	s0,32(sp)
+    80003034:	ec26                	sd	s1,24(sp)
+    80003036:	e84a                	sd	s2,16(sp)
+    80003038:	e44e                	sd	s3,8(sp)
+    8000303a:	1800                	addi	s0,sp,48
+    8000303c:	892a                	mv	s2,a0
+    8000303e:	84ae                	mv	s1,a1
+    80003040:	89b2                	mv	s3,a2
   struct proc *p = myproc();
-    800040e4:	ffffe097          	auipc	ra,0xffffe
-    800040e8:	ab0080e7          	jalr	-1360(ra) # 80001b94 <myproc>
+    80003042:	fffff097          	auipc	ra,0xfffff
+    80003046:	c8e080e7          	jalr	-882(ra) # 80001cd0 <myproc>
   int err = copyinstr(p->pagetable, buf, addr, max);
-    800040ec:	86ce                	mv	a3,s3
-    800040ee:	864a                	mv	a2,s2
-    800040f0:	85a6                	mv	a1,s1
-    800040f2:	6148                	ld	a0,128(a0)
-    800040f4:	ffffd097          	auipc	ra,0xffffd
-    800040f8:	69e080e7          	jalr	1694(ra) # 80001792 <copyinstr>
+    8000304a:	86ce                	mv	a3,s3
+    8000304c:	864a                	mv	a2,s2
+    8000304e:	85a6                	mv	a1,s1
+    80003050:	6928                	ld	a0,80(a0)
+    80003052:	ffffe097          	auipc	ra,0xffffe
+    80003056:	738080e7          	jalr	1848(ra) # 8000178a <copyinstr>
   if(err < 0)
-    800040fc:	00054763          	bltz	a0,8000410a <fetchstr+0x3a>
+    8000305a:	00054763          	bltz	a0,80003068 <fetchstr+0x3a>
   return strlen(buf);
-    80004100:	8526                	mv	a0,s1
-    80004102:	ffffd097          	auipc	ra,0xffffd
-    80004106:	d62080e7          	jalr	-670(ra) # 80000e64 <strlen>
+    8000305e:	8526                	mv	a0,s1
+    80003060:	ffffe097          	auipc	ra,0xffffe
+    80003064:	e04080e7          	jalr	-508(ra) # 80000e64 <strlen>
 }
-    8000410a:	70a2                	ld	ra,40(sp)
-    8000410c:	7402                	ld	s0,32(sp)
-    8000410e:	64e2                	ld	s1,24(sp)
-    80004110:	6942                	ld	s2,16(sp)
-    80004112:	69a2                	ld	s3,8(sp)
-    80004114:	6145                	addi	sp,sp,48
-    80004116:	8082                	ret
+    80003068:	70a2                	ld	ra,40(sp)
+    8000306a:	7402                	ld	s0,32(sp)
+    8000306c:	64e2                	ld	s1,24(sp)
+    8000306e:	6942                	ld	s2,16(sp)
+    80003070:	69a2                	ld	s3,8(sp)
+    80003072:	6145                	addi	sp,sp,48
+    80003074:	8082                	ret
 
-0000000080004118 <argint>:
+0000000080003076 <argint>:
 
 // Fetch the nth 32-bit system call argument.
 int
 argint(int n, int *ip)
 {
-    80004118:	1101                	addi	sp,sp,-32
-    8000411a:	ec06                	sd	ra,24(sp)
-    8000411c:	e822                	sd	s0,16(sp)
-    8000411e:	e426                	sd	s1,8(sp)
-    80004120:	1000                	addi	s0,sp,32
-    80004122:	84ae                	mv	s1,a1
+    80003076:	1101                	addi	sp,sp,-32
+    80003078:	ec06                	sd	ra,24(sp)
+    8000307a:	e822                	sd	s0,16(sp)
+    8000307c:	e426                	sd	s1,8(sp)
+    8000307e:	1000                	addi	s0,sp,32
+    80003080:	84ae                	mv	s1,a1
   *ip = argraw(n);
-    80004124:	00000097          	auipc	ra,0x0
-    80004128:	ef2080e7          	jalr	-270(ra) # 80004016 <argraw>
-    8000412c:	c088                	sw	a0,0(s1)
+    80003082:	00000097          	auipc	ra,0x0
+    80003086:	ef2080e7          	jalr	-270(ra) # 80002f74 <argraw>
+    8000308a:	c088                	sw	a0,0(s1)
   return 0;
 }
-    8000412e:	4501                	li	a0,0
-    80004130:	60e2                	ld	ra,24(sp)
-    80004132:	6442                	ld	s0,16(sp)
-    80004134:	64a2                	ld	s1,8(sp)
-    80004136:	6105                	addi	sp,sp,32
-    80004138:	8082                	ret
+    8000308c:	4501                	li	a0,0
+    8000308e:	60e2                	ld	ra,24(sp)
+    80003090:	6442                	ld	s0,16(sp)
+    80003092:	64a2                	ld	s1,8(sp)
+    80003094:	6105                	addi	sp,sp,32
+    80003096:	8082                	ret
 
-000000008000413a <argaddr>:
+0000000080003098 <argaddr>:
 // Retrieve an argument as a pointer.
 // Doesn't check for legality, since
 // copyin/copyout will do that.
 int
 argaddr(int n, uint64 *ip)
 {
-    8000413a:	1101                	addi	sp,sp,-32
-    8000413c:	ec06                	sd	ra,24(sp)
-    8000413e:	e822                	sd	s0,16(sp)
-    80004140:	e426                	sd	s1,8(sp)
-    80004142:	1000                	addi	s0,sp,32
-    80004144:	84ae                	mv	s1,a1
+    80003098:	1101                	addi	sp,sp,-32
+    8000309a:	ec06                	sd	ra,24(sp)
+    8000309c:	e822                	sd	s0,16(sp)
+    8000309e:	e426                	sd	s1,8(sp)
+    800030a0:	1000                	addi	s0,sp,32
+    800030a2:	84ae                	mv	s1,a1
   *ip = argraw(n);
-    80004146:	00000097          	auipc	ra,0x0
-    8000414a:	ed0080e7          	jalr	-304(ra) # 80004016 <argraw>
-    8000414e:	e088                	sd	a0,0(s1)
+    800030a4:	00000097          	auipc	ra,0x0
+    800030a8:	ed0080e7          	jalr	-304(ra) # 80002f74 <argraw>
+    800030ac:	e088                	sd	a0,0(s1)
   return 0;
 }
-    80004150:	4501                	li	a0,0
-    80004152:	60e2                	ld	ra,24(sp)
-    80004154:	6442                	ld	s0,16(sp)
-    80004156:	64a2                	ld	s1,8(sp)
-    80004158:	6105                	addi	sp,sp,32
-    8000415a:	8082                	ret
+    800030ae:	4501                	li	a0,0
+    800030b0:	60e2                	ld	ra,24(sp)
+    800030b2:	6442                	ld	s0,16(sp)
+    800030b4:	64a2                	ld	s1,8(sp)
+    800030b6:	6105                	addi	sp,sp,32
+    800030b8:	8082                	ret
 
-000000008000415c <argstr>:
+00000000800030ba <argstr>:
 // Fetch the nth word-sized system call argument as a null-terminated string.
 // Copies into buf, at most max.
 // Returns string length if OK (including nul), -1 if error.
 int
 argstr(int n, char *buf, int max)
 {
-    8000415c:	1101                	addi	sp,sp,-32
-    8000415e:	ec06                	sd	ra,24(sp)
-    80004160:	e822                	sd	s0,16(sp)
-    80004162:	e426                	sd	s1,8(sp)
-    80004164:	e04a                	sd	s2,0(sp)
-    80004166:	1000                	addi	s0,sp,32
-    80004168:	84ae                	mv	s1,a1
-    8000416a:	8932                	mv	s2,a2
+    800030ba:	1101                	addi	sp,sp,-32
+    800030bc:	ec06                	sd	ra,24(sp)
+    800030be:	e822                	sd	s0,16(sp)
+    800030c0:	e426                	sd	s1,8(sp)
+    800030c2:	e04a                	sd	s2,0(sp)
+    800030c4:	1000                	addi	s0,sp,32
+    800030c6:	84ae                	mv	s1,a1
+    800030c8:	8932                	mv	s2,a2
   *ip = argraw(n);
-    8000416c:	00000097          	auipc	ra,0x0
-    80004170:	eaa080e7          	jalr	-342(ra) # 80004016 <argraw>
+    800030ca:	00000097          	auipc	ra,0x0
+    800030ce:	eaa080e7          	jalr	-342(ra) # 80002f74 <argraw>
   uint64 addr;
   if(argaddr(n, &addr) < 0)
     return -1;
   return fetchstr(addr, buf, max);
-    80004174:	864a                	mv	a2,s2
-    80004176:	85a6                	mv	a1,s1
-    80004178:	00000097          	auipc	ra,0x0
-    8000417c:	f58080e7          	jalr	-168(ra) # 800040d0 <fetchstr>
-}
-    80004180:	60e2                	ld	ra,24(sp)
-    80004182:	6442                	ld	s0,16(sp)
-    80004184:	64a2                	ld	s1,8(sp)
-    80004186:	6902                	ld	s2,0(sp)
-    80004188:	6105                	addi	sp,sp,32
-    8000418a:	8082                	ret
-
-000000008000418c <syscall>:
-[SYS_set_cpu]       sys_set_cpu,
+    800030d2:	864a                	mv	a2,s2
+    800030d4:	85a6                	mv	a1,s1
+    800030d6:	00000097          	auipc	ra,0x0
+    800030da:	f58080e7          	jalr	-168(ra) # 8000302e <fetchstr>
+}
+    800030de:	60e2                	ld	ra,24(sp)
+    800030e0:	6442                	ld	s0,16(sp)
+    800030e2:	64a2                	ld	s1,8(sp)
+    800030e4:	6902                	ld	s2,0(sp)
+    800030e6:	6105                	addi	sp,sp,32
+    800030e8:	8082                	ret
+
+00000000800030ea <syscall>:
+// [SYS_cpu_process_count] sys_cpu_process_count,
 };
 
 void
 syscall(void)
 {
-    8000418c:	1101                	addi	sp,sp,-32
-    8000418e:	ec06                	sd	ra,24(sp)
-    80004190:	e822                	sd	s0,16(sp)
-    80004192:	e426                	sd	s1,8(sp)
-    80004194:	e04a                	sd	s2,0(sp)
-    80004196:	1000                	addi	s0,sp,32
+    800030ea:	1101                	addi	sp,sp,-32
+    800030ec:	ec06                	sd	ra,24(sp)
+    800030ee:	e822                	sd	s0,16(sp)
+    800030f0:	e426                	sd	s1,8(sp)
+    800030f2:	e04a                	sd	s2,0(sp)
+    800030f4:	1000                	addi	s0,sp,32
   int num;
   struct proc *p = myproc();
-    80004198:	ffffe097          	auipc	ra,0xffffe
-    8000419c:	9fc080e7          	jalr	-1540(ra) # 80001b94 <myproc>
-    800041a0:	84aa                	mv	s1,a0
+    800030f6:	fffff097          	auipc	ra,0xfffff
+    800030fa:	bda080e7          	jalr	-1062(ra) # 80001cd0 <myproc>
+    800030fe:	84aa                	mv	s1,a0
 
   num = p->trapframe->a7;
-    800041a2:	08853903          	ld	s2,136(a0)
-    800041a6:	0a893783          	ld	a5,168(s2)
-    800041aa:	0007869b          	sext.w	a3,a5
+    80003100:	05853903          	ld	s2,88(a0)
+    80003104:	0a893783          	ld	a5,168(s2)
+    80003108:	0007869b          	sext.w	a3,a5
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
-    800041ae:	37fd                	addiw	a5,a5,-1
-    800041b0:	4765                	li	a4,25
-    800041b2:	00f76f63          	bltu	a4,a5,800041d0 <syscall+0x44>
-    800041b6:	00369713          	slli	a4,a3,0x3
-    800041ba:	00005797          	auipc	a5,0x5
-    800041be:	66e78793          	addi	a5,a5,1646 # 80009828 <syscalls>
-    800041c2:	97ba                	add	a5,a5,a4
-    800041c4:	639c                	ld	a5,0(a5)
-    800041c6:	c789                	beqz	a5,800041d0 <syscall+0x44>
+    8000310c:	37fd                	addiw	a5,a5,-1
+    8000310e:	4759                	li	a4,22
+    80003110:	00f76f63          	bltu	a4,a5,8000312e <syscall+0x44>
+    80003114:	00369713          	slli	a4,a3,0x3
+    80003118:	00005797          	auipc	a5,0x5
+    8000311c:	3b878793          	addi	a5,a5,952 # 800084d0 <syscalls>
+    80003120:	97ba                	add	a5,a5,a4
+    80003122:	639c                	ld	a5,0(a5)
+    80003124:	c789                	beqz	a5,8000312e <syscall+0x44>
     p->trapframe->a0 = syscalls[num]();
-    800041c8:	9782                	jalr	a5
-    800041ca:	06a93823          	sd	a0,112(s2)
-    800041ce:	a839                	j	800041ec <syscall+0x60>
+    80003126:	9782                	jalr	a5
+    80003128:	06a93823          	sd	a0,112(s2)
+    8000312c:	a839                	j	8000314a <syscall+0x60>
   } else {
     printf("%d %s: unknown sys call %d\n",
-    800041d0:	18848613          	addi	a2,s1,392
-    800041d4:	588c                	lw	a1,48(s1)
-    800041d6:	00005517          	auipc	a0,0x5
-    800041da:	61a50513          	addi	a0,a0,1562 # 800097f0 <states.1850+0x150>
-    800041de:	ffffc097          	auipc	ra,0xffffc
-    800041e2:	3aa080e7          	jalr	938(ra) # 80000588 <printf>
+    8000312e:	15848613          	addi	a2,s1,344
+    80003132:	588c                	lw	a1,48(s1)
+    80003134:	00005517          	auipc	a0,0x5
+    80003138:	36450513          	addi	a0,a0,868 # 80008498 <states.1791+0x150>
+    8000313c:	ffffd097          	auipc	ra,0xffffd
+    80003140:	44c080e7          	jalr	1100(ra) # 80000588 <printf>
             p->pid, p->name, num);
     p->trapframe->a0 = -1;
-    800041e6:	64dc                	ld	a5,136(s1)
-    800041e8:	577d                	li	a4,-1
-    800041ea:	fbb8                	sd	a4,112(a5)
+    80003144:	6cbc                	ld	a5,88(s1)
+    80003146:	577d                	li	a4,-1
+    80003148:	fbb8                	sd	a4,112(a5)
   }
 }
-    800041ec:	60e2                	ld	ra,24(sp)
-    800041ee:	6442                	ld	s0,16(sp)
-    800041f0:	64a2                	ld	s1,8(sp)
-    800041f2:	6902                	ld	s2,0(sp)
-    800041f4:	6105                	addi	sp,sp,32
-    800041f6:	8082                	ret
+    8000314a:	60e2                	ld	ra,24(sp)
+    8000314c:	6442                	ld	s0,16(sp)
+    8000314e:	64a2                	ld	s1,8(sp)
+    80003150:	6902                	ld	s2,0(sp)
+    80003152:	6105                	addi	sp,sp,32
+    80003154:	8082                	ret
 
-00000000800041f8 <sys_exit>:
+0000000080003156 <sys_exit>:
 #include "spinlock.h"
 #include "proc.h"
 
 uint64
 sys_exit(void)
 {
-    800041f8:	1101                	addi	sp,sp,-32
-    800041fa:	ec06                	sd	ra,24(sp)
-    800041fc:	e822                	sd	s0,16(sp)
-    800041fe:	1000                	addi	s0,sp,32
+    80003156:	1101                	addi	sp,sp,-32
+    80003158:	ec06                	sd	ra,24(sp)
+    8000315a:	e822                	sd	s0,16(sp)
+    8000315c:	1000                	addi	s0,sp,32
   int n;
   if(argint(0, &n) < 0)
-    80004200:	fec40593          	addi	a1,s0,-20
-    80004204:	4501                	li	a0,0
-    80004206:	00000097          	auipc	ra,0x0
-    8000420a:	f12080e7          	jalr	-238(ra) # 80004118 <argint>
+    8000315e:	fec40593          	addi	a1,s0,-20
+    80003162:	4501                	li	a0,0
+    80003164:	00000097          	auipc	ra,0x0
+    80003168:	f12080e7          	jalr	-238(ra) # 80003076 <argint>
     return -1;
-    8000420e:	57fd                	li	a5,-1
+    8000316c:	57fd                	li	a5,-1
   if(argint(0, &n) < 0)
-    80004210:	00054963          	bltz	a0,80004222 <sys_exit+0x2a>
+    8000316e:	00054963          	bltz	a0,80003180 <sys_exit+0x2a>
   exit(n);
-    80004214:	fec42503          	lw	a0,-20(s0)
-    80004218:	fffff097          	auipc	ra,0xfffff
-    8000421c:	0cc080e7          	jalr	204(ra) # 800032e4 <exit>
+    80003172:	fec42503          	lw	a0,-20(s0)
+    80003176:	fffff097          	auipc	ra,0xfffff
+    8000317a:	6e8080e7          	jalr	1768(ra) # 8000285e <exit>
   return 0;  // not reached
-    80004220:	4781                	li	a5,0
+    8000317e:	4781                	li	a5,0
 }
-    80004222:	853e                	mv	a0,a5
-    80004224:	60e2                	ld	ra,24(sp)
-    80004226:	6442                	ld	s0,16(sp)
-    80004228:	6105                	addi	sp,sp,32
-    8000422a:	8082                	ret
+    80003180:	853e                	mv	a0,a5
+    80003182:	60e2                	ld	ra,24(sp)
+    80003184:	6442                	ld	s0,16(sp)
+    80003186:	6105                	addi	sp,sp,32
+    80003188:	8082                	ret
 
-000000008000422c <sys_getpid>:
+000000008000318a <sys_getpid>:
 
 uint64
 sys_getpid(void)
 {
-    8000422c:	1141                	addi	sp,sp,-16
-    8000422e:	e406                	sd	ra,8(sp)
-    80004230:	e022                	sd	s0,0(sp)
-    80004232:	0800                	addi	s0,sp,16
+    8000318a:	1141                	addi	sp,sp,-16
+    8000318c:	e406                	sd	ra,8(sp)
+    8000318e:	e022                	sd	s0,0(sp)
+    80003190:	0800                	addi	s0,sp,16
   return myproc()->pid;
-    80004234:	ffffe097          	auipc	ra,0xffffe
-    80004238:	960080e7          	jalr	-1696(ra) # 80001b94 <myproc>
+    80003192:	fffff097          	auipc	ra,0xfffff
+    80003196:	b3e080e7          	jalr	-1218(ra) # 80001cd0 <myproc>
 }
-    8000423c:	5908                	lw	a0,48(a0)
-    8000423e:	60a2                	ld	ra,8(sp)
-    80004240:	6402                	ld	s0,0(sp)
-    80004242:	0141                	addi	sp,sp,16
-    80004244:	8082                	ret
+    8000319a:	5908                	lw	a0,48(a0)
+    8000319c:	60a2                	ld	ra,8(sp)
+    8000319e:	6402                	ld	s0,0(sp)
+    800031a0:	0141                	addi	sp,sp,16
+    800031a2:	8082                	ret
 
-0000000080004246 <sys_fork>:
+00000000800031a4 <sys_fork>:
 
 uint64
 sys_fork(void)
 {
-    80004246:	1141                	addi	sp,sp,-16
-    80004248:	e406                	sd	ra,8(sp)
-    8000424a:	e022                	sd	s0,0(sp)
-    8000424c:	0800                	addi	s0,sp,16
+    800031a4:	1141                	addi	sp,sp,-16
+    800031a6:	e406                	sd	ra,8(sp)
+    800031a8:	e022                	sd	s0,0(sp)
+    800031aa:	0800                	addi	s0,sp,16
   return fork();
-    8000424e:	ffffe097          	auipc	ra,0xffffe
-    80004252:	108080e7          	jalr	264(ra) # 80002356 <fork>
+    800031ac:	fffff097          	auipc	ra,0xfffff
+    800031b0:	ff4080e7          	jalr	-12(ra) # 800021a0 <fork>
 }
-    80004256:	60a2                	ld	ra,8(sp)
-    80004258:	6402                	ld	s0,0(sp)
-    8000425a:	0141                	addi	sp,sp,16
-    8000425c:	8082                	ret
+    800031b4:	60a2                	ld	ra,8(sp)
+    800031b6:	6402                	ld	s0,0(sp)
+    800031b8:	0141                	addi	sp,sp,16
+    800031ba:	8082                	ret
 
-000000008000425e <sys_wait>:
+00000000800031bc <sys_wait>:
 
 uint64
 sys_wait(void)
 {
-    8000425e:	1101                	addi	sp,sp,-32
-    80004260:	ec06                	sd	ra,24(sp)
-    80004262:	e822                	sd	s0,16(sp)
-    80004264:	1000                	addi	s0,sp,32
+    800031bc:	1101                	addi	sp,sp,-32
+    800031be:	ec06                	sd	ra,24(sp)
+    800031c0:	e822                	sd	s0,16(sp)
+    800031c2:	1000                	addi	s0,sp,32
   uint64 p;
   if(argaddr(0, &p) < 0)
-    80004266:	fe840593          	addi	a1,s0,-24
-    8000426a:	4501                	li	a0,0
-    8000426c:	00000097          	auipc	ra,0x0
-    80004270:	ece080e7          	jalr	-306(ra) # 8000413a <argaddr>
-    80004274:	87aa                	mv	a5,a0
+    800031c4:	fe840593          	addi	a1,s0,-24
+    800031c8:	4501                	li	a0,0
+    800031ca:	00000097          	auipc	ra,0x0
+    800031ce:	ece080e7          	jalr	-306(ra) # 80003098 <argaddr>
+    800031d2:	87aa                	mv	a5,a0
     return -1;
-    80004276:	557d                	li	a0,-1
+    800031d4:	557d                	li	a0,-1
   if(argaddr(0, &p) < 0)
-    80004278:	0007c863          	bltz	a5,80004288 <sys_wait+0x2a>
+    800031d6:	0007c863          	bltz	a5,800031e6 <sys_wait+0x2a>
   return wait(p);
-    8000427c:	fe843503          	ld	a0,-24(s0)
-    80004280:	fffff097          	auipc	ra,0xfffff
-    80004284:	c8a080e7          	jalr	-886(ra) # 80002f0a <wait>
+    800031da:	fe843503          	ld	a0,-24(s0)
+    800031de:	fffff097          	auipc	ra,0xfffff
+    800031e2:	3da080e7          	jalr	986(ra) # 800025b8 <wait>
 }
-    80004288:	60e2                	ld	ra,24(sp)
-    8000428a:	6442                	ld	s0,16(sp)
-    8000428c:	6105                	addi	sp,sp,32
-    8000428e:	8082                	ret
+    800031e6:	60e2                	ld	ra,24(sp)
+    800031e8:	6442                	ld	s0,16(sp)
+    800031ea:	6105                	addi	sp,sp,32
+    800031ec:	8082                	ret
 
-0000000080004290 <sys_sbrk>:
+00000000800031ee <sys_sbrk>:
 
 uint64
 sys_sbrk(void)
 {
-    80004290:	7179                	addi	sp,sp,-48
-    80004292:	f406                	sd	ra,40(sp)
-    80004294:	f022                	sd	s0,32(sp)
-    80004296:	ec26                	sd	s1,24(sp)
-    80004298:	1800                	addi	s0,sp,48
+    800031ee:	7179                	addi	sp,sp,-48
+    800031f0:	f406                	sd	ra,40(sp)
+    800031f2:	f022                	sd	s0,32(sp)
+    800031f4:	ec26                	sd	s1,24(sp)
+    800031f6:	1800                	addi	s0,sp,48
   int addr;
   int n;
 
   if(argint(0, &n) < 0)
-    8000429a:	fdc40593          	addi	a1,s0,-36
-    8000429e:	4501                	li	a0,0
-    800042a0:	00000097          	auipc	ra,0x0
-    800042a4:	e78080e7          	jalr	-392(ra) # 80004118 <argint>
-    800042a8:	87aa                	mv	a5,a0
+    800031f8:	fdc40593          	addi	a1,s0,-36
+    800031fc:	4501                	li	a0,0
+    800031fe:	00000097          	auipc	ra,0x0
+    80003202:	e78080e7          	jalr	-392(ra) # 80003076 <argint>
+    80003206:	87aa                	mv	a5,a0
     return -1;
-    800042aa:	557d                	li	a0,-1
+    80003208:	557d                	li	a0,-1
   if(argint(0, &n) < 0)
-    800042ac:	0207c063          	bltz	a5,800042cc <sys_sbrk+0x3c>
+    8000320a:	0207c063          	bltz	a5,8000322a <sys_sbrk+0x3c>
   addr = myproc()->sz;
-    800042b0:	ffffe097          	auipc	ra,0xffffe
-    800042b4:	8e4080e7          	jalr	-1820(ra) # 80001b94 <myproc>
-    800042b8:	5d24                	lw	s1,120(a0)
+    8000320e:	fffff097          	auipc	ra,0xfffff
+    80003212:	ac2080e7          	jalr	-1342(ra) # 80001cd0 <myproc>
+    80003216:	4524                	lw	s1,72(a0)
   if(growproc(n) < 0)
-    800042ba:	fdc42503          	lw	a0,-36(s0)
-    800042be:	ffffe097          	auipc	ra,0xffffe
-    800042c2:	024080e7          	jalr	36(ra) # 800022e2 <growproc>
-    800042c6:	00054863          	bltz	a0,800042d6 <sys_sbrk+0x46>
+    80003218:	fdc42503          	lw	a0,-36(s0)
+    8000321c:	fffff097          	auipc	ra,0xfffff
+    80003220:	ece080e7          	jalr	-306(ra) # 800020ea <growproc>
+    80003224:	00054863          	bltz	a0,80003234 <sys_sbrk+0x46>
     return -1;
   return addr;
-    800042ca:	8526                	mv	a0,s1
+    80003228:	8526                	mv	a0,s1
 }
-    800042cc:	70a2                	ld	ra,40(sp)
-    800042ce:	7402                	ld	s0,32(sp)
-    800042d0:	64e2                	ld	s1,24(sp)
-    800042d2:	6145                	addi	sp,sp,48
-    800042d4:	8082                	ret
+    8000322a:	70a2                	ld	ra,40(sp)
+    8000322c:	7402                	ld	s0,32(sp)
+    8000322e:	64e2                	ld	s1,24(sp)
+    80003230:	6145                	addi	sp,sp,48
+    80003232:	8082                	ret
     return -1;
-    800042d6:	557d                	li	a0,-1
-    800042d8:	bfd5                	j	800042cc <sys_sbrk+0x3c>
+    80003234:	557d                	li	a0,-1
+    80003236:	bfd5                	j	8000322a <sys_sbrk+0x3c>
 
-00000000800042da <sys_sleep>:
+0000000080003238 <sys_sleep>:
 
 uint64
 sys_sleep(void)
 {
-    800042da:	7139                	addi	sp,sp,-64
-    800042dc:	fc06                	sd	ra,56(sp)
-    800042de:	f822                	sd	s0,48(sp)
-    800042e0:	f426                	sd	s1,40(sp)
-    800042e2:	f04a                	sd	s2,32(sp)
-    800042e4:	ec4e                	sd	s3,24(sp)
-    800042e6:	0080                	addi	s0,sp,64
+    80003238:	7139                	addi	sp,sp,-64
+    8000323a:	fc06                	sd	ra,56(sp)
+    8000323c:	f822                	sd	s0,48(sp)
+    8000323e:	f426                	sd	s1,40(sp)
+    80003240:	f04a                	sd	s2,32(sp)
+    80003242:	ec4e                	sd	s3,24(sp)
+    80003244:	0080                	addi	s0,sp,64
   int n;
   uint ticks0;
 
   if(argint(0, &n) < 0)
-    800042e8:	fcc40593          	addi	a1,s0,-52
-    800042ec:	4501                	li	a0,0
-    800042ee:	00000097          	auipc	ra,0x0
-    800042f2:	e2a080e7          	jalr	-470(ra) # 80004118 <argint>
+    80003246:	fcc40593          	addi	a1,s0,-52
+    8000324a:	4501                	li	a0,0
+    8000324c:	00000097          	auipc	ra,0x0
+    80003250:	e2a080e7          	jalr	-470(ra) # 80003076 <argint>
     return -1;
-    800042f6:	57fd                	li	a5,-1
+    80003254:	57fd                	li	a5,-1
   if(argint(0, &n) < 0)
-    800042f8:	06054563          	bltz	a0,80004362 <sys_sleep+0x88>
+    80003256:	06054563          	bltz	a0,800032c0 <sys_sleep+0x88>
   acquire(&tickslock);
-    800042fc:	00015517          	auipc	a0,0x15
-    80004300:	a7450513          	addi	a0,a0,-1420 # 80018d70 <tickslock>
-    80004304:	ffffd097          	auipc	ra,0xffffd
-    80004308:	8e0080e7          	jalr	-1824(ra) # 80000be4 <acquire>
+    8000325a:	00015517          	auipc	a0,0x15
+    8000325e:	9b650513          	addi	a0,a0,-1610 # 80017c10 <tickslock>
+    80003262:	ffffe097          	auipc	ra,0xffffe
+    80003266:	982080e7          	jalr	-1662(ra) # 80000be4 <acquire>
   ticks0 = ticks;
-    8000430c:	00006917          	auipc	s2,0x6
-    80004310:	d4892903          	lw	s2,-696(s2) # 8000a054 <ticks>
-  
+    8000326a:	00006917          	auipc	s2,0x6
+    8000326e:	dce92903          	lw	s2,-562(s2) # 80009038 <ticks>
   while(ticks - ticks0 < n){
-    80004314:	fcc42783          	lw	a5,-52(s0)
-    80004318:	cf85                	beqz	a5,80004350 <sys_sleep+0x76>
+    80003272:	fcc42783          	lw	a5,-52(s0)
+    80003276:	cf85                	beqz	a5,800032ae <sys_sleep+0x76>
     if(myproc()->killed){
       release(&tickslock);
       return -1;
     }
     sleep(&ticks, &tickslock);
-    8000431a:	00015997          	auipc	s3,0x15
-    8000431e:	a5698993          	addi	s3,s3,-1450 # 80018d70 <tickslock>
-    80004322:	00006497          	auipc	s1,0x6
-    80004326:	d3248493          	addi	s1,s1,-718 # 8000a054 <ticks>
+    80003278:	00015997          	auipc	s3,0x15
+    8000327c:	99898993          	addi	s3,s3,-1640 # 80017c10 <tickslock>
+    80003280:	00006497          	auipc	s1,0x6
+    80003284:	db848493          	addi	s1,s1,-584 # 80009038 <ticks>
     if(myproc()->killed){
-    8000432a:	ffffe097          	auipc	ra,0xffffe
-    8000432e:	86a080e7          	jalr	-1942(ra) # 80001b94 <myproc>
-    80004332:	551c                	lw	a5,40(a0)
-    80004334:	ef9d                	bnez	a5,80004372 <sys_sleep+0x98>
+    80003288:	fffff097          	auipc	ra,0xfffff
+    8000328c:	a48080e7          	jalr	-1464(ra) # 80001cd0 <myproc>
+    80003290:	551c                	lw	a5,40(a0)
+    80003292:	ef9d                	bnez	a5,800032d0 <sys_sleep+0x98>
     sleep(&ticks, &tickslock);
-    80004336:	85ce                	mv	a1,s3
-    80004338:	8526                	mv	a0,s1
-    8000433a:	fffff097          	auipc	ra,0xfffff
-    8000433e:	944080e7          	jalr	-1724(ra) # 80002c7e <sleep>
+    80003294:	85ce                	mv	a1,s3
+    80003296:	8526                	mv	a0,s1
+    80003298:	fffff097          	auipc	ra,0xfffff
+    8000329c:	2aa080e7          	jalr	682(ra) # 80002542 <sleep>
   while(ticks - ticks0 < n){
-    80004342:	409c                	lw	a5,0(s1)
-    80004344:	412787bb          	subw	a5,a5,s2
-    80004348:	fcc42703          	lw	a4,-52(s0)
-    8000434c:	fce7efe3          	bltu	a5,a4,8000432a <sys_sleep+0x50>
+    800032a0:	409c                	lw	a5,0(s1)
+    800032a2:	412787bb          	subw	a5,a5,s2
+    800032a6:	fcc42703          	lw	a4,-52(s0)
+    800032aa:	fce7efe3          	bltu	a5,a4,80003288 <sys_sleep+0x50>
   }
   release(&tickslock);
-    80004350:	00015517          	auipc	a0,0x15
-    80004354:	a2050513          	addi	a0,a0,-1504 # 80018d70 <tickslock>
-    80004358:	ffffd097          	auipc	ra,0xffffd
-    8000435c:	940080e7          	jalr	-1728(ra) # 80000c98 <release>
+    800032ae:	00015517          	auipc	a0,0x15
+    800032b2:	96250513          	addi	a0,a0,-1694 # 80017c10 <tickslock>
+    800032b6:	ffffe097          	auipc	ra,0xffffe
+    800032ba:	9e2080e7          	jalr	-1566(ra) # 80000c98 <release>
   return 0;
-    80004360:	4781                	li	a5,0
-}
-    80004362:	853e                	mv	a0,a5
-    80004364:	70e2                	ld	ra,56(sp)
-    80004366:	7442                	ld	s0,48(sp)
-    80004368:	74a2                	ld	s1,40(sp)
-    8000436a:	7902                	ld	s2,32(sp)
-    8000436c:	69e2                	ld	s3,24(sp)
-    8000436e:	6121                	addi	sp,sp,64
-    80004370:	8082                	ret
+    800032be:	4781                	li	a5,0
+}
+    800032c0:	853e                	mv	a0,a5
+    800032c2:	70e2                	ld	ra,56(sp)
+    800032c4:	7442                	ld	s0,48(sp)
+    800032c6:	74a2                	ld	s1,40(sp)
+    800032c8:	7902                	ld	s2,32(sp)
+    800032ca:	69e2                	ld	s3,24(sp)
+    800032cc:	6121                	addi	sp,sp,64
+    800032ce:	8082                	ret
       release(&tickslock);
-    80004372:	00015517          	auipc	a0,0x15
-    80004376:	9fe50513          	addi	a0,a0,-1538 # 80018d70 <tickslock>
-    8000437a:	ffffd097          	auipc	ra,0xffffd
-    8000437e:	91e080e7          	jalr	-1762(ra) # 80000c98 <release>
+    800032d0:	00015517          	auipc	a0,0x15
+    800032d4:	94050513          	addi	a0,a0,-1728 # 80017c10 <tickslock>
+    800032d8:	ffffe097          	auipc	ra,0xffffe
+    800032dc:	9c0080e7          	jalr	-1600(ra) # 80000c98 <release>
       return -1;
-    80004382:	57fd                	li	a5,-1
-    80004384:	bff9                	j	80004362 <sys_sleep+0x88>
+    800032e0:	57fd                	li	a5,-1
+    800032e2:	bff9                	j	800032c0 <sys_sleep+0x88>
 
-0000000080004386 <sys_kill>:
+00000000800032e4 <sys_kill>:
 
 uint64
 sys_kill(void)
 {
-    80004386:	1101                	addi	sp,sp,-32
-    80004388:	ec06                	sd	ra,24(sp)
-    8000438a:	e822                	sd	s0,16(sp)
-    8000438c:	1000                	addi	s0,sp,32
+    800032e4:	1101                	addi	sp,sp,-32
+    800032e6:	ec06                	sd	ra,24(sp)
+    800032e8:	e822                	sd	s0,16(sp)
+    800032ea:	1000                	addi	s0,sp,32
   int pid;
 
   if(argint(0, &pid) < 0)
-    8000438e:	fec40593          	addi	a1,s0,-20
-    80004392:	4501                	li	a0,0
-    80004394:	00000097          	auipc	ra,0x0
-    80004398:	d84080e7          	jalr	-636(ra) # 80004118 <argint>
-    8000439c:	87aa                	mv	a5,a0
+    800032ec:	fec40593          	addi	a1,s0,-20
+    800032f0:	4501                	li	a0,0
+    800032f2:	00000097          	auipc	ra,0x0
+    800032f6:	d84080e7          	jalr	-636(ra) # 80003076 <argint>
+    800032fa:	87aa                	mv	a5,a0
     return -1;
-    8000439e:	557d                	li	a0,-1
+    800032fc:	557d                	li	a0,-1
   if(argint(0, &pid) < 0)
-    800043a0:	0007c863          	bltz	a5,800043b0 <sys_kill+0x2a>
+    800032fe:	0007c863          	bltz	a5,8000330e <sys_kill+0x2a>
   return kill(pid);
-    800043a4:	fec42503          	lw	a0,-20(s0)
-    800043a8:	fffff097          	auipc	ra,0xfffff
-    800043ac:	2f4080e7          	jalr	756(ra) # 8000369c <kill>
+    80003302:	fec42503          	lw	a0,-20(s0)
+    80003306:	fffff097          	auipc	ra,0xfffff
+    8000330a:	640080e7          	jalr	1600(ra) # 80002946 <kill>
 }
-    800043b0:	60e2                	ld	ra,24(sp)
-    800043b2:	6442                	ld	s0,16(sp)
-    800043b4:	6105                	addi	sp,sp,32
-    800043b6:	8082                	ret
+    8000330e:	60e2                	ld	ra,24(sp)
+    80003310:	6442                	ld	s0,16(sp)
+    80003312:	6105                	addi	sp,sp,32
+    80003314:	8082                	ret
 
-00000000800043b8 <sys_uptime>:
+0000000080003316 <sys_uptime>:
 
 // return how many clock tick interrupts have occurred
 // since start.
 uint64
 sys_uptime(void)
 {
-    800043b8:	1101                	addi	sp,sp,-32
-    800043ba:	ec06                	sd	ra,24(sp)
-    800043bc:	e822                	sd	s0,16(sp)
-    800043be:	e426                	sd	s1,8(sp)
-    800043c0:	1000                	addi	s0,sp,32
+    80003316:	1101                	addi	sp,sp,-32
+    80003318:	ec06                	sd	ra,24(sp)
+    8000331a:	e822                	sd	s0,16(sp)
+    8000331c:	e426                	sd	s1,8(sp)
+    8000331e:	1000                	addi	s0,sp,32
   uint xticks;
 
   acquire(&tickslock);
-    800043c2:	00015517          	auipc	a0,0x15
-    800043c6:	9ae50513          	addi	a0,a0,-1618 # 80018d70 <tickslock>
-    800043ca:	ffffd097          	auipc	ra,0xffffd
-    800043ce:	81a080e7          	jalr	-2022(ra) # 80000be4 <acquire>
+    80003320:	00015517          	auipc	a0,0x15
+    80003324:	8f050513          	addi	a0,a0,-1808 # 80017c10 <tickslock>
+    80003328:	ffffe097          	auipc	ra,0xffffe
+    8000332c:	8bc080e7          	jalr	-1860(ra) # 80000be4 <acquire>
   xticks = ticks;
-    800043d2:	00006497          	auipc	s1,0x6
-    800043d6:	c824a483          	lw	s1,-894(s1) # 8000a054 <ticks>
+    80003330:	00006497          	auipc	s1,0x6
+    80003334:	d084a483          	lw	s1,-760(s1) # 80009038 <ticks>
   release(&tickslock);
-    800043da:	00015517          	auipc	a0,0x15
-    800043de:	99650513          	addi	a0,a0,-1642 # 80018d70 <tickslock>
-    800043e2:	ffffd097          	auipc	ra,0xffffd
-    800043e6:	8b6080e7          	jalr	-1866(ra) # 80000c98 <release>
+    80003338:	00015517          	auipc	a0,0x15
+    8000333c:	8d850513          	addi	a0,a0,-1832 # 80017c10 <tickslock>
+    80003340:	ffffe097          	auipc	ra,0xffffe
+    80003344:	958080e7          	jalr	-1704(ra) # 80000c98 <release>
   return xticks;
 }
-    800043ea:	02049513          	slli	a0,s1,0x20
-    800043ee:	9101                	srli	a0,a0,0x20
-    800043f0:	60e2                	ld	ra,24(sp)
-    800043f2:	6442                	ld	s0,16(sp)
-    800043f4:	64a2                	ld	s1,8(sp)
-    800043f6:	6105                	addi	sp,sp,32
-    800043f8:	8082                	ret
+    80003348:	02049513          	slli	a0,s1,0x20
+    8000334c:	9101                	srli	a0,a0,0x20
+    8000334e:	60e2                	ld	ra,24(sp)
+    80003350:	6442                	ld	s0,16(sp)
+    80003352:	64a2                	ld	s1,8(sp)
+    80003354:	6105                	addi	sp,sp,32
+    80003356:	8082                	ret
 
-00000000800043fa <sys_print_stats>:
+0000000080003358 <sys_get_cpu>:
 
-uint64
-sys_print_stats(void)
-{
-    800043fa:	1141                	addi	sp,sp,-16
-    800043fc:	e406                	sd	ra,8(sp)
-    800043fe:	e022                	sd	s0,0(sp)
-    80004400:	0800                	addi	s0,sp,16
-  return print_stats();
-    80004402:	fffff097          	auipc	ra,0xfffff
-    80004406:	320080e7          	jalr	800(ra) # 80003722 <print_stats>
-}
-    8000440a:	60a2                	ld	ra,8(sp)
-    8000440c:	6402                	ld	s0,0(sp)
-    8000440e:	0141                	addi	sp,sp,16
-    80004410:	8082                	ret
-
-0000000080004412 <sys_get_cpu>:
-
-// Ass2
 uint64
 sys_get_cpu(void)
 {
-    80004412:	1141                	addi	sp,sp,-16
-    80004414:	e406                	sd	ra,8(sp)
-    80004416:	e022                	sd	s0,0(sp)
-    80004418:	0800                	addi	s0,sp,16
+    80003358:	1141                	addi	sp,sp,-16
+    8000335a:	e406                	sd	ra,8(sp)
+    8000335c:	e022                	sd	s0,0(sp)
+    8000335e:	0800                	addi	s0,sp,16
   return get_cpu();
-    8000441a:	fffff097          	auipc	ra,0xfffff
-    8000441e:	46a080e7          	jalr	1130(ra) # 80003884 <get_cpu>
+    80003360:	00000097          	auipc	ra,0x0
+    80003364:	808080e7          	jalr	-2040(ra) # 80002b68 <get_cpu>
 }
-    80004422:	60a2                	ld	ra,8(sp)
-    80004424:	6402                	ld	s0,0(sp)
-    80004426:	0141                	addi	sp,sp,16
-    80004428:	8082                	ret
+    80003368:	60a2                	ld	ra,8(sp)
+    8000336a:	6402                	ld	s0,0(sp)
+    8000336c:	0141                	addi	sp,sp,16
+    8000336e:	8082                	ret
 
-000000008000442a <sys_set_cpu>:
+0000000080003370 <sys_set_cpu>:
 
-// Ass2
 uint64
 sys_set_cpu(void)
 {
-    8000442a:	1101                	addi	sp,sp,-32
-    8000442c:	ec06                	sd	ra,24(sp)
-    8000442e:	e822                	sd	s0,16(sp)
-    80004430:	1000                	addi	s0,sp,32
+    80003370:	1101                	addi	sp,sp,-32
+    80003372:	ec06                	sd	ra,24(sp)
+    80003374:	e822                	sd	s0,16(sp)
+    80003376:	1000                	addi	s0,sp,32
   int cpu_num;
+
   if(argint(0, &cpu_num) < 0)
-    80004432:	fec40593          	addi	a1,s0,-20
-    80004436:	4501                	li	a0,0
-    80004438:	00000097          	auipc	ra,0x0
-    8000443c:	ce0080e7          	jalr	-800(ra) # 80004118 <argint>
-    80004440:	87aa                	mv	a5,a0
+    80003378:	fec40593          	addi	a1,s0,-20
+    8000337c:	4501                	li	a0,0
+    8000337e:	00000097          	auipc	ra,0x0
+    80003382:	cf8080e7          	jalr	-776(ra) # 80003076 <argint>
+    80003386:	87aa                	mv	a5,a0
     return -1;
-    80004442:	557d                	li	a0,-1
+    80003388:	557d                	li	a0,-1
   if(argint(0, &cpu_num) < 0)
-    80004444:	0007c863          	bltz	a5,80004454 <sys_set_cpu+0x2a>
-
+    8000338a:	0007c863          	bltz	a5,8000339a <sys_set_cpu+0x2a>
   return set_cpu(cpu_num);
-    80004448:	fec42503          	lw	a0,-20(s0)
-    8000444c:	fffff097          	auipc	ra,0xfffff
-    80004450:	378080e7          	jalr	888(ra) # 800037c4 <set_cpu>
+    8000338e:	fec42503          	lw	a0,-20(s0)
+    80003392:	fffff097          	auipc	ra,0xfffff
+    80003396:	780080e7          	jalr	1920(ra) # 80002b12 <set_cpu>
 }
-    80004454:	60e2                	ld	ra,24(sp)
-    80004456:	6442                	ld	s0,16(sp)
-    80004458:	6105                	addi	sp,sp,32
-    8000445a:	8082                	ret
-
-000000008000445c <sys_pause_system>:
+    8000339a:	60e2                	ld	ra,24(sp)
+    8000339c:	6442                	ld	s0,16(sp)
+    8000339e:	6105                	addi	sp,sp,32
+    800033a0:	8082                	ret
 
-
-
-uint64
-sys_pause_system(void)
-{
-    8000445c:	1101                	addi	sp,sp,-32
-    8000445e:	ec06                	sd	ra,24(sp)
-    80004460:	e822                	sd	s0,16(sp)
-    80004462:	1000                	addi	s0,sp,32
-  int seconds;
-
-  if(argint(0, &seconds) < 0)
-    80004464:	fec40593          	addi	a1,s0,-20
-    80004468:	4501                	li	a0,0
-    8000446a:	00000097          	auipc	ra,0x0
-    8000446e:	cae080e7          	jalr	-850(ra) # 80004118 <argint>
-    80004472:	87aa                	mv	a5,a0
-    return -1;
-    80004474:	557d                	li	a0,-1
-  if(argint(0, &seconds) < 0)
-    80004476:	0007c863          	bltz	a5,80004486 <sys_pause_system+0x2a>
-
-  return pause_system(seconds);
-    8000447a:	fec42503          	lw	a0,-20(s0)
-    8000447e:	fffff097          	auipc	ra,0xfffff
-    80004482:	416080e7          	jalr	1046(ra) # 80003894 <pause_system>
-}
-    80004486:	60e2                	ld	ra,24(sp)
-    80004488:	6442                	ld	s0,16(sp)
-    8000448a:	6105                	addi	sp,sp,32
-    8000448c:	8082                	ret
-
-000000008000448e <sys_kill_system>:
-
-
-uint64
-sys_kill_system(void)
-{
-    8000448e:	1141                	addi	sp,sp,-16
-    80004490:	e406                	sd	ra,8(sp)
-    80004492:	e022                	sd	s0,0(sp)
-    80004494:	0800                	addi	s0,sp,16
-  return kill_system(); 
-    80004496:	fffff097          	auipc	ra,0xfffff
-    8000449a:	55e080e7          	jalr	1374(ra) # 800039f4 <kill_system>
-}
-    8000449e:	60a2                	ld	ra,8(sp)
-    800044a0:	6402                	ld	s0,0(sp)
-    800044a2:	0141                	addi	sp,sp,16
-    800044a4:	8082                	ret
-
-00000000800044a6 <binit>:
+00000000800033a2 <binit>:
   struct buf head;
 } bcache;
 
 void
 binit(void)
 {
-    800044a6:	7179                	addi	sp,sp,-48
-    800044a8:	f406                	sd	ra,40(sp)
-    800044aa:	f022                	sd	s0,32(sp)
-    800044ac:	ec26                	sd	s1,24(sp)
-    800044ae:	e84a                	sd	s2,16(sp)
-    800044b0:	e44e                	sd	s3,8(sp)
-    800044b2:	e052                	sd	s4,0(sp)
-    800044b4:	1800                	addi	s0,sp,48
+    800033a2:	7179                	addi	sp,sp,-48
+    800033a4:	f406                	sd	ra,40(sp)
+    800033a6:	f022                	sd	s0,32(sp)
+    800033a8:	ec26                	sd	s1,24(sp)
+    800033aa:	e84a                	sd	s2,16(sp)
+    800033ac:	e44e                	sd	s3,8(sp)
+    800033ae:	e052                	sd	s4,0(sp)
+    800033b0:	1800                	addi	s0,sp,48
   struct buf *b;
 
   initlock(&bcache.lock, "bcache");
-    800044b6:	00005597          	auipc	a1,0x5
-    800044ba:	44a58593          	addi	a1,a1,1098 # 80009900 <syscalls+0xd8>
-    800044be:	00015517          	auipc	a0,0x15
-    800044c2:	8ca50513          	addi	a0,a0,-1846 # 80018d88 <bcache>
-    800044c6:	ffffc097          	auipc	ra,0xffffc
-    800044ca:	68e080e7          	jalr	1678(ra) # 80000b54 <initlock>
+    800033b2:	00005597          	auipc	a1,0x5
+    800033b6:	1de58593          	addi	a1,a1,478 # 80008590 <syscalls+0xc0>
+    800033ba:	00015517          	auipc	a0,0x15
+    800033be:	86e50513          	addi	a0,a0,-1938 # 80017c28 <bcache>
+    800033c2:	ffffd097          	auipc	ra,0xffffd
+    800033c6:	792080e7          	jalr	1938(ra) # 80000b54 <initlock>
 
   // Create linked list of buffers
   bcache.head.prev = &bcache.head;
-    800044ce:	0001d797          	auipc	a5,0x1d
-    800044d2:	8ba78793          	addi	a5,a5,-1862 # 80020d88 <bcache+0x8000>
-    800044d6:	0001d717          	auipc	a4,0x1d
-    800044da:	b1a70713          	addi	a4,a4,-1254 # 80020ff0 <bcache+0x8268>
-    800044de:	2ae7b823          	sd	a4,688(a5)
+    800033ca:	0001d797          	auipc	a5,0x1d
+    800033ce:	85e78793          	addi	a5,a5,-1954 # 8001fc28 <bcache+0x8000>
+    800033d2:	0001d717          	auipc	a4,0x1d
+    800033d6:	abe70713          	addi	a4,a4,-1346 # 8001fe90 <bcache+0x8268>
+    800033da:	2ae7b823          	sd	a4,688(a5)
   bcache.head.next = &bcache.head;
-    800044e2:	2ae7bc23          	sd	a4,696(a5)
+    800033de:	2ae7bc23          	sd	a4,696(a5)
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
-    800044e6:	00015497          	auipc	s1,0x15
-    800044ea:	8ba48493          	addi	s1,s1,-1862 # 80018da0 <bcache+0x18>
+    800033e2:	00015497          	auipc	s1,0x15
+    800033e6:	85e48493          	addi	s1,s1,-1954 # 80017c40 <bcache+0x18>
     b->next = bcache.head.next;
-    800044ee:	893e                	mv	s2,a5
+    800033ea:	893e                	mv	s2,a5
     b->prev = &bcache.head;
-    800044f0:	89ba                	mv	s3,a4
+    800033ec:	89ba                	mv	s3,a4
     initsleeplock(&b->lock, "buffer");
-    800044f2:	00005a17          	auipc	s4,0x5
-    800044f6:	416a0a13          	addi	s4,s4,1046 # 80009908 <syscalls+0xe0>
+    800033ee:	00005a17          	auipc	s4,0x5
+    800033f2:	1aaa0a13          	addi	s4,s4,426 # 80008598 <syscalls+0xc8>
     b->next = bcache.head.next;
-    800044fa:	2b893783          	ld	a5,696(s2)
-    800044fe:	e8bc                	sd	a5,80(s1)
+    800033f6:	2b893783          	ld	a5,696(s2)
+    800033fa:	e8bc                	sd	a5,80(s1)
     b->prev = &bcache.head;
-    80004500:	0534b423          	sd	s3,72(s1)
+    800033fc:	0534b423          	sd	s3,72(s1)
     initsleeplock(&b->lock, "buffer");
-    80004504:	85d2                	mv	a1,s4
-    80004506:	01048513          	addi	a0,s1,16
-    8000450a:	00001097          	auipc	ra,0x1
-    8000450e:	4bc080e7          	jalr	1212(ra) # 800059c6 <initsleeplock>
+    80003400:	85d2                	mv	a1,s4
+    80003402:	01048513          	addi	a0,s1,16
+    80003406:	00001097          	auipc	ra,0x1
+    8000340a:	4bc080e7          	jalr	1212(ra) # 800048c2 <initsleeplock>
     bcache.head.next->prev = b;
-    80004512:	2b893783          	ld	a5,696(s2)
-    80004516:	e7a4                	sd	s1,72(a5)
+    8000340e:	2b893783          	ld	a5,696(s2)
+    80003412:	e7a4                	sd	s1,72(a5)
     bcache.head.next = b;
-    80004518:	2a993c23          	sd	s1,696(s2)
+    80003414:	2a993c23          	sd	s1,696(s2)
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
-    8000451c:	45848493          	addi	s1,s1,1112
-    80004520:	fd349de3          	bne	s1,s3,800044fa <binit+0x54>
+    80003418:	45848493          	addi	s1,s1,1112
+    8000341c:	fd349de3          	bne	s1,s3,800033f6 <binit+0x54>
   }
 }
-    80004524:	70a2                	ld	ra,40(sp)
-    80004526:	7402                	ld	s0,32(sp)
-    80004528:	64e2                	ld	s1,24(sp)
-    8000452a:	6942                	ld	s2,16(sp)
-    8000452c:	69a2                	ld	s3,8(sp)
-    8000452e:	6a02                	ld	s4,0(sp)
-    80004530:	6145                	addi	sp,sp,48
-    80004532:	8082                	ret
+    80003420:	70a2                	ld	ra,40(sp)
+    80003422:	7402                	ld	s0,32(sp)
+    80003424:	64e2                	ld	s1,24(sp)
+    80003426:	6942                	ld	s2,16(sp)
+    80003428:	69a2                	ld	s3,8(sp)
+    8000342a:	6a02                	ld	s4,0(sp)
+    8000342c:	6145                	addi	sp,sp,48
+    8000342e:	8082                	ret
 
-0000000080004534 <bread>:
+0000000080003430 <bread>:
 }
 
 // Return a locked buf with the contents of the indicated block.
 struct buf*
 bread(uint dev, uint blockno)
 {
-    80004534:	7179                	addi	sp,sp,-48
-    80004536:	f406                	sd	ra,40(sp)
-    80004538:	f022                	sd	s0,32(sp)
-    8000453a:	ec26                	sd	s1,24(sp)
-    8000453c:	e84a                	sd	s2,16(sp)
-    8000453e:	e44e                	sd	s3,8(sp)
-    80004540:	1800                	addi	s0,sp,48
-    80004542:	89aa                	mv	s3,a0
-    80004544:	892e                	mv	s2,a1
+    80003430:	7179                	addi	sp,sp,-48
+    80003432:	f406                	sd	ra,40(sp)
+    80003434:	f022                	sd	s0,32(sp)
+    80003436:	ec26                	sd	s1,24(sp)
+    80003438:	e84a                	sd	s2,16(sp)
+    8000343a:	e44e                	sd	s3,8(sp)
+    8000343c:	1800                	addi	s0,sp,48
+    8000343e:	89aa                	mv	s3,a0
+    80003440:	892e                	mv	s2,a1
   acquire(&bcache.lock);
-    80004546:	00015517          	auipc	a0,0x15
-    8000454a:	84250513          	addi	a0,a0,-1982 # 80018d88 <bcache>
-    8000454e:	ffffc097          	auipc	ra,0xffffc
-    80004552:	696080e7          	jalr	1686(ra) # 80000be4 <acquire>
+    80003442:	00014517          	auipc	a0,0x14
+    80003446:	7e650513          	addi	a0,a0,2022 # 80017c28 <bcache>
+    8000344a:	ffffd097          	auipc	ra,0xffffd
+    8000344e:	79a080e7          	jalr	1946(ra) # 80000be4 <acquire>
   for(b = bcache.head.next; b != &bcache.head; b = b->next){
-    80004556:	0001d497          	auipc	s1,0x1d
-    8000455a:	aea4b483          	ld	s1,-1302(s1) # 80021040 <bcache+0x82b8>
-    8000455e:	0001d797          	auipc	a5,0x1d
-    80004562:	a9278793          	addi	a5,a5,-1390 # 80020ff0 <bcache+0x8268>
-    80004566:	02f48f63          	beq	s1,a5,800045a4 <bread+0x70>
-    8000456a:	873e                	mv	a4,a5
-    8000456c:	a021                	j	80004574 <bread+0x40>
-    8000456e:	68a4                	ld	s1,80(s1)
-    80004570:	02e48a63          	beq	s1,a4,800045a4 <bread+0x70>
+    80003452:	0001d497          	auipc	s1,0x1d
+    80003456:	a8e4b483          	ld	s1,-1394(s1) # 8001fee0 <bcache+0x82b8>
+    8000345a:	0001d797          	auipc	a5,0x1d
+    8000345e:	a3678793          	addi	a5,a5,-1482 # 8001fe90 <bcache+0x8268>
+    80003462:	02f48f63          	beq	s1,a5,800034a0 <bread+0x70>
+    80003466:	873e                	mv	a4,a5
+    80003468:	a021                	j	80003470 <bread+0x40>
+    8000346a:	68a4                	ld	s1,80(s1)
+    8000346c:	02e48a63          	beq	s1,a4,800034a0 <bread+0x70>
     if(b->dev == dev && b->blockno == blockno){
-    80004574:	449c                	lw	a5,8(s1)
-    80004576:	ff379ce3          	bne	a5,s3,8000456e <bread+0x3a>
-    8000457a:	44dc                	lw	a5,12(s1)
-    8000457c:	ff2799e3          	bne	a5,s2,8000456e <bread+0x3a>
+    80003470:	449c                	lw	a5,8(s1)
+    80003472:	ff379ce3          	bne	a5,s3,8000346a <bread+0x3a>
+    80003476:	44dc                	lw	a5,12(s1)
+    80003478:	ff2799e3          	bne	a5,s2,8000346a <bread+0x3a>
       b->refcnt++;
-    80004580:	40bc                	lw	a5,64(s1)
-    80004582:	2785                	addiw	a5,a5,1
-    80004584:	c0bc                	sw	a5,64(s1)
+    8000347c:	40bc                	lw	a5,64(s1)
+    8000347e:	2785                	addiw	a5,a5,1
+    80003480:	c0bc                	sw	a5,64(s1)
       release(&bcache.lock);
-    80004586:	00015517          	auipc	a0,0x15
-    8000458a:	80250513          	addi	a0,a0,-2046 # 80018d88 <bcache>
-    8000458e:	ffffc097          	auipc	ra,0xffffc
-    80004592:	70a080e7          	jalr	1802(ra) # 80000c98 <release>
+    80003482:	00014517          	auipc	a0,0x14
+    80003486:	7a650513          	addi	a0,a0,1958 # 80017c28 <bcache>
+    8000348a:	ffffe097          	auipc	ra,0xffffe
+    8000348e:	80e080e7          	jalr	-2034(ra) # 80000c98 <release>
       acquiresleep(&b->lock);
-    80004596:	01048513          	addi	a0,s1,16
-    8000459a:	00001097          	auipc	ra,0x1
-    8000459e:	466080e7          	jalr	1126(ra) # 80005a00 <acquiresleep>
+    80003492:	01048513          	addi	a0,s1,16
+    80003496:	00001097          	auipc	ra,0x1
+    8000349a:	466080e7          	jalr	1126(ra) # 800048fc <acquiresleep>
       return b;
-    800045a2:	a8b9                	j	80004600 <bread+0xcc>
+    8000349e:	a8b9                	j	800034fc <bread+0xcc>
   for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
-    800045a4:	0001d497          	auipc	s1,0x1d
-    800045a8:	a944b483          	ld	s1,-1388(s1) # 80021038 <bcache+0x82b0>
-    800045ac:	0001d797          	auipc	a5,0x1d
-    800045b0:	a4478793          	addi	a5,a5,-1468 # 80020ff0 <bcache+0x8268>
-    800045b4:	00f48863          	beq	s1,a5,800045c4 <bread+0x90>
-    800045b8:	873e                	mv	a4,a5
+    800034a0:	0001d497          	auipc	s1,0x1d
+    800034a4:	a384b483          	ld	s1,-1480(s1) # 8001fed8 <bcache+0x82b0>
+    800034a8:	0001d797          	auipc	a5,0x1d
+    800034ac:	9e878793          	addi	a5,a5,-1560 # 8001fe90 <bcache+0x8268>
+    800034b0:	00f48863          	beq	s1,a5,800034c0 <bread+0x90>
+    800034b4:	873e                	mv	a4,a5
     if(b->refcnt == 0) {
-    800045ba:	40bc                	lw	a5,64(s1)
-    800045bc:	cf81                	beqz	a5,800045d4 <bread+0xa0>
+    800034b6:	40bc                	lw	a5,64(s1)
+    800034b8:	cf81                	beqz	a5,800034d0 <bread+0xa0>
   for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
-    800045be:	64a4                	ld	s1,72(s1)
-    800045c0:	fee49de3          	bne	s1,a4,800045ba <bread+0x86>
+    800034ba:	64a4                	ld	s1,72(s1)
+    800034bc:	fee49de3          	bne	s1,a4,800034b6 <bread+0x86>
   panic("bget: no buffers");
-    800045c4:	00005517          	auipc	a0,0x5
-    800045c8:	34c50513          	addi	a0,a0,844 # 80009910 <syscalls+0xe8>
-    800045cc:	ffffc097          	auipc	ra,0xffffc
-    800045d0:	f72080e7          	jalr	-142(ra) # 8000053e <panic>
+    800034c0:	00005517          	auipc	a0,0x5
+    800034c4:	0e050513          	addi	a0,a0,224 # 800085a0 <syscalls+0xd0>
+    800034c8:	ffffd097          	auipc	ra,0xffffd
+    800034cc:	076080e7          	jalr	118(ra) # 8000053e <panic>
       b->dev = dev;
-    800045d4:	0134a423          	sw	s3,8(s1)
+    800034d0:	0134a423          	sw	s3,8(s1)
       b->blockno = blockno;
-    800045d8:	0124a623          	sw	s2,12(s1)
+    800034d4:	0124a623          	sw	s2,12(s1)
       b->valid = 0;
-    800045dc:	0004a023          	sw	zero,0(s1)
+    800034d8:	0004a023          	sw	zero,0(s1)
       b->refcnt = 1;
-    800045e0:	4785                	li	a5,1
-    800045e2:	c0bc                	sw	a5,64(s1)
+    800034dc:	4785                	li	a5,1
+    800034de:	c0bc                	sw	a5,64(s1)
       release(&bcache.lock);
-    800045e4:	00014517          	auipc	a0,0x14
-    800045e8:	7a450513          	addi	a0,a0,1956 # 80018d88 <bcache>
-    800045ec:	ffffc097          	auipc	ra,0xffffc
-    800045f0:	6ac080e7          	jalr	1708(ra) # 80000c98 <release>
+    800034e0:	00014517          	auipc	a0,0x14
+    800034e4:	74850513          	addi	a0,a0,1864 # 80017c28 <bcache>
+    800034e8:	ffffd097          	auipc	ra,0xffffd
+    800034ec:	7b0080e7          	jalr	1968(ra) # 80000c98 <release>
       acquiresleep(&b->lock);
-    800045f4:	01048513          	addi	a0,s1,16
-    800045f8:	00001097          	auipc	ra,0x1
-    800045fc:	408080e7          	jalr	1032(ra) # 80005a00 <acquiresleep>
+    800034f0:	01048513          	addi	a0,s1,16
+    800034f4:	00001097          	auipc	ra,0x1
+    800034f8:	408080e7          	jalr	1032(ra) # 800048fc <acquiresleep>
   struct buf *b;
 
   b = bget(dev, blockno);
   if(!b->valid) {
-    80004600:	409c                	lw	a5,0(s1)
-    80004602:	cb89                	beqz	a5,80004614 <bread+0xe0>
+    800034fc:	409c                	lw	a5,0(s1)
+    800034fe:	cb89                	beqz	a5,80003510 <bread+0xe0>
     virtio_disk_rw(b, 0);
     b->valid = 1;
   }
   return b;
 }
-    80004604:	8526                	mv	a0,s1
-    80004606:	70a2                	ld	ra,40(sp)
-    80004608:	7402                	ld	s0,32(sp)
-    8000460a:	64e2                	ld	s1,24(sp)
-    8000460c:	6942                	ld	s2,16(sp)
-    8000460e:	69a2                	ld	s3,8(sp)
-    80004610:	6145                	addi	sp,sp,48
-    80004612:	8082                	ret
+    80003500:	8526                	mv	a0,s1
+    80003502:	70a2                	ld	ra,40(sp)
+    80003504:	7402                	ld	s0,32(sp)
+    80003506:	64e2                	ld	s1,24(sp)
+    80003508:	6942                	ld	s2,16(sp)
+    8000350a:	69a2                	ld	s3,8(sp)
+    8000350c:	6145                	addi	sp,sp,48
+    8000350e:	8082                	ret
     virtio_disk_rw(b, 0);
-    80004614:	4581                	li	a1,0
-    80004616:	8526                	mv	a0,s1
-    80004618:	00003097          	auipc	ra,0x3
-    8000461c:	f0e080e7          	jalr	-242(ra) # 80007526 <virtio_disk_rw>
+    80003510:	4581                	li	a1,0
+    80003512:	8526                	mv	a0,s1
+    80003514:	00003097          	auipc	ra,0x3
+    80003518:	f12080e7          	jalr	-238(ra) # 80006426 <virtio_disk_rw>
     b->valid = 1;
-    80004620:	4785                	li	a5,1
-    80004622:	c09c                	sw	a5,0(s1)
+    8000351c:	4785                	li	a5,1
+    8000351e:	c09c                	sw	a5,0(s1)
   return b;
-    80004624:	b7c5                	j	80004604 <bread+0xd0>
+    80003520:	b7c5                	j	80003500 <bread+0xd0>
 
-0000000080004626 <bwrite>:
+0000000080003522 <bwrite>:
 
 // Write b's contents to disk.  Must be locked.
 void
 bwrite(struct buf *b)
 {
-    80004626:	1101                	addi	sp,sp,-32
-    80004628:	ec06                	sd	ra,24(sp)
-    8000462a:	e822                	sd	s0,16(sp)
-    8000462c:	e426                	sd	s1,8(sp)
-    8000462e:	1000                	addi	s0,sp,32
-    80004630:	84aa                	mv	s1,a0
+    80003522:	1101                	addi	sp,sp,-32
+    80003524:	ec06                	sd	ra,24(sp)
+    80003526:	e822                	sd	s0,16(sp)
+    80003528:	e426                	sd	s1,8(sp)
+    8000352a:	1000                	addi	s0,sp,32
+    8000352c:	84aa                	mv	s1,a0
   if(!holdingsleep(&b->lock))
-    80004632:	0541                	addi	a0,a0,16
-    80004634:	00001097          	auipc	ra,0x1
-    80004638:	466080e7          	jalr	1126(ra) # 80005a9a <holdingsleep>
-    8000463c:	cd01                	beqz	a0,80004654 <bwrite+0x2e>
+    8000352e:	0541                	addi	a0,a0,16
+    80003530:	00001097          	auipc	ra,0x1
+    80003534:	466080e7          	jalr	1126(ra) # 80004996 <holdingsleep>
+    80003538:	cd01                	beqz	a0,80003550 <bwrite+0x2e>
     panic("bwrite");
   virtio_disk_rw(b, 1);
-    8000463e:	4585                	li	a1,1
-    80004640:	8526                	mv	a0,s1
-    80004642:	00003097          	auipc	ra,0x3
-    80004646:	ee4080e7          	jalr	-284(ra) # 80007526 <virtio_disk_rw>
-}
-    8000464a:	60e2                	ld	ra,24(sp)
-    8000464c:	6442                	ld	s0,16(sp)
-    8000464e:	64a2                	ld	s1,8(sp)
-    80004650:	6105                	addi	sp,sp,32
-    80004652:	8082                	ret
+    8000353a:	4585                	li	a1,1
+    8000353c:	8526                	mv	a0,s1
+    8000353e:	00003097          	auipc	ra,0x3
+    80003542:	ee8080e7          	jalr	-280(ra) # 80006426 <virtio_disk_rw>
+}
+    80003546:	60e2                	ld	ra,24(sp)
+    80003548:	6442                	ld	s0,16(sp)
+    8000354a:	64a2                	ld	s1,8(sp)
+    8000354c:	6105                	addi	sp,sp,32
+    8000354e:	8082                	ret
     panic("bwrite");
-    80004654:	00005517          	auipc	a0,0x5
-    80004658:	2d450513          	addi	a0,a0,724 # 80009928 <syscalls+0x100>
-    8000465c:	ffffc097          	auipc	ra,0xffffc
-    80004660:	ee2080e7          	jalr	-286(ra) # 8000053e <panic>
+    80003550:	00005517          	auipc	a0,0x5
+    80003554:	06850513          	addi	a0,a0,104 # 800085b8 <syscalls+0xe8>
+    80003558:	ffffd097          	auipc	ra,0xffffd
+    8000355c:	fe6080e7          	jalr	-26(ra) # 8000053e <panic>
 
-0000000080004664 <brelse>:
+0000000080003560 <brelse>:
 
 // Release a locked buffer.
 // Move to the head of the most-recently-used list.
 void
 brelse(struct buf *b)
 {
-    80004664:	1101                	addi	sp,sp,-32
-    80004666:	ec06                	sd	ra,24(sp)
-    80004668:	e822                	sd	s0,16(sp)
-    8000466a:	e426                	sd	s1,8(sp)
-    8000466c:	e04a                	sd	s2,0(sp)
-    8000466e:	1000                	addi	s0,sp,32
-    80004670:	84aa                	mv	s1,a0
+    80003560:	1101                	addi	sp,sp,-32
+    80003562:	ec06                	sd	ra,24(sp)
+    80003564:	e822                	sd	s0,16(sp)
+    80003566:	e426                	sd	s1,8(sp)
+    80003568:	e04a                	sd	s2,0(sp)
+    8000356a:	1000                	addi	s0,sp,32
+    8000356c:	84aa                	mv	s1,a0
   if(!holdingsleep(&b->lock))
-    80004672:	01050913          	addi	s2,a0,16
-    80004676:	854a                	mv	a0,s2
-    80004678:	00001097          	auipc	ra,0x1
-    8000467c:	422080e7          	jalr	1058(ra) # 80005a9a <holdingsleep>
-    80004680:	c92d                	beqz	a0,800046f2 <brelse+0x8e>
+    8000356e:	01050913          	addi	s2,a0,16
+    80003572:	854a                	mv	a0,s2
+    80003574:	00001097          	auipc	ra,0x1
+    80003578:	422080e7          	jalr	1058(ra) # 80004996 <holdingsleep>
+    8000357c:	c92d                	beqz	a0,800035ee <brelse+0x8e>
     panic("brelse");
 
   releasesleep(&b->lock);
-    80004682:	854a                	mv	a0,s2
-    80004684:	00001097          	auipc	ra,0x1
-    80004688:	3d2080e7          	jalr	978(ra) # 80005a56 <releasesleep>
+    8000357e:	854a                	mv	a0,s2
+    80003580:	00001097          	auipc	ra,0x1
+    80003584:	3d2080e7          	jalr	978(ra) # 80004952 <releasesleep>
 
   acquire(&bcache.lock);
-    8000468c:	00014517          	auipc	a0,0x14
-    80004690:	6fc50513          	addi	a0,a0,1788 # 80018d88 <bcache>
-    80004694:	ffffc097          	auipc	ra,0xffffc
-    80004698:	550080e7          	jalr	1360(ra) # 80000be4 <acquire>
+    80003588:	00014517          	auipc	a0,0x14
+    8000358c:	6a050513          	addi	a0,a0,1696 # 80017c28 <bcache>
+    80003590:	ffffd097          	auipc	ra,0xffffd
+    80003594:	654080e7          	jalr	1620(ra) # 80000be4 <acquire>
   b->refcnt--;
-    8000469c:	40bc                	lw	a5,64(s1)
-    8000469e:	37fd                	addiw	a5,a5,-1
-    800046a0:	0007871b          	sext.w	a4,a5
-    800046a4:	c0bc                	sw	a5,64(s1)
+    80003598:	40bc                	lw	a5,64(s1)
+    8000359a:	37fd                	addiw	a5,a5,-1
+    8000359c:	0007871b          	sext.w	a4,a5
+    800035a0:	c0bc                	sw	a5,64(s1)
   if (b->refcnt == 0) {
-    800046a6:	eb05                	bnez	a4,800046d6 <brelse+0x72>
+    800035a2:	eb05                	bnez	a4,800035d2 <brelse+0x72>
     // no one is waiting for it.
     b->next->prev = b->prev;
-    800046a8:	68bc                	ld	a5,80(s1)
-    800046aa:	64b8                	ld	a4,72(s1)
-    800046ac:	e7b8                	sd	a4,72(a5)
+    800035a4:	68bc                	ld	a5,80(s1)
+    800035a6:	64b8                	ld	a4,72(s1)
+    800035a8:	e7b8                	sd	a4,72(a5)
     b->prev->next = b->next;
-    800046ae:	64bc                	ld	a5,72(s1)
-    800046b0:	68b8                	ld	a4,80(s1)
-    800046b2:	ebb8                	sd	a4,80(a5)
+    800035aa:	64bc                	ld	a5,72(s1)
+    800035ac:	68b8                	ld	a4,80(s1)
+    800035ae:	ebb8                	sd	a4,80(a5)
     b->next = bcache.head.next;
-    800046b4:	0001c797          	auipc	a5,0x1c
-    800046b8:	6d478793          	addi	a5,a5,1748 # 80020d88 <bcache+0x8000>
-    800046bc:	2b87b703          	ld	a4,696(a5)
-    800046c0:	e8b8                	sd	a4,80(s1)
+    800035b0:	0001c797          	auipc	a5,0x1c
+    800035b4:	67878793          	addi	a5,a5,1656 # 8001fc28 <bcache+0x8000>
+    800035b8:	2b87b703          	ld	a4,696(a5)
+    800035bc:	e8b8                	sd	a4,80(s1)
     b->prev = &bcache.head;
-    800046c2:	0001d717          	auipc	a4,0x1d
-    800046c6:	92e70713          	addi	a4,a4,-1746 # 80020ff0 <bcache+0x8268>
-    800046ca:	e4b8                	sd	a4,72(s1)
+    800035be:	0001d717          	auipc	a4,0x1d
+    800035c2:	8d270713          	addi	a4,a4,-1838 # 8001fe90 <bcache+0x8268>
+    800035c6:	e4b8                	sd	a4,72(s1)
     bcache.head.next->prev = b;
-    800046cc:	2b87b703          	ld	a4,696(a5)
-    800046d0:	e724                	sd	s1,72(a4)
+    800035c8:	2b87b703          	ld	a4,696(a5)
+    800035cc:	e724                	sd	s1,72(a4)
     bcache.head.next = b;
-    800046d2:	2a97bc23          	sd	s1,696(a5)
+    800035ce:	2a97bc23          	sd	s1,696(a5)
   }
   
   release(&bcache.lock);
-    800046d6:	00014517          	auipc	a0,0x14
-    800046da:	6b250513          	addi	a0,a0,1714 # 80018d88 <bcache>
-    800046de:	ffffc097          	auipc	ra,0xffffc
-    800046e2:	5ba080e7          	jalr	1466(ra) # 80000c98 <release>
-}
-    800046e6:	60e2                	ld	ra,24(sp)
-    800046e8:	6442                	ld	s0,16(sp)
-    800046ea:	64a2                	ld	s1,8(sp)
-    800046ec:	6902                	ld	s2,0(sp)
-    800046ee:	6105                	addi	sp,sp,32
-    800046f0:	8082                	ret
+    800035d2:	00014517          	auipc	a0,0x14
+    800035d6:	65650513          	addi	a0,a0,1622 # 80017c28 <bcache>
+    800035da:	ffffd097          	auipc	ra,0xffffd
+    800035de:	6be080e7          	jalr	1726(ra) # 80000c98 <release>
+}
+    800035e2:	60e2                	ld	ra,24(sp)
+    800035e4:	6442                	ld	s0,16(sp)
+    800035e6:	64a2                	ld	s1,8(sp)
+    800035e8:	6902                	ld	s2,0(sp)
+    800035ea:	6105                	addi	sp,sp,32
+    800035ec:	8082                	ret
     panic("brelse");
-    800046f2:	00005517          	auipc	a0,0x5
-    800046f6:	23e50513          	addi	a0,a0,574 # 80009930 <syscalls+0x108>
-    800046fa:	ffffc097          	auipc	ra,0xffffc
-    800046fe:	e44080e7          	jalr	-444(ra) # 8000053e <panic>
+    800035ee:	00005517          	auipc	a0,0x5
+    800035f2:	fd250513          	addi	a0,a0,-46 # 800085c0 <syscalls+0xf0>
+    800035f6:	ffffd097          	auipc	ra,0xffffd
+    800035fa:	f48080e7          	jalr	-184(ra) # 8000053e <panic>
 
-0000000080004702 <bpin>:
+00000000800035fe <bpin>:
 
 void
 bpin(struct buf *b) {
-    80004702:	1101                	addi	sp,sp,-32
-    80004704:	ec06                	sd	ra,24(sp)
-    80004706:	e822                	sd	s0,16(sp)
-    80004708:	e426                	sd	s1,8(sp)
-    8000470a:	1000                	addi	s0,sp,32
-    8000470c:	84aa                	mv	s1,a0
+    800035fe:	1101                	addi	sp,sp,-32
+    80003600:	ec06                	sd	ra,24(sp)
+    80003602:	e822                	sd	s0,16(sp)
+    80003604:	e426                	sd	s1,8(sp)
+    80003606:	1000                	addi	s0,sp,32
+    80003608:	84aa                	mv	s1,a0
   acquire(&bcache.lock);
-    8000470e:	00014517          	auipc	a0,0x14
-    80004712:	67a50513          	addi	a0,a0,1658 # 80018d88 <bcache>
-    80004716:	ffffc097          	auipc	ra,0xffffc
-    8000471a:	4ce080e7          	jalr	1230(ra) # 80000be4 <acquire>
+    8000360a:	00014517          	auipc	a0,0x14
+    8000360e:	61e50513          	addi	a0,a0,1566 # 80017c28 <bcache>
+    80003612:	ffffd097          	auipc	ra,0xffffd
+    80003616:	5d2080e7          	jalr	1490(ra) # 80000be4 <acquire>
   b->refcnt++;
-    8000471e:	40bc                	lw	a5,64(s1)
-    80004720:	2785                	addiw	a5,a5,1
-    80004722:	c0bc                	sw	a5,64(s1)
+    8000361a:	40bc                	lw	a5,64(s1)
+    8000361c:	2785                	addiw	a5,a5,1
+    8000361e:	c0bc                	sw	a5,64(s1)
   release(&bcache.lock);
-    80004724:	00014517          	auipc	a0,0x14
-    80004728:	66450513          	addi	a0,a0,1636 # 80018d88 <bcache>
-    8000472c:	ffffc097          	auipc	ra,0xffffc
-    80004730:	56c080e7          	jalr	1388(ra) # 80000c98 <release>
+    80003620:	00014517          	auipc	a0,0x14
+    80003624:	60850513          	addi	a0,a0,1544 # 80017c28 <bcache>
+    80003628:	ffffd097          	auipc	ra,0xffffd
+    8000362c:	670080e7          	jalr	1648(ra) # 80000c98 <release>
 }
-    80004734:	60e2                	ld	ra,24(sp)
-    80004736:	6442                	ld	s0,16(sp)
-    80004738:	64a2                	ld	s1,8(sp)
-    8000473a:	6105                	addi	sp,sp,32
-    8000473c:	8082                	ret
+    80003630:	60e2                	ld	ra,24(sp)
+    80003632:	6442                	ld	s0,16(sp)
+    80003634:	64a2                	ld	s1,8(sp)
+    80003636:	6105                	addi	sp,sp,32
+    80003638:	8082                	ret
 
-000000008000473e <bunpin>:
+000000008000363a <bunpin>:
 
 void
 bunpin(struct buf *b) {
-    8000473e:	1101                	addi	sp,sp,-32
-    80004740:	ec06                	sd	ra,24(sp)
-    80004742:	e822                	sd	s0,16(sp)
-    80004744:	e426                	sd	s1,8(sp)
-    80004746:	1000                	addi	s0,sp,32
-    80004748:	84aa                	mv	s1,a0
+    8000363a:	1101                	addi	sp,sp,-32
+    8000363c:	ec06                	sd	ra,24(sp)
+    8000363e:	e822                	sd	s0,16(sp)
+    80003640:	e426                	sd	s1,8(sp)
+    80003642:	1000                	addi	s0,sp,32
+    80003644:	84aa                	mv	s1,a0
   acquire(&bcache.lock);
-    8000474a:	00014517          	auipc	a0,0x14
-    8000474e:	63e50513          	addi	a0,a0,1598 # 80018d88 <bcache>
-    80004752:	ffffc097          	auipc	ra,0xffffc
-    80004756:	492080e7          	jalr	1170(ra) # 80000be4 <acquire>
+    80003646:	00014517          	auipc	a0,0x14
+    8000364a:	5e250513          	addi	a0,a0,1506 # 80017c28 <bcache>
+    8000364e:	ffffd097          	auipc	ra,0xffffd
+    80003652:	596080e7          	jalr	1430(ra) # 80000be4 <acquire>
   b->refcnt--;
-    8000475a:	40bc                	lw	a5,64(s1)
-    8000475c:	37fd                	addiw	a5,a5,-1
-    8000475e:	c0bc                	sw	a5,64(s1)
+    80003656:	40bc                	lw	a5,64(s1)
+    80003658:	37fd                	addiw	a5,a5,-1
+    8000365a:	c0bc                	sw	a5,64(s1)
   release(&bcache.lock);
-    80004760:	00014517          	auipc	a0,0x14
-    80004764:	62850513          	addi	a0,a0,1576 # 80018d88 <bcache>
-    80004768:	ffffc097          	auipc	ra,0xffffc
-    8000476c:	530080e7          	jalr	1328(ra) # 80000c98 <release>
+    8000365c:	00014517          	auipc	a0,0x14
+    80003660:	5cc50513          	addi	a0,a0,1484 # 80017c28 <bcache>
+    80003664:	ffffd097          	auipc	ra,0xffffd
+    80003668:	634080e7          	jalr	1588(ra) # 80000c98 <release>
 }
-    80004770:	60e2                	ld	ra,24(sp)
-    80004772:	6442                	ld	s0,16(sp)
-    80004774:	64a2                	ld	s1,8(sp)
-    80004776:	6105                	addi	sp,sp,32
-    80004778:	8082                	ret
+    8000366c:	60e2                	ld	ra,24(sp)
+    8000366e:	6442                	ld	s0,16(sp)
+    80003670:	64a2                	ld	s1,8(sp)
+    80003672:	6105                	addi	sp,sp,32
+    80003674:	8082                	ret
 
-000000008000477a <bfree>:
+0000000080003676 <bfree>:
 }
 
 // Free a disk block.
 static void
 bfree(int dev, uint b)
 {
-    8000477a:	1101                	addi	sp,sp,-32
-    8000477c:	ec06                	sd	ra,24(sp)
-    8000477e:	e822                	sd	s0,16(sp)
-    80004780:	e426                	sd	s1,8(sp)
-    80004782:	e04a                	sd	s2,0(sp)
-    80004784:	1000                	addi	s0,sp,32
-    80004786:	84ae                	mv	s1,a1
+    80003676:	1101                	addi	sp,sp,-32
+    80003678:	ec06                	sd	ra,24(sp)
+    8000367a:	e822                	sd	s0,16(sp)
+    8000367c:	e426                	sd	s1,8(sp)
+    8000367e:	e04a                	sd	s2,0(sp)
+    80003680:	1000                	addi	s0,sp,32
+    80003682:	84ae                	mv	s1,a1
   struct buf *bp;
   int bi, m;
 
   bp = bread(dev, BBLOCK(b, sb));
-    80004788:	00d5d59b          	srliw	a1,a1,0xd
-    8000478c:	0001d797          	auipc	a5,0x1d
-    80004790:	cd87a783          	lw	a5,-808(a5) # 80021464 <sb+0x1c>
-    80004794:	9dbd                	addw	a1,a1,a5
-    80004796:	00000097          	auipc	ra,0x0
-    8000479a:	d9e080e7          	jalr	-610(ra) # 80004534 <bread>
+    80003684:	00d5d59b          	srliw	a1,a1,0xd
+    80003688:	0001d797          	auipc	a5,0x1d
+    8000368c:	c7c7a783          	lw	a5,-900(a5) # 80020304 <sb+0x1c>
+    80003690:	9dbd                	addw	a1,a1,a5
+    80003692:	00000097          	auipc	ra,0x0
+    80003696:	d9e080e7          	jalr	-610(ra) # 80003430 <bread>
   bi = b % BPB;
   m = 1 << (bi % 8);
-    8000479e:	0074f713          	andi	a4,s1,7
-    800047a2:	4785                	li	a5,1
-    800047a4:	00e797bb          	sllw	a5,a5,a4
+    8000369a:	0074f713          	andi	a4,s1,7
+    8000369e:	4785                	li	a5,1
+    800036a0:	00e797bb          	sllw	a5,a5,a4
   if((bp->data[bi/8] & m) == 0)
-    800047a8:	14ce                	slli	s1,s1,0x33
-    800047aa:	90d9                	srli	s1,s1,0x36
-    800047ac:	00950733          	add	a4,a0,s1
-    800047b0:	05874703          	lbu	a4,88(a4)
-    800047b4:	00e7f6b3          	and	a3,a5,a4
-    800047b8:	c69d                	beqz	a3,800047e6 <bfree+0x6c>
-    800047ba:	892a                	mv	s2,a0
+    800036a4:	14ce                	slli	s1,s1,0x33
+    800036a6:	90d9                	srli	s1,s1,0x36
+    800036a8:	00950733          	add	a4,a0,s1
+    800036ac:	05874703          	lbu	a4,88(a4)
+    800036b0:	00e7f6b3          	and	a3,a5,a4
+    800036b4:	c69d                	beqz	a3,800036e2 <bfree+0x6c>
+    800036b6:	892a                	mv	s2,a0
     panic("freeing free block");
   bp->data[bi/8] &= ~m;
-    800047bc:	94aa                	add	s1,s1,a0
-    800047be:	fff7c793          	not	a5,a5
-    800047c2:	8ff9                	and	a5,a5,a4
-    800047c4:	04f48c23          	sb	a5,88(s1)
+    800036b8:	94aa                	add	s1,s1,a0
+    800036ba:	fff7c793          	not	a5,a5
+    800036be:	8ff9                	and	a5,a5,a4
+    800036c0:	04f48c23          	sb	a5,88(s1)
   log_write(bp);
-    800047c8:	00001097          	auipc	ra,0x1
-    800047cc:	118080e7          	jalr	280(ra) # 800058e0 <log_write>
+    800036c4:	00001097          	auipc	ra,0x1
+    800036c8:	118080e7          	jalr	280(ra) # 800047dc <log_write>
   brelse(bp);
-    800047d0:	854a                	mv	a0,s2
-    800047d2:	00000097          	auipc	ra,0x0
-    800047d6:	e92080e7          	jalr	-366(ra) # 80004664 <brelse>
-}
-    800047da:	60e2                	ld	ra,24(sp)
-    800047dc:	6442                	ld	s0,16(sp)
-    800047de:	64a2                	ld	s1,8(sp)
-    800047e0:	6902                	ld	s2,0(sp)
-    800047e2:	6105                	addi	sp,sp,32
-    800047e4:	8082                	ret
+    800036cc:	854a                	mv	a0,s2
+    800036ce:	00000097          	auipc	ra,0x0
+    800036d2:	e92080e7          	jalr	-366(ra) # 80003560 <brelse>
+}
+    800036d6:	60e2                	ld	ra,24(sp)
+    800036d8:	6442                	ld	s0,16(sp)
+    800036da:	64a2                	ld	s1,8(sp)
+    800036dc:	6902                	ld	s2,0(sp)
+    800036de:	6105                	addi	sp,sp,32
+    800036e0:	8082                	ret
     panic("freeing free block");
-    800047e6:	00005517          	auipc	a0,0x5
-    800047ea:	15250513          	addi	a0,a0,338 # 80009938 <syscalls+0x110>
-    800047ee:	ffffc097          	auipc	ra,0xffffc
-    800047f2:	d50080e7          	jalr	-688(ra) # 8000053e <panic>
-
-00000000800047f6 <balloc>:
-{
-    800047f6:	711d                	addi	sp,sp,-96
-    800047f8:	ec86                	sd	ra,88(sp)
-    800047fa:	e8a2                	sd	s0,80(sp)
-    800047fc:	e4a6                	sd	s1,72(sp)
-    800047fe:	e0ca                	sd	s2,64(sp)
-    80004800:	fc4e                	sd	s3,56(sp)
-    80004802:	f852                	sd	s4,48(sp)
-    80004804:	f456                	sd	s5,40(sp)
-    80004806:	f05a                	sd	s6,32(sp)
-    80004808:	ec5e                	sd	s7,24(sp)
-    8000480a:	e862                	sd	s8,16(sp)
-    8000480c:	e466                	sd	s9,8(sp)
-    8000480e:	1080                	addi	s0,sp,96
+    800036e2:	00005517          	auipc	a0,0x5
+    800036e6:	ee650513          	addi	a0,a0,-282 # 800085c8 <syscalls+0xf8>
+    800036ea:	ffffd097          	auipc	ra,0xffffd
+    800036ee:	e54080e7          	jalr	-428(ra) # 8000053e <panic>
+
+00000000800036f2 <balloc>:
+{
+    800036f2:	711d                	addi	sp,sp,-96
+    800036f4:	ec86                	sd	ra,88(sp)
+    800036f6:	e8a2                	sd	s0,80(sp)
+    800036f8:	e4a6                	sd	s1,72(sp)
+    800036fa:	e0ca                	sd	s2,64(sp)
+    800036fc:	fc4e                	sd	s3,56(sp)
+    800036fe:	f852                	sd	s4,48(sp)
+    80003700:	f456                	sd	s5,40(sp)
+    80003702:	f05a                	sd	s6,32(sp)
+    80003704:	ec5e                	sd	s7,24(sp)
+    80003706:	e862                	sd	s8,16(sp)
+    80003708:	e466                	sd	s9,8(sp)
+    8000370a:	1080                	addi	s0,sp,96
   for(b = 0; b < sb.size; b += BPB){
-    80004810:	0001d797          	auipc	a5,0x1d
-    80004814:	c3c7a783          	lw	a5,-964(a5) # 8002144c <sb+0x4>
-    80004818:	cbd1                	beqz	a5,800048ac <balloc+0xb6>
-    8000481a:	8baa                	mv	s7,a0
-    8000481c:	4a81                	li	s5,0
+    8000370c:	0001d797          	auipc	a5,0x1d
+    80003710:	be07a783          	lw	a5,-1056(a5) # 800202ec <sb+0x4>
+    80003714:	cbd1                	beqz	a5,800037a8 <balloc+0xb6>
+    80003716:	8baa                	mv	s7,a0
+    80003718:	4a81                	li	s5,0
     bp = bread(dev, BBLOCK(b, sb));
-    8000481e:	0001db17          	auipc	s6,0x1d
-    80004822:	c2ab0b13          	addi	s6,s6,-982 # 80021448 <sb>
+    8000371a:	0001db17          	auipc	s6,0x1d
+    8000371e:	bceb0b13          	addi	s6,s6,-1074 # 800202e8 <sb>
     for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
-    80004826:	4c01                	li	s8,0
+    80003722:	4c01                	li	s8,0
       m = 1 << (bi % 8);
-    80004828:	4985                	li	s3,1
+    80003724:	4985                	li	s3,1
     for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
-    8000482a:	6a09                	lui	s4,0x2
+    80003726:	6a09                	lui	s4,0x2
   for(b = 0; b < sb.size; b += BPB){
-    8000482c:	6c89                	lui	s9,0x2
-    8000482e:	a831                	j	8000484a <balloc+0x54>
+    80003728:	6c89                	lui	s9,0x2
+    8000372a:	a831                	j	80003746 <balloc+0x54>
     brelse(bp);
-    80004830:	854a                	mv	a0,s2
-    80004832:	00000097          	auipc	ra,0x0
-    80004836:	e32080e7          	jalr	-462(ra) # 80004664 <brelse>
+    8000372c:	854a                	mv	a0,s2
+    8000372e:	00000097          	auipc	ra,0x0
+    80003732:	e32080e7          	jalr	-462(ra) # 80003560 <brelse>
   for(b = 0; b < sb.size; b += BPB){
-    8000483a:	015c87bb          	addw	a5,s9,s5
-    8000483e:	00078a9b          	sext.w	s5,a5
-    80004842:	004b2703          	lw	a4,4(s6)
-    80004846:	06eaf363          	bgeu	s5,a4,800048ac <balloc+0xb6>
+    80003736:	015c87bb          	addw	a5,s9,s5
+    8000373a:	00078a9b          	sext.w	s5,a5
+    8000373e:	004b2703          	lw	a4,4(s6)
+    80003742:	06eaf363          	bgeu	s5,a4,800037a8 <balloc+0xb6>
     bp = bread(dev, BBLOCK(b, sb));
-    8000484a:	41fad79b          	sraiw	a5,s5,0x1f
-    8000484e:	0137d79b          	srliw	a5,a5,0x13
-    80004852:	015787bb          	addw	a5,a5,s5
-    80004856:	40d7d79b          	sraiw	a5,a5,0xd
-    8000485a:	01cb2583          	lw	a1,28(s6)
-    8000485e:	9dbd                	addw	a1,a1,a5
-    80004860:	855e                	mv	a0,s7
-    80004862:	00000097          	auipc	ra,0x0
-    80004866:	cd2080e7          	jalr	-814(ra) # 80004534 <bread>
-    8000486a:	892a                	mv	s2,a0
+    80003746:	41fad79b          	sraiw	a5,s5,0x1f
+    8000374a:	0137d79b          	srliw	a5,a5,0x13
+    8000374e:	015787bb          	addw	a5,a5,s5
+    80003752:	40d7d79b          	sraiw	a5,a5,0xd
+    80003756:	01cb2583          	lw	a1,28(s6)
+    8000375a:	9dbd                	addw	a1,a1,a5
+    8000375c:	855e                	mv	a0,s7
+    8000375e:	00000097          	auipc	ra,0x0
+    80003762:	cd2080e7          	jalr	-814(ra) # 80003430 <bread>
+    80003766:	892a                	mv	s2,a0
     for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
-    8000486c:	004b2503          	lw	a0,4(s6)
-    80004870:	000a849b          	sext.w	s1,s5
-    80004874:	8662                	mv	a2,s8
-    80004876:	faa4fde3          	bgeu	s1,a0,80004830 <balloc+0x3a>
+    80003768:	004b2503          	lw	a0,4(s6)
+    8000376c:	000a849b          	sext.w	s1,s5
+    80003770:	8662                	mv	a2,s8
+    80003772:	faa4fde3          	bgeu	s1,a0,8000372c <balloc+0x3a>
       m = 1 << (bi % 8);
-    8000487a:	41f6579b          	sraiw	a5,a2,0x1f
-    8000487e:	01d7d69b          	srliw	a3,a5,0x1d
-    80004882:	00c6873b          	addw	a4,a3,a2
-    80004886:	00777793          	andi	a5,a4,7
-    8000488a:	9f95                	subw	a5,a5,a3
-    8000488c:	00f997bb          	sllw	a5,s3,a5
+    80003776:	41f6579b          	sraiw	a5,a2,0x1f
+    8000377a:	01d7d69b          	srliw	a3,a5,0x1d
+    8000377e:	00c6873b          	addw	a4,a3,a2
+    80003782:	00777793          	andi	a5,a4,7
+    80003786:	9f95                	subw	a5,a5,a3
+    80003788:	00f997bb          	sllw	a5,s3,a5
       if((bp->data[bi/8] & m) == 0){  // Is block free?
-    80004890:	4037571b          	sraiw	a4,a4,0x3
-    80004894:	00e906b3          	add	a3,s2,a4
-    80004898:	0586c683          	lbu	a3,88(a3)
-    8000489c:	00d7f5b3          	and	a1,a5,a3
-    800048a0:	cd91                	beqz	a1,800048bc <balloc+0xc6>
+    8000378c:	4037571b          	sraiw	a4,a4,0x3
+    80003790:	00e906b3          	add	a3,s2,a4
+    80003794:	0586c683          	lbu	a3,88(a3)
+    80003798:	00d7f5b3          	and	a1,a5,a3
+    8000379c:	cd91                	beqz	a1,800037b8 <balloc+0xc6>
     for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
-    800048a2:	2605                	addiw	a2,a2,1
-    800048a4:	2485                	addiw	s1,s1,1
-    800048a6:	fd4618e3          	bne	a2,s4,80004876 <balloc+0x80>
-    800048aa:	b759                	j	80004830 <balloc+0x3a>
+    8000379e:	2605                	addiw	a2,a2,1
+    800037a0:	2485                	addiw	s1,s1,1
+    800037a2:	fd4618e3          	bne	a2,s4,80003772 <balloc+0x80>
+    800037a6:	b759                	j	8000372c <balloc+0x3a>
   panic("balloc: out of blocks");
-    800048ac:	00005517          	auipc	a0,0x5
-    800048b0:	0a450513          	addi	a0,a0,164 # 80009950 <syscalls+0x128>
-    800048b4:	ffffc097          	auipc	ra,0xffffc
-    800048b8:	c8a080e7          	jalr	-886(ra) # 8000053e <panic>
+    800037a8:	00005517          	auipc	a0,0x5
+    800037ac:	e3850513          	addi	a0,a0,-456 # 800085e0 <syscalls+0x110>
+    800037b0:	ffffd097          	auipc	ra,0xffffd
+    800037b4:	d8e080e7          	jalr	-626(ra) # 8000053e <panic>
         bp->data[bi/8] |= m;  // Mark block in use.
-    800048bc:	974a                	add	a4,a4,s2
-    800048be:	8fd5                	or	a5,a5,a3
-    800048c0:	04f70c23          	sb	a5,88(a4)
+    800037b8:	974a                	add	a4,a4,s2
+    800037ba:	8fd5                	or	a5,a5,a3
+    800037bc:	04f70c23          	sb	a5,88(a4)
         log_write(bp);
-    800048c4:	854a                	mv	a0,s2
-    800048c6:	00001097          	auipc	ra,0x1
-    800048ca:	01a080e7          	jalr	26(ra) # 800058e0 <log_write>
+    800037c0:	854a                	mv	a0,s2
+    800037c2:	00001097          	auipc	ra,0x1
+    800037c6:	01a080e7          	jalr	26(ra) # 800047dc <log_write>
         brelse(bp);
-    800048ce:	854a                	mv	a0,s2
-    800048d0:	00000097          	auipc	ra,0x0
-    800048d4:	d94080e7          	jalr	-620(ra) # 80004664 <brelse>
+    800037ca:	854a                	mv	a0,s2
+    800037cc:	00000097          	auipc	ra,0x0
+    800037d0:	d94080e7          	jalr	-620(ra) # 80003560 <brelse>
   bp = bread(dev, bno);
-    800048d8:	85a6                	mv	a1,s1
-    800048da:	855e                	mv	a0,s7
-    800048dc:	00000097          	auipc	ra,0x0
-    800048e0:	c58080e7          	jalr	-936(ra) # 80004534 <bread>
-    800048e4:	892a                	mv	s2,a0
+    800037d4:	85a6                	mv	a1,s1
+    800037d6:	855e                	mv	a0,s7
+    800037d8:	00000097          	auipc	ra,0x0
+    800037dc:	c58080e7          	jalr	-936(ra) # 80003430 <bread>
+    800037e0:	892a                	mv	s2,a0
   memset(bp->data, 0, BSIZE);
-    800048e6:	40000613          	li	a2,1024
-    800048ea:	4581                	li	a1,0
-    800048ec:	05850513          	addi	a0,a0,88
-    800048f0:	ffffc097          	auipc	ra,0xffffc
-    800048f4:	3f0080e7          	jalr	1008(ra) # 80000ce0 <memset>
+    800037e2:	40000613          	li	a2,1024
+    800037e6:	4581                	li	a1,0
+    800037e8:	05850513          	addi	a0,a0,88
+    800037ec:	ffffd097          	auipc	ra,0xffffd
+    800037f0:	4f4080e7          	jalr	1268(ra) # 80000ce0 <memset>
   log_write(bp);
-    800048f8:	854a                	mv	a0,s2
-    800048fa:	00001097          	auipc	ra,0x1
-    800048fe:	fe6080e7          	jalr	-26(ra) # 800058e0 <log_write>
+    800037f4:	854a                	mv	a0,s2
+    800037f6:	00001097          	auipc	ra,0x1
+    800037fa:	fe6080e7          	jalr	-26(ra) # 800047dc <log_write>
   brelse(bp);
-    80004902:	854a                	mv	a0,s2
-    80004904:	00000097          	auipc	ra,0x0
-    80004908:	d60080e7          	jalr	-672(ra) # 80004664 <brelse>
-}
-    8000490c:	8526                	mv	a0,s1
-    8000490e:	60e6                	ld	ra,88(sp)
-    80004910:	6446                	ld	s0,80(sp)
-    80004912:	64a6                	ld	s1,72(sp)
-    80004914:	6906                	ld	s2,64(sp)
-    80004916:	79e2                	ld	s3,56(sp)
-    80004918:	7a42                	ld	s4,48(sp)
-    8000491a:	7aa2                	ld	s5,40(sp)
-    8000491c:	7b02                	ld	s6,32(sp)
-    8000491e:	6be2                	ld	s7,24(sp)
-    80004920:	6c42                	ld	s8,16(sp)
-    80004922:	6ca2                	ld	s9,8(sp)
-    80004924:	6125                	addi	sp,sp,96
-    80004926:	8082                	ret
-
-0000000080004928 <bmap>:
+    800037fe:	854a                	mv	a0,s2
+    80003800:	00000097          	auipc	ra,0x0
+    80003804:	d60080e7          	jalr	-672(ra) # 80003560 <brelse>
+}
+    80003808:	8526                	mv	a0,s1
+    8000380a:	60e6                	ld	ra,88(sp)
+    8000380c:	6446                	ld	s0,80(sp)
+    8000380e:	64a6                	ld	s1,72(sp)
+    80003810:	6906                	ld	s2,64(sp)
+    80003812:	79e2                	ld	s3,56(sp)
+    80003814:	7a42                	ld	s4,48(sp)
+    80003816:	7aa2                	ld	s5,40(sp)
+    80003818:	7b02                	ld	s6,32(sp)
+    8000381a:	6be2                	ld	s7,24(sp)
+    8000381c:	6c42                	ld	s8,16(sp)
+    8000381e:	6ca2                	ld	s9,8(sp)
+    80003820:	6125                	addi	sp,sp,96
+    80003822:	8082                	ret
+
+0000000080003824 <bmap>:
 
 // Return the disk block address of the nth block in inode ip.
 // If there is no such block, bmap allocates one.
 static uint
 bmap(struct inode *ip, uint bn)
 {
-    80004928:	7179                	addi	sp,sp,-48
-    8000492a:	f406                	sd	ra,40(sp)
-    8000492c:	f022                	sd	s0,32(sp)
-    8000492e:	ec26                	sd	s1,24(sp)
-    80004930:	e84a                	sd	s2,16(sp)
-    80004932:	e44e                	sd	s3,8(sp)
-    80004934:	e052                	sd	s4,0(sp)
-    80004936:	1800                	addi	s0,sp,48
-    80004938:	892a                	mv	s2,a0
+    80003824:	7179                	addi	sp,sp,-48
+    80003826:	f406                	sd	ra,40(sp)
+    80003828:	f022                	sd	s0,32(sp)
+    8000382a:	ec26                	sd	s1,24(sp)
+    8000382c:	e84a                	sd	s2,16(sp)
+    8000382e:	e44e                	sd	s3,8(sp)
+    80003830:	e052                	sd	s4,0(sp)
+    80003832:	1800                	addi	s0,sp,48
+    80003834:	892a                	mv	s2,a0
   uint addr, *a;
   struct buf *bp;
 
   if(bn < NDIRECT){
-    8000493a:	47ad                	li	a5,11
-    8000493c:	04b7fe63          	bgeu	a5,a1,80004998 <bmap+0x70>
+    80003836:	47ad                	li	a5,11
+    80003838:	04b7fe63          	bgeu	a5,a1,80003894 <bmap+0x70>
     if((addr = ip->addrs[bn]) == 0)
       ip->addrs[bn] = addr = balloc(ip->dev);
     return addr;
   }
   bn -= NDIRECT;
-    80004940:	ff45849b          	addiw	s1,a1,-12
-    80004944:	0004871b          	sext.w	a4,s1
+    8000383c:	ff45849b          	addiw	s1,a1,-12
+    80003840:	0004871b          	sext.w	a4,s1
 
   if(bn < NINDIRECT){
-    80004948:	0ff00793          	li	a5,255
-    8000494c:	0ae7e363          	bltu	a5,a4,800049f2 <bmap+0xca>
+    80003844:	0ff00793          	li	a5,255
+    80003848:	0ae7e363          	bltu	a5,a4,800038ee <bmap+0xca>
     // Load indirect block, allocating if necessary.
     if((addr = ip->addrs[NDIRECT]) == 0)
-    80004950:	08052583          	lw	a1,128(a0)
-    80004954:	c5ad                	beqz	a1,800049be <bmap+0x96>
+    8000384c:	08052583          	lw	a1,128(a0)
+    80003850:	c5ad                	beqz	a1,800038ba <bmap+0x96>
       ip->addrs[NDIRECT] = addr = balloc(ip->dev);
     bp = bread(ip->dev, addr);
-    80004956:	00092503          	lw	a0,0(s2)
-    8000495a:	00000097          	auipc	ra,0x0
-    8000495e:	bda080e7          	jalr	-1062(ra) # 80004534 <bread>
-    80004962:	8a2a                	mv	s4,a0
+    80003852:	00092503          	lw	a0,0(s2)
+    80003856:	00000097          	auipc	ra,0x0
+    8000385a:	bda080e7          	jalr	-1062(ra) # 80003430 <bread>
+    8000385e:	8a2a                	mv	s4,a0
     a = (uint*)bp->data;
-    80004964:	05850793          	addi	a5,a0,88
+    80003860:	05850793          	addi	a5,a0,88
     if((addr = a[bn]) == 0){
-    80004968:	02049593          	slli	a1,s1,0x20
-    8000496c:	9181                	srli	a1,a1,0x20
-    8000496e:	058a                	slli	a1,a1,0x2
-    80004970:	00b784b3          	add	s1,a5,a1
-    80004974:	0004a983          	lw	s3,0(s1)
-    80004978:	04098d63          	beqz	s3,800049d2 <bmap+0xaa>
+    80003864:	02049593          	slli	a1,s1,0x20
+    80003868:	9181                	srli	a1,a1,0x20
+    8000386a:	058a                	slli	a1,a1,0x2
+    8000386c:	00b784b3          	add	s1,a5,a1
+    80003870:	0004a983          	lw	s3,0(s1)
+    80003874:	04098d63          	beqz	s3,800038ce <bmap+0xaa>
       a[bn] = addr = balloc(ip->dev);
       log_write(bp);
     }
     brelse(bp);
-    8000497c:	8552                	mv	a0,s4
-    8000497e:	00000097          	auipc	ra,0x0
-    80004982:	ce6080e7          	jalr	-794(ra) # 80004664 <brelse>
+    80003878:	8552                	mv	a0,s4
+    8000387a:	00000097          	auipc	ra,0x0
+    8000387e:	ce6080e7          	jalr	-794(ra) # 80003560 <brelse>
     return addr;
   }
 
   panic("bmap: out of range");
 }
-    80004986:	854e                	mv	a0,s3
-    80004988:	70a2                	ld	ra,40(sp)
-    8000498a:	7402                	ld	s0,32(sp)
-    8000498c:	64e2                	ld	s1,24(sp)
-    8000498e:	6942                	ld	s2,16(sp)
-    80004990:	69a2                	ld	s3,8(sp)
-    80004992:	6a02                	ld	s4,0(sp)
-    80004994:	6145                	addi	sp,sp,48
-    80004996:	8082                	ret
+    80003882:	854e                	mv	a0,s3
+    80003884:	70a2                	ld	ra,40(sp)
+    80003886:	7402                	ld	s0,32(sp)
+    80003888:	64e2                	ld	s1,24(sp)
+    8000388a:	6942                	ld	s2,16(sp)
+    8000388c:	69a2                	ld	s3,8(sp)
+    8000388e:	6a02                	ld	s4,0(sp)
+    80003890:	6145                	addi	sp,sp,48
+    80003892:	8082                	ret
     if((addr = ip->addrs[bn]) == 0)
-    80004998:	02059493          	slli	s1,a1,0x20
-    8000499c:	9081                	srli	s1,s1,0x20
-    8000499e:	048a                	slli	s1,s1,0x2
-    800049a0:	94aa                	add	s1,s1,a0
-    800049a2:	0504a983          	lw	s3,80(s1)
-    800049a6:	fe0990e3          	bnez	s3,80004986 <bmap+0x5e>
+    80003894:	02059493          	slli	s1,a1,0x20
+    80003898:	9081                	srli	s1,s1,0x20
+    8000389a:	048a                	slli	s1,s1,0x2
+    8000389c:	94aa                	add	s1,s1,a0
+    8000389e:	0504a983          	lw	s3,80(s1)
+    800038a2:	fe0990e3          	bnez	s3,80003882 <bmap+0x5e>
       ip->addrs[bn] = addr = balloc(ip->dev);
-    800049aa:	4108                	lw	a0,0(a0)
-    800049ac:	00000097          	auipc	ra,0x0
-    800049b0:	e4a080e7          	jalr	-438(ra) # 800047f6 <balloc>
-    800049b4:	0005099b          	sext.w	s3,a0
-    800049b8:	0534a823          	sw	s3,80(s1)
-    800049bc:	b7e9                	j	80004986 <bmap+0x5e>
+    800038a6:	4108                	lw	a0,0(a0)
+    800038a8:	00000097          	auipc	ra,0x0
+    800038ac:	e4a080e7          	jalr	-438(ra) # 800036f2 <balloc>
+    800038b0:	0005099b          	sext.w	s3,a0
+    800038b4:	0534a823          	sw	s3,80(s1)
+    800038b8:	b7e9                	j	80003882 <bmap+0x5e>
       ip->addrs[NDIRECT] = addr = balloc(ip->dev);
-    800049be:	4108                	lw	a0,0(a0)
-    800049c0:	00000097          	auipc	ra,0x0
-    800049c4:	e36080e7          	jalr	-458(ra) # 800047f6 <balloc>
-    800049c8:	0005059b          	sext.w	a1,a0
-    800049cc:	08b92023          	sw	a1,128(s2)
-    800049d0:	b759                	j	80004956 <bmap+0x2e>
+    800038ba:	4108                	lw	a0,0(a0)
+    800038bc:	00000097          	auipc	ra,0x0
+    800038c0:	e36080e7          	jalr	-458(ra) # 800036f2 <balloc>
+    800038c4:	0005059b          	sext.w	a1,a0
+    800038c8:	08b92023          	sw	a1,128(s2)
+    800038cc:	b759                	j	80003852 <bmap+0x2e>
       a[bn] = addr = balloc(ip->dev);
-    800049d2:	00092503          	lw	a0,0(s2)
-    800049d6:	00000097          	auipc	ra,0x0
-    800049da:	e20080e7          	jalr	-480(ra) # 800047f6 <balloc>
-    800049de:	0005099b          	sext.w	s3,a0
-    800049e2:	0134a023          	sw	s3,0(s1)
+    800038ce:	00092503          	lw	a0,0(s2)
+    800038d2:	00000097          	auipc	ra,0x0
+    800038d6:	e20080e7          	jalr	-480(ra) # 800036f2 <balloc>
+    800038da:	0005099b          	sext.w	s3,a0
+    800038de:	0134a023          	sw	s3,0(s1)
       log_write(bp);
-    800049e6:	8552                	mv	a0,s4
-    800049e8:	00001097          	auipc	ra,0x1
-    800049ec:	ef8080e7          	jalr	-264(ra) # 800058e0 <log_write>
-    800049f0:	b771                	j	8000497c <bmap+0x54>
+    800038e2:	8552                	mv	a0,s4
+    800038e4:	00001097          	auipc	ra,0x1
+    800038e8:	ef8080e7          	jalr	-264(ra) # 800047dc <log_write>
+    800038ec:	b771                	j	80003878 <bmap+0x54>
   panic("bmap: out of range");
-    800049f2:	00005517          	auipc	a0,0x5
-    800049f6:	f7650513          	addi	a0,a0,-138 # 80009968 <syscalls+0x140>
-    800049fa:	ffffc097          	auipc	ra,0xffffc
-    800049fe:	b44080e7          	jalr	-1212(ra) # 8000053e <panic>
-
-0000000080004a02 <iget>:
-{
-    80004a02:	7179                	addi	sp,sp,-48
-    80004a04:	f406                	sd	ra,40(sp)
-    80004a06:	f022                	sd	s0,32(sp)
-    80004a08:	ec26                	sd	s1,24(sp)
-    80004a0a:	e84a                	sd	s2,16(sp)
-    80004a0c:	e44e                	sd	s3,8(sp)
-    80004a0e:	e052                	sd	s4,0(sp)
-    80004a10:	1800                	addi	s0,sp,48
-    80004a12:	89aa                	mv	s3,a0
-    80004a14:	8a2e                	mv	s4,a1
+    800038ee:	00005517          	auipc	a0,0x5
+    800038f2:	d0a50513          	addi	a0,a0,-758 # 800085f8 <syscalls+0x128>
+    800038f6:	ffffd097          	auipc	ra,0xffffd
+    800038fa:	c48080e7          	jalr	-952(ra) # 8000053e <panic>
+
+00000000800038fe <iget>:
+{
+    800038fe:	7179                	addi	sp,sp,-48
+    80003900:	f406                	sd	ra,40(sp)
+    80003902:	f022                	sd	s0,32(sp)
+    80003904:	ec26                	sd	s1,24(sp)
+    80003906:	e84a                	sd	s2,16(sp)
+    80003908:	e44e                	sd	s3,8(sp)
+    8000390a:	e052                	sd	s4,0(sp)
+    8000390c:	1800                	addi	s0,sp,48
+    8000390e:	89aa                	mv	s3,a0
+    80003910:	8a2e                	mv	s4,a1
   acquire(&itable.lock);
-    80004a16:	0001d517          	auipc	a0,0x1d
-    80004a1a:	a5250513          	addi	a0,a0,-1454 # 80021468 <itable>
-    80004a1e:	ffffc097          	auipc	ra,0xffffc
-    80004a22:	1c6080e7          	jalr	454(ra) # 80000be4 <acquire>
+    80003912:	0001d517          	auipc	a0,0x1d
+    80003916:	9f650513          	addi	a0,a0,-1546 # 80020308 <itable>
+    8000391a:	ffffd097          	auipc	ra,0xffffd
+    8000391e:	2ca080e7          	jalr	714(ra) # 80000be4 <acquire>
   empty = 0;
-    80004a26:	4901                	li	s2,0
+    80003922:	4901                	li	s2,0
   for(ip = &itable.inode[0]; ip < &itable.inode[NINODE]; ip++){
-    80004a28:	0001d497          	auipc	s1,0x1d
-    80004a2c:	a5848493          	addi	s1,s1,-1448 # 80021480 <itable+0x18>
-    80004a30:	0001e697          	auipc	a3,0x1e
-    80004a34:	4e068693          	addi	a3,a3,1248 # 80022f10 <log>
-    80004a38:	a039                	j	80004a46 <iget+0x44>
+    80003924:	0001d497          	auipc	s1,0x1d
+    80003928:	9fc48493          	addi	s1,s1,-1540 # 80020320 <itable+0x18>
+    8000392c:	0001e697          	auipc	a3,0x1e
+    80003930:	48468693          	addi	a3,a3,1156 # 80021db0 <log>
+    80003934:	a039                	j	80003942 <iget+0x44>
     if(empty == 0 && ip->ref == 0)    // Remember empty slot.
-    80004a3a:	02090b63          	beqz	s2,80004a70 <iget+0x6e>
+    80003936:	02090b63          	beqz	s2,8000396c <iget+0x6e>
   for(ip = &itable.inode[0]; ip < &itable.inode[NINODE]; ip++){
-    80004a3e:	08848493          	addi	s1,s1,136
-    80004a42:	02d48a63          	beq	s1,a3,80004a76 <iget+0x74>
+    8000393a:	08848493          	addi	s1,s1,136
+    8000393e:	02d48a63          	beq	s1,a3,80003972 <iget+0x74>
     if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
-    80004a46:	449c                	lw	a5,8(s1)
-    80004a48:	fef059e3          	blez	a5,80004a3a <iget+0x38>
-    80004a4c:	4098                	lw	a4,0(s1)
-    80004a4e:	ff3716e3          	bne	a4,s3,80004a3a <iget+0x38>
-    80004a52:	40d8                	lw	a4,4(s1)
-    80004a54:	ff4713e3          	bne	a4,s4,80004a3a <iget+0x38>
+    80003942:	449c                	lw	a5,8(s1)
+    80003944:	fef059e3          	blez	a5,80003936 <iget+0x38>
+    80003948:	4098                	lw	a4,0(s1)
+    8000394a:	ff3716e3          	bne	a4,s3,80003936 <iget+0x38>
+    8000394e:	40d8                	lw	a4,4(s1)
+    80003950:	ff4713e3          	bne	a4,s4,80003936 <iget+0x38>
       ip->ref++;
-    80004a58:	2785                	addiw	a5,a5,1
-    80004a5a:	c49c                	sw	a5,8(s1)
+    80003954:	2785                	addiw	a5,a5,1
+    80003956:	c49c                	sw	a5,8(s1)
       release(&itable.lock);
-    80004a5c:	0001d517          	auipc	a0,0x1d
-    80004a60:	a0c50513          	addi	a0,a0,-1524 # 80021468 <itable>
-    80004a64:	ffffc097          	auipc	ra,0xffffc
-    80004a68:	234080e7          	jalr	564(ra) # 80000c98 <release>
+    80003958:	0001d517          	auipc	a0,0x1d
+    8000395c:	9b050513          	addi	a0,a0,-1616 # 80020308 <itable>
+    80003960:	ffffd097          	auipc	ra,0xffffd
+    80003964:	338080e7          	jalr	824(ra) # 80000c98 <release>
       return ip;
-    80004a6c:	8926                	mv	s2,s1
-    80004a6e:	a03d                	j	80004a9c <iget+0x9a>
+    80003968:	8926                	mv	s2,s1
+    8000396a:	a03d                	j	80003998 <iget+0x9a>
     if(empty == 0 && ip->ref == 0)    // Remember empty slot.
-    80004a70:	f7f9                	bnez	a5,80004a3e <iget+0x3c>
-    80004a72:	8926                	mv	s2,s1
-    80004a74:	b7e9                	j	80004a3e <iget+0x3c>
+    8000396c:	f7f9                	bnez	a5,8000393a <iget+0x3c>
+    8000396e:	8926                	mv	s2,s1
+    80003970:	b7e9                	j	8000393a <iget+0x3c>
   if(empty == 0)
-    80004a76:	02090c63          	beqz	s2,80004aae <iget+0xac>
+    80003972:	02090c63          	beqz	s2,800039aa <iget+0xac>
   ip->dev = dev;
-    80004a7a:	01392023          	sw	s3,0(s2)
+    80003976:	01392023          	sw	s3,0(s2)
   ip->inum = inum;
-    80004a7e:	01492223          	sw	s4,4(s2)
+    8000397a:	01492223          	sw	s4,4(s2)
   ip->ref = 1;
-    80004a82:	4785                	li	a5,1
-    80004a84:	00f92423          	sw	a5,8(s2)
+    8000397e:	4785                	li	a5,1
+    80003980:	00f92423          	sw	a5,8(s2)
   ip->valid = 0;
-    80004a88:	04092023          	sw	zero,64(s2)
+    80003984:	04092023          	sw	zero,64(s2)
   release(&itable.lock);
-    80004a8c:	0001d517          	auipc	a0,0x1d
-    80004a90:	9dc50513          	addi	a0,a0,-1572 # 80021468 <itable>
-    80004a94:	ffffc097          	auipc	ra,0xffffc
-    80004a98:	204080e7          	jalr	516(ra) # 80000c98 <release>
-}
-    80004a9c:	854a                	mv	a0,s2
-    80004a9e:	70a2                	ld	ra,40(sp)
-    80004aa0:	7402                	ld	s0,32(sp)
-    80004aa2:	64e2                	ld	s1,24(sp)
-    80004aa4:	6942                	ld	s2,16(sp)
-    80004aa6:	69a2                	ld	s3,8(sp)
-    80004aa8:	6a02                	ld	s4,0(sp)
-    80004aaa:	6145                	addi	sp,sp,48
-    80004aac:	8082                	ret
+    80003988:	0001d517          	auipc	a0,0x1d
+    8000398c:	98050513          	addi	a0,a0,-1664 # 80020308 <itable>
+    80003990:	ffffd097          	auipc	ra,0xffffd
+    80003994:	308080e7          	jalr	776(ra) # 80000c98 <release>
+}
+    80003998:	854a                	mv	a0,s2
+    8000399a:	70a2                	ld	ra,40(sp)
+    8000399c:	7402                	ld	s0,32(sp)
+    8000399e:	64e2                	ld	s1,24(sp)
+    800039a0:	6942                	ld	s2,16(sp)
+    800039a2:	69a2                	ld	s3,8(sp)
+    800039a4:	6a02                	ld	s4,0(sp)
+    800039a6:	6145                	addi	sp,sp,48
+    800039a8:	8082                	ret
     panic("iget: no inodes");
-    80004aae:	00005517          	auipc	a0,0x5
-    80004ab2:	ed250513          	addi	a0,a0,-302 # 80009980 <syscalls+0x158>
-    80004ab6:	ffffc097          	auipc	ra,0xffffc
-    80004aba:	a88080e7          	jalr	-1400(ra) # 8000053e <panic>
+    800039aa:	00005517          	auipc	a0,0x5
+    800039ae:	c6650513          	addi	a0,a0,-922 # 80008610 <syscalls+0x140>
+    800039b2:	ffffd097          	auipc	ra,0xffffd
+    800039b6:	b8c080e7          	jalr	-1140(ra) # 8000053e <panic>
 
-0000000080004abe <fsinit>:
+00000000800039ba <fsinit>:
 fsinit(int dev) {
-    80004abe:	7179                	addi	sp,sp,-48
-    80004ac0:	f406                	sd	ra,40(sp)
-    80004ac2:	f022                	sd	s0,32(sp)
-    80004ac4:	ec26                	sd	s1,24(sp)
-    80004ac6:	e84a                	sd	s2,16(sp)
-    80004ac8:	e44e                	sd	s3,8(sp)
-    80004aca:	1800                	addi	s0,sp,48
-    80004acc:	892a                	mv	s2,a0
+    800039ba:	7179                	addi	sp,sp,-48
+    800039bc:	f406                	sd	ra,40(sp)
+    800039be:	f022                	sd	s0,32(sp)
+    800039c0:	ec26                	sd	s1,24(sp)
+    800039c2:	e84a                	sd	s2,16(sp)
+    800039c4:	e44e                	sd	s3,8(sp)
+    800039c6:	1800                	addi	s0,sp,48
+    800039c8:	892a                	mv	s2,a0
   bp = bread(dev, 1);
-    80004ace:	4585                	li	a1,1
-    80004ad0:	00000097          	auipc	ra,0x0
-    80004ad4:	a64080e7          	jalr	-1436(ra) # 80004534 <bread>
-    80004ad8:	84aa                	mv	s1,a0
+    800039ca:	4585                	li	a1,1
+    800039cc:	00000097          	auipc	ra,0x0
+    800039d0:	a64080e7          	jalr	-1436(ra) # 80003430 <bread>
+    800039d4:	84aa                	mv	s1,a0
   memmove(sb, bp->data, sizeof(*sb));
-    80004ada:	0001d997          	auipc	s3,0x1d
-    80004ade:	96e98993          	addi	s3,s3,-1682 # 80021448 <sb>
-    80004ae2:	02000613          	li	a2,32
-    80004ae6:	05850593          	addi	a1,a0,88
-    80004aea:	854e                	mv	a0,s3
-    80004aec:	ffffc097          	auipc	ra,0xffffc
-    80004af0:	254080e7          	jalr	596(ra) # 80000d40 <memmove>
+    800039d6:	0001d997          	auipc	s3,0x1d
+    800039da:	91298993          	addi	s3,s3,-1774 # 800202e8 <sb>
+    800039de:	02000613          	li	a2,32
+    800039e2:	05850593          	addi	a1,a0,88
+    800039e6:	854e                	mv	a0,s3
+    800039e8:	ffffd097          	auipc	ra,0xffffd
+    800039ec:	358080e7          	jalr	856(ra) # 80000d40 <memmove>
   brelse(bp);
-    80004af4:	8526                	mv	a0,s1
-    80004af6:	00000097          	auipc	ra,0x0
-    80004afa:	b6e080e7          	jalr	-1170(ra) # 80004664 <brelse>
+    800039f0:	8526                	mv	a0,s1
+    800039f2:	00000097          	auipc	ra,0x0
+    800039f6:	b6e080e7          	jalr	-1170(ra) # 80003560 <brelse>
   if(sb.magic != FSMAGIC)
-    80004afe:	0009a703          	lw	a4,0(s3)
-    80004b02:	102037b7          	lui	a5,0x10203
-    80004b06:	04078793          	addi	a5,a5,64 # 10203040 <_entry-0x6fdfcfc0>
-    80004b0a:	02f71263          	bne	a4,a5,80004b2e <fsinit+0x70>
+    800039fa:	0009a703          	lw	a4,0(s3)
+    800039fe:	102037b7          	lui	a5,0x10203
+    80003a02:	04078793          	addi	a5,a5,64 # 10203040 <_entry-0x6fdfcfc0>
+    80003a06:	02f71263          	bne	a4,a5,80003a2a <fsinit+0x70>
   initlog(dev, &sb);
-    80004b0e:	0001d597          	auipc	a1,0x1d
-    80004b12:	93a58593          	addi	a1,a1,-1734 # 80021448 <sb>
-    80004b16:	854a                	mv	a0,s2
-    80004b18:	00001097          	auipc	ra,0x1
-    80004b1c:	b4c080e7          	jalr	-1204(ra) # 80005664 <initlog>
-}
-    80004b20:	70a2                	ld	ra,40(sp)
-    80004b22:	7402                	ld	s0,32(sp)
-    80004b24:	64e2                	ld	s1,24(sp)
-    80004b26:	6942                	ld	s2,16(sp)
-    80004b28:	69a2                	ld	s3,8(sp)
-    80004b2a:	6145                	addi	sp,sp,48
-    80004b2c:	8082                	ret
+    80003a0a:	0001d597          	auipc	a1,0x1d
+    80003a0e:	8de58593          	addi	a1,a1,-1826 # 800202e8 <sb>
+    80003a12:	854a                	mv	a0,s2
+    80003a14:	00001097          	auipc	ra,0x1
+    80003a18:	b4c080e7          	jalr	-1204(ra) # 80004560 <initlog>
+}
+    80003a1c:	70a2                	ld	ra,40(sp)
+    80003a1e:	7402                	ld	s0,32(sp)
+    80003a20:	64e2                	ld	s1,24(sp)
+    80003a22:	6942                	ld	s2,16(sp)
+    80003a24:	69a2                	ld	s3,8(sp)
+    80003a26:	6145                	addi	sp,sp,48
+    80003a28:	8082                	ret
     panic("invalid file system");
-    80004b2e:	00005517          	auipc	a0,0x5
-    80004b32:	e6250513          	addi	a0,a0,-414 # 80009990 <syscalls+0x168>
-    80004b36:	ffffc097          	auipc	ra,0xffffc
-    80004b3a:	a08080e7          	jalr	-1528(ra) # 8000053e <panic>
-
-0000000080004b3e <iinit>:
-{
-    80004b3e:	7179                	addi	sp,sp,-48
-    80004b40:	f406                	sd	ra,40(sp)
-    80004b42:	f022                	sd	s0,32(sp)
-    80004b44:	ec26                	sd	s1,24(sp)
-    80004b46:	e84a                	sd	s2,16(sp)
-    80004b48:	e44e                	sd	s3,8(sp)
-    80004b4a:	1800                	addi	s0,sp,48
+    80003a2a:	00005517          	auipc	a0,0x5
+    80003a2e:	bf650513          	addi	a0,a0,-1034 # 80008620 <syscalls+0x150>
+    80003a32:	ffffd097          	auipc	ra,0xffffd
+    80003a36:	b0c080e7          	jalr	-1268(ra) # 8000053e <panic>
+
+0000000080003a3a <iinit>:
+{
+    80003a3a:	7179                	addi	sp,sp,-48
+    80003a3c:	f406                	sd	ra,40(sp)
+    80003a3e:	f022                	sd	s0,32(sp)
+    80003a40:	ec26                	sd	s1,24(sp)
+    80003a42:	e84a                	sd	s2,16(sp)
+    80003a44:	e44e                	sd	s3,8(sp)
+    80003a46:	1800                	addi	s0,sp,48
   initlock(&itable.lock, "itable");
-    80004b4c:	00005597          	auipc	a1,0x5
-    80004b50:	e5c58593          	addi	a1,a1,-420 # 800099a8 <syscalls+0x180>
-    80004b54:	0001d517          	auipc	a0,0x1d
-    80004b58:	91450513          	addi	a0,a0,-1772 # 80021468 <itable>
-    80004b5c:	ffffc097          	auipc	ra,0xffffc
-    80004b60:	ff8080e7          	jalr	-8(ra) # 80000b54 <initlock>
+    80003a48:	00005597          	auipc	a1,0x5
+    80003a4c:	bf058593          	addi	a1,a1,-1040 # 80008638 <syscalls+0x168>
+    80003a50:	0001d517          	auipc	a0,0x1d
+    80003a54:	8b850513          	addi	a0,a0,-1864 # 80020308 <itable>
+    80003a58:	ffffd097          	auipc	ra,0xffffd
+    80003a5c:	0fc080e7          	jalr	252(ra) # 80000b54 <initlock>
   for(i = 0; i < NINODE; i++) {
-    80004b64:	0001d497          	auipc	s1,0x1d
-    80004b68:	92c48493          	addi	s1,s1,-1748 # 80021490 <itable+0x28>
-    80004b6c:	0001e997          	auipc	s3,0x1e
-    80004b70:	3b498993          	addi	s3,s3,948 # 80022f20 <log+0x10>
+    80003a60:	0001d497          	auipc	s1,0x1d
+    80003a64:	8d048493          	addi	s1,s1,-1840 # 80020330 <itable+0x28>
+    80003a68:	0001e997          	auipc	s3,0x1e
+    80003a6c:	35898993          	addi	s3,s3,856 # 80021dc0 <log+0x10>
     initsleeplock(&itable.inode[i].lock, "inode");
-    80004b74:	00005917          	auipc	s2,0x5
-    80004b78:	e3c90913          	addi	s2,s2,-452 # 800099b0 <syscalls+0x188>
-    80004b7c:	85ca                	mv	a1,s2
-    80004b7e:	8526                	mv	a0,s1
-    80004b80:	00001097          	auipc	ra,0x1
-    80004b84:	e46080e7          	jalr	-442(ra) # 800059c6 <initsleeplock>
+    80003a70:	00005917          	auipc	s2,0x5
+    80003a74:	bd090913          	addi	s2,s2,-1072 # 80008640 <syscalls+0x170>
+    80003a78:	85ca                	mv	a1,s2
+    80003a7a:	8526                	mv	a0,s1
+    80003a7c:	00001097          	auipc	ra,0x1
+    80003a80:	e46080e7          	jalr	-442(ra) # 800048c2 <initsleeplock>
   for(i = 0; i < NINODE; i++) {
-    80004b88:	08848493          	addi	s1,s1,136
-    80004b8c:	ff3498e3          	bne	s1,s3,80004b7c <iinit+0x3e>
-}
-    80004b90:	70a2                	ld	ra,40(sp)
-    80004b92:	7402                	ld	s0,32(sp)
-    80004b94:	64e2                	ld	s1,24(sp)
-    80004b96:	6942                	ld	s2,16(sp)
-    80004b98:	69a2                	ld	s3,8(sp)
-    80004b9a:	6145                	addi	sp,sp,48
-    80004b9c:	8082                	ret
-
-0000000080004b9e <ialloc>:
-{
-    80004b9e:	715d                	addi	sp,sp,-80
-    80004ba0:	e486                	sd	ra,72(sp)
-    80004ba2:	e0a2                	sd	s0,64(sp)
-    80004ba4:	fc26                	sd	s1,56(sp)
-    80004ba6:	f84a                	sd	s2,48(sp)
-    80004ba8:	f44e                	sd	s3,40(sp)
-    80004baa:	f052                	sd	s4,32(sp)
-    80004bac:	ec56                	sd	s5,24(sp)
-    80004bae:	e85a                	sd	s6,16(sp)
-    80004bb0:	e45e                	sd	s7,8(sp)
-    80004bb2:	0880                	addi	s0,sp,80
+    80003a84:	08848493          	addi	s1,s1,136
+    80003a88:	ff3498e3          	bne	s1,s3,80003a78 <iinit+0x3e>
+}
+    80003a8c:	70a2                	ld	ra,40(sp)
+    80003a8e:	7402                	ld	s0,32(sp)
+    80003a90:	64e2                	ld	s1,24(sp)
+    80003a92:	6942                	ld	s2,16(sp)
+    80003a94:	69a2                	ld	s3,8(sp)
+    80003a96:	6145                	addi	sp,sp,48
+    80003a98:	8082                	ret
+
+0000000080003a9a <ialloc>:
+{
+    80003a9a:	715d                	addi	sp,sp,-80
+    80003a9c:	e486                	sd	ra,72(sp)
+    80003a9e:	e0a2                	sd	s0,64(sp)
+    80003aa0:	fc26                	sd	s1,56(sp)
+    80003aa2:	f84a                	sd	s2,48(sp)
+    80003aa4:	f44e                	sd	s3,40(sp)
+    80003aa6:	f052                	sd	s4,32(sp)
+    80003aa8:	ec56                	sd	s5,24(sp)
+    80003aaa:	e85a                	sd	s6,16(sp)
+    80003aac:	e45e                	sd	s7,8(sp)
+    80003aae:	0880                	addi	s0,sp,80
   for(inum = 1; inum < sb.ninodes; inum++){
-    80004bb4:	0001d717          	auipc	a4,0x1d
-    80004bb8:	8a072703          	lw	a4,-1888(a4) # 80021454 <sb+0xc>
-    80004bbc:	4785                	li	a5,1
-    80004bbe:	04e7fa63          	bgeu	a5,a4,80004c12 <ialloc+0x74>
-    80004bc2:	8aaa                	mv	s5,a0
-    80004bc4:	8bae                	mv	s7,a1
-    80004bc6:	4485                	li	s1,1
+    80003ab0:	0001d717          	auipc	a4,0x1d
+    80003ab4:	84472703          	lw	a4,-1980(a4) # 800202f4 <sb+0xc>
+    80003ab8:	4785                	li	a5,1
+    80003aba:	04e7fa63          	bgeu	a5,a4,80003b0e <ialloc+0x74>
+    80003abe:	8aaa                	mv	s5,a0
+    80003ac0:	8bae                	mv	s7,a1
+    80003ac2:	4485                	li	s1,1
     bp = bread(dev, IBLOCK(inum, sb));
-    80004bc8:	0001da17          	auipc	s4,0x1d
-    80004bcc:	880a0a13          	addi	s4,s4,-1920 # 80021448 <sb>
-    80004bd0:	00048b1b          	sext.w	s6,s1
-    80004bd4:	0044d593          	srli	a1,s1,0x4
-    80004bd8:	018a2783          	lw	a5,24(s4)
-    80004bdc:	9dbd                	addw	a1,a1,a5
-    80004bde:	8556                	mv	a0,s5
-    80004be0:	00000097          	auipc	ra,0x0
-    80004be4:	954080e7          	jalr	-1708(ra) # 80004534 <bread>
-    80004be8:	892a                	mv	s2,a0
+    80003ac4:	0001da17          	auipc	s4,0x1d
+    80003ac8:	824a0a13          	addi	s4,s4,-2012 # 800202e8 <sb>
+    80003acc:	00048b1b          	sext.w	s6,s1
+    80003ad0:	0044d593          	srli	a1,s1,0x4
+    80003ad4:	018a2783          	lw	a5,24(s4)
+    80003ad8:	9dbd                	addw	a1,a1,a5
+    80003ada:	8556                	mv	a0,s5
+    80003adc:	00000097          	auipc	ra,0x0
+    80003ae0:	954080e7          	jalr	-1708(ra) # 80003430 <bread>
+    80003ae4:	892a                	mv	s2,a0
     dip = (struct dinode*)bp->data + inum%IPB;
-    80004bea:	05850993          	addi	s3,a0,88
-    80004bee:	00f4f793          	andi	a5,s1,15
-    80004bf2:	079a                	slli	a5,a5,0x6
-    80004bf4:	99be                	add	s3,s3,a5
+    80003ae6:	05850993          	addi	s3,a0,88
+    80003aea:	00f4f793          	andi	a5,s1,15
+    80003aee:	079a                	slli	a5,a5,0x6
+    80003af0:	99be                	add	s3,s3,a5
     if(dip->type == 0){  // a free inode
-    80004bf6:	00099783          	lh	a5,0(s3)
-    80004bfa:	c785                	beqz	a5,80004c22 <ialloc+0x84>
+    80003af2:	00099783          	lh	a5,0(s3)
+    80003af6:	c785                	beqz	a5,80003b1e <ialloc+0x84>
     brelse(bp);
-    80004bfc:	00000097          	auipc	ra,0x0
-    80004c00:	a68080e7          	jalr	-1432(ra) # 80004664 <brelse>
+    80003af8:	00000097          	auipc	ra,0x0
+    80003afc:	a68080e7          	jalr	-1432(ra) # 80003560 <brelse>
   for(inum = 1; inum < sb.ninodes; inum++){
-    80004c04:	0485                	addi	s1,s1,1
-    80004c06:	00ca2703          	lw	a4,12(s4)
-    80004c0a:	0004879b          	sext.w	a5,s1
-    80004c0e:	fce7e1e3          	bltu	a5,a4,80004bd0 <ialloc+0x32>
+    80003b00:	0485                	addi	s1,s1,1
+    80003b02:	00ca2703          	lw	a4,12(s4)
+    80003b06:	0004879b          	sext.w	a5,s1
+    80003b0a:	fce7e1e3          	bltu	a5,a4,80003acc <ialloc+0x32>
   panic("ialloc: no inodes");
-    80004c12:	00005517          	auipc	a0,0x5
-    80004c16:	da650513          	addi	a0,a0,-602 # 800099b8 <syscalls+0x190>
-    80004c1a:	ffffc097          	auipc	ra,0xffffc
-    80004c1e:	924080e7          	jalr	-1756(ra) # 8000053e <panic>
+    80003b0e:	00005517          	auipc	a0,0x5
+    80003b12:	b3a50513          	addi	a0,a0,-1222 # 80008648 <syscalls+0x178>
+    80003b16:	ffffd097          	auipc	ra,0xffffd
+    80003b1a:	a28080e7          	jalr	-1496(ra) # 8000053e <panic>
       memset(dip, 0, sizeof(*dip));
-    80004c22:	04000613          	li	a2,64
-    80004c26:	4581                	li	a1,0
-    80004c28:	854e                	mv	a0,s3
-    80004c2a:	ffffc097          	auipc	ra,0xffffc
-    80004c2e:	0b6080e7          	jalr	182(ra) # 80000ce0 <memset>
+    80003b1e:	04000613          	li	a2,64
+    80003b22:	4581                	li	a1,0
+    80003b24:	854e                	mv	a0,s3
+    80003b26:	ffffd097          	auipc	ra,0xffffd
+    80003b2a:	1ba080e7          	jalr	442(ra) # 80000ce0 <memset>
       dip->type = type;
-    80004c32:	01799023          	sh	s7,0(s3)
+    80003b2e:	01799023          	sh	s7,0(s3)
       log_write(bp);   // mark it allocated on the disk
-    80004c36:	854a                	mv	a0,s2
-    80004c38:	00001097          	auipc	ra,0x1
-    80004c3c:	ca8080e7          	jalr	-856(ra) # 800058e0 <log_write>
+    80003b32:	854a                	mv	a0,s2
+    80003b34:	00001097          	auipc	ra,0x1
+    80003b38:	ca8080e7          	jalr	-856(ra) # 800047dc <log_write>
       brelse(bp);
-    80004c40:	854a                	mv	a0,s2
-    80004c42:	00000097          	auipc	ra,0x0
-    80004c46:	a22080e7          	jalr	-1502(ra) # 80004664 <brelse>
+    80003b3c:	854a                	mv	a0,s2
+    80003b3e:	00000097          	auipc	ra,0x0
+    80003b42:	a22080e7          	jalr	-1502(ra) # 80003560 <brelse>
       return iget(dev, inum);
-    80004c4a:	85da                	mv	a1,s6
-    80004c4c:	8556                	mv	a0,s5
-    80004c4e:	00000097          	auipc	ra,0x0
-    80004c52:	db4080e7          	jalr	-588(ra) # 80004a02 <iget>
-}
-    80004c56:	60a6                	ld	ra,72(sp)
-    80004c58:	6406                	ld	s0,64(sp)
-    80004c5a:	74e2                	ld	s1,56(sp)
-    80004c5c:	7942                	ld	s2,48(sp)
-    80004c5e:	79a2                	ld	s3,40(sp)
-    80004c60:	7a02                	ld	s4,32(sp)
-    80004c62:	6ae2                	ld	s5,24(sp)
-    80004c64:	6b42                	ld	s6,16(sp)
-    80004c66:	6ba2                	ld	s7,8(sp)
-    80004c68:	6161                	addi	sp,sp,80
-    80004c6a:	8082                	ret
-
-0000000080004c6c <iupdate>:
-{
-    80004c6c:	1101                	addi	sp,sp,-32
-    80004c6e:	ec06                	sd	ra,24(sp)
-    80004c70:	e822                	sd	s0,16(sp)
-    80004c72:	e426                	sd	s1,8(sp)
-    80004c74:	e04a                	sd	s2,0(sp)
-    80004c76:	1000                	addi	s0,sp,32
-    80004c78:	84aa                	mv	s1,a0
+    80003b46:	85da                	mv	a1,s6
+    80003b48:	8556                	mv	a0,s5
+    80003b4a:	00000097          	auipc	ra,0x0
+    80003b4e:	db4080e7          	jalr	-588(ra) # 800038fe <iget>
+}
+    80003b52:	60a6                	ld	ra,72(sp)
+    80003b54:	6406                	ld	s0,64(sp)
+    80003b56:	74e2                	ld	s1,56(sp)
+    80003b58:	7942                	ld	s2,48(sp)
+    80003b5a:	79a2                	ld	s3,40(sp)
+    80003b5c:	7a02                	ld	s4,32(sp)
+    80003b5e:	6ae2                	ld	s5,24(sp)
+    80003b60:	6b42                	ld	s6,16(sp)
+    80003b62:	6ba2                	ld	s7,8(sp)
+    80003b64:	6161                	addi	sp,sp,80
+    80003b66:	8082                	ret
+
+0000000080003b68 <iupdate>:
+{
+    80003b68:	1101                	addi	sp,sp,-32
+    80003b6a:	ec06                	sd	ra,24(sp)
+    80003b6c:	e822                	sd	s0,16(sp)
+    80003b6e:	e426                	sd	s1,8(sp)
+    80003b70:	e04a                	sd	s2,0(sp)
+    80003b72:	1000                	addi	s0,sp,32
+    80003b74:	84aa                	mv	s1,a0
   bp = bread(ip->dev, IBLOCK(ip->inum, sb));
-    80004c7a:	415c                	lw	a5,4(a0)
-    80004c7c:	0047d79b          	srliw	a5,a5,0x4
-    80004c80:	0001c597          	auipc	a1,0x1c
-    80004c84:	7e05a583          	lw	a1,2016(a1) # 80021460 <sb+0x18>
-    80004c88:	9dbd                	addw	a1,a1,a5
-    80004c8a:	4108                	lw	a0,0(a0)
-    80004c8c:	00000097          	auipc	ra,0x0
-    80004c90:	8a8080e7          	jalr	-1880(ra) # 80004534 <bread>
-    80004c94:	892a                	mv	s2,a0
+    80003b76:	415c                	lw	a5,4(a0)
+    80003b78:	0047d79b          	srliw	a5,a5,0x4
+    80003b7c:	0001c597          	auipc	a1,0x1c
+    80003b80:	7845a583          	lw	a1,1924(a1) # 80020300 <sb+0x18>
+    80003b84:	9dbd                	addw	a1,a1,a5
+    80003b86:	4108                	lw	a0,0(a0)
+    80003b88:	00000097          	auipc	ra,0x0
+    80003b8c:	8a8080e7          	jalr	-1880(ra) # 80003430 <bread>
+    80003b90:	892a                	mv	s2,a0
   dip = (struct dinode*)bp->data + ip->inum%IPB;
-    80004c96:	05850793          	addi	a5,a0,88
-    80004c9a:	40c8                	lw	a0,4(s1)
-    80004c9c:	893d                	andi	a0,a0,15
-    80004c9e:	051a                	slli	a0,a0,0x6
-    80004ca0:	953e                	add	a0,a0,a5
+    80003b92:	05850793          	addi	a5,a0,88
+    80003b96:	40c8                	lw	a0,4(s1)
+    80003b98:	893d                	andi	a0,a0,15
+    80003b9a:	051a                	slli	a0,a0,0x6
+    80003b9c:	953e                	add	a0,a0,a5
   dip->type = ip->type;
-    80004ca2:	04449703          	lh	a4,68(s1)
-    80004ca6:	00e51023          	sh	a4,0(a0)
+    80003b9e:	04449703          	lh	a4,68(s1)
+    80003ba2:	00e51023          	sh	a4,0(a0)
   dip->major = ip->major;
-    80004caa:	04649703          	lh	a4,70(s1)
-    80004cae:	00e51123          	sh	a4,2(a0)
+    80003ba6:	04649703          	lh	a4,70(s1)
+    80003baa:	00e51123          	sh	a4,2(a0)
   dip->minor = ip->minor;
-    80004cb2:	04849703          	lh	a4,72(s1)
-    80004cb6:	00e51223          	sh	a4,4(a0)
+    80003bae:	04849703          	lh	a4,72(s1)
+    80003bb2:	00e51223          	sh	a4,4(a0)
   dip->nlink = ip->nlink;
-    80004cba:	04a49703          	lh	a4,74(s1)
-    80004cbe:	00e51323          	sh	a4,6(a0)
+    80003bb6:	04a49703          	lh	a4,74(s1)
+    80003bba:	00e51323          	sh	a4,6(a0)
   dip->size = ip->size;
-    80004cc2:	44f8                	lw	a4,76(s1)
-    80004cc4:	c518                	sw	a4,8(a0)
+    80003bbe:	44f8                	lw	a4,76(s1)
+    80003bc0:	c518                	sw	a4,8(a0)
   memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
-    80004cc6:	03400613          	li	a2,52
-    80004cca:	05048593          	addi	a1,s1,80
-    80004cce:	0531                	addi	a0,a0,12
-    80004cd0:	ffffc097          	auipc	ra,0xffffc
-    80004cd4:	070080e7          	jalr	112(ra) # 80000d40 <memmove>
+    80003bc2:	03400613          	li	a2,52
+    80003bc6:	05048593          	addi	a1,s1,80
+    80003bca:	0531                	addi	a0,a0,12
+    80003bcc:	ffffd097          	auipc	ra,0xffffd
+    80003bd0:	174080e7          	jalr	372(ra) # 80000d40 <memmove>
   log_write(bp);
-    80004cd8:	854a                	mv	a0,s2
-    80004cda:	00001097          	auipc	ra,0x1
-    80004cde:	c06080e7          	jalr	-1018(ra) # 800058e0 <log_write>
+    80003bd4:	854a                	mv	a0,s2
+    80003bd6:	00001097          	auipc	ra,0x1
+    80003bda:	c06080e7          	jalr	-1018(ra) # 800047dc <log_write>
   brelse(bp);
-    80004ce2:	854a                	mv	a0,s2
-    80004ce4:	00000097          	auipc	ra,0x0
-    80004ce8:	980080e7          	jalr	-1664(ra) # 80004664 <brelse>
-}
-    80004cec:	60e2                	ld	ra,24(sp)
-    80004cee:	6442                	ld	s0,16(sp)
-    80004cf0:	64a2                	ld	s1,8(sp)
-    80004cf2:	6902                	ld	s2,0(sp)
-    80004cf4:	6105                	addi	sp,sp,32
-    80004cf6:	8082                	ret
-
-0000000080004cf8 <idup>:
-{
-    80004cf8:	1101                	addi	sp,sp,-32
-    80004cfa:	ec06                	sd	ra,24(sp)
-    80004cfc:	e822                	sd	s0,16(sp)
-    80004cfe:	e426                	sd	s1,8(sp)
-    80004d00:	1000                	addi	s0,sp,32
-    80004d02:	84aa                	mv	s1,a0
+    80003bde:	854a                	mv	a0,s2
+    80003be0:	00000097          	auipc	ra,0x0
+    80003be4:	980080e7          	jalr	-1664(ra) # 80003560 <brelse>
+}
+    80003be8:	60e2                	ld	ra,24(sp)
+    80003bea:	6442                	ld	s0,16(sp)
+    80003bec:	64a2                	ld	s1,8(sp)
+    80003bee:	6902                	ld	s2,0(sp)
+    80003bf0:	6105                	addi	sp,sp,32
+    80003bf2:	8082                	ret
+
+0000000080003bf4 <idup>:
+{
+    80003bf4:	1101                	addi	sp,sp,-32
+    80003bf6:	ec06                	sd	ra,24(sp)
+    80003bf8:	e822                	sd	s0,16(sp)
+    80003bfa:	e426                	sd	s1,8(sp)
+    80003bfc:	1000                	addi	s0,sp,32
+    80003bfe:	84aa                	mv	s1,a0
   acquire(&itable.lock);
-    80004d04:	0001c517          	auipc	a0,0x1c
-    80004d08:	76450513          	addi	a0,a0,1892 # 80021468 <itable>
-    80004d0c:	ffffc097          	auipc	ra,0xffffc
-    80004d10:	ed8080e7          	jalr	-296(ra) # 80000be4 <acquire>
+    80003c00:	0001c517          	auipc	a0,0x1c
+    80003c04:	70850513          	addi	a0,a0,1800 # 80020308 <itable>
+    80003c08:	ffffd097          	auipc	ra,0xffffd
+    80003c0c:	fdc080e7          	jalr	-36(ra) # 80000be4 <acquire>
   ip->ref++;
-    80004d14:	449c                	lw	a5,8(s1)
-    80004d16:	2785                	addiw	a5,a5,1
-    80004d18:	c49c                	sw	a5,8(s1)
+    80003c10:	449c                	lw	a5,8(s1)
+    80003c12:	2785                	addiw	a5,a5,1
+    80003c14:	c49c                	sw	a5,8(s1)
   release(&itable.lock);
-    80004d1a:	0001c517          	auipc	a0,0x1c
-    80004d1e:	74e50513          	addi	a0,a0,1870 # 80021468 <itable>
-    80004d22:	ffffc097          	auipc	ra,0xffffc
-    80004d26:	f76080e7          	jalr	-138(ra) # 80000c98 <release>
-}
-    80004d2a:	8526                	mv	a0,s1
-    80004d2c:	60e2                	ld	ra,24(sp)
-    80004d2e:	6442                	ld	s0,16(sp)
-    80004d30:	64a2                	ld	s1,8(sp)
-    80004d32:	6105                	addi	sp,sp,32
-    80004d34:	8082                	ret
-
-0000000080004d36 <ilock>:
-{
-    80004d36:	1101                	addi	sp,sp,-32
-    80004d38:	ec06                	sd	ra,24(sp)
-    80004d3a:	e822                	sd	s0,16(sp)
-    80004d3c:	e426                	sd	s1,8(sp)
-    80004d3e:	e04a                	sd	s2,0(sp)
-    80004d40:	1000                	addi	s0,sp,32
+    80003c16:	0001c517          	auipc	a0,0x1c
+    80003c1a:	6f250513          	addi	a0,a0,1778 # 80020308 <itable>
+    80003c1e:	ffffd097          	auipc	ra,0xffffd
+    80003c22:	07a080e7          	jalr	122(ra) # 80000c98 <release>
+}
+    80003c26:	8526                	mv	a0,s1
+    80003c28:	60e2                	ld	ra,24(sp)
+    80003c2a:	6442                	ld	s0,16(sp)
+    80003c2c:	64a2                	ld	s1,8(sp)
+    80003c2e:	6105                	addi	sp,sp,32
+    80003c30:	8082                	ret
+
+0000000080003c32 <ilock>:
+{
+    80003c32:	1101                	addi	sp,sp,-32
+    80003c34:	ec06                	sd	ra,24(sp)
+    80003c36:	e822                	sd	s0,16(sp)
+    80003c38:	e426                	sd	s1,8(sp)
+    80003c3a:	e04a                	sd	s2,0(sp)
+    80003c3c:	1000                	addi	s0,sp,32
   if(ip == 0 || ip->ref < 1)
-    80004d42:	c115                	beqz	a0,80004d66 <ilock+0x30>
-    80004d44:	84aa                	mv	s1,a0
-    80004d46:	451c                	lw	a5,8(a0)
-    80004d48:	00f05f63          	blez	a5,80004d66 <ilock+0x30>
+    80003c3e:	c115                	beqz	a0,80003c62 <ilock+0x30>
+    80003c40:	84aa                	mv	s1,a0
+    80003c42:	451c                	lw	a5,8(a0)
+    80003c44:	00f05f63          	blez	a5,80003c62 <ilock+0x30>
   acquiresleep(&ip->lock);
-    80004d4c:	0541                	addi	a0,a0,16
-    80004d4e:	00001097          	auipc	ra,0x1
-    80004d52:	cb2080e7          	jalr	-846(ra) # 80005a00 <acquiresleep>
+    80003c48:	0541                	addi	a0,a0,16
+    80003c4a:	00001097          	auipc	ra,0x1
+    80003c4e:	cb2080e7          	jalr	-846(ra) # 800048fc <acquiresleep>
   if(ip->valid == 0){
-    80004d56:	40bc                	lw	a5,64(s1)
-    80004d58:	cf99                	beqz	a5,80004d76 <ilock+0x40>
-}
-    80004d5a:	60e2                	ld	ra,24(sp)
-    80004d5c:	6442                	ld	s0,16(sp)
-    80004d5e:	64a2                	ld	s1,8(sp)
-    80004d60:	6902                	ld	s2,0(sp)
-    80004d62:	6105                	addi	sp,sp,32
-    80004d64:	8082                	ret
+    80003c52:	40bc                	lw	a5,64(s1)
+    80003c54:	cf99                	beqz	a5,80003c72 <ilock+0x40>
+}
+    80003c56:	60e2                	ld	ra,24(sp)
+    80003c58:	6442                	ld	s0,16(sp)
+    80003c5a:	64a2                	ld	s1,8(sp)
+    80003c5c:	6902                	ld	s2,0(sp)
+    80003c5e:	6105                	addi	sp,sp,32
+    80003c60:	8082                	ret
     panic("ilock");
-    80004d66:	00005517          	auipc	a0,0x5
-    80004d6a:	c6a50513          	addi	a0,a0,-918 # 800099d0 <syscalls+0x1a8>
-    80004d6e:	ffffb097          	auipc	ra,0xffffb
-    80004d72:	7d0080e7          	jalr	2000(ra) # 8000053e <panic>
+    80003c62:	00005517          	auipc	a0,0x5
+    80003c66:	9fe50513          	addi	a0,a0,-1538 # 80008660 <syscalls+0x190>
+    80003c6a:	ffffd097          	auipc	ra,0xffffd
+    80003c6e:	8d4080e7          	jalr	-1836(ra) # 8000053e <panic>
     bp = bread(ip->dev, IBLOCK(ip->inum, sb));
-    80004d76:	40dc                	lw	a5,4(s1)
-    80004d78:	0047d79b          	srliw	a5,a5,0x4
-    80004d7c:	0001c597          	auipc	a1,0x1c
-    80004d80:	6e45a583          	lw	a1,1764(a1) # 80021460 <sb+0x18>
-    80004d84:	9dbd                	addw	a1,a1,a5
-    80004d86:	4088                	lw	a0,0(s1)
-    80004d88:	fffff097          	auipc	ra,0xfffff
-    80004d8c:	7ac080e7          	jalr	1964(ra) # 80004534 <bread>
-    80004d90:	892a                	mv	s2,a0
+    80003c72:	40dc                	lw	a5,4(s1)
+    80003c74:	0047d79b          	srliw	a5,a5,0x4
+    80003c78:	0001c597          	auipc	a1,0x1c
+    80003c7c:	6885a583          	lw	a1,1672(a1) # 80020300 <sb+0x18>
+    80003c80:	9dbd                	addw	a1,a1,a5
+    80003c82:	4088                	lw	a0,0(s1)
+    80003c84:	fffff097          	auipc	ra,0xfffff
+    80003c88:	7ac080e7          	jalr	1964(ra) # 80003430 <bread>
+    80003c8c:	892a                	mv	s2,a0
     dip = (struct dinode*)bp->data + ip->inum%IPB;
-    80004d92:	05850593          	addi	a1,a0,88
-    80004d96:	40dc                	lw	a5,4(s1)
-    80004d98:	8bbd                	andi	a5,a5,15
-    80004d9a:	079a                	slli	a5,a5,0x6
-    80004d9c:	95be                	add	a1,a1,a5
+    80003c8e:	05850593          	addi	a1,a0,88
+    80003c92:	40dc                	lw	a5,4(s1)
+    80003c94:	8bbd                	andi	a5,a5,15
+    80003c96:	079a                	slli	a5,a5,0x6
+    80003c98:	95be                	add	a1,a1,a5
     ip->type = dip->type;
-    80004d9e:	00059783          	lh	a5,0(a1)
-    80004da2:	04f49223          	sh	a5,68(s1)
+    80003c9a:	00059783          	lh	a5,0(a1)
+    80003c9e:	04f49223          	sh	a5,68(s1)
     ip->major = dip->major;
-    80004da6:	00259783          	lh	a5,2(a1)
-    80004daa:	04f49323          	sh	a5,70(s1)
+    80003ca2:	00259783          	lh	a5,2(a1)
+    80003ca6:	04f49323          	sh	a5,70(s1)
     ip->minor = dip->minor;
-    80004dae:	00459783          	lh	a5,4(a1)
-    80004db2:	04f49423          	sh	a5,72(s1)
+    80003caa:	00459783          	lh	a5,4(a1)
+    80003cae:	04f49423          	sh	a5,72(s1)
     ip->nlink = dip->nlink;
-    80004db6:	00659783          	lh	a5,6(a1)
-    80004dba:	04f49523          	sh	a5,74(s1)
+    80003cb2:	00659783          	lh	a5,6(a1)
+    80003cb6:	04f49523          	sh	a5,74(s1)
     ip->size = dip->size;
-    80004dbe:	459c                	lw	a5,8(a1)
-    80004dc0:	c4fc                	sw	a5,76(s1)
+    80003cba:	459c                	lw	a5,8(a1)
+    80003cbc:	c4fc                	sw	a5,76(s1)
     memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
-    80004dc2:	03400613          	li	a2,52
-    80004dc6:	05b1                	addi	a1,a1,12
-    80004dc8:	05048513          	addi	a0,s1,80
-    80004dcc:	ffffc097          	auipc	ra,0xffffc
-    80004dd0:	f74080e7          	jalr	-140(ra) # 80000d40 <memmove>
+    80003cbe:	03400613          	li	a2,52
+    80003cc2:	05b1                	addi	a1,a1,12
+    80003cc4:	05048513          	addi	a0,s1,80
+    80003cc8:	ffffd097          	auipc	ra,0xffffd
+    80003ccc:	078080e7          	jalr	120(ra) # 80000d40 <memmove>
     brelse(bp);
-    80004dd4:	854a                	mv	a0,s2
-    80004dd6:	00000097          	auipc	ra,0x0
-    80004dda:	88e080e7          	jalr	-1906(ra) # 80004664 <brelse>
+    80003cd0:	854a                	mv	a0,s2
+    80003cd2:	00000097          	auipc	ra,0x0
+    80003cd6:	88e080e7          	jalr	-1906(ra) # 80003560 <brelse>
     ip->valid = 1;
-    80004dde:	4785                	li	a5,1
-    80004de0:	c0bc                	sw	a5,64(s1)
+    80003cda:	4785                	li	a5,1
+    80003cdc:	c0bc                	sw	a5,64(s1)
     if(ip->type == 0)
-    80004de2:	04449783          	lh	a5,68(s1)
-    80004de6:	fbb5                	bnez	a5,80004d5a <ilock+0x24>
+    80003cde:	04449783          	lh	a5,68(s1)
+    80003ce2:	fbb5                	bnez	a5,80003c56 <ilock+0x24>
       panic("ilock: no type");
-    80004de8:	00005517          	auipc	a0,0x5
-    80004dec:	bf050513          	addi	a0,a0,-1040 # 800099d8 <syscalls+0x1b0>
-    80004df0:	ffffb097          	auipc	ra,0xffffb
-    80004df4:	74e080e7          	jalr	1870(ra) # 8000053e <panic>
-
-0000000080004df8 <iunlock>:
-{
-    80004df8:	1101                	addi	sp,sp,-32
-    80004dfa:	ec06                	sd	ra,24(sp)
-    80004dfc:	e822                	sd	s0,16(sp)
-    80004dfe:	e426                	sd	s1,8(sp)
-    80004e00:	e04a                	sd	s2,0(sp)
-    80004e02:	1000                	addi	s0,sp,32
+    80003ce4:	00005517          	auipc	a0,0x5
+    80003ce8:	98450513          	addi	a0,a0,-1660 # 80008668 <syscalls+0x198>
+    80003cec:	ffffd097          	auipc	ra,0xffffd
+    80003cf0:	852080e7          	jalr	-1966(ra) # 8000053e <panic>
+
+0000000080003cf4 <iunlock>:
+{
+    80003cf4:	1101                	addi	sp,sp,-32
+    80003cf6:	ec06                	sd	ra,24(sp)
+    80003cf8:	e822                	sd	s0,16(sp)
+    80003cfa:	e426                	sd	s1,8(sp)
+    80003cfc:	e04a                	sd	s2,0(sp)
+    80003cfe:	1000                	addi	s0,sp,32
   if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
-    80004e04:	c905                	beqz	a0,80004e34 <iunlock+0x3c>
-    80004e06:	84aa                	mv	s1,a0
-    80004e08:	01050913          	addi	s2,a0,16
-    80004e0c:	854a                	mv	a0,s2
-    80004e0e:	00001097          	auipc	ra,0x1
-    80004e12:	c8c080e7          	jalr	-884(ra) # 80005a9a <holdingsleep>
-    80004e16:	cd19                	beqz	a0,80004e34 <iunlock+0x3c>
-    80004e18:	449c                	lw	a5,8(s1)
-    80004e1a:	00f05d63          	blez	a5,80004e34 <iunlock+0x3c>
+    80003d00:	c905                	beqz	a0,80003d30 <iunlock+0x3c>
+    80003d02:	84aa                	mv	s1,a0
+    80003d04:	01050913          	addi	s2,a0,16
+    80003d08:	854a                	mv	a0,s2
+    80003d0a:	00001097          	auipc	ra,0x1
+    80003d0e:	c8c080e7          	jalr	-884(ra) # 80004996 <holdingsleep>
+    80003d12:	cd19                	beqz	a0,80003d30 <iunlock+0x3c>
+    80003d14:	449c                	lw	a5,8(s1)
+    80003d16:	00f05d63          	blez	a5,80003d30 <iunlock+0x3c>
   releasesleep(&ip->lock);
-    80004e1e:	854a                	mv	a0,s2
-    80004e20:	00001097          	auipc	ra,0x1
-    80004e24:	c36080e7          	jalr	-970(ra) # 80005a56 <releasesleep>
-}
-    80004e28:	60e2                	ld	ra,24(sp)
-    80004e2a:	6442                	ld	s0,16(sp)
-    80004e2c:	64a2                	ld	s1,8(sp)
-    80004e2e:	6902                	ld	s2,0(sp)
-    80004e30:	6105                	addi	sp,sp,32
-    80004e32:	8082                	ret
+    80003d1a:	854a                	mv	a0,s2
+    80003d1c:	00001097          	auipc	ra,0x1
+    80003d20:	c36080e7          	jalr	-970(ra) # 80004952 <releasesleep>
+}
+    80003d24:	60e2                	ld	ra,24(sp)
+    80003d26:	6442                	ld	s0,16(sp)
+    80003d28:	64a2                	ld	s1,8(sp)
+    80003d2a:	6902                	ld	s2,0(sp)
+    80003d2c:	6105                	addi	sp,sp,32
+    80003d2e:	8082                	ret
     panic("iunlock");
-    80004e34:	00005517          	auipc	a0,0x5
-    80004e38:	bb450513          	addi	a0,a0,-1100 # 800099e8 <syscalls+0x1c0>
-    80004e3c:	ffffb097          	auipc	ra,0xffffb
-    80004e40:	702080e7          	jalr	1794(ra) # 8000053e <panic>
+    80003d30:	00005517          	auipc	a0,0x5
+    80003d34:	94850513          	addi	a0,a0,-1720 # 80008678 <syscalls+0x1a8>
+    80003d38:	ffffd097          	auipc	ra,0xffffd
+    80003d3c:	806080e7          	jalr	-2042(ra) # 8000053e <panic>
 
-0000000080004e44 <itrunc>:
+0000000080003d40 <itrunc>:
 
 // Truncate inode (discard contents).
 // Caller must hold ip->lock.
 void
 itrunc(struct inode *ip)
 {
-    80004e44:	7179                	addi	sp,sp,-48
-    80004e46:	f406                	sd	ra,40(sp)
-    80004e48:	f022                	sd	s0,32(sp)
-    80004e4a:	ec26                	sd	s1,24(sp)
-    80004e4c:	e84a                	sd	s2,16(sp)
-    80004e4e:	e44e                	sd	s3,8(sp)
-    80004e50:	e052                	sd	s4,0(sp)
-    80004e52:	1800                	addi	s0,sp,48
-    80004e54:	89aa                	mv	s3,a0
+    80003d40:	7179                	addi	sp,sp,-48
+    80003d42:	f406                	sd	ra,40(sp)
+    80003d44:	f022                	sd	s0,32(sp)
+    80003d46:	ec26                	sd	s1,24(sp)
+    80003d48:	e84a                	sd	s2,16(sp)
+    80003d4a:	e44e                	sd	s3,8(sp)
+    80003d4c:	e052                	sd	s4,0(sp)
+    80003d4e:	1800                	addi	s0,sp,48
+    80003d50:	89aa                	mv	s3,a0
   int i, j;
   struct buf *bp;
   uint *a;
 
   for(i = 0; i < NDIRECT; i++){
-    80004e56:	05050493          	addi	s1,a0,80
-    80004e5a:	08050913          	addi	s2,a0,128
-    80004e5e:	a021                	j	80004e66 <itrunc+0x22>
-    80004e60:	0491                	addi	s1,s1,4
-    80004e62:	01248d63          	beq	s1,s2,80004e7c <itrunc+0x38>
+    80003d52:	05050493          	addi	s1,a0,80
+    80003d56:	08050913          	addi	s2,a0,128
+    80003d5a:	a021                	j	80003d62 <itrunc+0x22>
+    80003d5c:	0491                	addi	s1,s1,4
+    80003d5e:	01248d63          	beq	s1,s2,80003d78 <itrunc+0x38>
     if(ip->addrs[i]){
-    80004e66:	408c                	lw	a1,0(s1)
-    80004e68:	dde5                	beqz	a1,80004e60 <itrunc+0x1c>
+    80003d62:	408c                	lw	a1,0(s1)
+    80003d64:	dde5                	beqz	a1,80003d5c <itrunc+0x1c>
       bfree(ip->dev, ip->addrs[i]);
-    80004e6a:	0009a503          	lw	a0,0(s3)
-    80004e6e:	00000097          	auipc	ra,0x0
-    80004e72:	90c080e7          	jalr	-1780(ra) # 8000477a <bfree>
+    80003d66:	0009a503          	lw	a0,0(s3)
+    80003d6a:	00000097          	auipc	ra,0x0
+    80003d6e:	90c080e7          	jalr	-1780(ra) # 80003676 <bfree>
       ip->addrs[i] = 0;
-    80004e76:	0004a023          	sw	zero,0(s1)
-    80004e7a:	b7dd                	j	80004e60 <itrunc+0x1c>
+    80003d72:	0004a023          	sw	zero,0(s1)
+    80003d76:	b7dd                	j	80003d5c <itrunc+0x1c>
     }
   }
 
   if(ip->addrs[NDIRECT]){
-    80004e7c:	0809a583          	lw	a1,128(s3)
-    80004e80:	e185                	bnez	a1,80004ea0 <itrunc+0x5c>
+    80003d78:	0809a583          	lw	a1,128(s3)
+    80003d7c:	e185                	bnez	a1,80003d9c <itrunc+0x5c>
     brelse(bp);
     bfree(ip->dev, ip->addrs[NDIRECT]);
     ip->addrs[NDIRECT] = 0;
   }
 
   ip->size = 0;
-    80004e82:	0409a623          	sw	zero,76(s3)
+    80003d7e:	0409a623          	sw	zero,76(s3)
   iupdate(ip);
-    80004e86:	854e                	mv	a0,s3
-    80004e88:	00000097          	auipc	ra,0x0
-    80004e8c:	de4080e7          	jalr	-540(ra) # 80004c6c <iupdate>
-}
-    80004e90:	70a2                	ld	ra,40(sp)
-    80004e92:	7402                	ld	s0,32(sp)
-    80004e94:	64e2                	ld	s1,24(sp)
-    80004e96:	6942                	ld	s2,16(sp)
-    80004e98:	69a2                	ld	s3,8(sp)
-    80004e9a:	6a02                	ld	s4,0(sp)
-    80004e9c:	6145                	addi	sp,sp,48
-    80004e9e:	8082                	ret
+    80003d82:	854e                	mv	a0,s3
+    80003d84:	00000097          	auipc	ra,0x0
+    80003d88:	de4080e7          	jalr	-540(ra) # 80003b68 <iupdate>
+}
+    80003d8c:	70a2                	ld	ra,40(sp)
+    80003d8e:	7402                	ld	s0,32(sp)
+    80003d90:	64e2                	ld	s1,24(sp)
+    80003d92:	6942                	ld	s2,16(sp)
+    80003d94:	69a2                	ld	s3,8(sp)
+    80003d96:	6a02                	ld	s4,0(sp)
+    80003d98:	6145                	addi	sp,sp,48
+    80003d9a:	8082                	ret
     bp = bread(ip->dev, ip->addrs[NDIRECT]);
-    80004ea0:	0009a503          	lw	a0,0(s3)
-    80004ea4:	fffff097          	auipc	ra,0xfffff
-    80004ea8:	690080e7          	jalr	1680(ra) # 80004534 <bread>
-    80004eac:	8a2a                	mv	s4,a0
+    80003d9c:	0009a503          	lw	a0,0(s3)
+    80003da0:	fffff097          	auipc	ra,0xfffff
+    80003da4:	690080e7          	jalr	1680(ra) # 80003430 <bread>
+    80003da8:	8a2a                	mv	s4,a0
     for(j = 0; j < NINDIRECT; j++){
-    80004eae:	05850493          	addi	s1,a0,88
-    80004eb2:	45850913          	addi	s2,a0,1112
-    80004eb6:	a811                	j	80004eca <itrunc+0x86>
+    80003daa:	05850493          	addi	s1,a0,88
+    80003dae:	45850913          	addi	s2,a0,1112
+    80003db2:	a811                	j	80003dc6 <itrunc+0x86>
         bfree(ip->dev, a[j]);
-    80004eb8:	0009a503          	lw	a0,0(s3)
-    80004ebc:	00000097          	auipc	ra,0x0
-    80004ec0:	8be080e7          	jalr	-1858(ra) # 8000477a <bfree>
+    80003db4:	0009a503          	lw	a0,0(s3)
+    80003db8:	00000097          	auipc	ra,0x0
+    80003dbc:	8be080e7          	jalr	-1858(ra) # 80003676 <bfree>
     for(j = 0; j < NINDIRECT; j++){
-    80004ec4:	0491                	addi	s1,s1,4
-    80004ec6:	01248563          	beq	s1,s2,80004ed0 <itrunc+0x8c>
+    80003dc0:	0491                	addi	s1,s1,4
+    80003dc2:	01248563          	beq	s1,s2,80003dcc <itrunc+0x8c>
       if(a[j])
-    80004eca:	408c                	lw	a1,0(s1)
-    80004ecc:	dde5                	beqz	a1,80004ec4 <itrunc+0x80>
-    80004ece:	b7ed                	j	80004eb8 <itrunc+0x74>
+    80003dc6:	408c                	lw	a1,0(s1)
+    80003dc8:	dde5                	beqz	a1,80003dc0 <itrunc+0x80>
+    80003dca:	b7ed                	j	80003db4 <itrunc+0x74>
     brelse(bp);
-    80004ed0:	8552                	mv	a0,s4
-    80004ed2:	fffff097          	auipc	ra,0xfffff
-    80004ed6:	792080e7          	jalr	1938(ra) # 80004664 <brelse>
+    80003dcc:	8552                	mv	a0,s4
+    80003dce:	fffff097          	auipc	ra,0xfffff
+    80003dd2:	792080e7          	jalr	1938(ra) # 80003560 <brelse>
     bfree(ip->dev, ip->addrs[NDIRECT]);
-    80004eda:	0809a583          	lw	a1,128(s3)
-    80004ede:	0009a503          	lw	a0,0(s3)
-    80004ee2:	00000097          	auipc	ra,0x0
-    80004ee6:	898080e7          	jalr	-1896(ra) # 8000477a <bfree>
+    80003dd6:	0809a583          	lw	a1,128(s3)
+    80003dda:	0009a503          	lw	a0,0(s3)
+    80003dde:	00000097          	auipc	ra,0x0
+    80003de2:	898080e7          	jalr	-1896(ra) # 80003676 <bfree>
     ip->addrs[NDIRECT] = 0;
-    80004eea:	0809a023          	sw	zero,128(s3)
-    80004eee:	bf51                	j	80004e82 <itrunc+0x3e>
-
-0000000080004ef0 <iput>:
-{
-    80004ef0:	1101                	addi	sp,sp,-32
-    80004ef2:	ec06                	sd	ra,24(sp)
-    80004ef4:	e822                	sd	s0,16(sp)
-    80004ef6:	e426                	sd	s1,8(sp)
-    80004ef8:	e04a                	sd	s2,0(sp)
-    80004efa:	1000                	addi	s0,sp,32
-    80004efc:	84aa                	mv	s1,a0
+    80003de6:	0809a023          	sw	zero,128(s3)
+    80003dea:	bf51                	j	80003d7e <itrunc+0x3e>
+
+0000000080003dec <iput>:
+{
+    80003dec:	1101                	addi	sp,sp,-32
+    80003dee:	ec06                	sd	ra,24(sp)
+    80003df0:	e822                	sd	s0,16(sp)
+    80003df2:	e426                	sd	s1,8(sp)
+    80003df4:	e04a                	sd	s2,0(sp)
+    80003df6:	1000                	addi	s0,sp,32
+    80003df8:	84aa                	mv	s1,a0
   acquire(&itable.lock);
-    80004efe:	0001c517          	auipc	a0,0x1c
-    80004f02:	56a50513          	addi	a0,a0,1386 # 80021468 <itable>
-    80004f06:	ffffc097          	auipc	ra,0xffffc
-    80004f0a:	cde080e7          	jalr	-802(ra) # 80000be4 <acquire>
+    80003dfa:	0001c517          	auipc	a0,0x1c
+    80003dfe:	50e50513          	addi	a0,a0,1294 # 80020308 <itable>
+    80003e02:	ffffd097          	auipc	ra,0xffffd
+    80003e06:	de2080e7          	jalr	-542(ra) # 80000be4 <acquire>
   if(ip->ref == 1 && ip->valid && ip->nlink == 0){
-    80004f0e:	4498                	lw	a4,8(s1)
-    80004f10:	4785                	li	a5,1
-    80004f12:	02f70363          	beq	a4,a5,80004f38 <iput+0x48>
+    80003e0a:	4498                	lw	a4,8(s1)
+    80003e0c:	4785                	li	a5,1
+    80003e0e:	02f70363          	beq	a4,a5,80003e34 <iput+0x48>
   ip->ref--;
-    80004f16:	449c                	lw	a5,8(s1)
-    80004f18:	37fd                	addiw	a5,a5,-1
-    80004f1a:	c49c                	sw	a5,8(s1)
+    80003e12:	449c                	lw	a5,8(s1)
+    80003e14:	37fd                	addiw	a5,a5,-1
+    80003e16:	c49c                	sw	a5,8(s1)
   release(&itable.lock);
-    80004f1c:	0001c517          	auipc	a0,0x1c
-    80004f20:	54c50513          	addi	a0,a0,1356 # 80021468 <itable>
-    80004f24:	ffffc097          	auipc	ra,0xffffc
-    80004f28:	d74080e7          	jalr	-652(ra) # 80000c98 <release>
-}
-    80004f2c:	60e2                	ld	ra,24(sp)
-    80004f2e:	6442                	ld	s0,16(sp)
-    80004f30:	64a2                	ld	s1,8(sp)
-    80004f32:	6902                	ld	s2,0(sp)
-    80004f34:	6105                	addi	sp,sp,32
-    80004f36:	8082                	ret
+    80003e18:	0001c517          	auipc	a0,0x1c
+    80003e1c:	4f050513          	addi	a0,a0,1264 # 80020308 <itable>
+    80003e20:	ffffd097          	auipc	ra,0xffffd
+    80003e24:	e78080e7          	jalr	-392(ra) # 80000c98 <release>
+}
+    80003e28:	60e2                	ld	ra,24(sp)
+    80003e2a:	6442                	ld	s0,16(sp)
+    80003e2c:	64a2                	ld	s1,8(sp)
+    80003e2e:	6902                	ld	s2,0(sp)
+    80003e30:	6105                	addi	sp,sp,32
+    80003e32:	8082                	ret
   if(ip->ref == 1 && ip->valid && ip->nlink == 0){
-    80004f38:	40bc                	lw	a5,64(s1)
-    80004f3a:	dff1                	beqz	a5,80004f16 <iput+0x26>
-    80004f3c:	04a49783          	lh	a5,74(s1)
-    80004f40:	fbf9                	bnez	a5,80004f16 <iput+0x26>
+    80003e34:	40bc                	lw	a5,64(s1)
+    80003e36:	dff1                	beqz	a5,80003e12 <iput+0x26>
+    80003e38:	04a49783          	lh	a5,74(s1)
+    80003e3c:	fbf9                	bnez	a5,80003e12 <iput+0x26>
     acquiresleep(&ip->lock);
-    80004f42:	01048913          	addi	s2,s1,16
-    80004f46:	854a                	mv	a0,s2
-    80004f48:	00001097          	auipc	ra,0x1
-    80004f4c:	ab8080e7          	jalr	-1352(ra) # 80005a00 <acquiresleep>
+    80003e3e:	01048913          	addi	s2,s1,16
+    80003e42:	854a                	mv	a0,s2
+    80003e44:	00001097          	auipc	ra,0x1
+    80003e48:	ab8080e7          	jalr	-1352(ra) # 800048fc <acquiresleep>
     release(&itable.lock);
-    80004f50:	0001c517          	auipc	a0,0x1c
-    80004f54:	51850513          	addi	a0,a0,1304 # 80021468 <itable>
-    80004f58:	ffffc097          	auipc	ra,0xffffc
-    80004f5c:	d40080e7          	jalr	-704(ra) # 80000c98 <release>
+    80003e4c:	0001c517          	auipc	a0,0x1c
+    80003e50:	4bc50513          	addi	a0,a0,1212 # 80020308 <itable>
+    80003e54:	ffffd097          	auipc	ra,0xffffd
+    80003e58:	e44080e7          	jalr	-444(ra) # 80000c98 <release>
     itrunc(ip);
-    80004f60:	8526                	mv	a0,s1
-    80004f62:	00000097          	auipc	ra,0x0
-    80004f66:	ee2080e7          	jalr	-286(ra) # 80004e44 <itrunc>
+    80003e5c:	8526                	mv	a0,s1
+    80003e5e:	00000097          	auipc	ra,0x0
+    80003e62:	ee2080e7          	jalr	-286(ra) # 80003d40 <itrunc>
     ip->type = 0;
-    80004f6a:	04049223          	sh	zero,68(s1)
+    80003e66:	04049223          	sh	zero,68(s1)
     iupdate(ip);
-    80004f6e:	8526                	mv	a0,s1
-    80004f70:	00000097          	auipc	ra,0x0
-    80004f74:	cfc080e7          	jalr	-772(ra) # 80004c6c <iupdate>
+    80003e6a:	8526                	mv	a0,s1
+    80003e6c:	00000097          	auipc	ra,0x0
+    80003e70:	cfc080e7          	jalr	-772(ra) # 80003b68 <iupdate>
     ip->valid = 0;
-    80004f78:	0404a023          	sw	zero,64(s1)
+    80003e74:	0404a023          	sw	zero,64(s1)
     releasesleep(&ip->lock);
-    80004f7c:	854a                	mv	a0,s2
-    80004f7e:	00001097          	auipc	ra,0x1
-    80004f82:	ad8080e7          	jalr	-1320(ra) # 80005a56 <releasesleep>
+    80003e78:	854a                	mv	a0,s2
+    80003e7a:	00001097          	auipc	ra,0x1
+    80003e7e:	ad8080e7          	jalr	-1320(ra) # 80004952 <releasesleep>
     acquire(&itable.lock);
-    80004f86:	0001c517          	auipc	a0,0x1c
-    80004f8a:	4e250513          	addi	a0,a0,1250 # 80021468 <itable>
-    80004f8e:	ffffc097          	auipc	ra,0xffffc
-    80004f92:	c56080e7          	jalr	-938(ra) # 80000be4 <acquire>
-    80004f96:	b741                	j	80004f16 <iput+0x26>
-
-0000000080004f98 <iunlockput>:
-{
-    80004f98:	1101                	addi	sp,sp,-32
-    80004f9a:	ec06                	sd	ra,24(sp)
-    80004f9c:	e822                	sd	s0,16(sp)
-    80004f9e:	e426                	sd	s1,8(sp)
-    80004fa0:	1000                	addi	s0,sp,32
-    80004fa2:	84aa                	mv	s1,a0
+    80003e82:	0001c517          	auipc	a0,0x1c
+    80003e86:	48650513          	addi	a0,a0,1158 # 80020308 <itable>
+    80003e8a:	ffffd097          	auipc	ra,0xffffd
+    80003e8e:	d5a080e7          	jalr	-678(ra) # 80000be4 <acquire>
+    80003e92:	b741                	j	80003e12 <iput+0x26>
+
+0000000080003e94 <iunlockput>:
+{
+    80003e94:	1101                	addi	sp,sp,-32
+    80003e96:	ec06                	sd	ra,24(sp)
+    80003e98:	e822                	sd	s0,16(sp)
+    80003e9a:	e426                	sd	s1,8(sp)
+    80003e9c:	1000                	addi	s0,sp,32
+    80003e9e:	84aa                	mv	s1,a0
   iunlock(ip);
-    80004fa4:	00000097          	auipc	ra,0x0
-    80004fa8:	e54080e7          	jalr	-428(ra) # 80004df8 <iunlock>
+    80003ea0:	00000097          	auipc	ra,0x0
+    80003ea4:	e54080e7          	jalr	-428(ra) # 80003cf4 <iunlock>
   iput(ip);
-    80004fac:	8526                	mv	a0,s1
-    80004fae:	00000097          	auipc	ra,0x0
-    80004fb2:	f42080e7          	jalr	-190(ra) # 80004ef0 <iput>
+    80003ea8:	8526                	mv	a0,s1
+    80003eaa:	00000097          	auipc	ra,0x0
+    80003eae:	f42080e7          	jalr	-190(ra) # 80003dec <iput>
 }
-    80004fb6:	60e2                	ld	ra,24(sp)
-    80004fb8:	6442                	ld	s0,16(sp)
-    80004fba:	64a2                	ld	s1,8(sp)
-    80004fbc:	6105                	addi	sp,sp,32
-    80004fbe:	8082                	ret
+    80003eb2:	60e2                	ld	ra,24(sp)
+    80003eb4:	6442                	ld	s0,16(sp)
+    80003eb6:	64a2                	ld	s1,8(sp)
+    80003eb8:	6105                	addi	sp,sp,32
+    80003eba:	8082                	ret
 
-0000000080004fc0 <stati>:
+0000000080003ebc <stati>:
 
 // Copy stat information from inode.
 // Caller must hold ip->lock.
 void
 stati(struct inode *ip, struct stat *st)
 {
-    80004fc0:	1141                	addi	sp,sp,-16
-    80004fc2:	e422                	sd	s0,8(sp)
-    80004fc4:	0800                	addi	s0,sp,16
+    80003ebc:	1141                	addi	sp,sp,-16
+    80003ebe:	e422                	sd	s0,8(sp)
+    80003ec0:	0800                	addi	s0,sp,16
   st->dev = ip->dev;
-    80004fc6:	411c                	lw	a5,0(a0)
-    80004fc8:	c19c                	sw	a5,0(a1)
+    80003ec2:	411c                	lw	a5,0(a0)
+    80003ec4:	c19c                	sw	a5,0(a1)
   st->ino = ip->inum;
-    80004fca:	415c                	lw	a5,4(a0)
-    80004fcc:	c1dc                	sw	a5,4(a1)
+    80003ec6:	415c                	lw	a5,4(a0)
+    80003ec8:	c1dc                	sw	a5,4(a1)
   st->type = ip->type;
-    80004fce:	04451783          	lh	a5,68(a0)
-    80004fd2:	00f59423          	sh	a5,8(a1)
+    80003eca:	04451783          	lh	a5,68(a0)
+    80003ece:	00f59423          	sh	a5,8(a1)
   st->nlink = ip->nlink;
-    80004fd6:	04a51783          	lh	a5,74(a0)
-    80004fda:	00f59523          	sh	a5,10(a1)
+    80003ed2:	04a51783          	lh	a5,74(a0)
+    80003ed6:	00f59523          	sh	a5,10(a1)
   st->size = ip->size;
-    80004fde:	04c56783          	lwu	a5,76(a0)
-    80004fe2:	e99c                	sd	a5,16(a1)
+    80003eda:	04c56783          	lwu	a5,76(a0)
+    80003ede:	e99c                	sd	a5,16(a1)
 }
-    80004fe4:	6422                	ld	s0,8(sp)
-    80004fe6:	0141                	addi	sp,sp,16
-    80004fe8:	8082                	ret
+    80003ee0:	6422                	ld	s0,8(sp)
+    80003ee2:	0141                	addi	sp,sp,16
+    80003ee4:	8082                	ret
 
-0000000080004fea <readi>:
+0000000080003ee6 <readi>:
 readi(struct inode *ip, int user_dst, uint64 dst, uint off, uint n)
 {
   uint tot, m;
   struct buf *bp;
 
   if(off > ip->size || off + n < off)
-    80004fea:	457c                	lw	a5,76(a0)
-    80004fec:	0ed7e963          	bltu	a5,a3,800050de <readi+0xf4>
-{
-    80004ff0:	7159                	addi	sp,sp,-112
-    80004ff2:	f486                	sd	ra,104(sp)
-    80004ff4:	f0a2                	sd	s0,96(sp)
-    80004ff6:	eca6                	sd	s1,88(sp)
-    80004ff8:	e8ca                	sd	s2,80(sp)
-    80004ffa:	e4ce                	sd	s3,72(sp)
-    80004ffc:	e0d2                	sd	s4,64(sp)
-    80004ffe:	fc56                	sd	s5,56(sp)
-    80005000:	f85a                	sd	s6,48(sp)
-    80005002:	f45e                	sd	s7,40(sp)
-    80005004:	f062                	sd	s8,32(sp)
-    80005006:	ec66                	sd	s9,24(sp)
-    80005008:	e86a                	sd	s10,16(sp)
-    8000500a:	e46e                	sd	s11,8(sp)
-    8000500c:	1880                	addi	s0,sp,112
-    8000500e:	8baa                	mv	s7,a0
-    80005010:	8c2e                	mv	s8,a1
-    80005012:	8ab2                	mv	s5,a2
-    80005014:	84b6                	mv	s1,a3
-    80005016:	8b3a                	mv	s6,a4
+    80003ee6:	457c                	lw	a5,76(a0)
+    80003ee8:	0ed7e963          	bltu	a5,a3,80003fda <readi+0xf4>
+{
+    80003eec:	7159                	addi	sp,sp,-112
+    80003eee:	f486                	sd	ra,104(sp)
+    80003ef0:	f0a2                	sd	s0,96(sp)
+    80003ef2:	eca6                	sd	s1,88(sp)
+    80003ef4:	e8ca                	sd	s2,80(sp)
+    80003ef6:	e4ce                	sd	s3,72(sp)
+    80003ef8:	e0d2                	sd	s4,64(sp)
+    80003efa:	fc56                	sd	s5,56(sp)
+    80003efc:	f85a                	sd	s6,48(sp)
+    80003efe:	f45e                	sd	s7,40(sp)
+    80003f00:	f062                	sd	s8,32(sp)
+    80003f02:	ec66                	sd	s9,24(sp)
+    80003f04:	e86a                	sd	s10,16(sp)
+    80003f06:	e46e                	sd	s11,8(sp)
+    80003f08:	1880                	addi	s0,sp,112
+    80003f0a:	8baa                	mv	s7,a0
+    80003f0c:	8c2e                	mv	s8,a1
+    80003f0e:	8ab2                	mv	s5,a2
+    80003f10:	84b6                	mv	s1,a3
+    80003f12:	8b3a                	mv	s6,a4
   if(off > ip->size || off + n < off)
-    80005018:	9f35                	addw	a4,a4,a3
+    80003f14:	9f35                	addw	a4,a4,a3
     return 0;
-    8000501a:	4501                	li	a0,0
+    80003f16:	4501                	li	a0,0
   if(off > ip->size || off + n < off)
-    8000501c:	0ad76063          	bltu	a4,a3,800050bc <readi+0xd2>
+    80003f18:	0ad76063          	bltu	a4,a3,80003fb8 <readi+0xd2>
   if(off + n > ip->size)
-    80005020:	00e7f463          	bgeu	a5,a4,80005028 <readi+0x3e>
+    80003f1c:	00e7f463          	bgeu	a5,a4,80003f24 <readi+0x3e>
     n = ip->size - off;
-    80005024:	40d78b3b          	subw	s6,a5,a3
+    80003f20:	40d78b3b          	subw	s6,a5,a3
 
   for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
-    80005028:	0a0b0963          	beqz	s6,800050da <readi+0xf0>
-    8000502c:	4981                	li	s3,0
+    80003f24:	0a0b0963          	beqz	s6,80003fd6 <readi+0xf0>
+    80003f28:	4981                	li	s3,0
     bp = bread(ip->dev, bmap(ip, off/BSIZE));
     m = min(n - tot, BSIZE - off%BSIZE);
-    8000502e:	40000d13          	li	s10,1024
+    80003f2a:	40000d13          	li	s10,1024
     if(either_copyout(user_dst, dst, bp->data + (off % BSIZE), m) == -1) {
-    80005032:	5cfd                	li	s9,-1
-    80005034:	a82d                	j	8000506e <readi+0x84>
-    80005036:	020a1d93          	slli	s11,s4,0x20
-    8000503a:	020ddd93          	srli	s11,s11,0x20
-    8000503e:	05890613          	addi	a2,s2,88
-    80005042:	86ee                	mv	a3,s11
-    80005044:	963a                	add	a2,a2,a4
-    80005046:	85d6                	mv	a1,s5
-    80005048:	8562                	mv	a0,s8
-    8000504a:	fffff097          	auipc	ra,0xfffff
-    8000504e:	a74080e7          	jalr	-1420(ra) # 80003abe <either_copyout>
-    80005052:	05950d63          	beq	a0,s9,800050ac <readi+0xc2>
+    80003f2e:	5cfd                	li	s9,-1
+    80003f30:	a82d                	j	80003f6a <readi+0x84>
+    80003f32:	020a1d93          	slli	s11,s4,0x20
+    80003f36:	020ddd93          	srli	s11,s11,0x20
+    80003f3a:	05890613          	addi	a2,s2,88
+    80003f3e:	86ee                	mv	a3,s11
+    80003f40:	963a                	add	a2,a2,a4
+    80003f42:	85d6                	mv	a1,s5
+    80003f44:	8562                	mv	a0,s8
+    80003f46:	fffff097          	auipc	ra,0xfffff
+    80003f4a:	a72080e7          	jalr	-1422(ra) # 800029b8 <either_copyout>
+    80003f4e:	05950d63          	beq	a0,s9,80003fa8 <readi+0xc2>
       brelse(bp);
       tot = -1;
       break;
     }
     brelse(bp);
-    80005056:	854a                	mv	a0,s2
-    80005058:	fffff097          	auipc	ra,0xfffff
-    8000505c:	60c080e7          	jalr	1548(ra) # 80004664 <brelse>
+    80003f52:	854a                	mv	a0,s2
+    80003f54:	fffff097          	auipc	ra,0xfffff
+    80003f58:	60c080e7          	jalr	1548(ra) # 80003560 <brelse>
   for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
-    80005060:	013a09bb          	addw	s3,s4,s3
-    80005064:	009a04bb          	addw	s1,s4,s1
-    80005068:	9aee                	add	s5,s5,s11
-    8000506a:	0569f763          	bgeu	s3,s6,800050b8 <readi+0xce>
+    80003f5c:	013a09bb          	addw	s3,s4,s3
+    80003f60:	009a04bb          	addw	s1,s4,s1
+    80003f64:	9aee                	add	s5,s5,s11
+    80003f66:	0569f763          	bgeu	s3,s6,80003fb4 <readi+0xce>
     bp = bread(ip->dev, bmap(ip, off/BSIZE));
-    8000506e:	000ba903          	lw	s2,0(s7)
-    80005072:	00a4d59b          	srliw	a1,s1,0xa
-    80005076:	855e                	mv	a0,s7
-    80005078:	00000097          	auipc	ra,0x0
-    8000507c:	8b0080e7          	jalr	-1872(ra) # 80004928 <bmap>
-    80005080:	0005059b          	sext.w	a1,a0
-    80005084:	854a                	mv	a0,s2
-    80005086:	fffff097          	auipc	ra,0xfffff
-    8000508a:	4ae080e7          	jalr	1198(ra) # 80004534 <bread>
-    8000508e:	892a                	mv	s2,a0
+    80003f6a:	000ba903          	lw	s2,0(s7)
+    80003f6e:	00a4d59b          	srliw	a1,s1,0xa
+    80003f72:	855e                	mv	a0,s7
+    80003f74:	00000097          	auipc	ra,0x0
+    80003f78:	8b0080e7          	jalr	-1872(ra) # 80003824 <bmap>
+    80003f7c:	0005059b          	sext.w	a1,a0
+    80003f80:	854a                	mv	a0,s2
+    80003f82:	fffff097          	auipc	ra,0xfffff
+    80003f86:	4ae080e7          	jalr	1198(ra) # 80003430 <bread>
+    80003f8a:	892a                	mv	s2,a0
     m = min(n - tot, BSIZE - off%BSIZE);
-    80005090:	3ff4f713          	andi	a4,s1,1023
-    80005094:	40ed07bb          	subw	a5,s10,a4
-    80005098:	413b06bb          	subw	a3,s6,s3
-    8000509c:	8a3e                	mv	s4,a5
-    8000509e:	2781                	sext.w	a5,a5
-    800050a0:	0006861b          	sext.w	a2,a3
-    800050a4:	f8f679e3          	bgeu	a2,a5,80005036 <readi+0x4c>
-    800050a8:	8a36                	mv	s4,a3
-    800050aa:	b771                	j	80005036 <readi+0x4c>
+    80003f8c:	3ff4f713          	andi	a4,s1,1023
+    80003f90:	40ed07bb          	subw	a5,s10,a4
+    80003f94:	413b06bb          	subw	a3,s6,s3
+    80003f98:	8a3e                	mv	s4,a5
+    80003f9a:	2781                	sext.w	a5,a5
+    80003f9c:	0006861b          	sext.w	a2,a3
+    80003fa0:	f8f679e3          	bgeu	a2,a5,80003f32 <readi+0x4c>
+    80003fa4:	8a36                	mv	s4,a3
+    80003fa6:	b771                	j	80003f32 <readi+0x4c>
       brelse(bp);
-    800050ac:	854a                	mv	a0,s2
-    800050ae:	fffff097          	auipc	ra,0xfffff
-    800050b2:	5b6080e7          	jalr	1462(ra) # 80004664 <brelse>
+    80003fa8:	854a                	mv	a0,s2
+    80003faa:	fffff097          	auipc	ra,0xfffff
+    80003fae:	5b6080e7          	jalr	1462(ra) # 80003560 <brelse>
       tot = -1;
-    800050b6:	59fd                	li	s3,-1
+    80003fb2:	59fd                	li	s3,-1
   }
   return tot;
-    800050b8:	0009851b          	sext.w	a0,s3
-}
-    800050bc:	70a6                	ld	ra,104(sp)
-    800050be:	7406                	ld	s0,96(sp)
-    800050c0:	64e6                	ld	s1,88(sp)
-    800050c2:	6946                	ld	s2,80(sp)
-    800050c4:	69a6                	ld	s3,72(sp)
-    800050c6:	6a06                	ld	s4,64(sp)
-    800050c8:	7ae2                	ld	s5,56(sp)
-    800050ca:	7b42                	ld	s6,48(sp)
-    800050cc:	7ba2                	ld	s7,40(sp)
-    800050ce:	7c02                	ld	s8,32(sp)
-    800050d0:	6ce2                	ld	s9,24(sp)
-    800050d2:	6d42                	ld	s10,16(sp)
-    800050d4:	6da2                	ld	s11,8(sp)
-    800050d6:	6165                	addi	sp,sp,112
-    800050d8:	8082                	ret
+    80003fb4:	0009851b          	sext.w	a0,s3
+}
+    80003fb8:	70a6                	ld	ra,104(sp)
+    80003fba:	7406                	ld	s0,96(sp)
+    80003fbc:	64e6                	ld	s1,88(sp)
+    80003fbe:	6946                	ld	s2,80(sp)
+    80003fc0:	69a6                	ld	s3,72(sp)
+    80003fc2:	6a06                	ld	s4,64(sp)
+    80003fc4:	7ae2                	ld	s5,56(sp)
+    80003fc6:	7b42                	ld	s6,48(sp)
+    80003fc8:	7ba2                	ld	s7,40(sp)
+    80003fca:	7c02                	ld	s8,32(sp)
+    80003fcc:	6ce2                	ld	s9,24(sp)
+    80003fce:	6d42                	ld	s10,16(sp)
+    80003fd0:	6da2                	ld	s11,8(sp)
+    80003fd2:	6165                	addi	sp,sp,112
+    80003fd4:	8082                	ret
   for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
-    800050da:	89da                	mv	s3,s6
-    800050dc:	bff1                	j	800050b8 <readi+0xce>
+    80003fd6:	89da                	mv	s3,s6
+    80003fd8:	bff1                	j	80003fb4 <readi+0xce>
     return 0;
-    800050de:	4501                	li	a0,0
+    80003fda:	4501                	li	a0,0
 }
-    800050e0:	8082                	ret
+    80003fdc:	8082                	ret
 
-00000000800050e2 <writei>:
+0000000080003fde <writei>:
 writei(struct inode *ip, int user_src, uint64 src, uint off, uint n)
 {
   uint tot, m;
   struct buf *bp;
 
   if(off > ip->size || off + n < off)
-    800050e2:	457c                	lw	a5,76(a0)
-    800050e4:	10d7e863          	bltu	a5,a3,800051f4 <writei+0x112>
-{
-    800050e8:	7159                	addi	sp,sp,-112
-    800050ea:	f486                	sd	ra,104(sp)
-    800050ec:	f0a2                	sd	s0,96(sp)
-    800050ee:	eca6                	sd	s1,88(sp)
-    800050f0:	e8ca                	sd	s2,80(sp)
-    800050f2:	e4ce                	sd	s3,72(sp)
-    800050f4:	e0d2                	sd	s4,64(sp)
-    800050f6:	fc56                	sd	s5,56(sp)
-    800050f8:	f85a                	sd	s6,48(sp)
-    800050fa:	f45e                	sd	s7,40(sp)
-    800050fc:	f062                	sd	s8,32(sp)
-    800050fe:	ec66                	sd	s9,24(sp)
-    80005100:	e86a                	sd	s10,16(sp)
-    80005102:	e46e                	sd	s11,8(sp)
-    80005104:	1880                	addi	s0,sp,112
-    80005106:	8b2a                	mv	s6,a0
-    80005108:	8c2e                	mv	s8,a1
-    8000510a:	8ab2                	mv	s5,a2
-    8000510c:	8936                	mv	s2,a3
-    8000510e:	8bba                	mv	s7,a4
+    80003fde:	457c                	lw	a5,76(a0)
+    80003fe0:	10d7e863          	bltu	a5,a3,800040f0 <writei+0x112>
+{
+    80003fe4:	7159                	addi	sp,sp,-112
+    80003fe6:	f486                	sd	ra,104(sp)
+    80003fe8:	f0a2                	sd	s0,96(sp)
+    80003fea:	eca6                	sd	s1,88(sp)
+    80003fec:	e8ca                	sd	s2,80(sp)
+    80003fee:	e4ce                	sd	s3,72(sp)
+    80003ff0:	e0d2                	sd	s4,64(sp)
+    80003ff2:	fc56                	sd	s5,56(sp)
+    80003ff4:	f85a                	sd	s6,48(sp)
+    80003ff6:	f45e                	sd	s7,40(sp)
+    80003ff8:	f062                	sd	s8,32(sp)
+    80003ffa:	ec66                	sd	s9,24(sp)
+    80003ffc:	e86a                	sd	s10,16(sp)
+    80003ffe:	e46e                	sd	s11,8(sp)
+    80004000:	1880                	addi	s0,sp,112
+    80004002:	8b2a                	mv	s6,a0
+    80004004:	8c2e                	mv	s8,a1
+    80004006:	8ab2                	mv	s5,a2
+    80004008:	8936                	mv	s2,a3
+    8000400a:	8bba                	mv	s7,a4
   if(off > ip->size || off + n < off)
-    80005110:	00e687bb          	addw	a5,a3,a4
-    80005114:	0ed7e263          	bltu	a5,a3,800051f8 <writei+0x116>
+    8000400c:	00e687bb          	addw	a5,a3,a4
+    80004010:	0ed7e263          	bltu	a5,a3,800040f4 <writei+0x116>
     return -1;
   if(off + n > MAXFILE*BSIZE)
-    80005118:	00043737          	lui	a4,0x43
-    8000511c:	0ef76063          	bltu	a4,a5,800051fc <writei+0x11a>
+    80004014:	00043737          	lui	a4,0x43
+    80004018:	0ef76063          	bltu	a4,a5,800040f8 <writei+0x11a>
     return -1;
 
   for(tot=0; tot<n; tot+=m, off+=m, src+=m){
-    80005120:	0c0b8863          	beqz	s7,800051f0 <writei+0x10e>
-    80005124:	4a01                	li	s4,0
+    8000401c:	0c0b8863          	beqz	s7,800040ec <writei+0x10e>
+    80004020:	4a01                	li	s4,0
     bp = bread(ip->dev, bmap(ip, off/BSIZE));
     m = min(n - tot, BSIZE - off%BSIZE);
-    80005126:	40000d13          	li	s10,1024
+    80004022:	40000d13          	li	s10,1024
     if(either_copyin(bp->data + (off % BSIZE), user_src, src, m) == -1) {
-    8000512a:	5cfd                	li	s9,-1
-    8000512c:	a091                	j	80005170 <writei+0x8e>
-    8000512e:	02099d93          	slli	s11,s3,0x20
-    80005132:	020ddd93          	srli	s11,s11,0x20
-    80005136:	05848513          	addi	a0,s1,88
-    8000513a:	86ee                	mv	a3,s11
-    8000513c:	8656                	mv	a2,s5
-    8000513e:	85e2                	mv	a1,s8
-    80005140:	953a                	add	a0,a0,a4
-    80005142:	fffff097          	auipc	ra,0xfffff
-    80005146:	9d2080e7          	jalr	-1582(ra) # 80003b14 <either_copyin>
-    8000514a:	07950263          	beq	a0,s9,800051ae <writei+0xcc>
+    80004026:	5cfd                	li	s9,-1
+    80004028:	a091                	j	8000406c <writei+0x8e>
+    8000402a:	02099d93          	slli	s11,s3,0x20
+    8000402e:	020ddd93          	srli	s11,s11,0x20
+    80004032:	05848513          	addi	a0,s1,88
+    80004036:	86ee                	mv	a3,s11
+    80004038:	8656                	mv	a2,s5
+    8000403a:	85e2                	mv	a1,s8
+    8000403c:	953a                	add	a0,a0,a4
+    8000403e:	fffff097          	auipc	ra,0xfffff
+    80004042:	9d0080e7          	jalr	-1584(ra) # 80002a0e <either_copyin>
+    80004046:	07950263          	beq	a0,s9,800040aa <writei+0xcc>
       brelse(bp);
       break;
     }
     log_write(bp);
-    8000514e:	8526                	mv	a0,s1
-    80005150:	00000097          	auipc	ra,0x0
-    80005154:	790080e7          	jalr	1936(ra) # 800058e0 <log_write>
+    8000404a:	8526                	mv	a0,s1
+    8000404c:	00000097          	auipc	ra,0x0
+    80004050:	790080e7          	jalr	1936(ra) # 800047dc <log_write>
     brelse(bp);
-    80005158:	8526                	mv	a0,s1
-    8000515a:	fffff097          	auipc	ra,0xfffff
-    8000515e:	50a080e7          	jalr	1290(ra) # 80004664 <brelse>
+    80004054:	8526                	mv	a0,s1
+    80004056:	fffff097          	auipc	ra,0xfffff
+    8000405a:	50a080e7          	jalr	1290(ra) # 80003560 <brelse>
   for(tot=0; tot<n; tot+=m, off+=m, src+=m){
-    80005162:	01498a3b          	addw	s4,s3,s4
-    80005166:	0129893b          	addw	s2,s3,s2
-    8000516a:	9aee                	add	s5,s5,s11
-    8000516c:	057a7663          	bgeu	s4,s7,800051b8 <writei+0xd6>
+    8000405e:	01498a3b          	addw	s4,s3,s4
+    80004062:	0129893b          	addw	s2,s3,s2
+    80004066:	9aee                	add	s5,s5,s11
+    80004068:	057a7663          	bgeu	s4,s7,800040b4 <writei+0xd6>
     bp = bread(ip->dev, bmap(ip, off/BSIZE));
-    80005170:	000b2483          	lw	s1,0(s6)
-    80005174:	00a9559b          	srliw	a1,s2,0xa
-    80005178:	855a                	mv	a0,s6
-    8000517a:	fffff097          	auipc	ra,0xfffff
-    8000517e:	7ae080e7          	jalr	1966(ra) # 80004928 <bmap>
-    80005182:	0005059b          	sext.w	a1,a0
-    80005186:	8526                	mv	a0,s1
-    80005188:	fffff097          	auipc	ra,0xfffff
-    8000518c:	3ac080e7          	jalr	940(ra) # 80004534 <bread>
-    80005190:	84aa                	mv	s1,a0
+    8000406c:	000b2483          	lw	s1,0(s6)
+    80004070:	00a9559b          	srliw	a1,s2,0xa
+    80004074:	855a                	mv	a0,s6
+    80004076:	fffff097          	auipc	ra,0xfffff
+    8000407a:	7ae080e7          	jalr	1966(ra) # 80003824 <bmap>
+    8000407e:	0005059b          	sext.w	a1,a0
+    80004082:	8526                	mv	a0,s1
+    80004084:	fffff097          	auipc	ra,0xfffff
+    80004088:	3ac080e7          	jalr	940(ra) # 80003430 <bread>
+    8000408c:	84aa                	mv	s1,a0
     m = min(n - tot, BSIZE - off%BSIZE);
-    80005192:	3ff97713          	andi	a4,s2,1023
-    80005196:	40ed07bb          	subw	a5,s10,a4
-    8000519a:	414b86bb          	subw	a3,s7,s4
-    8000519e:	89be                	mv	s3,a5
-    800051a0:	2781                	sext.w	a5,a5
-    800051a2:	0006861b          	sext.w	a2,a3
-    800051a6:	f8f674e3          	bgeu	a2,a5,8000512e <writei+0x4c>
-    800051aa:	89b6                	mv	s3,a3
-    800051ac:	b749                	j	8000512e <writei+0x4c>
+    8000408e:	3ff97713          	andi	a4,s2,1023
+    80004092:	40ed07bb          	subw	a5,s10,a4
+    80004096:	414b86bb          	subw	a3,s7,s4
+    8000409a:	89be                	mv	s3,a5
+    8000409c:	2781                	sext.w	a5,a5
+    8000409e:	0006861b          	sext.w	a2,a3
+    800040a2:	f8f674e3          	bgeu	a2,a5,8000402a <writei+0x4c>
+    800040a6:	89b6                	mv	s3,a3
+    800040a8:	b749                	j	8000402a <writei+0x4c>
       brelse(bp);
-    800051ae:	8526                	mv	a0,s1
-    800051b0:	fffff097          	auipc	ra,0xfffff
-    800051b4:	4b4080e7          	jalr	1204(ra) # 80004664 <brelse>
+    800040aa:	8526                	mv	a0,s1
+    800040ac:	fffff097          	auipc	ra,0xfffff
+    800040b0:	4b4080e7          	jalr	1204(ra) # 80003560 <brelse>
   }
 
   if(off > ip->size)
-    800051b8:	04cb2783          	lw	a5,76(s6)
-    800051bc:	0127f463          	bgeu	a5,s2,800051c4 <writei+0xe2>
+    800040b4:	04cb2783          	lw	a5,76(s6)
+    800040b8:	0127f463          	bgeu	a5,s2,800040c0 <writei+0xe2>
     ip->size = off;
-    800051c0:	052b2623          	sw	s2,76(s6)
+    800040bc:	052b2623          	sw	s2,76(s6)
 
   // write the i-node back to disk even if the size didn't change
   // because the loop above might have called bmap() and added a new
   // block to ip->addrs[].
   iupdate(ip);
-    800051c4:	855a                	mv	a0,s6
-    800051c6:	00000097          	auipc	ra,0x0
-    800051ca:	aa6080e7          	jalr	-1370(ra) # 80004c6c <iupdate>
+    800040c0:	855a                	mv	a0,s6
+    800040c2:	00000097          	auipc	ra,0x0
+    800040c6:	aa6080e7          	jalr	-1370(ra) # 80003b68 <iupdate>
 
   return tot;
-    800051ce:	000a051b          	sext.w	a0,s4
-}
-    800051d2:	70a6                	ld	ra,104(sp)
-    800051d4:	7406                	ld	s0,96(sp)
-    800051d6:	64e6                	ld	s1,88(sp)
-    800051d8:	6946                	ld	s2,80(sp)
-    800051da:	69a6                	ld	s3,72(sp)
-    800051dc:	6a06                	ld	s4,64(sp)
-    800051de:	7ae2                	ld	s5,56(sp)
-    800051e0:	7b42                	ld	s6,48(sp)
-    800051e2:	7ba2                	ld	s7,40(sp)
-    800051e4:	7c02                	ld	s8,32(sp)
-    800051e6:	6ce2                	ld	s9,24(sp)
-    800051e8:	6d42                	ld	s10,16(sp)
-    800051ea:	6da2                	ld	s11,8(sp)
-    800051ec:	6165                	addi	sp,sp,112
-    800051ee:	8082                	ret
+    800040ca:	000a051b          	sext.w	a0,s4
+}
+    800040ce:	70a6                	ld	ra,104(sp)
+    800040d0:	7406                	ld	s0,96(sp)
+    800040d2:	64e6                	ld	s1,88(sp)
+    800040d4:	6946                	ld	s2,80(sp)
+    800040d6:	69a6                	ld	s3,72(sp)
+    800040d8:	6a06                	ld	s4,64(sp)
+    800040da:	7ae2                	ld	s5,56(sp)
+    800040dc:	7b42                	ld	s6,48(sp)
+    800040de:	7ba2                	ld	s7,40(sp)
+    800040e0:	7c02                	ld	s8,32(sp)
+    800040e2:	6ce2                	ld	s9,24(sp)
+    800040e4:	6d42                	ld	s10,16(sp)
+    800040e6:	6da2                	ld	s11,8(sp)
+    800040e8:	6165                	addi	sp,sp,112
+    800040ea:	8082                	ret
   for(tot=0; tot<n; tot+=m, off+=m, src+=m){
-    800051f0:	8a5e                	mv	s4,s7
-    800051f2:	bfc9                	j	800051c4 <writei+0xe2>
+    800040ec:	8a5e                	mv	s4,s7
+    800040ee:	bfc9                	j	800040c0 <writei+0xe2>
     return -1;
-    800051f4:	557d                	li	a0,-1
+    800040f0:	557d                	li	a0,-1
 }
-    800051f6:	8082                	ret
+    800040f2:	8082                	ret
     return -1;
-    800051f8:	557d                	li	a0,-1
-    800051fa:	bfe1                	j	800051d2 <writei+0xf0>
+    800040f4:	557d                	li	a0,-1
+    800040f6:	bfe1                	j	800040ce <writei+0xf0>
     return -1;
-    800051fc:	557d                	li	a0,-1
-    800051fe:	bfd1                	j	800051d2 <writei+0xf0>
+    800040f8:	557d                	li	a0,-1
+    800040fa:	bfd1                	j	800040ce <writei+0xf0>
 
-0000000080005200 <namecmp>:
+00000000800040fc <namecmp>:
 
 // Directories
 
 int
 namecmp(const char *s, const char *t)
 {
-    80005200:	1141                	addi	sp,sp,-16
-    80005202:	e406                	sd	ra,8(sp)
-    80005204:	e022                	sd	s0,0(sp)
-    80005206:	0800                	addi	s0,sp,16
+    800040fc:	1141                	addi	sp,sp,-16
+    800040fe:	e406                	sd	ra,8(sp)
+    80004100:	e022                	sd	s0,0(sp)
+    80004102:	0800                	addi	s0,sp,16
   return strncmp(s, t, DIRSIZ);
-    80005208:	4639                	li	a2,14
-    8000520a:	ffffc097          	auipc	ra,0xffffc
-    8000520e:	bae080e7          	jalr	-1106(ra) # 80000db8 <strncmp>
+    80004104:	4639                	li	a2,14
+    80004106:	ffffd097          	auipc	ra,0xffffd
+    8000410a:	cb2080e7          	jalr	-846(ra) # 80000db8 <strncmp>
 }
-    80005212:	60a2                	ld	ra,8(sp)
-    80005214:	6402                	ld	s0,0(sp)
-    80005216:	0141                	addi	sp,sp,16
-    80005218:	8082                	ret
+    8000410e:	60a2                	ld	ra,8(sp)
+    80004110:	6402                	ld	s0,0(sp)
+    80004112:	0141                	addi	sp,sp,16
+    80004114:	8082                	ret
 
-000000008000521a <dirlookup>:
+0000000080004116 <dirlookup>:
 
 // Look for a directory entry in a directory.
 // If found, set *poff to byte offset of entry.
 struct inode*
 dirlookup(struct inode *dp, char *name, uint *poff)
 {
-    8000521a:	7139                	addi	sp,sp,-64
-    8000521c:	fc06                	sd	ra,56(sp)
-    8000521e:	f822                	sd	s0,48(sp)
-    80005220:	f426                	sd	s1,40(sp)
-    80005222:	f04a                	sd	s2,32(sp)
-    80005224:	ec4e                	sd	s3,24(sp)
-    80005226:	e852                	sd	s4,16(sp)
-    80005228:	0080                	addi	s0,sp,64
+    80004116:	7139                	addi	sp,sp,-64
+    80004118:	fc06                	sd	ra,56(sp)
+    8000411a:	f822                	sd	s0,48(sp)
+    8000411c:	f426                	sd	s1,40(sp)
+    8000411e:	f04a                	sd	s2,32(sp)
+    80004120:	ec4e                	sd	s3,24(sp)
+    80004122:	e852                	sd	s4,16(sp)
+    80004124:	0080                	addi	s0,sp,64
   uint off, inum;
   struct dirent de;
 
   if(dp->type != T_DIR)
-    8000522a:	04451703          	lh	a4,68(a0)
-    8000522e:	4785                	li	a5,1
-    80005230:	00f71a63          	bne	a4,a5,80005244 <dirlookup+0x2a>
-    80005234:	892a                	mv	s2,a0
-    80005236:	89ae                	mv	s3,a1
-    80005238:	8a32                	mv	s4,a2
+    80004126:	04451703          	lh	a4,68(a0)
+    8000412a:	4785                	li	a5,1
+    8000412c:	00f71a63          	bne	a4,a5,80004140 <dirlookup+0x2a>
+    80004130:	892a                	mv	s2,a0
+    80004132:	89ae                	mv	s3,a1
+    80004134:	8a32                	mv	s4,a2
     panic("dirlookup not DIR");
 
   for(off = 0; off < dp->size; off += sizeof(de)){
-    8000523a:	457c                	lw	a5,76(a0)
-    8000523c:	4481                	li	s1,0
+    80004136:	457c                	lw	a5,76(a0)
+    80004138:	4481                	li	s1,0
       inum = de.inum;
       return iget(dp->dev, inum);
     }
   }
 
   return 0;
-    8000523e:	4501                	li	a0,0
+    8000413a:	4501                	li	a0,0
   for(off = 0; off < dp->size; off += sizeof(de)){
-    80005240:	e79d                	bnez	a5,8000526e <dirlookup+0x54>
-    80005242:	a8a5                	j	800052ba <dirlookup+0xa0>
+    8000413c:	e79d                	bnez	a5,8000416a <dirlookup+0x54>
+    8000413e:	a8a5                	j	800041b6 <dirlookup+0xa0>
     panic("dirlookup not DIR");
-    80005244:	00004517          	auipc	a0,0x4
-    80005248:	7ac50513          	addi	a0,a0,1964 # 800099f0 <syscalls+0x1c8>
-    8000524c:	ffffb097          	auipc	ra,0xffffb
-    80005250:	2f2080e7          	jalr	754(ra) # 8000053e <panic>
+    80004140:	00004517          	auipc	a0,0x4
+    80004144:	54050513          	addi	a0,a0,1344 # 80008680 <syscalls+0x1b0>
+    80004148:	ffffc097          	auipc	ra,0xffffc
+    8000414c:	3f6080e7          	jalr	1014(ra) # 8000053e <panic>
       panic("dirlookup read");
-    80005254:	00004517          	auipc	a0,0x4
-    80005258:	7b450513          	addi	a0,a0,1972 # 80009a08 <syscalls+0x1e0>
-    8000525c:	ffffb097          	auipc	ra,0xffffb
-    80005260:	2e2080e7          	jalr	738(ra) # 8000053e <panic>
+    80004150:	00004517          	auipc	a0,0x4
+    80004154:	54850513          	addi	a0,a0,1352 # 80008698 <syscalls+0x1c8>
+    80004158:	ffffc097          	auipc	ra,0xffffc
+    8000415c:	3e6080e7          	jalr	998(ra) # 8000053e <panic>
   for(off = 0; off < dp->size; off += sizeof(de)){
-    80005264:	24c1                	addiw	s1,s1,16
-    80005266:	04c92783          	lw	a5,76(s2)
-    8000526a:	04f4f763          	bgeu	s1,a5,800052b8 <dirlookup+0x9e>
+    80004160:	24c1                	addiw	s1,s1,16
+    80004162:	04c92783          	lw	a5,76(s2)
+    80004166:	04f4f763          	bgeu	s1,a5,800041b4 <dirlookup+0x9e>
     if(readi(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
-    8000526e:	4741                	li	a4,16
-    80005270:	86a6                	mv	a3,s1
-    80005272:	fc040613          	addi	a2,s0,-64
-    80005276:	4581                	li	a1,0
-    80005278:	854a                	mv	a0,s2
-    8000527a:	00000097          	auipc	ra,0x0
-    8000527e:	d70080e7          	jalr	-656(ra) # 80004fea <readi>
-    80005282:	47c1                	li	a5,16
-    80005284:	fcf518e3          	bne	a0,a5,80005254 <dirlookup+0x3a>
+    8000416a:	4741                	li	a4,16
+    8000416c:	86a6                	mv	a3,s1
+    8000416e:	fc040613          	addi	a2,s0,-64
+    80004172:	4581                	li	a1,0
+    80004174:	854a                	mv	a0,s2
+    80004176:	00000097          	auipc	ra,0x0
+    8000417a:	d70080e7          	jalr	-656(ra) # 80003ee6 <readi>
+    8000417e:	47c1                	li	a5,16
+    80004180:	fcf518e3          	bne	a0,a5,80004150 <dirlookup+0x3a>
     if(de.inum == 0)
-    80005288:	fc045783          	lhu	a5,-64(s0)
-    8000528c:	dfe1                	beqz	a5,80005264 <dirlookup+0x4a>
+    80004184:	fc045783          	lhu	a5,-64(s0)
+    80004188:	dfe1                	beqz	a5,80004160 <dirlookup+0x4a>
     if(namecmp(name, de.name) == 0){
-    8000528e:	fc240593          	addi	a1,s0,-62
-    80005292:	854e                	mv	a0,s3
-    80005294:	00000097          	auipc	ra,0x0
-    80005298:	f6c080e7          	jalr	-148(ra) # 80005200 <namecmp>
-    8000529c:	f561                	bnez	a0,80005264 <dirlookup+0x4a>
+    8000418a:	fc240593          	addi	a1,s0,-62
+    8000418e:	854e                	mv	a0,s3
+    80004190:	00000097          	auipc	ra,0x0
+    80004194:	f6c080e7          	jalr	-148(ra) # 800040fc <namecmp>
+    80004198:	f561                	bnez	a0,80004160 <dirlookup+0x4a>
       if(poff)
-    8000529e:	000a0463          	beqz	s4,800052a6 <dirlookup+0x8c>
+    8000419a:	000a0463          	beqz	s4,800041a2 <dirlookup+0x8c>
         *poff = off;
-    800052a2:	009a2023          	sw	s1,0(s4)
+    8000419e:	009a2023          	sw	s1,0(s4)
       return iget(dp->dev, inum);
-    800052a6:	fc045583          	lhu	a1,-64(s0)
-    800052aa:	00092503          	lw	a0,0(s2)
-    800052ae:	fffff097          	auipc	ra,0xfffff
-    800052b2:	754080e7          	jalr	1876(ra) # 80004a02 <iget>
-    800052b6:	a011                	j	800052ba <dirlookup+0xa0>
+    800041a2:	fc045583          	lhu	a1,-64(s0)
+    800041a6:	00092503          	lw	a0,0(s2)
+    800041aa:	fffff097          	auipc	ra,0xfffff
+    800041ae:	754080e7          	jalr	1876(ra) # 800038fe <iget>
+    800041b2:	a011                	j	800041b6 <dirlookup+0xa0>
   return 0;
-    800052b8:	4501                	li	a0,0
-}
-    800052ba:	70e2                	ld	ra,56(sp)
-    800052bc:	7442                	ld	s0,48(sp)
-    800052be:	74a2                	ld	s1,40(sp)
-    800052c0:	7902                	ld	s2,32(sp)
-    800052c2:	69e2                	ld	s3,24(sp)
-    800052c4:	6a42                	ld	s4,16(sp)
-    800052c6:	6121                	addi	sp,sp,64
-    800052c8:	8082                	ret
-
-00000000800052ca <namex>:
+    800041b4:	4501                	li	a0,0
+}
+    800041b6:	70e2                	ld	ra,56(sp)
+    800041b8:	7442                	ld	s0,48(sp)
+    800041ba:	74a2                	ld	s1,40(sp)
+    800041bc:	7902                	ld	s2,32(sp)
+    800041be:	69e2                	ld	s3,24(sp)
+    800041c0:	6a42                	ld	s4,16(sp)
+    800041c2:	6121                	addi	sp,sp,64
+    800041c4:	8082                	ret
+
+00000000800041c6 <namex>:
 // If parent != 0, return the inode for the parent and copy the final
 // path element into name, which must have room for DIRSIZ bytes.
 // Must be called inside a transaction since it calls iput().
 static struct inode*
 namex(char *path, int nameiparent, char *name)
 {
-    800052ca:	711d                	addi	sp,sp,-96
-    800052cc:	ec86                	sd	ra,88(sp)
-    800052ce:	e8a2                	sd	s0,80(sp)
-    800052d0:	e4a6                	sd	s1,72(sp)
-    800052d2:	e0ca                	sd	s2,64(sp)
-    800052d4:	fc4e                	sd	s3,56(sp)
-    800052d6:	f852                	sd	s4,48(sp)
-    800052d8:	f456                	sd	s5,40(sp)
-    800052da:	f05a                	sd	s6,32(sp)
-    800052dc:	ec5e                	sd	s7,24(sp)
-    800052de:	e862                	sd	s8,16(sp)
-    800052e0:	e466                	sd	s9,8(sp)
-    800052e2:	1080                	addi	s0,sp,96
-    800052e4:	84aa                	mv	s1,a0
-    800052e6:	8b2e                	mv	s6,a1
-    800052e8:	8ab2                	mv	s5,a2
+    800041c6:	711d                	addi	sp,sp,-96
+    800041c8:	ec86                	sd	ra,88(sp)
+    800041ca:	e8a2                	sd	s0,80(sp)
+    800041cc:	e4a6                	sd	s1,72(sp)
+    800041ce:	e0ca                	sd	s2,64(sp)
+    800041d0:	fc4e                	sd	s3,56(sp)
+    800041d2:	f852                	sd	s4,48(sp)
+    800041d4:	f456                	sd	s5,40(sp)
+    800041d6:	f05a                	sd	s6,32(sp)
+    800041d8:	ec5e                	sd	s7,24(sp)
+    800041da:	e862                	sd	s8,16(sp)
+    800041dc:	e466                	sd	s9,8(sp)
+    800041de:	1080                	addi	s0,sp,96
+    800041e0:	84aa                	mv	s1,a0
+    800041e2:	8b2e                	mv	s6,a1
+    800041e4:	8ab2                	mv	s5,a2
   struct inode *ip, *next;
 
   if(*path == '/')
-    800052ea:	00054703          	lbu	a4,0(a0)
-    800052ee:	02f00793          	li	a5,47
-    800052f2:	02f70363          	beq	a4,a5,80005318 <namex+0x4e>
+    800041e6:	00054703          	lbu	a4,0(a0)
+    800041ea:	02f00793          	li	a5,47
+    800041ee:	02f70363          	beq	a4,a5,80004214 <namex+0x4e>
     ip = iget(ROOTDEV, ROOTINO);
   else
     ip = idup(myproc()->cwd);
-    800052f6:	ffffd097          	auipc	ra,0xffffd
-    800052fa:	89e080e7          	jalr	-1890(ra) # 80001b94 <myproc>
-    800052fe:	18053503          	ld	a0,384(a0)
-    80005302:	00000097          	auipc	ra,0x0
-    80005306:	9f6080e7          	jalr	-1546(ra) # 80004cf8 <idup>
-    8000530a:	89aa                	mv	s3,a0
+    800041f2:	ffffe097          	auipc	ra,0xffffe
+    800041f6:	ade080e7          	jalr	-1314(ra) # 80001cd0 <myproc>
+    800041fa:	15053503          	ld	a0,336(a0)
+    800041fe:	00000097          	auipc	ra,0x0
+    80004202:	9f6080e7          	jalr	-1546(ra) # 80003bf4 <idup>
+    80004206:	89aa                	mv	s3,a0
   while(*path == '/')
-    8000530c:	02f00913          	li	s2,47
+    80004208:	02f00913          	li	s2,47
   len = path - s;
-    80005310:	4b81                	li	s7,0
+    8000420c:	4b81                	li	s7,0
   if(len >= DIRSIZ)
-    80005312:	4cb5                	li	s9,13
+    8000420e:	4cb5                	li	s9,13
 
   while((path = skipelem(path, name)) != 0){
     ilock(ip);
     if(ip->type != T_DIR){
-    80005314:	4c05                	li	s8,1
-    80005316:	a865                	j	800053ce <namex+0x104>
+    80004210:	4c05                	li	s8,1
+    80004212:	a865                	j	800042ca <namex+0x104>
     ip = iget(ROOTDEV, ROOTINO);
-    80005318:	4585                	li	a1,1
-    8000531a:	4505                	li	a0,1
-    8000531c:	fffff097          	auipc	ra,0xfffff
-    80005320:	6e6080e7          	jalr	1766(ra) # 80004a02 <iget>
-    80005324:	89aa                	mv	s3,a0
-    80005326:	b7dd                	j	8000530c <namex+0x42>
+    80004214:	4585                	li	a1,1
+    80004216:	4505                	li	a0,1
+    80004218:	fffff097          	auipc	ra,0xfffff
+    8000421c:	6e6080e7          	jalr	1766(ra) # 800038fe <iget>
+    80004220:	89aa                	mv	s3,a0
+    80004222:	b7dd                	j	80004208 <namex+0x42>
       iunlockput(ip);
-    80005328:	854e                	mv	a0,s3
-    8000532a:	00000097          	auipc	ra,0x0
-    8000532e:	c6e080e7          	jalr	-914(ra) # 80004f98 <iunlockput>
+    80004224:	854e                	mv	a0,s3
+    80004226:	00000097          	auipc	ra,0x0
+    8000422a:	c6e080e7          	jalr	-914(ra) # 80003e94 <iunlockput>
       return 0;
-    80005332:	4981                	li	s3,0
+    8000422e:	4981                	li	s3,0
   if(nameiparent){
     iput(ip);
     return 0;
   }
   return ip;
 }
-    80005334:	854e                	mv	a0,s3
-    80005336:	60e6                	ld	ra,88(sp)
-    80005338:	6446                	ld	s0,80(sp)
-    8000533a:	64a6                	ld	s1,72(sp)
-    8000533c:	6906                	ld	s2,64(sp)
-    8000533e:	79e2                	ld	s3,56(sp)
-    80005340:	7a42                	ld	s4,48(sp)
-    80005342:	7aa2                	ld	s5,40(sp)
-    80005344:	7b02                	ld	s6,32(sp)
-    80005346:	6be2                	ld	s7,24(sp)
-    80005348:	6c42                	ld	s8,16(sp)
-    8000534a:	6ca2                	ld	s9,8(sp)
-    8000534c:	6125                	addi	sp,sp,96
-    8000534e:	8082                	ret
+    80004230:	854e                	mv	a0,s3
+    80004232:	60e6                	ld	ra,88(sp)
+    80004234:	6446                	ld	s0,80(sp)
+    80004236:	64a6                	ld	s1,72(sp)
+    80004238:	6906                	ld	s2,64(sp)
+    8000423a:	79e2                	ld	s3,56(sp)
+    8000423c:	7a42                	ld	s4,48(sp)
+    8000423e:	7aa2                	ld	s5,40(sp)
+    80004240:	7b02                	ld	s6,32(sp)
+    80004242:	6be2                	ld	s7,24(sp)
+    80004244:	6c42                	ld	s8,16(sp)
+    80004246:	6ca2                	ld	s9,8(sp)
+    80004248:	6125                	addi	sp,sp,96
+    8000424a:	8082                	ret
       iunlock(ip);
-    80005350:	854e                	mv	a0,s3
-    80005352:	00000097          	auipc	ra,0x0
-    80005356:	aa6080e7          	jalr	-1370(ra) # 80004df8 <iunlock>
+    8000424c:	854e                	mv	a0,s3
+    8000424e:	00000097          	auipc	ra,0x0
+    80004252:	aa6080e7          	jalr	-1370(ra) # 80003cf4 <iunlock>
       return ip;
-    8000535a:	bfe9                	j	80005334 <namex+0x6a>
+    80004256:	bfe9                	j	80004230 <namex+0x6a>
       iunlockput(ip);
-    8000535c:	854e                	mv	a0,s3
-    8000535e:	00000097          	auipc	ra,0x0
-    80005362:	c3a080e7          	jalr	-966(ra) # 80004f98 <iunlockput>
+    80004258:	854e                	mv	a0,s3
+    8000425a:	00000097          	auipc	ra,0x0
+    8000425e:	c3a080e7          	jalr	-966(ra) # 80003e94 <iunlockput>
       return 0;
-    80005366:	89d2                	mv	s3,s4
-    80005368:	b7f1                	j	80005334 <namex+0x6a>
+    80004262:	89d2                	mv	s3,s4
+    80004264:	b7f1                	j	80004230 <namex+0x6a>
   len = path - s;
-    8000536a:	40b48633          	sub	a2,s1,a1
-    8000536e:	00060a1b          	sext.w	s4,a2
+    80004266:	40b48633          	sub	a2,s1,a1
+    8000426a:	00060a1b          	sext.w	s4,a2
   if(len >= DIRSIZ)
-    80005372:	094cd463          	bge	s9,s4,800053fa <namex+0x130>
+    8000426e:	094cd463          	bge	s9,s4,800042f6 <namex+0x130>
     memmove(name, s, DIRSIZ);
-    80005376:	4639                	li	a2,14
-    80005378:	8556                	mv	a0,s5
-    8000537a:	ffffc097          	auipc	ra,0xffffc
-    8000537e:	9c6080e7          	jalr	-1594(ra) # 80000d40 <memmove>
+    80004272:	4639                	li	a2,14
+    80004274:	8556                	mv	a0,s5
+    80004276:	ffffd097          	auipc	ra,0xffffd
+    8000427a:	aca080e7          	jalr	-1334(ra) # 80000d40 <memmove>
   while(*path == '/')
-    80005382:	0004c783          	lbu	a5,0(s1)
-    80005386:	01279763          	bne	a5,s2,80005394 <namex+0xca>
+    8000427e:	0004c783          	lbu	a5,0(s1)
+    80004282:	01279763          	bne	a5,s2,80004290 <namex+0xca>
     path++;
-    8000538a:	0485                	addi	s1,s1,1
+    80004286:	0485                	addi	s1,s1,1
   while(*path == '/')
-    8000538c:	0004c783          	lbu	a5,0(s1)
-    80005390:	ff278de3          	beq	a5,s2,8000538a <namex+0xc0>
+    80004288:	0004c783          	lbu	a5,0(s1)
+    8000428c:	ff278de3          	beq	a5,s2,80004286 <namex+0xc0>
     ilock(ip);
-    80005394:	854e                	mv	a0,s3
-    80005396:	00000097          	auipc	ra,0x0
-    8000539a:	9a0080e7          	jalr	-1632(ra) # 80004d36 <ilock>
+    80004290:	854e                	mv	a0,s3
+    80004292:	00000097          	auipc	ra,0x0
+    80004296:	9a0080e7          	jalr	-1632(ra) # 80003c32 <ilock>
     if(ip->type != T_DIR){
-    8000539e:	04499783          	lh	a5,68(s3)
-    800053a2:	f98793e3          	bne	a5,s8,80005328 <namex+0x5e>
+    8000429a:	04499783          	lh	a5,68(s3)
+    8000429e:	f98793e3          	bne	a5,s8,80004224 <namex+0x5e>
     if(nameiparent && *path == '\0'){
-    800053a6:	000b0563          	beqz	s6,800053b0 <namex+0xe6>
-    800053aa:	0004c783          	lbu	a5,0(s1)
-    800053ae:	d3cd                	beqz	a5,80005350 <namex+0x86>
+    800042a2:	000b0563          	beqz	s6,800042ac <namex+0xe6>
+    800042a6:	0004c783          	lbu	a5,0(s1)
+    800042aa:	d3cd                	beqz	a5,8000424c <namex+0x86>
     if((next = dirlookup(ip, name, 0)) == 0){
-    800053b0:	865e                	mv	a2,s7
-    800053b2:	85d6                	mv	a1,s5
-    800053b4:	854e                	mv	a0,s3
-    800053b6:	00000097          	auipc	ra,0x0
-    800053ba:	e64080e7          	jalr	-412(ra) # 8000521a <dirlookup>
-    800053be:	8a2a                	mv	s4,a0
-    800053c0:	dd51                	beqz	a0,8000535c <namex+0x92>
+    800042ac:	865e                	mv	a2,s7
+    800042ae:	85d6                	mv	a1,s5
+    800042b0:	854e                	mv	a0,s3
+    800042b2:	00000097          	auipc	ra,0x0
+    800042b6:	e64080e7          	jalr	-412(ra) # 80004116 <dirlookup>
+    800042ba:	8a2a                	mv	s4,a0
+    800042bc:	dd51                	beqz	a0,80004258 <namex+0x92>
     iunlockput(ip);
-    800053c2:	854e                	mv	a0,s3
-    800053c4:	00000097          	auipc	ra,0x0
-    800053c8:	bd4080e7          	jalr	-1068(ra) # 80004f98 <iunlockput>
+    800042be:	854e                	mv	a0,s3
+    800042c0:	00000097          	auipc	ra,0x0
+    800042c4:	bd4080e7          	jalr	-1068(ra) # 80003e94 <iunlockput>
     ip = next;
-    800053cc:	89d2                	mv	s3,s4
+    800042c8:	89d2                	mv	s3,s4
   while(*path == '/')
-    800053ce:	0004c783          	lbu	a5,0(s1)
-    800053d2:	05279763          	bne	a5,s2,80005420 <namex+0x156>
+    800042ca:	0004c783          	lbu	a5,0(s1)
+    800042ce:	05279763          	bne	a5,s2,8000431c <namex+0x156>
     path++;
-    800053d6:	0485                	addi	s1,s1,1
+    800042d2:	0485                	addi	s1,s1,1
   while(*path == '/')
-    800053d8:	0004c783          	lbu	a5,0(s1)
-    800053dc:	ff278de3          	beq	a5,s2,800053d6 <namex+0x10c>
+    800042d4:	0004c783          	lbu	a5,0(s1)
+    800042d8:	ff278de3          	beq	a5,s2,800042d2 <namex+0x10c>
   if(*path == 0)
-    800053e0:	c79d                	beqz	a5,8000540e <namex+0x144>
+    800042dc:	c79d                	beqz	a5,8000430a <namex+0x144>
     path++;
-    800053e2:	85a6                	mv	a1,s1
+    800042de:	85a6                	mv	a1,s1
   len = path - s;
-    800053e4:	8a5e                	mv	s4,s7
-    800053e6:	865e                	mv	a2,s7
+    800042e0:	8a5e                	mv	s4,s7
+    800042e2:	865e                	mv	a2,s7
   while(*path != '/' && *path != 0)
-    800053e8:	01278963          	beq	a5,s2,800053fa <namex+0x130>
-    800053ec:	dfbd                	beqz	a5,8000536a <namex+0xa0>
+    800042e4:	01278963          	beq	a5,s2,800042f6 <namex+0x130>
+    800042e8:	dfbd                	beqz	a5,80004266 <namex+0xa0>
     path++;
-    800053ee:	0485                	addi	s1,s1,1
+    800042ea:	0485                	addi	s1,s1,1
   while(*path != '/' && *path != 0)
-    800053f0:	0004c783          	lbu	a5,0(s1)
-    800053f4:	ff279ce3          	bne	a5,s2,800053ec <namex+0x122>
-    800053f8:	bf8d                	j	8000536a <namex+0xa0>
+    800042ec:	0004c783          	lbu	a5,0(s1)
+    800042f0:	ff279ce3          	bne	a5,s2,800042e8 <namex+0x122>
+    800042f4:	bf8d                	j	80004266 <namex+0xa0>
     memmove(name, s, len);
-    800053fa:	2601                	sext.w	a2,a2
-    800053fc:	8556                	mv	a0,s5
-    800053fe:	ffffc097          	auipc	ra,0xffffc
-    80005402:	942080e7          	jalr	-1726(ra) # 80000d40 <memmove>
+    800042f6:	2601                	sext.w	a2,a2
+    800042f8:	8556                	mv	a0,s5
+    800042fa:	ffffd097          	auipc	ra,0xffffd
+    800042fe:	a46080e7          	jalr	-1466(ra) # 80000d40 <memmove>
     name[len] = 0;
-    80005406:	9a56                	add	s4,s4,s5
-    80005408:	000a0023          	sb	zero,0(s4)
-    8000540c:	bf9d                	j	80005382 <namex+0xb8>
+    80004302:	9a56                	add	s4,s4,s5
+    80004304:	000a0023          	sb	zero,0(s4)
+    80004308:	bf9d                	j	8000427e <namex+0xb8>
   if(nameiparent){
-    8000540e:	f20b03e3          	beqz	s6,80005334 <namex+0x6a>
+    8000430a:	f20b03e3          	beqz	s6,80004230 <namex+0x6a>
     iput(ip);
-    80005412:	854e                	mv	a0,s3
-    80005414:	00000097          	auipc	ra,0x0
-    80005418:	adc080e7          	jalr	-1316(ra) # 80004ef0 <iput>
+    8000430e:	854e                	mv	a0,s3
+    80004310:	00000097          	auipc	ra,0x0
+    80004314:	adc080e7          	jalr	-1316(ra) # 80003dec <iput>
     return 0;
-    8000541c:	4981                	li	s3,0
-    8000541e:	bf19                	j	80005334 <namex+0x6a>
+    80004318:	4981                	li	s3,0
+    8000431a:	bf19                	j	80004230 <namex+0x6a>
   if(*path == 0)
-    80005420:	d7fd                	beqz	a5,8000540e <namex+0x144>
+    8000431c:	d7fd                	beqz	a5,8000430a <namex+0x144>
   while(*path != '/' && *path != 0)
-    80005422:	0004c783          	lbu	a5,0(s1)
-    80005426:	85a6                	mv	a1,s1
-    80005428:	b7d1                	j	800053ec <namex+0x122>
-
-000000008000542a <dirlink>:
-{
-    8000542a:	7139                	addi	sp,sp,-64
-    8000542c:	fc06                	sd	ra,56(sp)
-    8000542e:	f822                	sd	s0,48(sp)
-    80005430:	f426                	sd	s1,40(sp)
-    80005432:	f04a                	sd	s2,32(sp)
-    80005434:	ec4e                	sd	s3,24(sp)
-    80005436:	e852                	sd	s4,16(sp)
-    80005438:	0080                	addi	s0,sp,64
-    8000543a:	892a                	mv	s2,a0
-    8000543c:	8a2e                	mv	s4,a1
-    8000543e:	89b2                	mv	s3,a2
+    8000431e:	0004c783          	lbu	a5,0(s1)
+    80004322:	85a6                	mv	a1,s1
+    80004324:	b7d1                	j	800042e8 <namex+0x122>
+
+0000000080004326 <dirlink>:
+{
+    80004326:	7139                	addi	sp,sp,-64
+    80004328:	fc06                	sd	ra,56(sp)
+    8000432a:	f822                	sd	s0,48(sp)
+    8000432c:	f426                	sd	s1,40(sp)
+    8000432e:	f04a                	sd	s2,32(sp)
+    80004330:	ec4e                	sd	s3,24(sp)
+    80004332:	e852                	sd	s4,16(sp)
+    80004334:	0080                	addi	s0,sp,64
+    80004336:	892a                	mv	s2,a0
+    80004338:	8a2e                	mv	s4,a1
+    8000433a:	89b2                	mv	s3,a2
   if((ip = dirlookup(dp, name, 0)) != 0){
-    80005440:	4601                	li	a2,0
-    80005442:	00000097          	auipc	ra,0x0
-    80005446:	dd8080e7          	jalr	-552(ra) # 8000521a <dirlookup>
-    8000544a:	e93d                	bnez	a0,800054c0 <dirlink+0x96>
+    8000433c:	4601                	li	a2,0
+    8000433e:	00000097          	auipc	ra,0x0
+    80004342:	dd8080e7          	jalr	-552(ra) # 80004116 <dirlookup>
+    80004346:	e93d                	bnez	a0,800043bc <dirlink+0x96>
   for(off = 0; off < dp->size; off += sizeof(de)){
-    8000544c:	04c92483          	lw	s1,76(s2)
-    80005450:	c49d                	beqz	s1,8000547e <dirlink+0x54>
-    80005452:	4481                	li	s1,0
+    80004348:	04c92483          	lw	s1,76(s2)
+    8000434c:	c49d                	beqz	s1,8000437a <dirlink+0x54>
+    8000434e:	4481                	li	s1,0
     if(readi(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
-    80005454:	4741                	li	a4,16
-    80005456:	86a6                	mv	a3,s1
-    80005458:	fc040613          	addi	a2,s0,-64
-    8000545c:	4581                	li	a1,0
-    8000545e:	854a                	mv	a0,s2
-    80005460:	00000097          	auipc	ra,0x0
-    80005464:	b8a080e7          	jalr	-1142(ra) # 80004fea <readi>
-    80005468:	47c1                	li	a5,16
-    8000546a:	06f51163          	bne	a0,a5,800054cc <dirlink+0xa2>
+    80004350:	4741                	li	a4,16
+    80004352:	86a6                	mv	a3,s1
+    80004354:	fc040613          	addi	a2,s0,-64
+    80004358:	4581                	li	a1,0
+    8000435a:	854a                	mv	a0,s2
+    8000435c:	00000097          	auipc	ra,0x0
+    80004360:	b8a080e7          	jalr	-1142(ra) # 80003ee6 <readi>
+    80004364:	47c1                	li	a5,16
+    80004366:	06f51163          	bne	a0,a5,800043c8 <dirlink+0xa2>
     if(de.inum == 0)
-    8000546e:	fc045783          	lhu	a5,-64(s0)
-    80005472:	c791                	beqz	a5,8000547e <dirlink+0x54>
+    8000436a:	fc045783          	lhu	a5,-64(s0)
+    8000436e:	c791                	beqz	a5,8000437a <dirlink+0x54>
   for(off = 0; off < dp->size; off += sizeof(de)){
-    80005474:	24c1                	addiw	s1,s1,16
-    80005476:	04c92783          	lw	a5,76(s2)
-    8000547a:	fcf4ede3          	bltu	s1,a5,80005454 <dirlink+0x2a>
+    80004370:	24c1                	addiw	s1,s1,16
+    80004372:	04c92783          	lw	a5,76(s2)
+    80004376:	fcf4ede3          	bltu	s1,a5,80004350 <dirlink+0x2a>
   strncpy(de.name, name, DIRSIZ);
-    8000547e:	4639                	li	a2,14
-    80005480:	85d2                	mv	a1,s4
-    80005482:	fc240513          	addi	a0,s0,-62
-    80005486:	ffffc097          	auipc	ra,0xffffc
-    8000548a:	96e080e7          	jalr	-1682(ra) # 80000df4 <strncpy>
+    8000437a:	4639                	li	a2,14
+    8000437c:	85d2                	mv	a1,s4
+    8000437e:	fc240513          	addi	a0,s0,-62
+    80004382:	ffffd097          	auipc	ra,0xffffd
+    80004386:	a72080e7          	jalr	-1422(ra) # 80000df4 <strncpy>
   de.inum = inum;
-    8000548e:	fd341023          	sh	s3,-64(s0)
+    8000438a:	fd341023          	sh	s3,-64(s0)
   if(writei(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
-    80005492:	4741                	li	a4,16
-    80005494:	86a6                	mv	a3,s1
-    80005496:	fc040613          	addi	a2,s0,-64
-    8000549a:	4581                	li	a1,0
-    8000549c:	854a                	mv	a0,s2
-    8000549e:	00000097          	auipc	ra,0x0
-    800054a2:	c44080e7          	jalr	-956(ra) # 800050e2 <writei>
-    800054a6:	872a                	mv	a4,a0
-    800054a8:	47c1                	li	a5,16
+    8000438e:	4741                	li	a4,16
+    80004390:	86a6                	mv	a3,s1
+    80004392:	fc040613          	addi	a2,s0,-64
+    80004396:	4581                	li	a1,0
+    80004398:	854a                	mv	a0,s2
+    8000439a:	00000097          	auipc	ra,0x0
+    8000439e:	c44080e7          	jalr	-956(ra) # 80003fde <writei>
+    800043a2:	872a                	mv	a4,a0
+    800043a4:	47c1                	li	a5,16
   return 0;
-    800054aa:	4501                	li	a0,0
+    800043a6:	4501                	li	a0,0
   if(writei(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
-    800054ac:	02f71863          	bne	a4,a5,800054dc <dirlink+0xb2>
-}
-    800054b0:	70e2                	ld	ra,56(sp)
-    800054b2:	7442                	ld	s0,48(sp)
-    800054b4:	74a2                	ld	s1,40(sp)
-    800054b6:	7902                	ld	s2,32(sp)
-    800054b8:	69e2                	ld	s3,24(sp)
-    800054ba:	6a42                	ld	s4,16(sp)
-    800054bc:	6121                	addi	sp,sp,64
-    800054be:	8082                	ret
+    800043a8:	02f71863          	bne	a4,a5,800043d8 <dirlink+0xb2>
+}
+    800043ac:	70e2                	ld	ra,56(sp)
+    800043ae:	7442                	ld	s0,48(sp)
+    800043b0:	74a2                	ld	s1,40(sp)
+    800043b2:	7902                	ld	s2,32(sp)
+    800043b4:	69e2                	ld	s3,24(sp)
+    800043b6:	6a42                	ld	s4,16(sp)
+    800043b8:	6121                	addi	sp,sp,64
+    800043ba:	8082                	ret
     iput(ip);
-    800054c0:	00000097          	auipc	ra,0x0
-    800054c4:	a30080e7          	jalr	-1488(ra) # 80004ef0 <iput>
+    800043bc:	00000097          	auipc	ra,0x0
+    800043c0:	a30080e7          	jalr	-1488(ra) # 80003dec <iput>
     return -1;
-    800054c8:	557d                	li	a0,-1
-    800054ca:	b7dd                	j	800054b0 <dirlink+0x86>
+    800043c4:	557d                	li	a0,-1
+    800043c6:	b7dd                	j	800043ac <dirlink+0x86>
       panic("dirlink read");
-    800054cc:	00004517          	auipc	a0,0x4
-    800054d0:	54c50513          	addi	a0,a0,1356 # 80009a18 <syscalls+0x1f0>
-    800054d4:	ffffb097          	auipc	ra,0xffffb
-    800054d8:	06a080e7          	jalr	106(ra) # 8000053e <panic>
+    800043c8:	00004517          	auipc	a0,0x4
+    800043cc:	2e050513          	addi	a0,a0,736 # 800086a8 <syscalls+0x1d8>
+    800043d0:	ffffc097          	auipc	ra,0xffffc
+    800043d4:	16e080e7          	jalr	366(ra) # 8000053e <panic>
     panic("dirlink");
-    800054dc:	00004517          	auipc	a0,0x4
-    800054e0:	64c50513          	addi	a0,a0,1612 # 80009b28 <syscalls+0x300>
-    800054e4:	ffffb097          	auipc	ra,0xffffb
-    800054e8:	05a080e7          	jalr	90(ra) # 8000053e <panic>
+    800043d8:	00004517          	auipc	a0,0x4
+    800043dc:	3e050513          	addi	a0,a0,992 # 800087b8 <syscalls+0x2e8>
+    800043e0:	ffffc097          	auipc	ra,0xffffc
+    800043e4:	15e080e7          	jalr	350(ra) # 8000053e <panic>
 
-00000000800054ec <namei>:
+00000000800043e8 <namei>:
 
 struct inode*
 namei(char *path)
 {
-    800054ec:	1101                	addi	sp,sp,-32
-    800054ee:	ec06                	sd	ra,24(sp)
-    800054f0:	e822                	sd	s0,16(sp)
-    800054f2:	1000                	addi	s0,sp,32
+    800043e8:	1101                	addi	sp,sp,-32
+    800043ea:	ec06                	sd	ra,24(sp)
+    800043ec:	e822                	sd	s0,16(sp)
+    800043ee:	1000                	addi	s0,sp,32
   char name[DIRSIZ];
   return namex(path, 0, name);
-    800054f4:	fe040613          	addi	a2,s0,-32
-    800054f8:	4581                	li	a1,0
-    800054fa:	00000097          	auipc	ra,0x0
-    800054fe:	dd0080e7          	jalr	-560(ra) # 800052ca <namex>
+    800043f0:	fe040613          	addi	a2,s0,-32
+    800043f4:	4581                	li	a1,0
+    800043f6:	00000097          	auipc	ra,0x0
+    800043fa:	dd0080e7          	jalr	-560(ra) # 800041c6 <namex>
 }
-    80005502:	60e2                	ld	ra,24(sp)
-    80005504:	6442                	ld	s0,16(sp)
-    80005506:	6105                	addi	sp,sp,32
-    80005508:	8082                	ret
+    800043fe:	60e2                	ld	ra,24(sp)
+    80004400:	6442                	ld	s0,16(sp)
+    80004402:	6105                	addi	sp,sp,32
+    80004404:	8082                	ret
 
-000000008000550a <nameiparent>:
+0000000080004406 <nameiparent>:
 
 struct inode*
 nameiparent(char *path, char *name)
 {
-    8000550a:	1141                	addi	sp,sp,-16
-    8000550c:	e406                	sd	ra,8(sp)
-    8000550e:	e022                	sd	s0,0(sp)
-    80005510:	0800                	addi	s0,sp,16
-    80005512:	862e                	mv	a2,a1
+    80004406:	1141                	addi	sp,sp,-16
+    80004408:	e406                	sd	ra,8(sp)
+    8000440a:	e022                	sd	s0,0(sp)
+    8000440c:	0800                	addi	s0,sp,16
+    8000440e:	862e                	mv	a2,a1
   return namex(path, 1, name);
-    80005514:	4585                	li	a1,1
-    80005516:	00000097          	auipc	ra,0x0
-    8000551a:	db4080e7          	jalr	-588(ra) # 800052ca <namex>
+    80004410:	4585                	li	a1,1
+    80004412:	00000097          	auipc	ra,0x0
+    80004416:	db4080e7          	jalr	-588(ra) # 800041c6 <namex>
 }
-    8000551e:	60a2                	ld	ra,8(sp)
-    80005520:	6402                	ld	s0,0(sp)
-    80005522:	0141                	addi	sp,sp,16
-    80005524:	8082                	ret
+    8000441a:	60a2                	ld	ra,8(sp)
+    8000441c:	6402                	ld	s0,0(sp)
+    8000441e:	0141                	addi	sp,sp,16
+    80004420:	8082                	ret
 
-0000000080005526 <write_head>:
+0000000080004422 <write_head>:
 // Write in-memory log header to disk.
 // This is the true point at which the
 // current transaction commits.
 static void
 write_head(void)
 {
-    80005526:	1101                	addi	sp,sp,-32
-    80005528:	ec06                	sd	ra,24(sp)
-    8000552a:	e822                	sd	s0,16(sp)
-    8000552c:	e426                	sd	s1,8(sp)
-    8000552e:	e04a                	sd	s2,0(sp)
-    80005530:	1000                	addi	s0,sp,32
+    80004422:	1101                	addi	sp,sp,-32
+    80004424:	ec06                	sd	ra,24(sp)
+    80004426:	e822                	sd	s0,16(sp)
+    80004428:	e426                	sd	s1,8(sp)
+    8000442a:	e04a                	sd	s2,0(sp)
+    8000442c:	1000                	addi	s0,sp,32
   struct buf *buf = bread(log.dev, log.start);
-    80005532:	0001e917          	auipc	s2,0x1e
-    80005536:	9de90913          	addi	s2,s2,-1570 # 80022f10 <log>
-    8000553a:	01892583          	lw	a1,24(s2)
-    8000553e:	02892503          	lw	a0,40(s2)
-    80005542:	fffff097          	auipc	ra,0xfffff
-    80005546:	ff2080e7          	jalr	-14(ra) # 80004534 <bread>
-    8000554a:	84aa                	mv	s1,a0
+    8000442e:	0001e917          	auipc	s2,0x1e
+    80004432:	98290913          	addi	s2,s2,-1662 # 80021db0 <log>
+    80004436:	01892583          	lw	a1,24(s2)
+    8000443a:	02892503          	lw	a0,40(s2)
+    8000443e:	fffff097          	auipc	ra,0xfffff
+    80004442:	ff2080e7          	jalr	-14(ra) # 80003430 <bread>
+    80004446:	84aa                	mv	s1,a0
   struct logheader *hb = (struct logheader *) (buf->data);
   int i;
   hb->n = log.lh.n;
-    8000554c:	02c92683          	lw	a3,44(s2)
-    80005550:	cd34                	sw	a3,88(a0)
+    80004448:	02c92683          	lw	a3,44(s2)
+    8000444c:	cd34                	sw	a3,88(a0)
   for (i = 0; i < log.lh.n; i++) {
-    80005552:	02d05763          	blez	a3,80005580 <write_head+0x5a>
-    80005556:	0001e797          	auipc	a5,0x1e
-    8000555a:	9ea78793          	addi	a5,a5,-1558 # 80022f40 <log+0x30>
-    8000555e:	05c50713          	addi	a4,a0,92
-    80005562:	36fd                	addiw	a3,a3,-1
-    80005564:	1682                	slli	a3,a3,0x20
-    80005566:	9281                	srli	a3,a3,0x20
-    80005568:	068a                	slli	a3,a3,0x2
-    8000556a:	0001e617          	auipc	a2,0x1e
-    8000556e:	9da60613          	addi	a2,a2,-1574 # 80022f44 <log+0x34>
-    80005572:	96b2                	add	a3,a3,a2
+    8000444e:	02d05763          	blez	a3,8000447c <write_head+0x5a>
+    80004452:	0001e797          	auipc	a5,0x1e
+    80004456:	98e78793          	addi	a5,a5,-1650 # 80021de0 <log+0x30>
+    8000445a:	05c50713          	addi	a4,a0,92
+    8000445e:	36fd                	addiw	a3,a3,-1
+    80004460:	1682                	slli	a3,a3,0x20
+    80004462:	9281                	srli	a3,a3,0x20
+    80004464:	068a                	slli	a3,a3,0x2
+    80004466:	0001e617          	auipc	a2,0x1e
+    8000446a:	97e60613          	addi	a2,a2,-1666 # 80021de4 <log+0x34>
+    8000446e:	96b2                	add	a3,a3,a2
     hb->block[i] = log.lh.block[i];
-    80005574:	4390                	lw	a2,0(a5)
-    80005576:	c310                	sw	a2,0(a4)
+    80004470:	4390                	lw	a2,0(a5)
+    80004472:	c310                	sw	a2,0(a4)
   for (i = 0; i < log.lh.n; i++) {
-    80005578:	0791                	addi	a5,a5,4
-    8000557a:	0711                	addi	a4,a4,4
-    8000557c:	fed79ce3          	bne	a5,a3,80005574 <write_head+0x4e>
+    80004474:	0791                	addi	a5,a5,4
+    80004476:	0711                	addi	a4,a4,4
+    80004478:	fed79ce3          	bne	a5,a3,80004470 <write_head+0x4e>
   }
   bwrite(buf);
-    80005580:	8526                	mv	a0,s1
-    80005582:	fffff097          	auipc	ra,0xfffff
-    80005586:	0a4080e7          	jalr	164(ra) # 80004626 <bwrite>
+    8000447c:	8526                	mv	a0,s1
+    8000447e:	fffff097          	auipc	ra,0xfffff
+    80004482:	0a4080e7          	jalr	164(ra) # 80003522 <bwrite>
   brelse(buf);
-    8000558a:	8526                	mv	a0,s1
-    8000558c:	fffff097          	auipc	ra,0xfffff
-    80005590:	0d8080e7          	jalr	216(ra) # 80004664 <brelse>
-}
-    80005594:	60e2                	ld	ra,24(sp)
-    80005596:	6442                	ld	s0,16(sp)
-    80005598:	64a2                	ld	s1,8(sp)
-    8000559a:	6902                	ld	s2,0(sp)
-    8000559c:	6105                	addi	sp,sp,32
-    8000559e:	8082                	ret
-
-00000000800055a0 <install_trans>:
+    80004486:	8526                	mv	a0,s1
+    80004488:	fffff097          	auipc	ra,0xfffff
+    8000448c:	0d8080e7          	jalr	216(ra) # 80003560 <brelse>
+}
+    80004490:	60e2                	ld	ra,24(sp)
+    80004492:	6442                	ld	s0,16(sp)
+    80004494:	64a2                	ld	s1,8(sp)
+    80004496:	6902                	ld	s2,0(sp)
+    80004498:	6105                	addi	sp,sp,32
+    8000449a:	8082                	ret
+
+000000008000449c <install_trans>:
   for (tail = 0; tail < log.lh.n; tail++) {
-    800055a0:	0001e797          	auipc	a5,0x1e
-    800055a4:	99c7a783          	lw	a5,-1636(a5) # 80022f3c <log+0x2c>
-    800055a8:	0af05d63          	blez	a5,80005662 <install_trans+0xc2>
-{
-    800055ac:	7139                	addi	sp,sp,-64
-    800055ae:	fc06                	sd	ra,56(sp)
-    800055b0:	f822                	sd	s0,48(sp)
-    800055b2:	f426                	sd	s1,40(sp)
-    800055b4:	f04a                	sd	s2,32(sp)
-    800055b6:	ec4e                	sd	s3,24(sp)
-    800055b8:	e852                	sd	s4,16(sp)
-    800055ba:	e456                	sd	s5,8(sp)
-    800055bc:	e05a                	sd	s6,0(sp)
-    800055be:	0080                	addi	s0,sp,64
-    800055c0:	8b2a                	mv	s6,a0
-    800055c2:	0001ea97          	auipc	s5,0x1e
-    800055c6:	97ea8a93          	addi	s5,s5,-1666 # 80022f40 <log+0x30>
+    8000449c:	0001e797          	auipc	a5,0x1e
+    800044a0:	9407a783          	lw	a5,-1728(a5) # 80021ddc <log+0x2c>
+    800044a4:	0af05d63          	blez	a5,8000455e <install_trans+0xc2>
+{
+    800044a8:	7139                	addi	sp,sp,-64
+    800044aa:	fc06                	sd	ra,56(sp)
+    800044ac:	f822                	sd	s0,48(sp)
+    800044ae:	f426                	sd	s1,40(sp)
+    800044b0:	f04a                	sd	s2,32(sp)
+    800044b2:	ec4e                	sd	s3,24(sp)
+    800044b4:	e852                	sd	s4,16(sp)
+    800044b6:	e456                	sd	s5,8(sp)
+    800044b8:	e05a                	sd	s6,0(sp)
+    800044ba:	0080                	addi	s0,sp,64
+    800044bc:	8b2a                	mv	s6,a0
+    800044be:	0001ea97          	auipc	s5,0x1e
+    800044c2:	922a8a93          	addi	s5,s5,-1758 # 80021de0 <log+0x30>
   for (tail = 0; tail < log.lh.n; tail++) {
-    800055ca:	4a01                	li	s4,0
+    800044c6:	4a01                	li	s4,0
     struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
-    800055cc:	0001e997          	auipc	s3,0x1e
-    800055d0:	94498993          	addi	s3,s3,-1724 # 80022f10 <log>
-    800055d4:	a035                	j	80005600 <install_trans+0x60>
+    800044c8:	0001e997          	auipc	s3,0x1e
+    800044cc:	8e898993          	addi	s3,s3,-1816 # 80021db0 <log>
+    800044d0:	a035                	j	800044fc <install_trans+0x60>
       bunpin(dbuf);
-    800055d6:	8526                	mv	a0,s1
-    800055d8:	fffff097          	auipc	ra,0xfffff
-    800055dc:	166080e7          	jalr	358(ra) # 8000473e <bunpin>
+    800044d2:	8526                	mv	a0,s1
+    800044d4:	fffff097          	auipc	ra,0xfffff
+    800044d8:	166080e7          	jalr	358(ra) # 8000363a <bunpin>
     brelse(lbuf);
-    800055e0:	854a                	mv	a0,s2
-    800055e2:	fffff097          	auipc	ra,0xfffff
-    800055e6:	082080e7          	jalr	130(ra) # 80004664 <brelse>
+    800044dc:	854a                	mv	a0,s2
+    800044de:	fffff097          	auipc	ra,0xfffff
+    800044e2:	082080e7          	jalr	130(ra) # 80003560 <brelse>
     brelse(dbuf);
-    800055ea:	8526                	mv	a0,s1
-    800055ec:	fffff097          	auipc	ra,0xfffff
-    800055f0:	078080e7          	jalr	120(ra) # 80004664 <brelse>
+    800044e6:	8526                	mv	a0,s1
+    800044e8:	fffff097          	auipc	ra,0xfffff
+    800044ec:	078080e7          	jalr	120(ra) # 80003560 <brelse>
   for (tail = 0; tail < log.lh.n; tail++) {
-    800055f4:	2a05                	addiw	s4,s4,1
-    800055f6:	0a91                	addi	s5,s5,4
-    800055f8:	02c9a783          	lw	a5,44(s3)
-    800055fc:	04fa5963          	bge	s4,a5,8000564e <install_trans+0xae>
+    800044f0:	2a05                	addiw	s4,s4,1
+    800044f2:	0a91                	addi	s5,s5,4
+    800044f4:	02c9a783          	lw	a5,44(s3)
+    800044f8:	04fa5963          	bge	s4,a5,8000454a <install_trans+0xae>
     struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
-    80005600:	0189a583          	lw	a1,24(s3)
-    80005604:	014585bb          	addw	a1,a1,s4
-    80005608:	2585                	addiw	a1,a1,1
-    8000560a:	0289a503          	lw	a0,40(s3)
-    8000560e:	fffff097          	auipc	ra,0xfffff
-    80005612:	f26080e7          	jalr	-218(ra) # 80004534 <bread>
-    80005616:	892a                	mv	s2,a0
+    800044fc:	0189a583          	lw	a1,24(s3)
+    80004500:	014585bb          	addw	a1,a1,s4
+    80004504:	2585                	addiw	a1,a1,1
+    80004506:	0289a503          	lw	a0,40(s3)
+    8000450a:	fffff097          	auipc	ra,0xfffff
+    8000450e:	f26080e7          	jalr	-218(ra) # 80003430 <bread>
+    80004512:	892a                	mv	s2,a0
     struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
-    80005618:	000aa583          	lw	a1,0(s5)
-    8000561c:	0289a503          	lw	a0,40(s3)
-    80005620:	fffff097          	auipc	ra,0xfffff
-    80005624:	f14080e7          	jalr	-236(ra) # 80004534 <bread>
-    80005628:	84aa                	mv	s1,a0
+    80004514:	000aa583          	lw	a1,0(s5)
+    80004518:	0289a503          	lw	a0,40(s3)
+    8000451c:	fffff097          	auipc	ra,0xfffff
+    80004520:	f14080e7          	jalr	-236(ra) # 80003430 <bread>
+    80004524:	84aa                	mv	s1,a0
     memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
-    8000562a:	40000613          	li	a2,1024
-    8000562e:	05890593          	addi	a1,s2,88
-    80005632:	05850513          	addi	a0,a0,88
-    80005636:	ffffb097          	auipc	ra,0xffffb
-    8000563a:	70a080e7          	jalr	1802(ra) # 80000d40 <memmove>
+    80004526:	40000613          	li	a2,1024
+    8000452a:	05890593          	addi	a1,s2,88
+    8000452e:	05850513          	addi	a0,a0,88
+    80004532:	ffffd097          	auipc	ra,0xffffd
+    80004536:	80e080e7          	jalr	-2034(ra) # 80000d40 <memmove>
     bwrite(dbuf);  // write dst to disk
-    8000563e:	8526                	mv	a0,s1
-    80005640:	fffff097          	auipc	ra,0xfffff
-    80005644:	fe6080e7          	jalr	-26(ra) # 80004626 <bwrite>
+    8000453a:	8526                	mv	a0,s1
+    8000453c:	fffff097          	auipc	ra,0xfffff
+    80004540:	fe6080e7          	jalr	-26(ra) # 80003522 <bwrite>
     if(recovering == 0)
-    80005648:	f80b1ce3          	bnez	s6,800055e0 <install_trans+0x40>
-    8000564c:	b769                	j	800055d6 <install_trans+0x36>
-}
-    8000564e:	70e2                	ld	ra,56(sp)
-    80005650:	7442                	ld	s0,48(sp)
-    80005652:	74a2                	ld	s1,40(sp)
-    80005654:	7902                	ld	s2,32(sp)
-    80005656:	69e2                	ld	s3,24(sp)
-    80005658:	6a42                	ld	s4,16(sp)
-    8000565a:	6aa2                	ld	s5,8(sp)
-    8000565c:	6b02                	ld	s6,0(sp)
-    8000565e:	6121                	addi	sp,sp,64
-    80005660:	8082                	ret
-    80005662:	8082                	ret
-
-0000000080005664 <initlog>:
-{
-    80005664:	7179                	addi	sp,sp,-48
-    80005666:	f406                	sd	ra,40(sp)
-    80005668:	f022                	sd	s0,32(sp)
-    8000566a:	ec26                	sd	s1,24(sp)
-    8000566c:	e84a                	sd	s2,16(sp)
-    8000566e:	e44e                	sd	s3,8(sp)
-    80005670:	1800                	addi	s0,sp,48
-    80005672:	892a                	mv	s2,a0
-    80005674:	89ae                	mv	s3,a1
+    80004544:	f80b1ce3          	bnez	s6,800044dc <install_trans+0x40>
+    80004548:	b769                	j	800044d2 <install_trans+0x36>
+}
+    8000454a:	70e2                	ld	ra,56(sp)
+    8000454c:	7442                	ld	s0,48(sp)
+    8000454e:	74a2                	ld	s1,40(sp)
+    80004550:	7902                	ld	s2,32(sp)
+    80004552:	69e2                	ld	s3,24(sp)
+    80004554:	6a42                	ld	s4,16(sp)
+    80004556:	6aa2                	ld	s5,8(sp)
+    80004558:	6b02                	ld	s6,0(sp)
+    8000455a:	6121                	addi	sp,sp,64
+    8000455c:	8082                	ret
+    8000455e:	8082                	ret
+
+0000000080004560 <initlog>:
+{
+    80004560:	7179                	addi	sp,sp,-48
+    80004562:	f406                	sd	ra,40(sp)
+    80004564:	f022                	sd	s0,32(sp)
+    80004566:	ec26                	sd	s1,24(sp)
+    80004568:	e84a                	sd	s2,16(sp)
+    8000456a:	e44e                	sd	s3,8(sp)
+    8000456c:	1800                	addi	s0,sp,48
+    8000456e:	892a                	mv	s2,a0
+    80004570:	89ae                	mv	s3,a1
   initlock(&log.lock, "log");
-    80005676:	0001e497          	auipc	s1,0x1e
-    8000567a:	89a48493          	addi	s1,s1,-1894 # 80022f10 <log>
-    8000567e:	00004597          	auipc	a1,0x4
-    80005682:	3aa58593          	addi	a1,a1,938 # 80009a28 <syscalls+0x200>
-    80005686:	8526                	mv	a0,s1
-    80005688:	ffffb097          	auipc	ra,0xffffb
-    8000568c:	4cc080e7          	jalr	1228(ra) # 80000b54 <initlock>
+    80004572:	0001e497          	auipc	s1,0x1e
+    80004576:	83e48493          	addi	s1,s1,-1986 # 80021db0 <log>
+    8000457a:	00004597          	auipc	a1,0x4
+    8000457e:	13e58593          	addi	a1,a1,318 # 800086b8 <syscalls+0x1e8>
+    80004582:	8526                	mv	a0,s1
+    80004584:	ffffc097          	auipc	ra,0xffffc
+    80004588:	5d0080e7          	jalr	1488(ra) # 80000b54 <initlock>
   log.start = sb->logstart;
-    80005690:	0149a583          	lw	a1,20(s3)
-    80005694:	cc8c                	sw	a1,24(s1)
+    8000458c:	0149a583          	lw	a1,20(s3)
+    80004590:	cc8c                	sw	a1,24(s1)
   log.size = sb->nlog;
-    80005696:	0109a783          	lw	a5,16(s3)
-    8000569a:	ccdc                	sw	a5,28(s1)
+    80004592:	0109a783          	lw	a5,16(s3)
+    80004596:	ccdc                	sw	a5,28(s1)
   log.dev = dev;
-    8000569c:	0324a423          	sw	s2,40(s1)
+    80004598:	0324a423          	sw	s2,40(s1)
   struct buf *buf = bread(log.dev, log.start);
-    800056a0:	854a                	mv	a0,s2
-    800056a2:	fffff097          	auipc	ra,0xfffff
-    800056a6:	e92080e7          	jalr	-366(ra) # 80004534 <bread>
+    8000459c:	854a                	mv	a0,s2
+    8000459e:	fffff097          	auipc	ra,0xfffff
+    800045a2:	e92080e7          	jalr	-366(ra) # 80003430 <bread>
   log.lh.n = lh->n;
-    800056aa:	4d3c                	lw	a5,88(a0)
-    800056ac:	d4dc                	sw	a5,44(s1)
+    800045a6:	4d3c                	lw	a5,88(a0)
+    800045a8:	d4dc                	sw	a5,44(s1)
   for (i = 0; i < log.lh.n; i++) {
-    800056ae:	02f05563          	blez	a5,800056d8 <initlog+0x74>
-    800056b2:	05c50713          	addi	a4,a0,92
-    800056b6:	0001e697          	auipc	a3,0x1e
-    800056ba:	88a68693          	addi	a3,a3,-1910 # 80022f40 <log+0x30>
-    800056be:	37fd                	addiw	a5,a5,-1
-    800056c0:	1782                	slli	a5,a5,0x20
-    800056c2:	9381                	srli	a5,a5,0x20
-    800056c4:	078a                	slli	a5,a5,0x2
-    800056c6:	06050613          	addi	a2,a0,96
-    800056ca:	97b2                	add	a5,a5,a2
+    800045aa:	02f05563          	blez	a5,800045d4 <initlog+0x74>
+    800045ae:	05c50713          	addi	a4,a0,92
+    800045b2:	0001e697          	auipc	a3,0x1e
+    800045b6:	82e68693          	addi	a3,a3,-2002 # 80021de0 <log+0x30>
+    800045ba:	37fd                	addiw	a5,a5,-1
+    800045bc:	1782                	slli	a5,a5,0x20
+    800045be:	9381                	srli	a5,a5,0x20
+    800045c0:	078a                	slli	a5,a5,0x2
+    800045c2:	06050613          	addi	a2,a0,96
+    800045c6:	97b2                	add	a5,a5,a2
     log.lh.block[i] = lh->block[i];
-    800056cc:	4310                	lw	a2,0(a4)
-    800056ce:	c290                	sw	a2,0(a3)
+    800045c8:	4310                	lw	a2,0(a4)
+    800045ca:	c290                	sw	a2,0(a3)
   for (i = 0; i < log.lh.n; i++) {
-    800056d0:	0711                	addi	a4,a4,4
-    800056d2:	0691                	addi	a3,a3,4
-    800056d4:	fef71ce3          	bne	a4,a5,800056cc <initlog+0x68>
+    800045cc:	0711                	addi	a4,a4,4
+    800045ce:	0691                	addi	a3,a3,4
+    800045d0:	fef71ce3          	bne	a4,a5,800045c8 <initlog+0x68>
   brelse(buf);
-    800056d8:	fffff097          	auipc	ra,0xfffff
-    800056dc:	f8c080e7          	jalr	-116(ra) # 80004664 <brelse>
+    800045d4:	fffff097          	auipc	ra,0xfffff
+    800045d8:	f8c080e7          	jalr	-116(ra) # 80003560 <brelse>
 
 static void
 recover_from_log(void)
 {
   read_head();
   install_trans(1); // if committed, copy from log to disk
-    800056e0:	4505                	li	a0,1
-    800056e2:	00000097          	auipc	ra,0x0
-    800056e6:	ebe080e7          	jalr	-322(ra) # 800055a0 <install_trans>
+    800045dc:	4505                	li	a0,1
+    800045de:	00000097          	auipc	ra,0x0
+    800045e2:	ebe080e7          	jalr	-322(ra) # 8000449c <install_trans>
   log.lh.n = 0;
-    800056ea:	0001e797          	auipc	a5,0x1e
-    800056ee:	8407a923          	sw	zero,-1966(a5) # 80022f3c <log+0x2c>
+    800045e6:	0001d797          	auipc	a5,0x1d
+    800045ea:	7e07ab23          	sw	zero,2038(a5) # 80021ddc <log+0x2c>
   write_head(); // clear the log
-    800056f2:	00000097          	auipc	ra,0x0
-    800056f6:	e34080e7          	jalr	-460(ra) # 80005526 <write_head>
+    800045ee:	00000097          	auipc	ra,0x0
+    800045f2:	e34080e7          	jalr	-460(ra) # 80004422 <write_head>
 }
-    800056fa:	70a2                	ld	ra,40(sp)
-    800056fc:	7402                	ld	s0,32(sp)
-    800056fe:	64e2                	ld	s1,24(sp)
-    80005700:	6942                	ld	s2,16(sp)
-    80005702:	69a2                	ld	s3,8(sp)
-    80005704:	6145                	addi	sp,sp,48
-    80005706:	8082                	ret
+    800045f6:	70a2                	ld	ra,40(sp)
+    800045f8:	7402                	ld	s0,32(sp)
+    800045fa:	64e2                	ld	s1,24(sp)
+    800045fc:	6942                	ld	s2,16(sp)
+    800045fe:	69a2                	ld	s3,8(sp)
+    80004600:	6145                	addi	sp,sp,48
+    80004602:	8082                	ret
 
-0000000080005708 <begin_op>:
+0000000080004604 <begin_op>:
 }
 
 // called at the start of each FS system call.
 void
 begin_op(void)
 {
-    80005708:	1101                	addi	sp,sp,-32
-    8000570a:	ec06                	sd	ra,24(sp)
-    8000570c:	e822                	sd	s0,16(sp)
-    8000570e:	e426                	sd	s1,8(sp)
-    80005710:	e04a                	sd	s2,0(sp)
-    80005712:	1000                	addi	s0,sp,32
+    80004604:	1101                	addi	sp,sp,-32
+    80004606:	ec06                	sd	ra,24(sp)
+    80004608:	e822                	sd	s0,16(sp)
+    8000460a:	e426                	sd	s1,8(sp)
+    8000460c:	e04a                	sd	s2,0(sp)
+    8000460e:	1000                	addi	s0,sp,32
   acquire(&log.lock);
-    80005714:	0001d517          	auipc	a0,0x1d
-    80005718:	7fc50513          	addi	a0,a0,2044 # 80022f10 <log>
-    8000571c:	ffffb097          	auipc	ra,0xffffb
-    80005720:	4c8080e7          	jalr	1224(ra) # 80000be4 <acquire>
+    80004610:	0001d517          	auipc	a0,0x1d
+    80004614:	7a050513          	addi	a0,a0,1952 # 80021db0 <log>
+    80004618:	ffffc097          	auipc	ra,0xffffc
+    8000461c:	5cc080e7          	jalr	1484(ra) # 80000be4 <acquire>
   while(1){
     if(log.committing){
-    80005724:	0001d497          	auipc	s1,0x1d
-    80005728:	7ec48493          	addi	s1,s1,2028 # 80022f10 <log>
+    80004620:	0001d497          	auipc	s1,0x1d
+    80004624:	79048493          	addi	s1,s1,1936 # 80021db0 <log>
       sleep(&log, &log.lock);
     } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
-    8000572c:	4979                	li	s2,30
-    8000572e:	a039                	j	8000573c <begin_op+0x34>
+    80004628:	4979                	li	s2,30
+    8000462a:	a039                	j	80004638 <begin_op+0x34>
       sleep(&log, &log.lock);
-    80005730:	85a6                	mv	a1,s1
-    80005732:	8526                	mv	a0,s1
-    80005734:	ffffd097          	auipc	ra,0xffffd
-    80005738:	54a080e7          	jalr	1354(ra) # 80002c7e <sleep>
+    8000462c:	85a6                	mv	a1,s1
+    8000462e:	8526                	mv	a0,s1
+    80004630:	ffffe097          	auipc	ra,0xffffe
+    80004634:	f12080e7          	jalr	-238(ra) # 80002542 <sleep>
     if(log.committing){
-    8000573c:	50dc                	lw	a5,36(s1)
-    8000573e:	fbed                	bnez	a5,80005730 <begin_op+0x28>
+    80004638:	50dc                	lw	a5,36(s1)
+    8000463a:	fbed                	bnez	a5,8000462c <begin_op+0x28>
     } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
-    80005740:	509c                	lw	a5,32(s1)
-    80005742:	0017871b          	addiw	a4,a5,1
-    80005746:	0007069b          	sext.w	a3,a4
-    8000574a:	0027179b          	slliw	a5,a4,0x2
-    8000574e:	9fb9                	addw	a5,a5,a4
-    80005750:	0017979b          	slliw	a5,a5,0x1
-    80005754:	54d8                	lw	a4,44(s1)
-    80005756:	9fb9                	addw	a5,a5,a4
-    80005758:	00f95963          	bge	s2,a5,8000576a <begin_op+0x62>
+    8000463c:	509c                	lw	a5,32(s1)
+    8000463e:	0017871b          	addiw	a4,a5,1
+    80004642:	0007069b          	sext.w	a3,a4
+    80004646:	0027179b          	slliw	a5,a4,0x2
+    8000464a:	9fb9                	addw	a5,a5,a4
+    8000464c:	0017979b          	slliw	a5,a5,0x1
+    80004650:	54d8                	lw	a4,44(s1)
+    80004652:	9fb9                	addw	a5,a5,a4
+    80004654:	00f95963          	bge	s2,a5,80004666 <begin_op+0x62>
       // this op might exhaust log space; wait for commit.
       sleep(&log, &log.lock);
-    8000575c:	85a6                	mv	a1,s1
-    8000575e:	8526                	mv	a0,s1
-    80005760:	ffffd097          	auipc	ra,0xffffd
-    80005764:	51e080e7          	jalr	1310(ra) # 80002c7e <sleep>
-    80005768:	bfd1                	j	8000573c <begin_op+0x34>
+    80004658:	85a6                	mv	a1,s1
+    8000465a:	8526                	mv	a0,s1
+    8000465c:	ffffe097          	auipc	ra,0xffffe
+    80004660:	ee6080e7          	jalr	-282(ra) # 80002542 <sleep>
+    80004664:	bfd1                	j	80004638 <begin_op+0x34>
     } else {
       log.outstanding += 1;
-    8000576a:	0001d517          	auipc	a0,0x1d
-    8000576e:	7a650513          	addi	a0,a0,1958 # 80022f10 <log>
-    80005772:	d114                	sw	a3,32(a0)
+    80004666:	0001d517          	auipc	a0,0x1d
+    8000466a:	74a50513          	addi	a0,a0,1866 # 80021db0 <log>
+    8000466e:	d114                	sw	a3,32(a0)
       release(&log.lock);
-    80005774:	ffffb097          	auipc	ra,0xffffb
-    80005778:	524080e7          	jalr	1316(ra) # 80000c98 <release>
+    80004670:	ffffc097          	auipc	ra,0xffffc
+    80004674:	628080e7          	jalr	1576(ra) # 80000c98 <release>
       break;
     }
   }
 }
-    8000577c:	60e2                	ld	ra,24(sp)
-    8000577e:	6442                	ld	s0,16(sp)
-    80005780:	64a2                	ld	s1,8(sp)
-    80005782:	6902                	ld	s2,0(sp)
-    80005784:	6105                	addi	sp,sp,32
-    80005786:	8082                	ret
+    80004678:	60e2                	ld	ra,24(sp)
+    8000467a:	6442                	ld	s0,16(sp)
+    8000467c:	64a2                	ld	s1,8(sp)
+    8000467e:	6902                	ld	s2,0(sp)
+    80004680:	6105                	addi	sp,sp,32
+    80004682:	8082                	ret
 
-0000000080005788 <end_op>:
+0000000080004684 <end_op>:
 
 // called at the end of each FS system call.
 // commits if this was the last outstanding operation.
 void
 end_op(void)
 {
-    80005788:	7139                	addi	sp,sp,-64
-    8000578a:	fc06                	sd	ra,56(sp)
-    8000578c:	f822                	sd	s0,48(sp)
-    8000578e:	f426                	sd	s1,40(sp)
-    80005790:	f04a                	sd	s2,32(sp)
-    80005792:	ec4e                	sd	s3,24(sp)
-    80005794:	e852                	sd	s4,16(sp)
-    80005796:	e456                	sd	s5,8(sp)
-    80005798:	0080                	addi	s0,sp,64
+    80004684:	7139                	addi	sp,sp,-64
+    80004686:	fc06                	sd	ra,56(sp)
+    80004688:	f822                	sd	s0,48(sp)
+    8000468a:	f426                	sd	s1,40(sp)
+    8000468c:	f04a                	sd	s2,32(sp)
+    8000468e:	ec4e                	sd	s3,24(sp)
+    80004690:	e852                	sd	s4,16(sp)
+    80004692:	e456                	sd	s5,8(sp)
+    80004694:	0080                	addi	s0,sp,64
   int do_commit = 0;
 
   acquire(&log.lock);
-    8000579a:	0001d497          	auipc	s1,0x1d
-    8000579e:	77648493          	addi	s1,s1,1910 # 80022f10 <log>
-    800057a2:	8526                	mv	a0,s1
-    800057a4:	ffffb097          	auipc	ra,0xffffb
-    800057a8:	440080e7          	jalr	1088(ra) # 80000be4 <acquire>
+    80004696:	0001d497          	auipc	s1,0x1d
+    8000469a:	71a48493          	addi	s1,s1,1818 # 80021db0 <log>
+    8000469e:	8526                	mv	a0,s1
+    800046a0:	ffffc097          	auipc	ra,0xffffc
+    800046a4:	544080e7          	jalr	1348(ra) # 80000be4 <acquire>
   log.outstanding -= 1;
-    800057ac:	509c                	lw	a5,32(s1)
-    800057ae:	37fd                	addiw	a5,a5,-1
-    800057b0:	0007891b          	sext.w	s2,a5
-    800057b4:	d09c                	sw	a5,32(s1)
+    800046a8:	509c                	lw	a5,32(s1)
+    800046aa:	37fd                	addiw	a5,a5,-1
+    800046ac:	0007891b          	sext.w	s2,a5
+    800046b0:	d09c                	sw	a5,32(s1)
   if(log.committing)
-    800057b6:	50dc                	lw	a5,36(s1)
-    800057b8:	efb9                	bnez	a5,80005816 <end_op+0x8e>
+    800046b2:	50dc                	lw	a5,36(s1)
+    800046b4:	efb9                	bnez	a5,80004712 <end_op+0x8e>
     panic("log.committing");
   if(log.outstanding == 0){
-    800057ba:	06091663          	bnez	s2,80005826 <end_op+0x9e>
+    800046b6:	06091663          	bnez	s2,80004722 <end_op+0x9e>
     do_commit = 1;
     log.committing = 1;
-    800057be:	0001d497          	auipc	s1,0x1d
-    800057c2:	75248493          	addi	s1,s1,1874 # 80022f10 <log>
-    800057c6:	4785                	li	a5,1
-    800057c8:	d0dc                	sw	a5,36(s1)
+    800046ba:	0001d497          	auipc	s1,0x1d
+    800046be:	6f648493          	addi	s1,s1,1782 # 80021db0 <log>
+    800046c2:	4785                	li	a5,1
+    800046c4:	d0dc                	sw	a5,36(s1)
     // begin_op() may be waiting for log space,
     // and decrementing log.outstanding has decreased
     // the amount of reserved space.
     wakeup(&log);
   }
   release(&log.lock);
-    800057ca:	8526                	mv	a0,s1
-    800057cc:	ffffb097          	auipc	ra,0xffffb
-    800057d0:	4cc080e7          	jalr	1228(ra) # 80000c98 <release>
+    800046c6:	8526                	mv	a0,s1
+    800046c8:	ffffc097          	auipc	ra,0xffffc
+    800046cc:	5d0080e7          	jalr	1488(ra) # 80000c98 <release>
 }
 
 static void
 commit()
 {
   if (log.lh.n > 0) {
-    800057d4:	54dc                	lw	a5,44(s1)
-    800057d6:	06f04763          	bgtz	a5,80005844 <end_op+0xbc>
+    800046d0:	54dc                	lw	a5,44(s1)
+    800046d2:	06f04763          	bgtz	a5,80004740 <end_op+0xbc>
     acquire(&log.lock);
-    800057da:	0001d497          	auipc	s1,0x1d
-    800057de:	73648493          	addi	s1,s1,1846 # 80022f10 <log>
-    800057e2:	8526                	mv	a0,s1
-    800057e4:	ffffb097          	auipc	ra,0xffffb
-    800057e8:	400080e7          	jalr	1024(ra) # 80000be4 <acquire>
+    800046d6:	0001d497          	auipc	s1,0x1d
+    800046da:	6da48493          	addi	s1,s1,1754 # 80021db0 <log>
+    800046de:	8526                	mv	a0,s1
+    800046e0:	ffffc097          	auipc	ra,0xffffc
+    800046e4:	504080e7          	jalr	1284(ra) # 80000be4 <acquire>
     log.committing = 0;
-    800057ec:	0204a223          	sw	zero,36(s1)
+    800046e8:	0204a223          	sw	zero,36(s1)
     wakeup(&log);
-    800057f0:	8526                	mv	a0,s1
-    800057f2:	ffffe097          	auipc	ra,0xffffe
-    800057f6:	8a2080e7          	jalr	-1886(ra) # 80003094 <wakeup>
+    800046ec:	8526                	mv	a0,s1
+    800046ee:	ffffe097          	auipc	ra,0xffffe
+    800046f2:	ff2080e7          	jalr	-14(ra) # 800026e0 <wakeup>
     release(&log.lock);
-    800057fa:	8526                	mv	a0,s1
-    800057fc:	ffffb097          	auipc	ra,0xffffb
-    80005800:	49c080e7          	jalr	1180(ra) # 80000c98 <release>
-}
-    80005804:	70e2                	ld	ra,56(sp)
-    80005806:	7442                	ld	s0,48(sp)
-    80005808:	74a2                	ld	s1,40(sp)
-    8000580a:	7902                	ld	s2,32(sp)
-    8000580c:	69e2                	ld	s3,24(sp)
-    8000580e:	6a42                	ld	s4,16(sp)
-    80005810:	6aa2                	ld	s5,8(sp)
-    80005812:	6121                	addi	sp,sp,64
-    80005814:	8082                	ret
+    800046f6:	8526                	mv	a0,s1
+    800046f8:	ffffc097          	auipc	ra,0xffffc
+    800046fc:	5a0080e7          	jalr	1440(ra) # 80000c98 <release>
+}
+    80004700:	70e2                	ld	ra,56(sp)
+    80004702:	7442                	ld	s0,48(sp)
+    80004704:	74a2                	ld	s1,40(sp)
+    80004706:	7902                	ld	s2,32(sp)
+    80004708:	69e2                	ld	s3,24(sp)
+    8000470a:	6a42                	ld	s4,16(sp)
+    8000470c:	6aa2                	ld	s5,8(sp)
+    8000470e:	6121                	addi	sp,sp,64
+    80004710:	8082                	ret
     panic("log.committing");
-    80005816:	00004517          	auipc	a0,0x4
-    8000581a:	21a50513          	addi	a0,a0,538 # 80009a30 <syscalls+0x208>
-    8000581e:	ffffb097          	auipc	ra,0xffffb
-    80005822:	d20080e7          	jalr	-736(ra) # 8000053e <panic>
+    80004712:	00004517          	auipc	a0,0x4
+    80004716:	fae50513          	addi	a0,a0,-82 # 800086c0 <syscalls+0x1f0>
+    8000471a:	ffffc097          	auipc	ra,0xffffc
+    8000471e:	e24080e7          	jalr	-476(ra) # 8000053e <panic>
     wakeup(&log);
-    80005826:	0001d497          	auipc	s1,0x1d
-    8000582a:	6ea48493          	addi	s1,s1,1770 # 80022f10 <log>
-    8000582e:	8526                	mv	a0,s1
-    80005830:	ffffe097          	auipc	ra,0xffffe
-    80005834:	864080e7          	jalr	-1948(ra) # 80003094 <wakeup>
+    80004722:	0001d497          	auipc	s1,0x1d
+    80004726:	68e48493          	addi	s1,s1,1678 # 80021db0 <log>
+    8000472a:	8526                	mv	a0,s1
+    8000472c:	ffffe097          	auipc	ra,0xffffe
+    80004730:	fb4080e7          	jalr	-76(ra) # 800026e0 <wakeup>
   release(&log.lock);
-    80005838:	8526                	mv	a0,s1
-    8000583a:	ffffb097          	auipc	ra,0xffffb
-    8000583e:	45e080e7          	jalr	1118(ra) # 80000c98 <release>
+    80004734:	8526                	mv	a0,s1
+    80004736:	ffffc097          	auipc	ra,0xffffc
+    8000473a:	562080e7          	jalr	1378(ra) # 80000c98 <release>
   if(do_commit){
-    80005842:	b7c9                	j	80005804 <end_op+0x7c>
+    8000473e:	b7c9                	j	80004700 <end_op+0x7c>
   for (tail = 0; tail < log.lh.n; tail++) {
-    80005844:	0001da97          	auipc	s5,0x1d
-    80005848:	6fca8a93          	addi	s5,s5,1788 # 80022f40 <log+0x30>
+    80004740:	0001da97          	auipc	s5,0x1d
+    80004744:	6a0a8a93          	addi	s5,s5,1696 # 80021de0 <log+0x30>
     struct buf *to = bread(log.dev, log.start+tail+1); // log block
-    8000584c:	0001da17          	auipc	s4,0x1d
-    80005850:	6c4a0a13          	addi	s4,s4,1732 # 80022f10 <log>
-    80005854:	018a2583          	lw	a1,24(s4)
-    80005858:	012585bb          	addw	a1,a1,s2
-    8000585c:	2585                	addiw	a1,a1,1
-    8000585e:	028a2503          	lw	a0,40(s4)
-    80005862:	fffff097          	auipc	ra,0xfffff
-    80005866:	cd2080e7          	jalr	-814(ra) # 80004534 <bread>
-    8000586a:	84aa                	mv	s1,a0
+    80004748:	0001da17          	auipc	s4,0x1d
+    8000474c:	668a0a13          	addi	s4,s4,1640 # 80021db0 <log>
+    80004750:	018a2583          	lw	a1,24(s4)
+    80004754:	012585bb          	addw	a1,a1,s2
+    80004758:	2585                	addiw	a1,a1,1
+    8000475a:	028a2503          	lw	a0,40(s4)
+    8000475e:	fffff097          	auipc	ra,0xfffff
+    80004762:	cd2080e7          	jalr	-814(ra) # 80003430 <bread>
+    80004766:	84aa                	mv	s1,a0
     struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
-    8000586c:	000aa583          	lw	a1,0(s5)
-    80005870:	028a2503          	lw	a0,40(s4)
-    80005874:	fffff097          	auipc	ra,0xfffff
-    80005878:	cc0080e7          	jalr	-832(ra) # 80004534 <bread>
-    8000587c:	89aa                	mv	s3,a0
+    80004768:	000aa583          	lw	a1,0(s5)
+    8000476c:	028a2503          	lw	a0,40(s4)
+    80004770:	fffff097          	auipc	ra,0xfffff
+    80004774:	cc0080e7          	jalr	-832(ra) # 80003430 <bread>
+    80004778:	89aa                	mv	s3,a0
     memmove(to->data, from->data, BSIZE);
-    8000587e:	40000613          	li	a2,1024
-    80005882:	05850593          	addi	a1,a0,88
-    80005886:	05848513          	addi	a0,s1,88
-    8000588a:	ffffb097          	auipc	ra,0xffffb
-    8000588e:	4b6080e7          	jalr	1206(ra) # 80000d40 <memmove>
+    8000477a:	40000613          	li	a2,1024
+    8000477e:	05850593          	addi	a1,a0,88
+    80004782:	05848513          	addi	a0,s1,88
+    80004786:	ffffc097          	auipc	ra,0xffffc
+    8000478a:	5ba080e7          	jalr	1466(ra) # 80000d40 <memmove>
     bwrite(to);  // write the log
-    80005892:	8526                	mv	a0,s1
-    80005894:	fffff097          	auipc	ra,0xfffff
-    80005898:	d92080e7          	jalr	-622(ra) # 80004626 <bwrite>
+    8000478e:	8526                	mv	a0,s1
+    80004790:	fffff097          	auipc	ra,0xfffff
+    80004794:	d92080e7          	jalr	-622(ra) # 80003522 <bwrite>
     brelse(from);
-    8000589c:	854e                	mv	a0,s3
-    8000589e:	fffff097          	auipc	ra,0xfffff
-    800058a2:	dc6080e7          	jalr	-570(ra) # 80004664 <brelse>
+    80004798:	854e                	mv	a0,s3
+    8000479a:	fffff097          	auipc	ra,0xfffff
+    8000479e:	dc6080e7          	jalr	-570(ra) # 80003560 <brelse>
     brelse(to);
-    800058a6:	8526                	mv	a0,s1
-    800058a8:	fffff097          	auipc	ra,0xfffff
-    800058ac:	dbc080e7          	jalr	-580(ra) # 80004664 <brelse>
+    800047a2:	8526                	mv	a0,s1
+    800047a4:	fffff097          	auipc	ra,0xfffff
+    800047a8:	dbc080e7          	jalr	-580(ra) # 80003560 <brelse>
   for (tail = 0; tail < log.lh.n; tail++) {
-    800058b0:	2905                	addiw	s2,s2,1
-    800058b2:	0a91                	addi	s5,s5,4
-    800058b4:	02ca2783          	lw	a5,44(s4)
-    800058b8:	f8f94ee3          	blt	s2,a5,80005854 <end_op+0xcc>
+    800047ac:	2905                	addiw	s2,s2,1
+    800047ae:	0a91                	addi	s5,s5,4
+    800047b0:	02ca2783          	lw	a5,44(s4)
+    800047b4:	f8f94ee3          	blt	s2,a5,80004750 <end_op+0xcc>
     write_log();     // Write modified blocks from cache to log
     write_head();    // Write header to disk -- the real commit
-    800058bc:	00000097          	auipc	ra,0x0
-    800058c0:	c6a080e7          	jalr	-918(ra) # 80005526 <write_head>
+    800047b8:	00000097          	auipc	ra,0x0
+    800047bc:	c6a080e7          	jalr	-918(ra) # 80004422 <write_head>
     install_trans(0); // Now install writes to home locations
-    800058c4:	4501                	li	a0,0
-    800058c6:	00000097          	auipc	ra,0x0
-    800058ca:	cda080e7          	jalr	-806(ra) # 800055a0 <install_trans>
+    800047c0:	4501                	li	a0,0
+    800047c2:	00000097          	auipc	ra,0x0
+    800047c6:	cda080e7          	jalr	-806(ra) # 8000449c <install_trans>
     log.lh.n = 0;
-    800058ce:	0001d797          	auipc	a5,0x1d
-    800058d2:	6607a723          	sw	zero,1646(a5) # 80022f3c <log+0x2c>
+    800047ca:	0001d797          	auipc	a5,0x1d
+    800047ce:	6007a923          	sw	zero,1554(a5) # 80021ddc <log+0x2c>
     write_head();    // Erase the transaction from the log
-    800058d6:	00000097          	auipc	ra,0x0
-    800058da:	c50080e7          	jalr	-944(ra) # 80005526 <write_head>
-    800058de:	bdf5                	j	800057da <end_op+0x52>
+    800047d2:	00000097          	auipc	ra,0x0
+    800047d6:	c50080e7          	jalr	-944(ra) # 80004422 <write_head>
+    800047da:	bdf5                	j	800046d6 <end_op+0x52>
 
-00000000800058e0 <log_write>:
+00000000800047dc <log_write>:
 //   modify bp->data[]
 //   log_write(bp)
 //   brelse(bp)
 void
 log_write(struct buf *b)
 {
-    800058e0:	1101                	addi	sp,sp,-32
-    800058e2:	ec06                	sd	ra,24(sp)
-    800058e4:	e822                	sd	s0,16(sp)
-    800058e6:	e426                	sd	s1,8(sp)
-    800058e8:	e04a                	sd	s2,0(sp)
-    800058ea:	1000                	addi	s0,sp,32
-    800058ec:	84aa                	mv	s1,a0
+    800047dc:	1101                	addi	sp,sp,-32
+    800047de:	ec06                	sd	ra,24(sp)
+    800047e0:	e822                	sd	s0,16(sp)
+    800047e2:	e426                	sd	s1,8(sp)
+    800047e4:	e04a                	sd	s2,0(sp)
+    800047e6:	1000                	addi	s0,sp,32
+    800047e8:	84aa                	mv	s1,a0
   int i;
 
   acquire(&log.lock);
-    800058ee:	0001d917          	auipc	s2,0x1d
-    800058f2:	62290913          	addi	s2,s2,1570 # 80022f10 <log>
-    800058f6:	854a                	mv	a0,s2
-    800058f8:	ffffb097          	auipc	ra,0xffffb
-    800058fc:	2ec080e7          	jalr	748(ra) # 80000be4 <acquire>
+    800047ea:	0001d917          	auipc	s2,0x1d
+    800047ee:	5c690913          	addi	s2,s2,1478 # 80021db0 <log>
+    800047f2:	854a                	mv	a0,s2
+    800047f4:	ffffc097          	auipc	ra,0xffffc
+    800047f8:	3f0080e7          	jalr	1008(ra) # 80000be4 <acquire>
   if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
-    80005900:	02c92603          	lw	a2,44(s2)
-    80005904:	47f5                	li	a5,29
-    80005906:	06c7c563          	blt	a5,a2,80005970 <log_write+0x90>
-    8000590a:	0001d797          	auipc	a5,0x1d
-    8000590e:	6227a783          	lw	a5,1570(a5) # 80022f2c <log+0x1c>
-    80005912:	37fd                	addiw	a5,a5,-1
-    80005914:	04f65e63          	bge	a2,a5,80005970 <log_write+0x90>
+    800047fc:	02c92603          	lw	a2,44(s2)
+    80004800:	47f5                	li	a5,29
+    80004802:	06c7c563          	blt	a5,a2,8000486c <log_write+0x90>
+    80004806:	0001d797          	auipc	a5,0x1d
+    8000480a:	5c67a783          	lw	a5,1478(a5) # 80021dcc <log+0x1c>
+    8000480e:	37fd                	addiw	a5,a5,-1
+    80004810:	04f65e63          	bge	a2,a5,8000486c <log_write+0x90>
     panic("too big a transaction");
   if (log.outstanding < 1)
-    80005918:	0001d797          	auipc	a5,0x1d
-    8000591c:	6187a783          	lw	a5,1560(a5) # 80022f30 <log+0x20>
-    80005920:	06f05063          	blez	a5,80005980 <log_write+0xa0>
+    80004814:	0001d797          	auipc	a5,0x1d
+    80004818:	5bc7a783          	lw	a5,1468(a5) # 80021dd0 <log+0x20>
+    8000481c:	06f05063          	blez	a5,8000487c <log_write+0xa0>
     panic("log_write outside of trans");
 
   for (i = 0; i < log.lh.n; i++) {
-    80005924:	4781                	li	a5,0
-    80005926:	06c05563          	blez	a2,80005990 <log_write+0xb0>
+    80004820:	4781                	li	a5,0
+    80004822:	06c05563          	blez	a2,8000488c <log_write+0xb0>
     if (log.lh.block[i] == b->blockno)   // log absorption
-    8000592a:	44cc                	lw	a1,12(s1)
-    8000592c:	0001d717          	auipc	a4,0x1d
-    80005930:	61470713          	addi	a4,a4,1556 # 80022f40 <log+0x30>
+    80004826:	44cc                	lw	a1,12(s1)
+    80004828:	0001d717          	auipc	a4,0x1d
+    8000482c:	5b870713          	addi	a4,a4,1464 # 80021de0 <log+0x30>
   for (i = 0; i < log.lh.n; i++) {
-    80005934:	4781                	li	a5,0
+    80004830:	4781                	li	a5,0
     if (log.lh.block[i] == b->blockno)   // log absorption
-    80005936:	4314                	lw	a3,0(a4)
-    80005938:	04b68c63          	beq	a3,a1,80005990 <log_write+0xb0>
+    80004832:	4314                	lw	a3,0(a4)
+    80004834:	04b68c63          	beq	a3,a1,8000488c <log_write+0xb0>
   for (i = 0; i < log.lh.n; i++) {
-    8000593c:	2785                	addiw	a5,a5,1
-    8000593e:	0711                	addi	a4,a4,4
-    80005940:	fef61be3          	bne	a2,a5,80005936 <log_write+0x56>
+    80004838:	2785                	addiw	a5,a5,1
+    8000483a:	0711                	addi	a4,a4,4
+    8000483c:	fef61be3          	bne	a2,a5,80004832 <log_write+0x56>
       break;
   }
   log.lh.block[i] = b->blockno;
-    80005944:	0621                	addi	a2,a2,8
-    80005946:	060a                	slli	a2,a2,0x2
-    80005948:	0001d797          	auipc	a5,0x1d
-    8000594c:	5c878793          	addi	a5,a5,1480 # 80022f10 <log>
-    80005950:	963e                	add	a2,a2,a5
-    80005952:	44dc                	lw	a5,12(s1)
-    80005954:	ca1c                	sw	a5,16(a2)
+    80004840:	0621                	addi	a2,a2,8
+    80004842:	060a                	slli	a2,a2,0x2
+    80004844:	0001d797          	auipc	a5,0x1d
+    80004848:	56c78793          	addi	a5,a5,1388 # 80021db0 <log>
+    8000484c:	963e                	add	a2,a2,a5
+    8000484e:	44dc                	lw	a5,12(s1)
+    80004850:	ca1c                	sw	a5,16(a2)
   if (i == log.lh.n) {  // Add new block to log?
     bpin(b);
-    80005956:	8526                	mv	a0,s1
-    80005958:	fffff097          	auipc	ra,0xfffff
-    8000595c:	daa080e7          	jalr	-598(ra) # 80004702 <bpin>
+    80004852:	8526                	mv	a0,s1
+    80004854:	fffff097          	auipc	ra,0xfffff
+    80004858:	daa080e7          	jalr	-598(ra) # 800035fe <bpin>
     log.lh.n++;
-    80005960:	0001d717          	auipc	a4,0x1d
-    80005964:	5b070713          	addi	a4,a4,1456 # 80022f10 <log>
-    80005968:	575c                	lw	a5,44(a4)
-    8000596a:	2785                	addiw	a5,a5,1
-    8000596c:	d75c                	sw	a5,44(a4)
-    8000596e:	a835                	j	800059aa <log_write+0xca>
+    8000485c:	0001d717          	auipc	a4,0x1d
+    80004860:	55470713          	addi	a4,a4,1364 # 80021db0 <log>
+    80004864:	575c                	lw	a5,44(a4)
+    80004866:	2785                	addiw	a5,a5,1
+    80004868:	d75c                	sw	a5,44(a4)
+    8000486a:	a835                	j	800048a6 <log_write+0xca>
     panic("too big a transaction");
-    80005970:	00004517          	auipc	a0,0x4
-    80005974:	0d050513          	addi	a0,a0,208 # 80009a40 <syscalls+0x218>
-    80005978:	ffffb097          	auipc	ra,0xffffb
-    8000597c:	bc6080e7          	jalr	-1082(ra) # 8000053e <panic>
+    8000486c:	00004517          	auipc	a0,0x4
+    80004870:	e6450513          	addi	a0,a0,-412 # 800086d0 <syscalls+0x200>
+    80004874:	ffffc097          	auipc	ra,0xffffc
+    80004878:	cca080e7          	jalr	-822(ra) # 8000053e <panic>
     panic("log_write outside of trans");
-    80005980:	00004517          	auipc	a0,0x4
-    80005984:	0d850513          	addi	a0,a0,216 # 80009a58 <syscalls+0x230>
-    80005988:	ffffb097          	auipc	ra,0xffffb
-    8000598c:	bb6080e7          	jalr	-1098(ra) # 8000053e <panic>
+    8000487c:	00004517          	auipc	a0,0x4
+    80004880:	e6c50513          	addi	a0,a0,-404 # 800086e8 <syscalls+0x218>
+    80004884:	ffffc097          	auipc	ra,0xffffc
+    80004888:	cba080e7          	jalr	-838(ra) # 8000053e <panic>
   log.lh.block[i] = b->blockno;
-    80005990:	00878713          	addi	a4,a5,8
-    80005994:	00271693          	slli	a3,a4,0x2
-    80005998:	0001d717          	auipc	a4,0x1d
-    8000599c:	57870713          	addi	a4,a4,1400 # 80022f10 <log>
-    800059a0:	9736                	add	a4,a4,a3
-    800059a2:	44d4                	lw	a3,12(s1)
-    800059a4:	cb14                	sw	a3,16(a4)
+    8000488c:	00878713          	addi	a4,a5,8
+    80004890:	00271693          	slli	a3,a4,0x2
+    80004894:	0001d717          	auipc	a4,0x1d
+    80004898:	51c70713          	addi	a4,a4,1308 # 80021db0 <log>
+    8000489c:	9736                	add	a4,a4,a3
+    8000489e:	44d4                	lw	a3,12(s1)
+    800048a0:	cb14                	sw	a3,16(a4)
   if (i == log.lh.n) {  // Add new block to log?
-    800059a6:	faf608e3          	beq	a2,a5,80005956 <log_write+0x76>
+    800048a2:	faf608e3          	beq	a2,a5,80004852 <log_write+0x76>
   }
   release(&log.lock);
-    800059aa:	0001d517          	auipc	a0,0x1d
-    800059ae:	56650513          	addi	a0,a0,1382 # 80022f10 <log>
-    800059b2:	ffffb097          	auipc	ra,0xffffb
-    800059b6:	2e6080e7          	jalr	742(ra) # 80000c98 <release>
-}
-    800059ba:	60e2                	ld	ra,24(sp)
-    800059bc:	6442                	ld	s0,16(sp)
-    800059be:	64a2                	ld	s1,8(sp)
-    800059c0:	6902                	ld	s2,0(sp)
-    800059c2:	6105                	addi	sp,sp,32
-    800059c4:	8082                	ret
-
-00000000800059c6 <initsleeplock>:
+    800048a6:	0001d517          	auipc	a0,0x1d
+    800048aa:	50a50513          	addi	a0,a0,1290 # 80021db0 <log>
+    800048ae:	ffffc097          	auipc	ra,0xffffc
+    800048b2:	3ea080e7          	jalr	1002(ra) # 80000c98 <release>
+}
+    800048b6:	60e2                	ld	ra,24(sp)
+    800048b8:	6442                	ld	s0,16(sp)
+    800048ba:	64a2                	ld	s1,8(sp)
+    800048bc:	6902                	ld	s2,0(sp)
+    800048be:	6105                	addi	sp,sp,32
+    800048c0:	8082                	ret
+
+00000000800048c2 <initsleeplock>:
 #include "proc.h"
 #include "sleeplock.h"
 
 void
 initsleeplock(struct sleeplock *lk, char *name)
 {
-    800059c6:	1101                	addi	sp,sp,-32
-    800059c8:	ec06                	sd	ra,24(sp)
-    800059ca:	e822                	sd	s0,16(sp)
-    800059cc:	e426                	sd	s1,8(sp)
-    800059ce:	e04a                	sd	s2,0(sp)
-    800059d0:	1000                	addi	s0,sp,32
-    800059d2:	84aa                	mv	s1,a0
-    800059d4:	892e                	mv	s2,a1
+    800048c2:	1101                	addi	sp,sp,-32
+    800048c4:	ec06                	sd	ra,24(sp)
+    800048c6:	e822                	sd	s0,16(sp)
+    800048c8:	e426                	sd	s1,8(sp)
+    800048ca:	e04a                	sd	s2,0(sp)
+    800048cc:	1000                	addi	s0,sp,32
+    800048ce:	84aa                	mv	s1,a0
+    800048d0:	892e                	mv	s2,a1
   initlock(&lk->lk, "sleep lock");
-    800059d6:	00004597          	auipc	a1,0x4
-    800059da:	0a258593          	addi	a1,a1,162 # 80009a78 <syscalls+0x250>
-    800059de:	0521                	addi	a0,a0,8
-    800059e0:	ffffb097          	auipc	ra,0xffffb
-    800059e4:	174080e7          	jalr	372(ra) # 80000b54 <initlock>
+    800048d2:	00004597          	auipc	a1,0x4
+    800048d6:	e3658593          	addi	a1,a1,-458 # 80008708 <syscalls+0x238>
+    800048da:	0521                	addi	a0,a0,8
+    800048dc:	ffffc097          	auipc	ra,0xffffc
+    800048e0:	278080e7          	jalr	632(ra) # 80000b54 <initlock>
   lk->name = name;
-    800059e8:	0324b023          	sd	s2,32(s1)
+    800048e4:	0324b023          	sd	s2,32(s1)
   lk->locked = 0;
-    800059ec:	0004a023          	sw	zero,0(s1)
+    800048e8:	0004a023          	sw	zero,0(s1)
   lk->pid = 0;
-    800059f0:	0204a423          	sw	zero,40(s1)
+    800048ec:	0204a423          	sw	zero,40(s1)
 }
-    800059f4:	60e2                	ld	ra,24(sp)
-    800059f6:	6442                	ld	s0,16(sp)
-    800059f8:	64a2                	ld	s1,8(sp)
-    800059fa:	6902                	ld	s2,0(sp)
-    800059fc:	6105                	addi	sp,sp,32
-    800059fe:	8082                	ret
+    800048f0:	60e2                	ld	ra,24(sp)
+    800048f2:	6442                	ld	s0,16(sp)
+    800048f4:	64a2                	ld	s1,8(sp)
+    800048f6:	6902                	ld	s2,0(sp)
+    800048f8:	6105                	addi	sp,sp,32
+    800048fa:	8082                	ret
 
-0000000080005a00 <acquiresleep>:
+00000000800048fc <acquiresleep>:
 
 void
 acquiresleep(struct sleeplock *lk)
 {
-    80005a00:	1101                	addi	sp,sp,-32
-    80005a02:	ec06                	sd	ra,24(sp)
-    80005a04:	e822                	sd	s0,16(sp)
-    80005a06:	e426                	sd	s1,8(sp)
-    80005a08:	e04a                	sd	s2,0(sp)
-    80005a0a:	1000                	addi	s0,sp,32
-    80005a0c:	84aa                	mv	s1,a0
+    800048fc:	1101                	addi	sp,sp,-32
+    800048fe:	ec06                	sd	ra,24(sp)
+    80004900:	e822                	sd	s0,16(sp)
+    80004902:	e426                	sd	s1,8(sp)
+    80004904:	e04a                	sd	s2,0(sp)
+    80004906:	1000                	addi	s0,sp,32
+    80004908:	84aa                	mv	s1,a0
   acquire(&lk->lk);
-    80005a0e:	00850913          	addi	s2,a0,8
-    80005a12:	854a                	mv	a0,s2
-    80005a14:	ffffb097          	auipc	ra,0xffffb
-    80005a18:	1d0080e7          	jalr	464(ra) # 80000be4 <acquire>
+    8000490a:	00850913          	addi	s2,a0,8
+    8000490e:	854a                	mv	a0,s2
+    80004910:	ffffc097          	auipc	ra,0xffffc
+    80004914:	2d4080e7          	jalr	724(ra) # 80000be4 <acquire>
   while (lk->locked) {
-    80005a1c:	409c                	lw	a5,0(s1)
-    80005a1e:	cb89                	beqz	a5,80005a30 <acquiresleep+0x30>
+    80004918:	409c                	lw	a5,0(s1)
+    8000491a:	cb89                	beqz	a5,8000492c <acquiresleep+0x30>
     sleep(lk, &lk->lk);
-    80005a20:	85ca                	mv	a1,s2
-    80005a22:	8526                	mv	a0,s1
-    80005a24:	ffffd097          	auipc	ra,0xffffd
-    80005a28:	25a080e7          	jalr	602(ra) # 80002c7e <sleep>
+    8000491c:	85ca                	mv	a1,s2
+    8000491e:	8526                	mv	a0,s1
+    80004920:	ffffe097          	auipc	ra,0xffffe
+    80004924:	c22080e7          	jalr	-990(ra) # 80002542 <sleep>
   while (lk->locked) {
-    80005a2c:	409c                	lw	a5,0(s1)
-    80005a2e:	fbed                	bnez	a5,80005a20 <acquiresleep+0x20>
+    80004928:	409c                	lw	a5,0(s1)
+    8000492a:	fbed                	bnez	a5,8000491c <acquiresleep+0x20>
   }
   lk->locked = 1;
-    80005a30:	4785                	li	a5,1
-    80005a32:	c09c                	sw	a5,0(s1)
+    8000492c:	4785                	li	a5,1
+    8000492e:	c09c                	sw	a5,0(s1)
   lk->pid = myproc()->pid;
-    80005a34:	ffffc097          	auipc	ra,0xffffc
-    80005a38:	160080e7          	jalr	352(ra) # 80001b94 <myproc>
-    80005a3c:	591c                	lw	a5,48(a0)
-    80005a3e:	d49c                	sw	a5,40(s1)
+    80004930:	ffffd097          	auipc	ra,0xffffd
+    80004934:	3a0080e7          	jalr	928(ra) # 80001cd0 <myproc>
+    80004938:	591c                	lw	a5,48(a0)
+    8000493a:	d49c                	sw	a5,40(s1)
   release(&lk->lk);
-    80005a40:	854a                	mv	a0,s2
-    80005a42:	ffffb097          	auipc	ra,0xffffb
-    80005a46:	256080e7          	jalr	598(ra) # 80000c98 <release>
+    8000493c:	854a                	mv	a0,s2
+    8000493e:	ffffc097          	auipc	ra,0xffffc
+    80004942:	35a080e7          	jalr	858(ra) # 80000c98 <release>
 }
-    80005a4a:	60e2                	ld	ra,24(sp)
-    80005a4c:	6442                	ld	s0,16(sp)
-    80005a4e:	64a2                	ld	s1,8(sp)
-    80005a50:	6902                	ld	s2,0(sp)
-    80005a52:	6105                	addi	sp,sp,32
-    80005a54:	8082                	ret
+    80004946:	60e2                	ld	ra,24(sp)
+    80004948:	6442                	ld	s0,16(sp)
+    8000494a:	64a2                	ld	s1,8(sp)
+    8000494c:	6902                	ld	s2,0(sp)
+    8000494e:	6105                	addi	sp,sp,32
+    80004950:	8082                	ret
 
-0000000080005a56 <releasesleep>:
+0000000080004952 <releasesleep>:
 
 void
 releasesleep(struct sleeplock *lk)
 {
-    80005a56:	1101                	addi	sp,sp,-32
-    80005a58:	ec06                	sd	ra,24(sp)
-    80005a5a:	e822                	sd	s0,16(sp)
-    80005a5c:	e426                	sd	s1,8(sp)
-    80005a5e:	e04a                	sd	s2,0(sp)
-    80005a60:	1000                	addi	s0,sp,32
-    80005a62:	84aa                	mv	s1,a0
+    80004952:	1101                	addi	sp,sp,-32
+    80004954:	ec06                	sd	ra,24(sp)
+    80004956:	e822                	sd	s0,16(sp)
+    80004958:	e426                	sd	s1,8(sp)
+    8000495a:	e04a                	sd	s2,0(sp)
+    8000495c:	1000                	addi	s0,sp,32
+    8000495e:	84aa                	mv	s1,a0
   acquire(&lk->lk);
-    80005a64:	00850913          	addi	s2,a0,8
-    80005a68:	854a                	mv	a0,s2
-    80005a6a:	ffffb097          	auipc	ra,0xffffb
-    80005a6e:	17a080e7          	jalr	378(ra) # 80000be4 <acquire>
+    80004960:	00850913          	addi	s2,a0,8
+    80004964:	854a                	mv	a0,s2
+    80004966:	ffffc097          	auipc	ra,0xffffc
+    8000496a:	27e080e7          	jalr	638(ra) # 80000be4 <acquire>
   lk->locked = 0;
-    80005a72:	0004a023          	sw	zero,0(s1)
+    8000496e:	0004a023          	sw	zero,0(s1)
   lk->pid = 0;
-    80005a76:	0204a423          	sw	zero,40(s1)
+    80004972:	0204a423          	sw	zero,40(s1)
   wakeup(lk);
-    80005a7a:	8526                	mv	a0,s1
-    80005a7c:	ffffd097          	auipc	ra,0xffffd
-    80005a80:	618080e7          	jalr	1560(ra) # 80003094 <wakeup>
+    80004976:	8526                	mv	a0,s1
+    80004978:	ffffe097          	auipc	ra,0xffffe
+    8000497c:	d68080e7          	jalr	-664(ra) # 800026e0 <wakeup>
   release(&lk->lk);
-    80005a84:	854a                	mv	a0,s2
-    80005a86:	ffffb097          	auipc	ra,0xffffb
-    80005a8a:	212080e7          	jalr	530(ra) # 80000c98 <release>
+    80004980:	854a                	mv	a0,s2
+    80004982:	ffffc097          	auipc	ra,0xffffc
+    80004986:	316080e7          	jalr	790(ra) # 80000c98 <release>
 }
-    80005a8e:	60e2                	ld	ra,24(sp)
-    80005a90:	6442                	ld	s0,16(sp)
-    80005a92:	64a2                	ld	s1,8(sp)
-    80005a94:	6902                	ld	s2,0(sp)
-    80005a96:	6105                	addi	sp,sp,32
-    80005a98:	8082                	ret
+    8000498a:	60e2                	ld	ra,24(sp)
+    8000498c:	6442                	ld	s0,16(sp)
+    8000498e:	64a2                	ld	s1,8(sp)
+    80004990:	6902                	ld	s2,0(sp)
+    80004992:	6105                	addi	sp,sp,32
+    80004994:	8082                	ret
 
-0000000080005a9a <holdingsleep>:
+0000000080004996 <holdingsleep>:
 
 int
 holdingsleep(struct sleeplock *lk)
 {
-    80005a9a:	7179                	addi	sp,sp,-48
-    80005a9c:	f406                	sd	ra,40(sp)
-    80005a9e:	f022                	sd	s0,32(sp)
-    80005aa0:	ec26                	sd	s1,24(sp)
-    80005aa2:	e84a                	sd	s2,16(sp)
-    80005aa4:	e44e                	sd	s3,8(sp)
-    80005aa6:	1800                	addi	s0,sp,48
-    80005aa8:	84aa                	mv	s1,a0
+    80004996:	7179                	addi	sp,sp,-48
+    80004998:	f406                	sd	ra,40(sp)
+    8000499a:	f022                	sd	s0,32(sp)
+    8000499c:	ec26                	sd	s1,24(sp)
+    8000499e:	e84a                	sd	s2,16(sp)
+    800049a0:	e44e                	sd	s3,8(sp)
+    800049a2:	1800                	addi	s0,sp,48
+    800049a4:	84aa                	mv	s1,a0
   int r;
   
   acquire(&lk->lk);
-    80005aaa:	00850913          	addi	s2,a0,8
-    80005aae:	854a                	mv	a0,s2
-    80005ab0:	ffffb097          	auipc	ra,0xffffb
-    80005ab4:	134080e7          	jalr	308(ra) # 80000be4 <acquire>
+    800049a6:	00850913          	addi	s2,a0,8
+    800049aa:	854a                	mv	a0,s2
+    800049ac:	ffffc097          	auipc	ra,0xffffc
+    800049b0:	238080e7          	jalr	568(ra) # 80000be4 <acquire>
   r = lk->locked && (lk->pid == myproc()->pid);
-    80005ab8:	409c                	lw	a5,0(s1)
-    80005aba:	ef99                	bnez	a5,80005ad8 <holdingsleep+0x3e>
-    80005abc:	4481                	li	s1,0
+    800049b4:	409c                	lw	a5,0(s1)
+    800049b6:	ef99                	bnez	a5,800049d4 <holdingsleep+0x3e>
+    800049b8:	4481                	li	s1,0
   release(&lk->lk);
-    80005abe:	854a                	mv	a0,s2
-    80005ac0:	ffffb097          	auipc	ra,0xffffb
-    80005ac4:	1d8080e7          	jalr	472(ra) # 80000c98 <release>
+    800049ba:	854a                	mv	a0,s2
+    800049bc:	ffffc097          	auipc	ra,0xffffc
+    800049c0:	2dc080e7          	jalr	732(ra) # 80000c98 <release>
   return r;
 }
-    80005ac8:	8526                	mv	a0,s1
-    80005aca:	70a2                	ld	ra,40(sp)
-    80005acc:	7402                	ld	s0,32(sp)
-    80005ace:	64e2                	ld	s1,24(sp)
-    80005ad0:	6942                	ld	s2,16(sp)
-    80005ad2:	69a2                	ld	s3,8(sp)
-    80005ad4:	6145                	addi	sp,sp,48
-    80005ad6:	8082                	ret
+    800049c4:	8526                	mv	a0,s1
+    800049c6:	70a2                	ld	ra,40(sp)
+    800049c8:	7402                	ld	s0,32(sp)
+    800049ca:	64e2                	ld	s1,24(sp)
+    800049cc:	6942                	ld	s2,16(sp)
+    800049ce:	69a2                	ld	s3,8(sp)
+    800049d0:	6145                	addi	sp,sp,48
+    800049d2:	8082                	ret
   r = lk->locked && (lk->pid == myproc()->pid);
-    80005ad8:	0284a983          	lw	s3,40(s1)
-    80005adc:	ffffc097          	auipc	ra,0xffffc
-    80005ae0:	0b8080e7          	jalr	184(ra) # 80001b94 <myproc>
-    80005ae4:	5904                	lw	s1,48(a0)
-    80005ae6:	413484b3          	sub	s1,s1,s3
-    80005aea:	0014b493          	seqz	s1,s1
-    80005aee:	bfc1                	j	80005abe <holdingsleep+0x24>
-
-0000000080005af0 <fileinit>:
+    800049d4:	0284a983          	lw	s3,40(s1)
+    800049d8:	ffffd097          	auipc	ra,0xffffd
+    800049dc:	2f8080e7          	jalr	760(ra) # 80001cd0 <myproc>
+    800049e0:	5904                	lw	s1,48(a0)
+    800049e2:	413484b3          	sub	s1,s1,s3
+    800049e6:	0014b493          	seqz	s1,s1
+    800049ea:	bfc1                	j	800049ba <holdingsleep+0x24>
+
+00000000800049ec <fileinit>:
   struct file file[NFILE];
 } ftable;
 
 void
 fileinit(void)
 {
-    80005af0:	1141                	addi	sp,sp,-16
-    80005af2:	e406                	sd	ra,8(sp)
-    80005af4:	e022                	sd	s0,0(sp)
-    80005af6:	0800                	addi	s0,sp,16
+    800049ec:	1141                	addi	sp,sp,-16
+    800049ee:	e406                	sd	ra,8(sp)
+    800049f0:	e022                	sd	s0,0(sp)
+    800049f2:	0800                	addi	s0,sp,16
   initlock(&ftable.lock, "ftable");
-    80005af8:	00004597          	auipc	a1,0x4
-    80005afc:	f9058593          	addi	a1,a1,-112 # 80009a88 <syscalls+0x260>
-    80005b00:	0001d517          	auipc	a0,0x1d
-    80005b04:	55850513          	addi	a0,a0,1368 # 80023058 <ftable>
-    80005b08:	ffffb097          	auipc	ra,0xffffb
-    80005b0c:	04c080e7          	jalr	76(ra) # 80000b54 <initlock>
+    800049f4:	00004597          	auipc	a1,0x4
+    800049f8:	d2458593          	addi	a1,a1,-732 # 80008718 <syscalls+0x248>
+    800049fc:	0001d517          	auipc	a0,0x1d
+    80004a00:	4fc50513          	addi	a0,a0,1276 # 80021ef8 <ftable>
+    80004a04:	ffffc097          	auipc	ra,0xffffc
+    80004a08:	150080e7          	jalr	336(ra) # 80000b54 <initlock>
 }
-    80005b10:	60a2                	ld	ra,8(sp)
-    80005b12:	6402                	ld	s0,0(sp)
-    80005b14:	0141                	addi	sp,sp,16
-    80005b16:	8082                	ret
+    80004a0c:	60a2                	ld	ra,8(sp)
+    80004a0e:	6402                	ld	s0,0(sp)
+    80004a10:	0141                	addi	sp,sp,16
+    80004a12:	8082                	ret
 
-0000000080005b18 <filealloc>:
+0000000080004a14 <filealloc>:
 
 // Allocate a file structure.
 struct file*
 filealloc(void)
 {
-    80005b18:	1101                	addi	sp,sp,-32
-    80005b1a:	ec06                	sd	ra,24(sp)
-    80005b1c:	e822                	sd	s0,16(sp)
-    80005b1e:	e426                	sd	s1,8(sp)
-    80005b20:	1000                	addi	s0,sp,32
+    80004a14:	1101                	addi	sp,sp,-32
+    80004a16:	ec06                	sd	ra,24(sp)
+    80004a18:	e822                	sd	s0,16(sp)
+    80004a1a:	e426                	sd	s1,8(sp)
+    80004a1c:	1000                	addi	s0,sp,32
   struct file *f;
 
   acquire(&ftable.lock);
-    80005b22:	0001d517          	auipc	a0,0x1d
-    80005b26:	53650513          	addi	a0,a0,1334 # 80023058 <ftable>
-    80005b2a:	ffffb097          	auipc	ra,0xffffb
-    80005b2e:	0ba080e7          	jalr	186(ra) # 80000be4 <acquire>
+    80004a1e:	0001d517          	auipc	a0,0x1d
+    80004a22:	4da50513          	addi	a0,a0,1242 # 80021ef8 <ftable>
+    80004a26:	ffffc097          	auipc	ra,0xffffc
+    80004a2a:	1be080e7          	jalr	446(ra) # 80000be4 <acquire>
   for(f = ftable.file; f < ftable.file + NFILE; f++){
-    80005b32:	0001d497          	auipc	s1,0x1d
-    80005b36:	53e48493          	addi	s1,s1,1342 # 80023070 <ftable+0x18>
-    80005b3a:	0001e717          	auipc	a4,0x1e
-    80005b3e:	4d670713          	addi	a4,a4,1238 # 80024010 <ftable+0xfb8>
+    80004a2e:	0001d497          	auipc	s1,0x1d
+    80004a32:	4e248493          	addi	s1,s1,1250 # 80021f10 <ftable+0x18>
+    80004a36:	0001e717          	auipc	a4,0x1e
+    80004a3a:	47a70713          	addi	a4,a4,1146 # 80022eb0 <ftable+0xfb8>
     if(f->ref == 0){
-    80005b42:	40dc                	lw	a5,4(s1)
-    80005b44:	cf99                	beqz	a5,80005b62 <filealloc+0x4a>
+    80004a3e:	40dc                	lw	a5,4(s1)
+    80004a40:	cf99                	beqz	a5,80004a5e <filealloc+0x4a>
   for(f = ftable.file; f < ftable.file + NFILE; f++){
-    80005b46:	02848493          	addi	s1,s1,40
-    80005b4a:	fee49ce3          	bne	s1,a4,80005b42 <filealloc+0x2a>
+    80004a42:	02848493          	addi	s1,s1,40
+    80004a46:	fee49ce3          	bne	s1,a4,80004a3e <filealloc+0x2a>
       f->ref = 1;
       release(&ftable.lock);
       return f;
     }
   }
   release(&ftable.lock);
-    80005b4e:	0001d517          	auipc	a0,0x1d
-    80005b52:	50a50513          	addi	a0,a0,1290 # 80023058 <ftable>
-    80005b56:	ffffb097          	auipc	ra,0xffffb
-    80005b5a:	142080e7          	jalr	322(ra) # 80000c98 <release>
+    80004a4a:	0001d517          	auipc	a0,0x1d
+    80004a4e:	4ae50513          	addi	a0,a0,1198 # 80021ef8 <ftable>
+    80004a52:	ffffc097          	auipc	ra,0xffffc
+    80004a56:	246080e7          	jalr	582(ra) # 80000c98 <release>
   return 0;
-    80005b5e:	4481                	li	s1,0
-    80005b60:	a819                	j	80005b76 <filealloc+0x5e>
+    80004a5a:	4481                	li	s1,0
+    80004a5c:	a819                	j	80004a72 <filealloc+0x5e>
       f->ref = 1;
-    80005b62:	4785                	li	a5,1
-    80005b64:	c0dc                	sw	a5,4(s1)
+    80004a5e:	4785                	li	a5,1
+    80004a60:	c0dc                	sw	a5,4(s1)
       release(&ftable.lock);
-    80005b66:	0001d517          	auipc	a0,0x1d
-    80005b6a:	4f250513          	addi	a0,a0,1266 # 80023058 <ftable>
-    80005b6e:	ffffb097          	auipc	ra,0xffffb
-    80005b72:	12a080e7          	jalr	298(ra) # 80000c98 <release>
+    80004a62:	0001d517          	auipc	a0,0x1d
+    80004a66:	49650513          	addi	a0,a0,1174 # 80021ef8 <ftable>
+    80004a6a:	ffffc097          	auipc	ra,0xffffc
+    80004a6e:	22e080e7          	jalr	558(ra) # 80000c98 <release>
 }
-    80005b76:	8526                	mv	a0,s1
-    80005b78:	60e2                	ld	ra,24(sp)
-    80005b7a:	6442                	ld	s0,16(sp)
-    80005b7c:	64a2                	ld	s1,8(sp)
-    80005b7e:	6105                	addi	sp,sp,32
-    80005b80:	8082                	ret
+    80004a72:	8526                	mv	a0,s1
+    80004a74:	60e2                	ld	ra,24(sp)
+    80004a76:	6442                	ld	s0,16(sp)
+    80004a78:	64a2                	ld	s1,8(sp)
+    80004a7a:	6105                	addi	sp,sp,32
+    80004a7c:	8082                	ret
 
-0000000080005b82 <filedup>:
+0000000080004a7e <filedup>:
 
 // Increment ref count for file f.
 struct file*
 filedup(struct file *f)
 {
-    80005b82:	1101                	addi	sp,sp,-32
-    80005b84:	ec06                	sd	ra,24(sp)
-    80005b86:	e822                	sd	s0,16(sp)
-    80005b88:	e426                	sd	s1,8(sp)
-    80005b8a:	1000                	addi	s0,sp,32
-    80005b8c:	84aa                	mv	s1,a0
+    80004a7e:	1101                	addi	sp,sp,-32
+    80004a80:	ec06                	sd	ra,24(sp)
+    80004a82:	e822                	sd	s0,16(sp)
+    80004a84:	e426                	sd	s1,8(sp)
+    80004a86:	1000                	addi	s0,sp,32
+    80004a88:	84aa                	mv	s1,a0
   acquire(&ftable.lock);
-    80005b8e:	0001d517          	auipc	a0,0x1d
-    80005b92:	4ca50513          	addi	a0,a0,1226 # 80023058 <ftable>
-    80005b96:	ffffb097          	auipc	ra,0xffffb
-    80005b9a:	04e080e7          	jalr	78(ra) # 80000be4 <acquire>
+    80004a8a:	0001d517          	auipc	a0,0x1d
+    80004a8e:	46e50513          	addi	a0,a0,1134 # 80021ef8 <ftable>
+    80004a92:	ffffc097          	auipc	ra,0xffffc
+    80004a96:	152080e7          	jalr	338(ra) # 80000be4 <acquire>
   if(f->ref < 1)
-    80005b9e:	40dc                	lw	a5,4(s1)
-    80005ba0:	02f05263          	blez	a5,80005bc4 <filedup+0x42>
+    80004a9a:	40dc                	lw	a5,4(s1)
+    80004a9c:	02f05263          	blez	a5,80004ac0 <filedup+0x42>
     panic("filedup");
   f->ref++;
-    80005ba4:	2785                	addiw	a5,a5,1
-    80005ba6:	c0dc                	sw	a5,4(s1)
+    80004aa0:	2785                	addiw	a5,a5,1
+    80004aa2:	c0dc                	sw	a5,4(s1)
   release(&ftable.lock);
-    80005ba8:	0001d517          	auipc	a0,0x1d
-    80005bac:	4b050513          	addi	a0,a0,1200 # 80023058 <ftable>
-    80005bb0:	ffffb097          	auipc	ra,0xffffb
-    80005bb4:	0e8080e7          	jalr	232(ra) # 80000c98 <release>
+    80004aa4:	0001d517          	auipc	a0,0x1d
+    80004aa8:	45450513          	addi	a0,a0,1108 # 80021ef8 <ftable>
+    80004aac:	ffffc097          	auipc	ra,0xffffc
+    80004ab0:	1ec080e7          	jalr	492(ra) # 80000c98 <release>
   return f;
 }
-    80005bb8:	8526                	mv	a0,s1
-    80005bba:	60e2                	ld	ra,24(sp)
-    80005bbc:	6442                	ld	s0,16(sp)
-    80005bbe:	64a2                	ld	s1,8(sp)
-    80005bc0:	6105                	addi	sp,sp,32
-    80005bc2:	8082                	ret
+    80004ab4:	8526                	mv	a0,s1
+    80004ab6:	60e2                	ld	ra,24(sp)
+    80004ab8:	6442                	ld	s0,16(sp)
+    80004aba:	64a2                	ld	s1,8(sp)
+    80004abc:	6105                	addi	sp,sp,32
+    80004abe:	8082                	ret
     panic("filedup");
-    80005bc4:	00004517          	auipc	a0,0x4
-    80005bc8:	ecc50513          	addi	a0,a0,-308 # 80009a90 <syscalls+0x268>
-    80005bcc:	ffffb097          	auipc	ra,0xffffb
-    80005bd0:	972080e7          	jalr	-1678(ra) # 8000053e <panic>
+    80004ac0:	00004517          	auipc	a0,0x4
+    80004ac4:	c6050513          	addi	a0,a0,-928 # 80008720 <syscalls+0x250>
+    80004ac8:	ffffc097          	auipc	ra,0xffffc
+    80004acc:	a76080e7          	jalr	-1418(ra) # 8000053e <panic>
 
-0000000080005bd4 <fileclose>:
+0000000080004ad0 <fileclose>:
 
 // Close file f.  (Decrement ref count, close when reaches 0.)
 void
 fileclose(struct file *f)
 {
-    80005bd4:	7139                	addi	sp,sp,-64
-    80005bd6:	fc06                	sd	ra,56(sp)
-    80005bd8:	f822                	sd	s0,48(sp)
-    80005bda:	f426                	sd	s1,40(sp)
-    80005bdc:	f04a                	sd	s2,32(sp)
-    80005bde:	ec4e                	sd	s3,24(sp)
-    80005be0:	e852                	sd	s4,16(sp)
-    80005be2:	e456                	sd	s5,8(sp)
-    80005be4:	0080                	addi	s0,sp,64
-    80005be6:	84aa                	mv	s1,a0
+    80004ad0:	7139                	addi	sp,sp,-64
+    80004ad2:	fc06                	sd	ra,56(sp)
+    80004ad4:	f822                	sd	s0,48(sp)
+    80004ad6:	f426                	sd	s1,40(sp)
+    80004ad8:	f04a                	sd	s2,32(sp)
+    80004ada:	ec4e                	sd	s3,24(sp)
+    80004adc:	e852                	sd	s4,16(sp)
+    80004ade:	e456                	sd	s5,8(sp)
+    80004ae0:	0080                	addi	s0,sp,64
+    80004ae2:	84aa                	mv	s1,a0
   struct file ff;
 
   acquire(&ftable.lock);
-    80005be8:	0001d517          	auipc	a0,0x1d
-    80005bec:	47050513          	addi	a0,a0,1136 # 80023058 <ftable>
-    80005bf0:	ffffb097          	auipc	ra,0xffffb
-    80005bf4:	ff4080e7          	jalr	-12(ra) # 80000be4 <acquire>
+    80004ae4:	0001d517          	auipc	a0,0x1d
+    80004ae8:	41450513          	addi	a0,a0,1044 # 80021ef8 <ftable>
+    80004aec:	ffffc097          	auipc	ra,0xffffc
+    80004af0:	0f8080e7          	jalr	248(ra) # 80000be4 <acquire>
   if(f->ref < 1)
-    80005bf8:	40dc                	lw	a5,4(s1)
-    80005bfa:	06f05163          	blez	a5,80005c5c <fileclose+0x88>
+    80004af4:	40dc                	lw	a5,4(s1)
+    80004af6:	06f05163          	blez	a5,80004b58 <fileclose+0x88>
     panic("fileclose");
   if(--f->ref > 0){
-    80005bfe:	37fd                	addiw	a5,a5,-1
-    80005c00:	0007871b          	sext.w	a4,a5
-    80005c04:	c0dc                	sw	a5,4(s1)
-    80005c06:	06e04363          	bgtz	a4,80005c6c <fileclose+0x98>
+    80004afa:	37fd                	addiw	a5,a5,-1
+    80004afc:	0007871b          	sext.w	a4,a5
+    80004b00:	c0dc                	sw	a5,4(s1)
+    80004b02:	06e04363          	bgtz	a4,80004b68 <fileclose+0x98>
     release(&ftable.lock);
     return;
   }
   ff = *f;
-    80005c0a:	0004a903          	lw	s2,0(s1)
-    80005c0e:	0094ca83          	lbu	s5,9(s1)
-    80005c12:	0104ba03          	ld	s4,16(s1)
-    80005c16:	0184b983          	ld	s3,24(s1)
+    80004b06:	0004a903          	lw	s2,0(s1)
+    80004b0a:	0094ca83          	lbu	s5,9(s1)
+    80004b0e:	0104ba03          	ld	s4,16(s1)
+    80004b12:	0184b983          	ld	s3,24(s1)
   f->ref = 0;
-    80005c1a:	0004a223          	sw	zero,4(s1)
+    80004b16:	0004a223          	sw	zero,4(s1)
   f->type = FD_NONE;
-    80005c1e:	0004a023          	sw	zero,0(s1)
+    80004b1a:	0004a023          	sw	zero,0(s1)
   release(&ftable.lock);
-    80005c22:	0001d517          	auipc	a0,0x1d
-    80005c26:	43650513          	addi	a0,a0,1078 # 80023058 <ftable>
-    80005c2a:	ffffb097          	auipc	ra,0xffffb
-    80005c2e:	06e080e7          	jalr	110(ra) # 80000c98 <release>
+    80004b1e:	0001d517          	auipc	a0,0x1d
+    80004b22:	3da50513          	addi	a0,a0,986 # 80021ef8 <ftable>
+    80004b26:	ffffc097          	auipc	ra,0xffffc
+    80004b2a:	172080e7          	jalr	370(ra) # 80000c98 <release>
 
   if(ff.type == FD_PIPE){
-    80005c32:	4785                	li	a5,1
-    80005c34:	04f90d63          	beq	s2,a5,80005c8e <fileclose+0xba>
+    80004b2e:	4785                	li	a5,1
+    80004b30:	04f90d63          	beq	s2,a5,80004b8a <fileclose+0xba>
     pipeclose(ff.pipe, ff.writable);
   } else if(ff.type == FD_INODE || ff.type == FD_DEVICE){
-    80005c38:	3979                	addiw	s2,s2,-2
-    80005c3a:	4785                	li	a5,1
-    80005c3c:	0527e063          	bltu	a5,s2,80005c7c <fileclose+0xa8>
+    80004b34:	3979                	addiw	s2,s2,-2
+    80004b36:	4785                	li	a5,1
+    80004b38:	0527e063          	bltu	a5,s2,80004b78 <fileclose+0xa8>
     begin_op();
-    80005c40:	00000097          	auipc	ra,0x0
-    80005c44:	ac8080e7          	jalr	-1336(ra) # 80005708 <begin_op>
+    80004b3c:	00000097          	auipc	ra,0x0
+    80004b40:	ac8080e7          	jalr	-1336(ra) # 80004604 <begin_op>
     iput(ff.ip);
-    80005c48:	854e                	mv	a0,s3
-    80005c4a:	fffff097          	auipc	ra,0xfffff
-    80005c4e:	2a6080e7          	jalr	678(ra) # 80004ef0 <iput>
+    80004b44:	854e                	mv	a0,s3
+    80004b46:	fffff097          	auipc	ra,0xfffff
+    80004b4a:	2a6080e7          	jalr	678(ra) # 80003dec <iput>
     end_op();
-    80005c52:	00000097          	auipc	ra,0x0
-    80005c56:	b36080e7          	jalr	-1226(ra) # 80005788 <end_op>
-    80005c5a:	a00d                	j	80005c7c <fileclose+0xa8>
+    80004b4e:	00000097          	auipc	ra,0x0
+    80004b52:	b36080e7          	jalr	-1226(ra) # 80004684 <end_op>
+    80004b56:	a00d                	j	80004b78 <fileclose+0xa8>
     panic("fileclose");
-    80005c5c:	00004517          	auipc	a0,0x4
-    80005c60:	e3c50513          	addi	a0,a0,-452 # 80009a98 <syscalls+0x270>
-    80005c64:	ffffb097          	auipc	ra,0xffffb
-    80005c68:	8da080e7          	jalr	-1830(ra) # 8000053e <panic>
+    80004b58:	00004517          	auipc	a0,0x4
+    80004b5c:	bd050513          	addi	a0,a0,-1072 # 80008728 <syscalls+0x258>
+    80004b60:	ffffc097          	auipc	ra,0xffffc
+    80004b64:	9de080e7          	jalr	-1570(ra) # 8000053e <panic>
     release(&ftable.lock);
-    80005c6c:	0001d517          	auipc	a0,0x1d
-    80005c70:	3ec50513          	addi	a0,a0,1004 # 80023058 <ftable>
-    80005c74:	ffffb097          	auipc	ra,0xffffb
-    80005c78:	024080e7          	jalr	36(ra) # 80000c98 <release>
+    80004b68:	0001d517          	auipc	a0,0x1d
+    80004b6c:	39050513          	addi	a0,a0,912 # 80021ef8 <ftable>
+    80004b70:	ffffc097          	auipc	ra,0xffffc
+    80004b74:	128080e7          	jalr	296(ra) # 80000c98 <release>
   }
 }
-    80005c7c:	70e2                	ld	ra,56(sp)
-    80005c7e:	7442                	ld	s0,48(sp)
-    80005c80:	74a2                	ld	s1,40(sp)
-    80005c82:	7902                	ld	s2,32(sp)
-    80005c84:	69e2                	ld	s3,24(sp)
-    80005c86:	6a42                	ld	s4,16(sp)
-    80005c88:	6aa2                	ld	s5,8(sp)
-    80005c8a:	6121                	addi	sp,sp,64
-    80005c8c:	8082                	ret
+    80004b78:	70e2                	ld	ra,56(sp)
+    80004b7a:	7442                	ld	s0,48(sp)
+    80004b7c:	74a2                	ld	s1,40(sp)
+    80004b7e:	7902                	ld	s2,32(sp)
+    80004b80:	69e2                	ld	s3,24(sp)
+    80004b82:	6a42                	ld	s4,16(sp)
+    80004b84:	6aa2                	ld	s5,8(sp)
+    80004b86:	6121                	addi	sp,sp,64
+    80004b88:	8082                	ret
     pipeclose(ff.pipe, ff.writable);
-    80005c8e:	85d6                	mv	a1,s5
-    80005c90:	8552                	mv	a0,s4
-    80005c92:	00000097          	auipc	ra,0x0
-    80005c96:	34c080e7          	jalr	844(ra) # 80005fde <pipeclose>
-    80005c9a:	b7cd                	j	80005c7c <fileclose+0xa8>
+    80004b8a:	85d6                	mv	a1,s5
+    80004b8c:	8552                	mv	a0,s4
+    80004b8e:	00000097          	auipc	ra,0x0
+    80004b92:	34c080e7          	jalr	844(ra) # 80004eda <pipeclose>
+    80004b96:	b7cd                	j	80004b78 <fileclose+0xa8>
 
-0000000080005c9c <filestat>:
+0000000080004b98 <filestat>:
 
 // Get metadata about file f.
 // addr is a user virtual address, pointing to a struct stat.
 int
 filestat(struct file *f, uint64 addr)
 {
-    80005c9c:	715d                	addi	sp,sp,-80
-    80005c9e:	e486                	sd	ra,72(sp)
-    80005ca0:	e0a2                	sd	s0,64(sp)
-    80005ca2:	fc26                	sd	s1,56(sp)
-    80005ca4:	f84a                	sd	s2,48(sp)
-    80005ca6:	f44e                	sd	s3,40(sp)
-    80005ca8:	0880                	addi	s0,sp,80
-    80005caa:	84aa                	mv	s1,a0
-    80005cac:	89ae                	mv	s3,a1
+    80004b98:	715d                	addi	sp,sp,-80
+    80004b9a:	e486                	sd	ra,72(sp)
+    80004b9c:	e0a2                	sd	s0,64(sp)
+    80004b9e:	fc26                	sd	s1,56(sp)
+    80004ba0:	f84a                	sd	s2,48(sp)
+    80004ba2:	f44e                	sd	s3,40(sp)
+    80004ba4:	0880                	addi	s0,sp,80
+    80004ba6:	84aa                	mv	s1,a0
+    80004ba8:	89ae                	mv	s3,a1
   struct proc *p = myproc();
-    80005cae:	ffffc097          	auipc	ra,0xffffc
-    80005cb2:	ee6080e7          	jalr	-282(ra) # 80001b94 <myproc>
+    80004baa:	ffffd097          	auipc	ra,0xffffd
+    80004bae:	126080e7          	jalr	294(ra) # 80001cd0 <myproc>
   struct stat st;
   
   if(f->type == FD_INODE || f->type == FD_DEVICE){
-    80005cb6:	409c                	lw	a5,0(s1)
-    80005cb8:	37f9                	addiw	a5,a5,-2
-    80005cba:	4705                	li	a4,1
-    80005cbc:	04f76763          	bltu	a4,a5,80005d0a <filestat+0x6e>
-    80005cc0:	892a                	mv	s2,a0
+    80004bb2:	409c                	lw	a5,0(s1)
+    80004bb4:	37f9                	addiw	a5,a5,-2
+    80004bb6:	4705                	li	a4,1
+    80004bb8:	04f76763          	bltu	a4,a5,80004c06 <filestat+0x6e>
+    80004bbc:	892a                	mv	s2,a0
     ilock(f->ip);
-    80005cc2:	6c88                	ld	a0,24(s1)
-    80005cc4:	fffff097          	auipc	ra,0xfffff
-    80005cc8:	072080e7          	jalr	114(ra) # 80004d36 <ilock>
+    80004bbe:	6c88                	ld	a0,24(s1)
+    80004bc0:	fffff097          	auipc	ra,0xfffff
+    80004bc4:	072080e7          	jalr	114(ra) # 80003c32 <ilock>
     stati(f->ip, &st);
-    80005ccc:	fb840593          	addi	a1,s0,-72
-    80005cd0:	6c88                	ld	a0,24(s1)
-    80005cd2:	fffff097          	auipc	ra,0xfffff
-    80005cd6:	2ee080e7          	jalr	750(ra) # 80004fc0 <stati>
+    80004bc8:	fb840593          	addi	a1,s0,-72
+    80004bcc:	6c88                	ld	a0,24(s1)
+    80004bce:	fffff097          	auipc	ra,0xfffff
+    80004bd2:	2ee080e7          	jalr	750(ra) # 80003ebc <stati>
     iunlock(f->ip);
-    80005cda:	6c88                	ld	a0,24(s1)
-    80005cdc:	fffff097          	auipc	ra,0xfffff
-    80005ce0:	11c080e7          	jalr	284(ra) # 80004df8 <iunlock>
+    80004bd6:	6c88                	ld	a0,24(s1)
+    80004bd8:	fffff097          	auipc	ra,0xfffff
+    80004bdc:	11c080e7          	jalr	284(ra) # 80003cf4 <iunlock>
     if(copyout(p->pagetable, addr, (char *)&st, sizeof(st)) < 0)
-    80005ce4:	46e1                	li	a3,24
-    80005ce6:	fb840613          	addi	a2,s0,-72
-    80005cea:	85ce                	mv	a1,s3
-    80005cec:	08093503          	ld	a0,128(s2)
-    80005cf0:	ffffc097          	auipc	ra,0xffffc
-    80005cf4:	98a080e7          	jalr	-1654(ra) # 8000167a <copyout>
-    80005cf8:	41f5551b          	sraiw	a0,a0,0x1f
+    80004be0:	46e1                	li	a3,24
+    80004be2:	fb840613          	addi	a2,s0,-72
+    80004be6:	85ce                	mv	a1,s3
+    80004be8:	05093503          	ld	a0,80(s2)
+    80004bec:	ffffd097          	auipc	ra,0xffffd
+    80004bf0:	a86080e7          	jalr	-1402(ra) # 80001672 <copyout>
+    80004bf4:	41f5551b          	sraiw	a0,a0,0x1f
       return -1;
     return 0;
   }
   return -1;
 }
-    80005cfc:	60a6                	ld	ra,72(sp)
-    80005cfe:	6406                	ld	s0,64(sp)
-    80005d00:	74e2                	ld	s1,56(sp)
-    80005d02:	7942                	ld	s2,48(sp)
-    80005d04:	79a2                	ld	s3,40(sp)
-    80005d06:	6161                	addi	sp,sp,80
-    80005d08:	8082                	ret
+    80004bf8:	60a6                	ld	ra,72(sp)
+    80004bfa:	6406                	ld	s0,64(sp)
+    80004bfc:	74e2                	ld	s1,56(sp)
+    80004bfe:	7942                	ld	s2,48(sp)
+    80004c00:	79a2                	ld	s3,40(sp)
+    80004c02:	6161                	addi	sp,sp,80
+    80004c04:	8082                	ret
   return -1;
-    80005d0a:	557d                	li	a0,-1
-    80005d0c:	bfc5                	j	80005cfc <filestat+0x60>
+    80004c06:	557d                	li	a0,-1
+    80004c08:	bfc5                	j	80004bf8 <filestat+0x60>
 
-0000000080005d0e <fileread>:
+0000000080004c0a <fileread>:
 
 // Read from file f.
 // addr is a user virtual address.
 int
 fileread(struct file *f, uint64 addr, int n)
 {
-    80005d0e:	7179                	addi	sp,sp,-48
-    80005d10:	f406                	sd	ra,40(sp)
-    80005d12:	f022                	sd	s0,32(sp)
-    80005d14:	ec26                	sd	s1,24(sp)
-    80005d16:	e84a                	sd	s2,16(sp)
-    80005d18:	e44e                	sd	s3,8(sp)
-    80005d1a:	1800                	addi	s0,sp,48
+    80004c0a:	7179                	addi	sp,sp,-48
+    80004c0c:	f406                	sd	ra,40(sp)
+    80004c0e:	f022                	sd	s0,32(sp)
+    80004c10:	ec26                	sd	s1,24(sp)
+    80004c12:	e84a                	sd	s2,16(sp)
+    80004c14:	e44e                	sd	s3,8(sp)
+    80004c16:	1800                	addi	s0,sp,48
   int r = 0;
 
   if(f->readable == 0)
-    80005d1c:	00854783          	lbu	a5,8(a0)
-    80005d20:	c3d5                	beqz	a5,80005dc4 <fileread+0xb6>
-    80005d22:	84aa                	mv	s1,a0
-    80005d24:	89ae                	mv	s3,a1
-    80005d26:	8932                	mv	s2,a2
+    80004c18:	00854783          	lbu	a5,8(a0)
+    80004c1c:	c3d5                	beqz	a5,80004cc0 <fileread+0xb6>
+    80004c1e:	84aa                	mv	s1,a0
+    80004c20:	89ae                	mv	s3,a1
+    80004c22:	8932                	mv	s2,a2
     return -1;
 
   if(f->type == FD_PIPE){
-    80005d28:	411c                	lw	a5,0(a0)
-    80005d2a:	4705                	li	a4,1
-    80005d2c:	04e78963          	beq	a5,a4,80005d7e <fileread+0x70>
+    80004c24:	411c                	lw	a5,0(a0)
+    80004c26:	4705                	li	a4,1
+    80004c28:	04e78963          	beq	a5,a4,80004c7a <fileread+0x70>
     r = piperead(f->pipe, addr, n);
   } else if(f->type == FD_DEVICE){
-    80005d30:	470d                	li	a4,3
-    80005d32:	04e78d63          	beq	a5,a4,80005d8c <fileread+0x7e>
+    80004c2c:	470d                	li	a4,3
+    80004c2e:	04e78d63          	beq	a5,a4,80004c88 <fileread+0x7e>
     if(f->major < 0 || f->major >= NDEV || !devsw[f->major].read)
       return -1;
     r = devsw[f->major].read(1, addr, n);
   } else if(f->type == FD_INODE){
-    80005d36:	4709                	li	a4,2
-    80005d38:	06e79e63          	bne	a5,a4,80005db4 <fileread+0xa6>
+    80004c32:	4709                	li	a4,2
+    80004c34:	06e79e63          	bne	a5,a4,80004cb0 <fileread+0xa6>
     ilock(f->ip);
-    80005d3c:	6d08                	ld	a0,24(a0)
-    80005d3e:	fffff097          	auipc	ra,0xfffff
-    80005d42:	ff8080e7          	jalr	-8(ra) # 80004d36 <ilock>
+    80004c38:	6d08                	ld	a0,24(a0)
+    80004c3a:	fffff097          	auipc	ra,0xfffff
+    80004c3e:	ff8080e7          	jalr	-8(ra) # 80003c32 <ilock>
     if((r = readi(f->ip, 1, addr, f->off, n)) > 0)
-    80005d46:	874a                	mv	a4,s2
-    80005d48:	5094                	lw	a3,32(s1)
-    80005d4a:	864e                	mv	a2,s3
-    80005d4c:	4585                	li	a1,1
-    80005d4e:	6c88                	ld	a0,24(s1)
-    80005d50:	fffff097          	auipc	ra,0xfffff
-    80005d54:	29a080e7          	jalr	666(ra) # 80004fea <readi>
-    80005d58:	892a                	mv	s2,a0
-    80005d5a:	00a05563          	blez	a0,80005d64 <fileread+0x56>
+    80004c42:	874a                	mv	a4,s2
+    80004c44:	5094                	lw	a3,32(s1)
+    80004c46:	864e                	mv	a2,s3
+    80004c48:	4585                	li	a1,1
+    80004c4a:	6c88                	ld	a0,24(s1)
+    80004c4c:	fffff097          	auipc	ra,0xfffff
+    80004c50:	29a080e7          	jalr	666(ra) # 80003ee6 <readi>
+    80004c54:	892a                	mv	s2,a0
+    80004c56:	00a05563          	blez	a0,80004c60 <fileread+0x56>
       f->off += r;
-    80005d5e:	509c                	lw	a5,32(s1)
-    80005d60:	9fa9                	addw	a5,a5,a0
-    80005d62:	d09c                	sw	a5,32(s1)
+    80004c5a:	509c                	lw	a5,32(s1)
+    80004c5c:	9fa9                	addw	a5,a5,a0
+    80004c5e:	d09c                	sw	a5,32(s1)
     iunlock(f->ip);
-    80005d64:	6c88                	ld	a0,24(s1)
-    80005d66:	fffff097          	auipc	ra,0xfffff
-    80005d6a:	092080e7          	jalr	146(ra) # 80004df8 <iunlock>
+    80004c60:	6c88                	ld	a0,24(s1)
+    80004c62:	fffff097          	auipc	ra,0xfffff
+    80004c66:	092080e7          	jalr	146(ra) # 80003cf4 <iunlock>
   } else {
     panic("fileread");
   }
 
   return r;
 }
-    80005d6e:	854a                	mv	a0,s2
-    80005d70:	70a2                	ld	ra,40(sp)
-    80005d72:	7402                	ld	s0,32(sp)
-    80005d74:	64e2                	ld	s1,24(sp)
-    80005d76:	6942                	ld	s2,16(sp)
-    80005d78:	69a2                	ld	s3,8(sp)
-    80005d7a:	6145                	addi	sp,sp,48
-    80005d7c:	8082                	ret
+    80004c6a:	854a                	mv	a0,s2
+    80004c6c:	70a2                	ld	ra,40(sp)
+    80004c6e:	7402                	ld	s0,32(sp)
+    80004c70:	64e2                	ld	s1,24(sp)
+    80004c72:	6942                	ld	s2,16(sp)
+    80004c74:	69a2                	ld	s3,8(sp)
+    80004c76:	6145                	addi	sp,sp,48
+    80004c78:	8082                	ret
     r = piperead(f->pipe, addr, n);
-    80005d7e:	6908                	ld	a0,16(a0)
-    80005d80:	00000097          	auipc	ra,0x0
-    80005d84:	3c8080e7          	jalr	968(ra) # 80006148 <piperead>
-    80005d88:	892a                	mv	s2,a0
-    80005d8a:	b7d5                	j	80005d6e <fileread+0x60>
+    80004c7a:	6908                	ld	a0,16(a0)
+    80004c7c:	00000097          	auipc	ra,0x0
+    80004c80:	3c8080e7          	jalr	968(ra) # 80005044 <piperead>
+    80004c84:	892a                	mv	s2,a0
+    80004c86:	b7d5                	j	80004c6a <fileread+0x60>
     if(f->major < 0 || f->major >= NDEV || !devsw[f->major].read)
-    80005d8c:	02451783          	lh	a5,36(a0)
-    80005d90:	03079693          	slli	a3,a5,0x30
-    80005d94:	92c1                	srli	a3,a3,0x30
-    80005d96:	4725                	li	a4,9
-    80005d98:	02d76863          	bltu	a4,a3,80005dc8 <fileread+0xba>
-    80005d9c:	0792                	slli	a5,a5,0x4
-    80005d9e:	0001d717          	auipc	a4,0x1d
-    80005da2:	21a70713          	addi	a4,a4,538 # 80022fb8 <devsw>
-    80005da6:	97ba                	add	a5,a5,a4
-    80005da8:	639c                	ld	a5,0(a5)
-    80005daa:	c38d                	beqz	a5,80005dcc <fileread+0xbe>
+    80004c88:	02451783          	lh	a5,36(a0)
+    80004c8c:	03079693          	slli	a3,a5,0x30
+    80004c90:	92c1                	srli	a3,a3,0x30
+    80004c92:	4725                	li	a4,9
+    80004c94:	02d76863          	bltu	a4,a3,80004cc4 <fileread+0xba>
+    80004c98:	0792                	slli	a5,a5,0x4
+    80004c9a:	0001d717          	auipc	a4,0x1d
+    80004c9e:	1be70713          	addi	a4,a4,446 # 80021e58 <devsw>
+    80004ca2:	97ba                	add	a5,a5,a4
+    80004ca4:	639c                	ld	a5,0(a5)
+    80004ca6:	c38d                	beqz	a5,80004cc8 <fileread+0xbe>
     r = devsw[f->major].read(1, addr, n);
-    80005dac:	4505                	li	a0,1
-    80005dae:	9782                	jalr	a5
-    80005db0:	892a                	mv	s2,a0
-    80005db2:	bf75                	j	80005d6e <fileread+0x60>
+    80004ca8:	4505                	li	a0,1
+    80004caa:	9782                	jalr	a5
+    80004cac:	892a                	mv	s2,a0
+    80004cae:	bf75                	j	80004c6a <fileread+0x60>
     panic("fileread");
-    80005db4:	00004517          	auipc	a0,0x4
-    80005db8:	cf450513          	addi	a0,a0,-780 # 80009aa8 <syscalls+0x280>
-    80005dbc:	ffffa097          	auipc	ra,0xffffa
-    80005dc0:	782080e7          	jalr	1922(ra) # 8000053e <panic>
+    80004cb0:	00004517          	auipc	a0,0x4
+    80004cb4:	a8850513          	addi	a0,a0,-1400 # 80008738 <syscalls+0x268>
+    80004cb8:	ffffc097          	auipc	ra,0xffffc
+    80004cbc:	886080e7          	jalr	-1914(ra) # 8000053e <panic>
     return -1;
-    80005dc4:	597d                	li	s2,-1
-    80005dc6:	b765                	j	80005d6e <fileread+0x60>
+    80004cc0:	597d                	li	s2,-1
+    80004cc2:	b765                	j	80004c6a <fileread+0x60>
       return -1;
-    80005dc8:	597d                	li	s2,-1
-    80005dca:	b755                	j	80005d6e <fileread+0x60>
-    80005dcc:	597d                	li	s2,-1
-    80005dce:	b745                	j	80005d6e <fileread+0x60>
+    80004cc4:	597d                	li	s2,-1
+    80004cc6:	b755                	j	80004c6a <fileread+0x60>
+    80004cc8:	597d                	li	s2,-1
+    80004cca:	b745                	j	80004c6a <fileread+0x60>
 
-0000000080005dd0 <filewrite>:
+0000000080004ccc <filewrite>:
 
 // Write to file f.
 // addr is a user virtual address.
 int
 filewrite(struct file *f, uint64 addr, int n)
 {
-    80005dd0:	715d                	addi	sp,sp,-80
-    80005dd2:	e486                	sd	ra,72(sp)
-    80005dd4:	e0a2                	sd	s0,64(sp)
-    80005dd6:	fc26                	sd	s1,56(sp)
-    80005dd8:	f84a                	sd	s2,48(sp)
-    80005dda:	f44e                	sd	s3,40(sp)
-    80005ddc:	f052                	sd	s4,32(sp)
-    80005dde:	ec56                	sd	s5,24(sp)
-    80005de0:	e85a                	sd	s6,16(sp)
-    80005de2:	e45e                	sd	s7,8(sp)
-    80005de4:	e062                	sd	s8,0(sp)
-    80005de6:	0880                	addi	s0,sp,80
+    80004ccc:	715d                	addi	sp,sp,-80
+    80004cce:	e486                	sd	ra,72(sp)
+    80004cd0:	e0a2                	sd	s0,64(sp)
+    80004cd2:	fc26                	sd	s1,56(sp)
+    80004cd4:	f84a                	sd	s2,48(sp)
+    80004cd6:	f44e                	sd	s3,40(sp)
+    80004cd8:	f052                	sd	s4,32(sp)
+    80004cda:	ec56                	sd	s5,24(sp)
+    80004cdc:	e85a                	sd	s6,16(sp)
+    80004cde:	e45e                	sd	s7,8(sp)
+    80004ce0:	e062                	sd	s8,0(sp)
+    80004ce2:	0880                	addi	s0,sp,80
   int r, ret = 0;
 
   if(f->writable == 0)
-    80005de8:	00954783          	lbu	a5,9(a0)
-    80005dec:	10078663          	beqz	a5,80005ef8 <filewrite+0x128>
-    80005df0:	892a                	mv	s2,a0
-    80005df2:	8aae                	mv	s5,a1
-    80005df4:	8a32                	mv	s4,a2
+    80004ce4:	00954783          	lbu	a5,9(a0)
+    80004ce8:	10078663          	beqz	a5,80004df4 <filewrite+0x128>
+    80004cec:	892a                	mv	s2,a0
+    80004cee:	8aae                	mv	s5,a1
+    80004cf0:	8a32                	mv	s4,a2
     return -1;
 
   if(f->type == FD_PIPE){
-    80005df6:	411c                	lw	a5,0(a0)
-    80005df8:	4705                	li	a4,1
-    80005dfa:	02e78263          	beq	a5,a4,80005e1e <filewrite+0x4e>
+    80004cf2:	411c                	lw	a5,0(a0)
+    80004cf4:	4705                	li	a4,1
+    80004cf6:	02e78263          	beq	a5,a4,80004d1a <filewrite+0x4e>
     ret = pipewrite(f->pipe, addr, n);
   } else if(f->type == FD_DEVICE){
-    80005dfe:	470d                	li	a4,3
-    80005e00:	02e78663          	beq	a5,a4,80005e2c <filewrite+0x5c>
+    80004cfa:	470d                	li	a4,3
+    80004cfc:	02e78663          	beq	a5,a4,80004d28 <filewrite+0x5c>
     if(f->major < 0 || f->major >= NDEV || !devsw[f->major].write)
       return -1;
     ret = devsw[f->major].write(1, addr, n);
   } else if(f->type == FD_INODE){
-    80005e04:	4709                	li	a4,2
-    80005e06:	0ee79163          	bne	a5,a4,80005ee8 <filewrite+0x118>
+    80004d00:	4709                	li	a4,2
+    80004d02:	0ee79163          	bne	a5,a4,80004de4 <filewrite+0x118>
     // and 2 blocks of slop for non-aligned writes.
     // this really belongs lower down, since writei()
     // might be writing a device like the console.
     int max = ((MAXOPBLOCKS-1-1-2) / 2) * BSIZE;
     int i = 0;
     while(i < n){
-    80005e0a:	0ac05d63          	blez	a2,80005ec4 <filewrite+0xf4>
+    80004d06:	0ac05d63          	blez	a2,80004dc0 <filewrite+0xf4>
     int i = 0;
-    80005e0e:	4981                	li	s3,0
-    80005e10:	6b05                	lui	s6,0x1
-    80005e12:	c00b0b13          	addi	s6,s6,-1024 # c00 <_entry-0x7ffff400>
-    80005e16:	6b85                	lui	s7,0x1
-    80005e18:	c00b8b9b          	addiw	s7,s7,-1024
-    80005e1c:	a861                	j	80005eb4 <filewrite+0xe4>
+    80004d0a:	4981                	li	s3,0
+    80004d0c:	6b05                	lui	s6,0x1
+    80004d0e:	c00b0b13          	addi	s6,s6,-1024 # c00 <_entry-0x7ffff400>
+    80004d12:	6b85                	lui	s7,0x1
+    80004d14:	c00b8b9b          	addiw	s7,s7,-1024
+    80004d18:	a861                	j	80004db0 <filewrite+0xe4>
     ret = pipewrite(f->pipe, addr, n);
-    80005e1e:	6908                	ld	a0,16(a0)
-    80005e20:	00000097          	auipc	ra,0x0
-    80005e24:	22e080e7          	jalr	558(ra) # 8000604e <pipewrite>
-    80005e28:	8a2a                	mv	s4,a0
-    80005e2a:	a045                	j	80005eca <filewrite+0xfa>
+    80004d1a:	6908                	ld	a0,16(a0)
+    80004d1c:	00000097          	auipc	ra,0x0
+    80004d20:	22e080e7          	jalr	558(ra) # 80004f4a <pipewrite>
+    80004d24:	8a2a                	mv	s4,a0
+    80004d26:	a045                	j	80004dc6 <filewrite+0xfa>
     if(f->major < 0 || f->major >= NDEV || !devsw[f->major].write)
-    80005e2c:	02451783          	lh	a5,36(a0)
-    80005e30:	03079693          	slli	a3,a5,0x30
-    80005e34:	92c1                	srli	a3,a3,0x30
-    80005e36:	4725                	li	a4,9
-    80005e38:	0cd76263          	bltu	a4,a3,80005efc <filewrite+0x12c>
-    80005e3c:	0792                	slli	a5,a5,0x4
-    80005e3e:	0001d717          	auipc	a4,0x1d
-    80005e42:	17a70713          	addi	a4,a4,378 # 80022fb8 <devsw>
-    80005e46:	97ba                	add	a5,a5,a4
-    80005e48:	679c                	ld	a5,8(a5)
-    80005e4a:	cbdd                	beqz	a5,80005f00 <filewrite+0x130>
+    80004d28:	02451783          	lh	a5,36(a0)
+    80004d2c:	03079693          	slli	a3,a5,0x30
+    80004d30:	92c1                	srli	a3,a3,0x30
+    80004d32:	4725                	li	a4,9
+    80004d34:	0cd76263          	bltu	a4,a3,80004df8 <filewrite+0x12c>
+    80004d38:	0792                	slli	a5,a5,0x4
+    80004d3a:	0001d717          	auipc	a4,0x1d
+    80004d3e:	11e70713          	addi	a4,a4,286 # 80021e58 <devsw>
+    80004d42:	97ba                	add	a5,a5,a4
+    80004d44:	679c                	ld	a5,8(a5)
+    80004d46:	cbdd                	beqz	a5,80004dfc <filewrite+0x130>
     ret = devsw[f->major].write(1, addr, n);
-    80005e4c:	4505                	li	a0,1
-    80005e4e:	9782                	jalr	a5
-    80005e50:	8a2a                	mv	s4,a0
-    80005e52:	a8a5                	j	80005eca <filewrite+0xfa>
-    80005e54:	00048c1b          	sext.w	s8,s1
+    80004d48:	4505                	li	a0,1
+    80004d4a:	9782                	jalr	a5
+    80004d4c:	8a2a                	mv	s4,a0
+    80004d4e:	a8a5                	j	80004dc6 <filewrite+0xfa>
+    80004d50:	00048c1b          	sext.w	s8,s1
       int n1 = n - i;
       if(n1 > max)
         n1 = max;
 
       begin_op();
-    80005e58:	00000097          	auipc	ra,0x0
-    80005e5c:	8b0080e7          	jalr	-1872(ra) # 80005708 <begin_op>
+    80004d54:	00000097          	auipc	ra,0x0
+    80004d58:	8b0080e7          	jalr	-1872(ra) # 80004604 <begin_op>
       ilock(f->ip);
-    80005e60:	01893503          	ld	a0,24(s2)
-    80005e64:	fffff097          	auipc	ra,0xfffff
-    80005e68:	ed2080e7          	jalr	-302(ra) # 80004d36 <ilock>
+    80004d5c:	01893503          	ld	a0,24(s2)
+    80004d60:	fffff097          	auipc	ra,0xfffff
+    80004d64:	ed2080e7          	jalr	-302(ra) # 80003c32 <ilock>
       if ((r = writei(f->ip, 1, addr + i, f->off, n1)) > 0)
-    80005e6c:	8762                	mv	a4,s8
-    80005e6e:	02092683          	lw	a3,32(s2)
-    80005e72:	01598633          	add	a2,s3,s5
-    80005e76:	4585                	li	a1,1
-    80005e78:	01893503          	ld	a0,24(s2)
-    80005e7c:	fffff097          	auipc	ra,0xfffff
-    80005e80:	266080e7          	jalr	614(ra) # 800050e2 <writei>
-    80005e84:	84aa                	mv	s1,a0
-    80005e86:	00a05763          	blez	a0,80005e94 <filewrite+0xc4>
+    80004d68:	8762                	mv	a4,s8
+    80004d6a:	02092683          	lw	a3,32(s2)
+    80004d6e:	01598633          	add	a2,s3,s5
+    80004d72:	4585                	li	a1,1
+    80004d74:	01893503          	ld	a0,24(s2)
+    80004d78:	fffff097          	auipc	ra,0xfffff
+    80004d7c:	266080e7          	jalr	614(ra) # 80003fde <writei>
+    80004d80:	84aa                	mv	s1,a0
+    80004d82:	00a05763          	blez	a0,80004d90 <filewrite+0xc4>
         f->off += r;
-    80005e8a:	02092783          	lw	a5,32(s2)
-    80005e8e:	9fa9                	addw	a5,a5,a0
-    80005e90:	02f92023          	sw	a5,32(s2)
+    80004d86:	02092783          	lw	a5,32(s2)
+    80004d8a:	9fa9                	addw	a5,a5,a0
+    80004d8c:	02f92023          	sw	a5,32(s2)
       iunlock(f->ip);
-    80005e94:	01893503          	ld	a0,24(s2)
-    80005e98:	fffff097          	auipc	ra,0xfffff
-    80005e9c:	f60080e7          	jalr	-160(ra) # 80004df8 <iunlock>
+    80004d90:	01893503          	ld	a0,24(s2)
+    80004d94:	fffff097          	auipc	ra,0xfffff
+    80004d98:	f60080e7          	jalr	-160(ra) # 80003cf4 <iunlock>
       end_op();
-    80005ea0:	00000097          	auipc	ra,0x0
-    80005ea4:	8e8080e7          	jalr	-1816(ra) # 80005788 <end_op>
+    80004d9c:	00000097          	auipc	ra,0x0
+    80004da0:	8e8080e7          	jalr	-1816(ra) # 80004684 <end_op>
 
       if(r != n1){
-    80005ea8:	009c1f63          	bne	s8,s1,80005ec6 <filewrite+0xf6>
+    80004da4:	009c1f63          	bne	s8,s1,80004dc2 <filewrite+0xf6>
         // error from writei
         break;
       }
       i += r;
-    80005eac:	013489bb          	addw	s3,s1,s3
+    80004da8:	013489bb          	addw	s3,s1,s3
     while(i < n){
-    80005eb0:	0149db63          	bge	s3,s4,80005ec6 <filewrite+0xf6>
+    80004dac:	0149db63          	bge	s3,s4,80004dc2 <filewrite+0xf6>
       int n1 = n - i;
-    80005eb4:	413a07bb          	subw	a5,s4,s3
+    80004db0:	413a07bb          	subw	a5,s4,s3
       if(n1 > max)
-    80005eb8:	84be                	mv	s1,a5
-    80005eba:	2781                	sext.w	a5,a5
-    80005ebc:	f8fb5ce3          	bge	s6,a5,80005e54 <filewrite+0x84>
-    80005ec0:	84de                	mv	s1,s7
-    80005ec2:	bf49                	j	80005e54 <filewrite+0x84>
+    80004db4:	84be                	mv	s1,a5
+    80004db6:	2781                	sext.w	a5,a5
+    80004db8:	f8fb5ce3          	bge	s6,a5,80004d50 <filewrite+0x84>
+    80004dbc:	84de                	mv	s1,s7
+    80004dbe:	bf49                	j	80004d50 <filewrite+0x84>
     int i = 0;
-    80005ec4:	4981                	li	s3,0
+    80004dc0:	4981                	li	s3,0
     }
     ret = (i == n ? n : -1);
-    80005ec6:	013a1f63          	bne	s4,s3,80005ee4 <filewrite+0x114>
+    80004dc2:	013a1f63          	bne	s4,s3,80004de0 <filewrite+0x114>
   } else {
     panic("filewrite");
   }
 
   return ret;
 }
-    80005eca:	8552                	mv	a0,s4
-    80005ecc:	60a6                	ld	ra,72(sp)
-    80005ece:	6406                	ld	s0,64(sp)
-    80005ed0:	74e2                	ld	s1,56(sp)
-    80005ed2:	7942                	ld	s2,48(sp)
-    80005ed4:	79a2                	ld	s3,40(sp)
-    80005ed6:	7a02                	ld	s4,32(sp)
-    80005ed8:	6ae2                	ld	s5,24(sp)
-    80005eda:	6b42                	ld	s6,16(sp)
-    80005edc:	6ba2                	ld	s7,8(sp)
-    80005ede:	6c02                	ld	s8,0(sp)
-    80005ee0:	6161                	addi	sp,sp,80
-    80005ee2:	8082                	ret
+    80004dc6:	8552                	mv	a0,s4
+    80004dc8:	60a6                	ld	ra,72(sp)
+    80004dca:	6406                	ld	s0,64(sp)
+    80004dcc:	74e2                	ld	s1,56(sp)
+    80004dce:	7942                	ld	s2,48(sp)
+    80004dd0:	79a2                	ld	s3,40(sp)
+    80004dd2:	7a02                	ld	s4,32(sp)
+    80004dd4:	6ae2                	ld	s5,24(sp)
+    80004dd6:	6b42                	ld	s6,16(sp)
+    80004dd8:	6ba2                	ld	s7,8(sp)
+    80004dda:	6c02                	ld	s8,0(sp)
+    80004ddc:	6161                	addi	sp,sp,80
+    80004dde:	8082                	ret
     ret = (i == n ? n : -1);
-    80005ee4:	5a7d                	li	s4,-1
-    80005ee6:	b7d5                	j	80005eca <filewrite+0xfa>
+    80004de0:	5a7d                	li	s4,-1
+    80004de2:	b7d5                	j	80004dc6 <filewrite+0xfa>
     panic("filewrite");
-    80005ee8:	00004517          	auipc	a0,0x4
-    80005eec:	bd050513          	addi	a0,a0,-1072 # 80009ab8 <syscalls+0x290>
-    80005ef0:	ffffa097          	auipc	ra,0xffffa
-    80005ef4:	64e080e7          	jalr	1614(ra) # 8000053e <panic>
+    80004de4:	00004517          	auipc	a0,0x4
+    80004de8:	96450513          	addi	a0,a0,-1692 # 80008748 <syscalls+0x278>
+    80004dec:	ffffb097          	auipc	ra,0xffffb
+    80004df0:	752080e7          	jalr	1874(ra) # 8000053e <panic>
     return -1;
-    80005ef8:	5a7d                	li	s4,-1
-    80005efa:	bfc1                	j	80005eca <filewrite+0xfa>
+    80004df4:	5a7d                	li	s4,-1
+    80004df6:	bfc1                	j	80004dc6 <filewrite+0xfa>
       return -1;
-    80005efc:	5a7d                	li	s4,-1
-    80005efe:	b7f1                	j	80005eca <filewrite+0xfa>
-    80005f00:	5a7d                	li	s4,-1
-    80005f02:	b7e1                	j	80005eca <filewrite+0xfa>
+    80004df8:	5a7d                	li	s4,-1
+    80004dfa:	b7f1                	j	80004dc6 <filewrite+0xfa>
+    80004dfc:	5a7d                	li	s4,-1
+    80004dfe:	b7e1                	j	80004dc6 <filewrite+0xfa>
 
-0000000080005f04 <pipealloc>:
+0000000080004e00 <pipealloc>:
   int writeopen;  // write fd is still open
 };
 
 int
 pipealloc(struct file **f0, struct file **f1)
 {
-    80005f04:	7179                	addi	sp,sp,-48
-    80005f06:	f406                	sd	ra,40(sp)
-    80005f08:	f022                	sd	s0,32(sp)
-    80005f0a:	ec26                	sd	s1,24(sp)
-    80005f0c:	e84a                	sd	s2,16(sp)
-    80005f0e:	e44e                	sd	s3,8(sp)
-    80005f10:	e052                	sd	s4,0(sp)
-    80005f12:	1800                	addi	s0,sp,48
-    80005f14:	84aa                	mv	s1,a0
-    80005f16:	8a2e                	mv	s4,a1
+    80004e00:	7179                	addi	sp,sp,-48
+    80004e02:	f406                	sd	ra,40(sp)
+    80004e04:	f022                	sd	s0,32(sp)
+    80004e06:	ec26                	sd	s1,24(sp)
+    80004e08:	e84a                	sd	s2,16(sp)
+    80004e0a:	e44e                	sd	s3,8(sp)
+    80004e0c:	e052                	sd	s4,0(sp)
+    80004e0e:	1800                	addi	s0,sp,48
+    80004e10:	84aa                	mv	s1,a0
+    80004e12:	8a2e                	mv	s4,a1
   struct pipe *pi;
 
   pi = 0;
   *f0 = *f1 = 0;
-    80005f18:	0005b023          	sd	zero,0(a1)
-    80005f1c:	00053023          	sd	zero,0(a0)
+    80004e14:	0005b023          	sd	zero,0(a1)
+    80004e18:	00053023          	sd	zero,0(a0)
   if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
-    80005f20:	00000097          	auipc	ra,0x0
-    80005f24:	bf8080e7          	jalr	-1032(ra) # 80005b18 <filealloc>
-    80005f28:	e088                	sd	a0,0(s1)
-    80005f2a:	c551                	beqz	a0,80005fb6 <pipealloc+0xb2>
-    80005f2c:	00000097          	auipc	ra,0x0
-    80005f30:	bec080e7          	jalr	-1044(ra) # 80005b18 <filealloc>
-    80005f34:	00aa3023          	sd	a0,0(s4)
-    80005f38:	c92d                	beqz	a0,80005faa <pipealloc+0xa6>
+    80004e1c:	00000097          	auipc	ra,0x0
+    80004e20:	bf8080e7          	jalr	-1032(ra) # 80004a14 <filealloc>
+    80004e24:	e088                	sd	a0,0(s1)
+    80004e26:	c551                	beqz	a0,80004eb2 <pipealloc+0xb2>
+    80004e28:	00000097          	auipc	ra,0x0
+    80004e2c:	bec080e7          	jalr	-1044(ra) # 80004a14 <filealloc>
+    80004e30:	00aa3023          	sd	a0,0(s4)
+    80004e34:	c92d                	beqz	a0,80004ea6 <pipealloc+0xa6>
     goto bad;
   if((pi = (struct pipe*)kalloc()) == 0)
-    80005f3a:	ffffb097          	auipc	ra,0xffffb
-    80005f3e:	bba080e7          	jalr	-1094(ra) # 80000af4 <kalloc>
-    80005f42:	892a                	mv	s2,a0
-    80005f44:	c125                	beqz	a0,80005fa4 <pipealloc+0xa0>
+    80004e36:	ffffc097          	auipc	ra,0xffffc
+    80004e3a:	cbe080e7          	jalr	-834(ra) # 80000af4 <kalloc>
+    80004e3e:	892a                	mv	s2,a0
+    80004e40:	c125                	beqz	a0,80004ea0 <pipealloc+0xa0>
     goto bad;
   pi->readopen = 1;
-    80005f46:	4985                	li	s3,1
-    80005f48:	23352023          	sw	s3,544(a0)
+    80004e42:	4985                	li	s3,1
+    80004e44:	23352023          	sw	s3,544(a0)
   pi->writeopen = 1;
-    80005f4c:	23352223          	sw	s3,548(a0)
+    80004e48:	23352223          	sw	s3,548(a0)
   pi->nwrite = 0;
-    80005f50:	20052e23          	sw	zero,540(a0)
+    80004e4c:	20052e23          	sw	zero,540(a0)
   pi->nread = 0;
-    80005f54:	20052c23          	sw	zero,536(a0)
+    80004e50:	20052c23          	sw	zero,536(a0)
   initlock(&pi->lock, "pipe");
-    80005f58:	00004597          	auipc	a1,0x4
-    80005f5c:	b7058593          	addi	a1,a1,-1168 # 80009ac8 <syscalls+0x2a0>
-    80005f60:	ffffb097          	auipc	ra,0xffffb
-    80005f64:	bf4080e7          	jalr	-1036(ra) # 80000b54 <initlock>
+    80004e54:	00004597          	auipc	a1,0x4
+    80004e58:	90458593          	addi	a1,a1,-1788 # 80008758 <syscalls+0x288>
+    80004e5c:	ffffc097          	auipc	ra,0xffffc
+    80004e60:	cf8080e7          	jalr	-776(ra) # 80000b54 <initlock>
   (*f0)->type = FD_PIPE;
-    80005f68:	609c                	ld	a5,0(s1)
-    80005f6a:	0137a023          	sw	s3,0(a5)
+    80004e64:	609c                	ld	a5,0(s1)
+    80004e66:	0137a023          	sw	s3,0(a5)
   (*f0)->readable = 1;
-    80005f6e:	609c                	ld	a5,0(s1)
-    80005f70:	01378423          	sb	s3,8(a5)
+    80004e6a:	609c                	ld	a5,0(s1)
+    80004e6c:	01378423          	sb	s3,8(a5)
   (*f0)->writable = 0;
-    80005f74:	609c                	ld	a5,0(s1)
-    80005f76:	000784a3          	sb	zero,9(a5)
+    80004e70:	609c                	ld	a5,0(s1)
+    80004e72:	000784a3          	sb	zero,9(a5)
   (*f0)->pipe = pi;
-    80005f7a:	609c                	ld	a5,0(s1)
-    80005f7c:	0127b823          	sd	s2,16(a5)
+    80004e76:	609c                	ld	a5,0(s1)
+    80004e78:	0127b823          	sd	s2,16(a5)
   (*f1)->type = FD_PIPE;
-    80005f80:	000a3783          	ld	a5,0(s4)
-    80005f84:	0137a023          	sw	s3,0(a5)
+    80004e7c:	000a3783          	ld	a5,0(s4)
+    80004e80:	0137a023          	sw	s3,0(a5)
   (*f1)->readable = 0;
-    80005f88:	000a3783          	ld	a5,0(s4)
-    80005f8c:	00078423          	sb	zero,8(a5)
+    80004e84:	000a3783          	ld	a5,0(s4)
+    80004e88:	00078423          	sb	zero,8(a5)
   (*f1)->writable = 1;
-    80005f90:	000a3783          	ld	a5,0(s4)
-    80005f94:	013784a3          	sb	s3,9(a5)
+    80004e8c:	000a3783          	ld	a5,0(s4)
+    80004e90:	013784a3          	sb	s3,9(a5)
   (*f1)->pipe = pi;
-    80005f98:	000a3783          	ld	a5,0(s4)
-    80005f9c:	0127b823          	sd	s2,16(a5)
+    80004e94:	000a3783          	ld	a5,0(s4)
+    80004e98:	0127b823          	sd	s2,16(a5)
   return 0;
-    80005fa0:	4501                	li	a0,0
-    80005fa2:	a025                	j	80005fca <pipealloc+0xc6>
+    80004e9c:	4501                	li	a0,0
+    80004e9e:	a025                	j	80004ec6 <pipealloc+0xc6>
 
  bad:
   if(pi)
     kfree((char*)pi);
   if(*f0)
-    80005fa4:	6088                	ld	a0,0(s1)
-    80005fa6:	e501                	bnez	a0,80005fae <pipealloc+0xaa>
-    80005fa8:	a039                	j	80005fb6 <pipealloc+0xb2>
-    80005faa:	6088                	ld	a0,0(s1)
-    80005fac:	c51d                	beqz	a0,80005fda <pipealloc+0xd6>
+    80004ea0:	6088                	ld	a0,0(s1)
+    80004ea2:	e501                	bnez	a0,80004eaa <pipealloc+0xaa>
+    80004ea4:	a039                	j	80004eb2 <pipealloc+0xb2>
+    80004ea6:	6088                	ld	a0,0(s1)
+    80004ea8:	c51d                	beqz	a0,80004ed6 <pipealloc+0xd6>
     fileclose(*f0);
-    80005fae:	00000097          	auipc	ra,0x0
-    80005fb2:	c26080e7          	jalr	-986(ra) # 80005bd4 <fileclose>
+    80004eaa:	00000097          	auipc	ra,0x0
+    80004eae:	c26080e7          	jalr	-986(ra) # 80004ad0 <fileclose>
   if(*f1)
-    80005fb6:	000a3783          	ld	a5,0(s4)
+    80004eb2:	000a3783          	ld	a5,0(s4)
     fileclose(*f1);
   return -1;
-    80005fba:	557d                	li	a0,-1
+    80004eb6:	557d                	li	a0,-1
   if(*f1)
-    80005fbc:	c799                	beqz	a5,80005fca <pipealloc+0xc6>
+    80004eb8:	c799                	beqz	a5,80004ec6 <pipealloc+0xc6>
     fileclose(*f1);
-    80005fbe:	853e                	mv	a0,a5
-    80005fc0:	00000097          	auipc	ra,0x0
-    80005fc4:	c14080e7          	jalr	-1004(ra) # 80005bd4 <fileclose>
+    80004eba:	853e                	mv	a0,a5
+    80004ebc:	00000097          	auipc	ra,0x0
+    80004ec0:	c14080e7          	jalr	-1004(ra) # 80004ad0 <fileclose>
   return -1;
-    80005fc8:	557d                	li	a0,-1
-}
-    80005fca:	70a2                	ld	ra,40(sp)
-    80005fcc:	7402                	ld	s0,32(sp)
-    80005fce:	64e2                	ld	s1,24(sp)
-    80005fd0:	6942                	ld	s2,16(sp)
-    80005fd2:	69a2                	ld	s3,8(sp)
-    80005fd4:	6a02                	ld	s4,0(sp)
-    80005fd6:	6145                	addi	sp,sp,48
-    80005fd8:	8082                	ret
+    80004ec4:	557d                	li	a0,-1
+}
+    80004ec6:	70a2                	ld	ra,40(sp)
+    80004ec8:	7402                	ld	s0,32(sp)
+    80004eca:	64e2                	ld	s1,24(sp)
+    80004ecc:	6942                	ld	s2,16(sp)
+    80004ece:	69a2                	ld	s3,8(sp)
+    80004ed0:	6a02                	ld	s4,0(sp)
+    80004ed2:	6145                	addi	sp,sp,48
+    80004ed4:	8082                	ret
   return -1;
-    80005fda:	557d                	li	a0,-1
-    80005fdc:	b7fd                	j	80005fca <pipealloc+0xc6>
+    80004ed6:	557d                	li	a0,-1
+    80004ed8:	b7fd                	j	80004ec6 <pipealloc+0xc6>
 
-0000000080005fde <pipeclose>:
+0000000080004eda <pipeclose>:
 
 void
 pipeclose(struct pipe *pi, int writable)
 {
-    80005fde:	1101                	addi	sp,sp,-32
-    80005fe0:	ec06                	sd	ra,24(sp)
-    80005fe2:	e822                	sd	s0,16(sp)
-    80005fe4:	e426                	sd	s1,8(sp)
-    80005fe6:	e04a                	sd	s2,0(sp)
-    80005fe8:	1000                	addi	s0,sp,32
-    80005fea:	84aa                	mv	s1,a0
-    80005fec:	892e                	mv	s2,a1
+    80004eda:	1101                	addi	sp,sp,-32
+    80004edc:	ec06                	sd	ra,24(sp)
+    80004ede:	e822                	sd	s0,16(sp)
+    80004ee0:	e426                	sd	s1,8(sp)
+    80004ee2:	e04a                	sd	s2,0(sp)
+    80004ee4:	1000                	addi	s0,sp,32
+    80004ee6:	84aa                	mv	s1,a0
+    80004ee8:	892e                	mv	s2,a1
   acquire(&pi->lock);
-    80005fee:	ffffb097          	auipc	ra,0xffffb
-    80005ff2:	bf6080e7          	jalr	-1034(ra) # 80000be4 <acquire>
+    80004eea:	ffffc097          	auipc	ra,0xffffc
+    80004eee:	cfa080e7          	jalr	-774(ra) # 80000be4 <acquire>
   if(writable){
-    80005ff6:	02090d63          	beqz	s2,80006030 <pipeclose+0x52>
+    80004ef2:	02090d63          	beqz	s2,80004f2c <pipeclose+0x52>
     pi->writeopen = 0;
-    80005ffa:	2204a223          	sw	zero,548(s1)
+    80004ef6:	2204a223          	sw	zero,548(s1)
     wakeup(&pi->nread);
-    80005ffe:	21848513          	addi	a0,s1,536
-    80006002:	ffffd097          	auipc	ra,0xffffd
-    80006006:	092080e7          	jalr	146(ra) # 80003094 <wakeup>
+    80004efa:	21848513          	addi	a0,s1,536
+    80004efe:	ffffd097          	auipc	ra,0xffffd
+    80004f02:	7e2080e7          	jalr	2018(ra) # 800026e0 <wakeup>
   } else {
     pi->readopen = 0;
     wakeup(&pi->nwrite);
   }
   if(pi->readopen == 0 && pi->writeopen == 0){
-    8000600a:	2204b783          	ld	a5,544(s1)
-    8000600e:	eb95                	bnez	a5,80006042 <pipeclose+0x64>
+    80004f06:	2204b783          	ld	a5,544(s1)
+    80004f0a:	eb95                	bnez	a5,80004f3e <pipeclose+0x64>
     release(&pi->lock);
-    80006010:	8526                	mv	a0,s1
-    80006012:	ffffb097          	auipc	ra,0xffffb
-    80006016:	c86080e7          	jalr	-890(ra) # 80000c98 <release>
+    80004f0c:	8526                	mv	a0,s1
+    80004f0e:	ffffc097          	auipc	ra,0xffffc
+    80004f12:	d8a080e7          	jalr	-630(ra) # 80000c98 <release>
     kfree((char*)pi);
-    8000601a:	8526                	mv	a0,s1
-    8000601c:	ffffb097          	auipc	ra,0xffffb
-    80006020:	9dc080e7          	jalr	-1572(ra) # 800009f8 <kfree>
+    80004f16:	8526                	mv	a0,s1
+    80004f18:	ffffc097          	auipc	ra,0xffffc
+    80004f1c:	ae0080e7          	jalr	-1312(ra) # 800009f8 <kfree>
   } else
     release(&pi->lock);
 }
-    80006024:	60e2                	ld	ra,24(sp)
-    80006026:	6442                	ld	s0,16(sp)
-    80006028:	64a2                	ld	s1,8(sp)
-    8000602a:	6902                	ld	s2,0(sp)
-    8000602c:	6105                	addi	sp,sp,32
-    8000602e:	8082                	ret
+    80004f20:	60e2                	ld	ra,24(sp)
+    80004f22:	6442                	ld	s0,16(sp)
+    80004f24:	64a2                	ld	s1,8(sp)
+    80004f26:	6902                	ld	s2,0(sp)
+    80004f28:	6105                	addi	sp,sp,32
+    80004f2a:	8082                	ret
     pi->readopen = 0;
-    80006030:	2204a023          	sw	zero,544(s1)
+    80004f2c:	2204a023          	sw	zero,544(s1)
     wakeup(&pi->nwrite);
-    80006034:	21c48513          	addi	a0,s1,540
-    80006038:	ffffd097          	auipc	ra,0xffffd
-    8000603c:	05c080e7          	jalr	92(ra) # 80003094 <wakeup>
-    80006040:	b7e9                	j	8000600a <pipeclose+0x2c>
+    80004f30:	21c48513          	addi	a0,s1,540
+    80004f34:	ffffd097          	auipc	ra,0xffffd
+    80004f38:	7ac080e7          	jalr	1964(ra) # 800026e0 <wakeup>
+    80004f3c:	b7e9                	j	80004f06 <pipeclose+0x2c>
     release(&pi->lock);
-    80006042:	8526                	mv	a0,s1
-    80006044:	ffffb097          	auipc	ra,0xffffb
-    80006048:	c54080e7          	jalr	-940(ra) # 80000c98 <release>
+    80004f3e:	8526                	mv	a0,s1
+    80004f40:	ffffc097          	auipc	ra,0xffffc
+    80004f44:	d58080e7          	jalr	-680(ra) # 80000c98 <release>
 }
-    8000604c:	bfe1                	j	80006024 <pipeclose+0x46>
+    80004f48:	bfe1                	j	80004f20 <pipeclose+0x46>
 
-000000008000604e <pipewrite>:
+0000000080004f4a <pipewrite>:
 
 int
 pipewrite(struct pipe *pi, uint64 addr, int n)
 {
-    8000604e:	7159                	addi	sp,sp,-112
-    80006050:	f486                	sd	ra,104(sp)
-    80006052:	f0a2                	sd	s0,96(sp)
-    80006054:	eca6                	sd	s1,88(sp)
-    80006056:	e8ca                	sd	s2,80(sp)
-    80006058:	e4ce                	sd	s3,72(sp)
-    8000605a:	e0d2                	sd	s4,64(sp)
-    8000605c:	fc56                	sd	s5,56(sp)
-    8000605e:	f85a                	sd	s6,48(sp)
-    80006060:	f45e                	sd	s7,40(sp)
-    80006062:	f062                	sd	s8,32(sp)
-    80006064:	ec66                	sd	s9,24(sp)
-    80006066:	1880                	addi	s0,sp,112
-    80006068:	84aa                	mv	s1,a0
-    8000606a:	8aae                	mv	s5,a1
-    8000606c:	8a32                	mv	s4,a2
+    80004f4a:	7159                	addi	sp,sp,-112
+    80004f4c:	f486                	sd	ra,104(sp)
+    80004f4e:	f0a2                	sd	s0,96(sp)
+    80004f50:	eca6                	sd	s1,88(sp)
+    80004f52:	e8ca                	sd	s2,80(sp)
+    80004f54:	e4ce                	sd	s3,72(sp)
+    80004f56:	e0d2                	sd	s4,64(sp)
+    80004f58:	fc56                	sd	s5,56(sp)
+    80004f5a:	f85a                	sd	s6,48(sp)
+    80004f5c:	f45e                	sd	s7,40(sp)
+    80004f5e:	f062                	sd	s8,32(sp)
+    80004f60:	ec66                	sd	s9,24(sp)
+    80004f62:	1880                	addi	s0,sp,112
+    80004f64:	84aa                	mv	s1,a0
+    80004f66:	8aae                	mv	s5,a1
+    80004f68:	8a32                	mv	s4,a2
   int i = 0;
   struct proc *pr = myproc();
-    8000606e:	ffffc097          	auipc	ra,0xffffc
-    80006072:	b26080e7          	jalr	-1242(ra) # 80001b94 <myproc>
-    80006076:	89aa                	mv	s3,a0
+    80004f6a:	ffffd097          	auipc	ra,0xffffd
+    80004f6e:	d66080e7          	jalr	-666(ra) # 80001cd0 <myproc>
+    80004f72:	89aa                	mv	s3,a0
 
   acquire(&pi->lock);
-    80006078:	8526                	mv	a0,s1
-    8000607a:	ffffb097          	auipc	ra,0xffffb
-    8000607e:	b6a080e7          	jalr	-1174(ra) # 80000be4 <acquire>
+    80004f74:	8526                	mv	a0,s1
+    80004f76:	ffffc097          	auipc	ra,0xffffc
+    80004f7a:	c6e080e7          	jalr	-914(ra) # 80000be4 <acquire>
   while(i < n){
-    80006082:	0d405163          	blez	s4,80006144 <pipewrite+0xf6>
-    80006086:	8ba6                	mv	s7,s1
+    80004f7e:	0d405163          	blez	s4,80005040 <pipewrite+0xf6>
+    80004f82:	8ba6                	mv	s7,s1
   int i = 0;
-    80006088:	4901                	li	s2,0
+    80004f84:	4901                	li	s2,0
     if(pi->nwrite == pi->nread + PIPESIZE){ //DOC: pipewrite-full
       wakeup(&pi->nread);
       sleep(&pi->nwrite, &pi->lock);
     } else {
       char ch;
       if(copyin(pr->pagetable, &ch, addr + i, 1) == -1)
-    8000608a:	5b7d                	li	s6,-1
+    80004f86:	5b7d                	li	s6,-1
       wakeup(&pi->nread);
-    8000608c:	21848c93          	addi	s9,s1,536
+    80004f88:	21848c93          	addi	s9,s1,536
       sleep(&pi->nwrite, &pi->lock);
-    80006090:	21c48c13          	addi	s8,s1,540
-    80006094:	a08d                	j	800060f6 <pipewrite+0xa8>
+    80004f8c:	21c48c13          	addi	s8,s1,540
+    80004f90:	a08d                	j	80004ff2 <pipewrite+0xa8>
       release(&pi->lock);
-    80006096:	8526                	mv	a0,s1
-    80006098:	ffffb097          	auipc	ra,0xffffb
-    8000609c:	c00080e7          	jalr	-1024(ra) # 80000c98 <release>
+    80004f92:	8526                	mv	a0,s1
+    80004f94:	ffffc097          	auipc	ra,0xffffc
+    80004f98:	d04080e7          	jalr	-764(ra) # 80000c98 <release>
       return -1;
-    800060a0:	597d                	li	s2,-1
+    80004f9c:	597d                	li	s2,-1
   }
   wakeup(&pi->nread);
   release(&pi->lock);
 
   return i;
 }
-    800060a2:	854a                	mv	a0,s2
-    800060a4:	70a6                	ld	ra,104(sp)
-    800060a6:	7406                	ld	s0,96(sp)
-    800060a8:	64e6                	ld	s1,88(sp)
-    800060aa:	6946                	ld	s2,80(sp)
-    800060ac:	69a6                	ld	s3,72(sp)
-    800060ae:	6a06                	ld	s4,64(sp)
-    800060b0:	7ae2                	ld	s5,56(sp)
-    800060b2:	7b42                	ld	s6,48(sp)
-    800060b4:	7ba2                	ld	s7,40(sp)
-    800060b6:	7c02                	ld	s8,32(sp)
-    800060b8:	6ce2                	ld	s9,24(sp)
-    800060ba:	6165                	addi	sp,sp,112
-    800060bc:	8082                	ret
+    80004f9e:	854a                	mv	a0,s2
+    80004fa0:	70a6                	ld	ra,104(sp)
+    80004fa2:	7406                	ld	s0,96(sp)
+    80004fa4:	64e6                	ld	s1,88(sp)
+    80004fa6:	6946                	ld	s2,80(sp)
+    80004fa8:	69a6                	ld	s3,72(sp)
+    80004faa:	6a06                	ld	s4,64(sp)
+    80004fac:	7ae2                	ld	s5,56(sp)
+    80004fae:	7b42                	ld	s6,48(sp)
+    80004fb0:	7ba2                	ld	s7,40(sp)
+    80004fb2:	7c02                	ld	s8,32(sp)
+    80004fb4:	6ce2                	ld	s9,24(sp)
+    80004fb6:	6165                	addi	sp,sp,112
+    80004fb8:	8082                	ret
       wakeup(&pi->nread);
-    800060be:	8566                	mv	a0,s9
-    800060c0:	ffffd097          	auipc	ra,0xffffd
-    800060c4:	fd4080e7          	jalr	-44(ra) # 80003094 <wakeup>
+    80004fba:	8566                	mv	a0,s9
+    80004fbc:	ffffd097          	auipc	ra,0xffffd
+    80004fc0:	724080e7          	jalr	1828(ra) # 800026e0 <wakeup>
       sleep(&pi->nwrite, &pi->lock);
-    800060c8:	85de                	mv	a1,s7
-    800060ca:	8562                	mv	a0,s8
-    800060cc:	ffffd097          	auipc	ra,0xffffd
-    800060d0:	bb2080e7          	jalr	-1102(ra) # 80002c7e <sleep>
-    800060d4:	a839                	j	800060f2 <pipewrite+0xa4>
+    80004fc4:	85de                	mv	a1,s7
+    80004fc6:	8562                	mv	a0,s8
+    80004fc8:	ffffd097          	auipc	ra,0xffffd
+    80004fcc:	57a080e7          	jalr	1402(ra) # 80002542 <sleep>
+    80004fd0:	a839                	j	80004fee <pipewrite+0xa4>
       pi->data[pi->nwrite++ % PIPESIZE] = ch;
-    800060d6:	21c4a783          	lw	a5,540(s1)
-    800060da:	0017871b          	addiw	a4,a5,1
-    800060de:	20e4ae23          	sw	a4,540(s1)
-    800060e2:	1ff7f793          	andi	a5,a5,511
-    800060e6:	97a6                	add	a5,a5,s1
-    800060e8:	f9f44703          	lbu	a4,-97(s0)
-    800060ec:	00e78c23          	sb	a4,24(a5)
+    80004fd2:	21c4a783          	lw	a5,540(s1)
+    80004fd6:	0017871b          	addiw	a4,a5,1
+    80004fda:	20e4ae23          	sw	a4,540(s1)
+    80004fde:	1ff7f793          	andi	a5,a5,511
+    80004fe2:	97a6                	add	a5,a5,s1
+    80004fe4:	f9f44703          	lbu	a4,-97(s0)
+    80004fe8:	00e78c23          	sb	a4,24(a5)
       i++;
-    800060f0:	2905                	addiw	s2,s2,1
+    80004fec:	2905                	addiw	s2,s2,1
   while(i < n){
-    800060f2:	03495d63          	bge	s2,s4,8000612c <pipewrite+0xde>
+    80004fee:	03495d63          	bge	s2,s4,80005028 <pipewrite+0xde>
     if(pi->readopen == 0 || pr->killed){
-    800060f6:	2204a783          	lw	a5,544(s1)
-    800060fa:	dfd1                	beqz	a5,80006096 <pipewrite+0x48>
-    800060fc:	0289a783          	lw	a5,40(s3)
-    80006100:	fbd9                	bnez	a5,80006096 <pipewrite+0x48>
+    80004ff2:	2204a783          	lw	a5,544(s1)
+    80004ff6:	dfd1                	beqz	a5,80004f92 <pipewrite+0x48>
+    80004ff8:	0289a783          	lw	a5,40(s3)
+    80004ffc:	fbd9                	bnez	a5,80004f92 <pipewrite+0x48>
     if(pi->nwrite == pi->nread + PIPESIZE){ //DOC: pipewrite-full
-    80006102:	2184a783          	lw	a5,536(s1)
-    80006106:	21c4a703          	lw	a4,540(s1)
-    8000610a:	2007879b          	addiw	a5,a5,512
-    8000610e:	faf708e3          	beq	a4,a5,800060be <pipewrite+0x70>
+    80004ffe:	2184a783          	lw	a5,536(s1)
+    80005002:	21c4a703          	lw	a4,540(s1)
+    80005006:	2007879b          	addiw	a5,a5,512
+    8000500a:	faf708e3          	beq	a4,a5,80004fba <pipewrite+0x70>
       if(copyin(pr->pagetable, &ch, addr + i, 1) == -1)
-    80006112:	4685                	li	a3,1
-    80006114:	01590633          	add	a2,s2,s5
-    80006118:	f9f40593          	addi	a1,s0,-97
-    8000611c:	0809b503          	ld	a0,128(s3)
-    80006120:	ffffb097          	auipc	ra,0xffffb
-    80006124:	5e6080e7          	jalr	1510(ra) # 80001706 <copyin>
-    80006128:	fb6517e3          	bne	a0,s6,800060d6 <pipewrite+0x88>
+    8000500e:	4685                	li	a3,1
+    80005010:	01590633          	add	a2,s2,s5
+    80005014:	f9f40593          	addi	a1,s0,-97
+    80005018:	0509b503          	ld	a0,80(s3)
+    8000501c:	ffffc097          	auipc	ra,0xffffc
+    80005020:	6e2080e7          	jalr	1762(ra) # 800016fe <copyin>
+    80005024:	fb6517e3          	bne	a0,s6,80004fd2 <pipewrite+0x88>
   wakeup(&pi->nread);
-    8000612c:	21848513          	addi	a0,s1,536
-    80006130:	ffffd097          	auipc	ra,0xffffd
-    80006134:	f64080e7          	jalr	-156(ra) # 80003094 <wakeup>
+    80005028:	21848513          	addi	a0,s1,536
+    8000502c:	ffffd097          	auipc	ra,0xffffd
+    80005030:	6b4080e7          	jalr	1716(ra) # 800026e0 <wakeup>
   release(&pi->lock);
-    80006138:	8526                	mv	a0,s1
-    8000613a:	ffffb097          	auipc	ra,0xffffb
-    8000613e:	b5e080e7          	jalr	-1186(ra) # 80000c98 <release>
+    80005034:	8526                	mv	a0,s1
+    80005036:	ffffc097          	auipc	ra,0xffffc
+    8000503a:	c62080e7          	jalr	-926(ra) # 80000c98 <release>
   return i;
-    80006142:	b785                	j	800060a2 <pipewrite+0x54>
+    8000503e:	b785                	j	80004f9e <pipewrite+0x54>
   int i = 0;
-    80006144:	4901                	li	s2,0
-    80006146:	b7dd                	j	8000612c <pipewrite+0xde>
+    80005040:	4901                	li	s2,0
+    80005042:	b7dd                	j	80005028 <pipewrite+0xde>
 
-0000000080006148 <piperead>:
+0000000080005044 <piperead>:
 
 int
 piperead(struct pipe *pi, uint64 addr, int n)
 {
-    80006148:	715d                	addi	sp,sp,-80
-    8000614a:	e486                	sd	ra,72(sp)
-    8000614c:	e0a2                	sd	s0,64(sp)
-    8000614e:	fc26                	sd	s1,56(sp)
-    80006150:	f84a                	sd	s2,48(sp)
-    80006152:	f44e                	sd	s3,40(sp)
-    80006154:	f052                	sd	s4,32(sp)
-    80006156:	ec56                	sd	s5,24(sp)
-    80006158:	e85a                	sd	s6,16(sp)
-    8000615a:	0880                	addi	s0,sp,80
-    8000615c:	84aa                	mv	s1,a0
-    8000615e:	892e                	mv	s2,a1
-    80006160:	8ab2                	mv	s5,a2
+    80005044:	715d                	addi	sp,sp,-80
+    80005046:	e486                	sd	ra,72(sp)
+    80005048:	e0a2                	sd	s0,64(sp)
+    8000504a:	fc26                	sd	s1,56(sp)
+    8000504c:	f84a                	sd	s2,48(sp)
+    8000504e:	f44e                	sd	s3,40(sp)
+    80005050:	f052                	sd	s4,32(sp)
+    80005052:	ec56                	sd	s5,24(sp)
+    80005054:	e85a                	sd	s6,16(sp)
+    80005056:	0880                	addi	s0,sp,80
+    80005058:	84aa                	mv	s1,a0
+    8000505a:	892e                	mv	s2,a1
+    8000505c:	8ab2                	mv	s5,a2
   int i;
   struct proc *pr = myproc();
-    80006162:	ffffc097          	auipc	ra,0xffffc
-    80006166:	a32080e7          	jalr	-1486(ra) # 80001b94 <myproc>
-    8000616a:	8a2a                	mv	s4,a0
+    8000505e:	ffffd097          	auipc	ra,0xffffd
+    80005062:	c72080e7          	jalr	-910(ra) # 80001cd0 <myproc>
+    80005066:	8a2a                	mv	s4,a0
   char ch;
 
   acquire(&pi->lock);
-    8000616c:	8b26                	mv	s6,s1
-    8000616e:	8526                	mv	a0,s1
-    80006170:	ffffb097          	auipc	ra,0xffffb
-    80006174:	a74080e7          	jalr	-1420(ra) # 80000be4 <acquire>
+    80005068:	8b26                	mv	s6,s1
+    8000506a:	8526                	mv	a0,s1
+    8000506c:	ffffc097          	auipc	ra,0xffffc
+    80005070:	b78080e7          	jalr	-1160(ra) # 80000be4 <acquire>
   while(pi->nread == pi->nwrite && pi->writeopen){  //DOC: pipe-empty
-    80006178:	2184a703          	lw	a4,536(s1)
-    8000617c:	21c4a783          	lw	a5,540(s1)
+    80005074:	2184a703          	lw	a4,536(s1)
+    80005078:	21c4a783          	lw	a5,540(s1)
     if(pr->killed){
       release(&pi->lock);
       return -1;
     }
     sleep(&pi->nread, &pi->lock); //DOC: piperead-sleep
-    80006180:	21848993          	addi	s3,s1,536
+    8000507c:	21848993          	addi	s3,s1,536
   while(pi->nread == pi->nwrite && pi->writeopen){  //DOC: pipe-empty
-    80006184:	02f71463          	bne	a4,a5,800061ac <piperead+0x64>
-    80006188:	2244a783          	lw	a5,548(s1)
-    8000618c:	c385                	beqz	a5,800061ac <piperead+0x64>
+    80005080:	02f71463          	bne	a4,a5,800050a8 <piperead+0x64>
+    80005084:	2244a783          	lw	a5,548(s1)
+    80005088:	c385                	beqz	a5,800050a8 <piperead+0x64>
     if(pr->killed){
-    8000618e:	028a2783          	lw	a5,40(s4)
-    80006192:	ebc1                	bnez	a5,80006222 <piperead+0xda>
+    8000508a:	028a2783          	lw	a5,40(s4)
+    8000508e:	ebc1                	bnez	a5,8000511e <piperead+0xda>
     sleep(&pi->nread, &pi->lock); //DOC: piperead-sleep
-    80006194:	85da                	mv	a1,s6
-    80006196:	854e                	mv	a0,s3
-    80006198:	ffffd097          	auipc	ra,0xffffd
-    8000619c:	ae6080e7          	jalr	-1306(ra) # 80002c7e <sleep>
+    80005090:	85da                	mv	a1,s6
+    80005092:	854e                	mv	a0,s3
+    80005094:	ffffd097          	auipc	ra,0xffffd
+    80005098:	4ae080e7          	jalr	1198(ra) # 80002542 <sleep>
   while(pi->nread == pi->nwrite && pi->writeopen){  //DOC: pipe-empty
-    800061a0:	2184a703          	lw	a4,536(s1)
-    800061a4:	21c4a783          	lw	a5,540(s1)
-    800061a8:	fef700e3          	beq	a4,a5,80006188 <piperead+0x40>
+    8000509c:	2184a703          	lw	a4,536(s1)
+    800050a0:	21c4a783          	lw	a5,540(s1)
+    800050a4:	fef700e3          	beq	a4,a5,80005084 <piperead+0x40>
   }
   for(i = 0; i < n; i++){  //DOC: piperead-copy
-    800061ac:	09505263          	blez	s5,80006230 <piperead+0xe8>
-    800061b0:	4981                	li	s3,0
+    800050a8:	09505263          	blez	s5,8000512c <piperead+0xe8>
+    800050ac:	4981                	li	s3,0
     if(pi->nread == pi->nwrite)
       break;
     ch = pi->data[pi->nread++ % PIPESIZE];
     if(copyout(pr->pagetable, addr + i, &ch, 1) == -1)
-    800061b2:	5b7d                	li	s6,-1
+    800050ae:	5b7d                	li	s6,-1
     if(pi->nread == pi->nwrite)
-    800061b4:	2184a783          	lw	a5,536(s1)
-    800061b8:	21c4a703          	lw	a4,540(s1)
-    800061bc:	02f70d63          	beq	a4,a5,800061f6 <piperead+0xae>
+    800050b0:	2184a783          	lw	a5,536(s1)
+    800050b4:	21c4a703          	lw	a4,540(s1)
+    800050b8:	02f70d63          	beq	a4,a5,800050f2 <piperead+0xae>
     ch = pi->data[pi->nread++ % PIPESIZE];
-    800061c0:	0017871b          	addiw	a4,a5,1
-    800061c4:	20e4ac23          	sw	a4,536(s1)
-    800061c8:	1ff7f793          	andi	a5,a5,511
-    800061cc:	97a6                	add	a5,a5,s1
-    800061ce:	0187c783          	lbu	a5,24(a5)
-    800061d2:	faf40fa3          	sb	a5,-65(s0)
+    800050bc:	0017871b          	addiw	a4,a5,1
+    800050c0:	20e4ac23          	sw	a4,536(s1)
+    800050c4:	1ff7f793          	andi	a5,a5,511
+    800050c8:	97a6                	add	a5,a5,s1
+    800050ca:	0187c783          	lbu	a5,24(a5)
+    800050ce:	faf40fa3          	sb	a5,-65(s0)
     if(copyout(pr->pagetable, addr + i, &ch, 1) == -1)
-    800061d6:	4685                	li	a3,1
-    800061d8:	fbf40613          	addi	a2,s0,-65
-    800061dc:	85ca                	mv	a1,s2
-    800061de:	080a3503          	ld	a0,128(s4)
-    800061e2:	ffffb097          	auipc	ra,0xffffb
-    800061e6:	498080e7          	jalr	1176(ra) # 8000167a <copyout>
-    800061ea:	01650663          	beq	a0,s6,800061f6 <piperead+0xae>
+    800050d2:	4685                	li	a3,1
+    800050d4:	fbf40613          	addi	a2,s0,-65
+    800050d8:	85ca                	mv	a1,s2
+    800050da:	050a3503          	ld	a0,80(s4)
+    800050de:	ffffc097          	auipc	ra,0xffffc
+    800050e2:	594080e7          	jalr	1428(ra) # 80001672 <copyout>
+    800050e6:	01650663          	beq	a0,s6,800050f2 <piperead+0xae>
   for(i = 0; i < n; i++){  //DOC: piperead-copy
-    800061ee:	2985                	addiw	s3,s3,1
-    800061f0:	0905                	addi	s2,s2,1
-    800061f2:	fd3a91e3          	bne	s5,s3,800061b4 <piperead+0x6c>
+    800050ea:	2985                	addiw	s3,s3,1
+    800050ec:	0905                	addi	s2,s2,1
+    800050ee:	fd3a91e3          	bne	s5,s3,800050b0 <piperead+0x6c>
       break;
   }
   wakeup(&pi->nwrite);  //DOC: piperead-wakeup
-    800061f6:	21c48513          	addi	a0,s1,540
-    800061fa:	ffffd097          	auipc	ra,0xffffd
-    800061fe:	e9a080e7          	jalr	-358(ra) # 80003094 <wakeup>
+    800050f2:	21c48513          	addi	a0,s1,540
+    800050f6:	ffffd097          	auipc	ra,0xffffd
+    800050fa:	5ea080e7          	jalr	1514(ra) # 800026e0 <wakeup>
   release(&pi->lock);
-    80006202:	8526                	mv	a0,s1
-    80006204:	ffffb097          	auipc	ra,0xffffb
-    80006208:	a94080e7          	jalr	-1388(ra) # 80000c98 <release>
+    800050fe:	8526                	mv	a0,s1
+    80005100:	ffffc097          	auipc	ra,0xffffc
+    80005104:	b98080e7          	jalr	-1128(ra) # 80000c98 <release>
   return i;
 }
-    8000620c:	854e                	mv	a0,s3
-    8000620e:	60a6                	ld	ra,72(sp)
-    80006210:	6406                	ld	s0,64(sp)
-    80006212:	74e2                	ld	s1,56(sp)
-    80006214:	7942                	ld	s2,48(sp)
-    80006216:	79a2                	ld	s3,40(sp)
-    80006218:	7a02                	ld	s4,32(sp)
-    8000621a:	6ae2                	ld	s5,24(sp)
-    8000621c:	6b42                	ld	s6,16(sp)
-    8000621e:	6161                	addi	sp,sp,80
-    80006220:	8082                	ret
+    80005108:	854e                	mv	a0,s3
+    8000510a:	60a6                	ld	ra,72(sp)
+    8000510c:	6406                	ld	s0,64(sp)
+    8000510e:	74e2                	ld	s1,56(sp)
+    80005110:	7942                	ld	s2,48(sp)
+    80005112:	79a2                	ld	s3,40(sp)
+    80005114:	7a02                	ld	s4,32(sp)
+    80005116:	6ae2                	ld	s5,24(sp)
+    80005118:	6b42                	ld	s6,16(sp)
+    8000511a:	6161                	addi	sp,sp,80
+    8000511c:	8082                	ret
       release(&pi->lock);
-    80006222:	8526                	mv	a0,s1
-    80006224:	ffffb097          	auipc	ra,0xffffb
-    80006228:	a74080e7          	jalr	-1420(ra) # 80000c98 <release>
+    8000511e:	8526                	mv	a0,s1
+    80005120:	ffffc097          	auipc	ra,0xffffc
+    80005124:	b78080e7          	jalr	-1160(ra) # 80000c98 <release>
       return -1;
-    8000622c:	59fd                	li	s3,-1
-    8000622e:	bff9                	j	8000620c <piperead+0xc4>
+    80005128:	59fd                	li	s3,-1
+    8000512a:	bff9                	j	80005108 <piperead+0xc4>
   for(i = 0; i < n; i++){  //DOC: piperead-copy
-    80006230:	4981                	li	s3,0
-    80006232:	b7d1                	j	800061f6 <piperead+0xae>
+    8000512c:	4981                	li	s3,0
+    8000512e:	b7d1                	j	800050f2 <piperead+0xae>
 
-0000000080006234 <exec>:
+0000000080005130 <exec>:
 
 static int loadseg(pde_t *pgdir, uint64 addr, struct inode *ip, uint offset, uint sz);
 
 int
 exec(char *path, char **argv)
 {
-    80006234:	df010113          	addi	sp,sp,-528
-    80006238:	20113423          	sd	ra,520(sp)
-    8000623c:	20813023          	sd	s0,512(sp)
-    80006240:	ffa6                	sd	s1,504(sp)
-    80006242:	fbca                	sd	s2,496(sp)
-    80006244:	f7ce                	sd	s3,488(sp)
-    80006246:	f3d2                	sd	s4,480(sp)
-    80006248:	efd6                	sd	s5,472(sp)
-    8000624a:	ebda                	sd	s6,464(sp)
-    8000624c:	e7de                	sd	s7,456(sp)
-    8000624e:	e3e2                	sd	s8,448(sp)
-    80006250:	ff66                	sd	s9,440(sp)
-    80006252:	fb6a                	sd	s10,432(sp)
-    80006254:	f76e                	sd	s11,424(sp)
-    80006256:	0c00                	addi	s0,sp,528
-    80006258:	84aa                	mv	s1,a0
-    8000625a:	dea43c23          	sd	a0,-520(s0)
-    8000625e:	e0b43023          	sd	a1,-512(s0)
+    80005130:	df010113          	addi	sp,sp,-528
+    80005134:	20113423          	sd	ra,520(sp)
+    80005138:	20813023          	sd	s0,512(sp)
+    8000513c:	ffa6                	sd	s1,504(sp)
+    8000513e:	fbca                	sd	s2,496(sp)
+    80005140:	f7ce                	sd	s3,488(sp)
+    80005142:	f3d2                	sd	s4,480(sp)
+    80005144:	efd6                	sd	s5,472(sp)
+    80005146:	ebda                	sd	s6,464(sp)
+    80005148:	e7de                	sd	s7,456(sp)
+    8000514a:	e3e2                	sd	s8,448(sp)
+    8000514c:	ff66                	sd	s9,440(sp)
+    8000514e:	fb6a                	sd	s10,432(sp)
+    80005150:	f76e                	sd	s11,424(sp)
+    80005152:	0c00                	addi	s0,sp,528
+    80005154:	84aa                	mv	s1,a0
+    80005156:	dea43c23          	sd	a0,-520(s0)
+    8000515a:	e0b43023          	sd	a1,-512(s0)
   uint64 argc, sz = 0, sp, ustack[MAXARG], stackbase;
   struct elfhdr elf;
   struct inode *ip;
   struct proghdr ph;
   pagetable_t pagetable = 0, oldpagetable;
   struct proc *p = myproc();
-    80006262:	ffffc097          	auipc	ra,0xffffc
-    80006266:	932080e7          	jalr	-1742(ra) # 80001b94 <myproc>
-    8000626a:	892a                	mv	s2,a0
+    8000515e:	ffffd097          	auipc	ra,0xffffd
+    80005162:	b72080e7          	jalr	-1166(ra) # 80001cd0 <myproc>
+    80005166:	892a                	mv	s2,a0
 
   begin_op();
-    8000626c:	fffff097          	auipc	ra,0xfffff
-    80006270:	49c080e7          	jalr	1180(ra) # 80005708 <begin_op>
+    80005168:	fffff097          	auipc	ra,0xfffff
+    8000516c:	49c080e7          	jalr	1180(ra) # 80004604 <begin_op>
 
   if((ip = namei(path)) == 0){
-    80006274:	8526                	mv	a0,s1
-    80006276:	fffff097          	auipc	ra,0xfffff
-    8000627a:	276080e7          	jalr	630(ra) # 800054ec <namei>
-    8000627e:	c92d                	beqz	a0,800062f0 <exec+0xbc>
-    80006280:	84aa                	mv	s1,a0
+    80005170:	8526                	mv	a0,s1
+    80005172:	fffff097          	auipc	ra,0xfffff
+    80005176:	276080e7          	jalr	630(ra) # 800043e8 <namei>
+    8000517a:	c92d                	beqz	a0,800051ec <exec+0xbc>
+    8000517c:	84aa                	mv	s1,a0
     end_op();
     return -1;
   }
   ilock(ip);
-    80006282:	fffff097          	auipc	ra,0xfffff
-    80006286:	ab4080e7          	jalr	-1356(ra) # 80004d36 <ilock>
+    8000517e:	fffff097          	auipc	ra,0xfffff
+    80005182:	ab4080e7          	jalr	-1356(ra) # 80003c32 <ilock>
 
   // Check ELF header
   if(readi(ip, 0, (uint64)&elf, 0, sizeof(elf)) != sizeof(elf))
-    8000628a:	04000713          	li	a4,64
-    8000628e:	4681                	li	a3,0
-    80006290:	e5040613          	addi	a2,s0,-432
-    80006294:	4581                	li	a1,0
-    80006296:	8526                	mv	a0,s1
-    80006298:	fffff097          	auipc	ra,0xfffff
-    8000629c:	d52080e7          	jalr	-686(ra) # 80004fea <readi>
-    800062a0:	04000793          	li	a5,64
-    800062a4:	00f51a63          	bne	a0,a5,800062b8 <exec+0x84>
+    80005186:	04000713          	li	a4,64
+    8000518a:	4681                	li	a3,0
+    8000518c:	e5040613          	addi	a2,s0,-432
+    80005190:	4581                	li	a1,0
+    80005192:	8526                	mv	a0,s1
+    80005194:	fffff097          	auipc	ra,0xfffff
+    80005198:	d52080e7          	jalr	-686(ra) # 80003ee6 <readi>
+    8000519c:	04000793          	li	a5,64
+    800051a0:	00f51a63          	bne	a0,a5,800051b4 <exec+0x84>
     goto bad;
   if(elf.magic != ELF_MAGIC)
-    800062a8:	e5042703          	lw	a4,-432(s0)
-    800062ac:	464c47b7          	lui	a5,0x464c4
-    800062b0:	57f78793          	addi	a5,a5,1407 # 464c457f <_entry-0x39b3ba81>
-    800062b4:	04f70463          	beq	a4,a5,800062fc <exec+0xc8>
+    800051a4:	e5042703          	lw	a4,-432(s0)
+    800051a8:	464c47b7          	lui	a5,0x464c4
+    800051ac:	57f78793          	addi	a5,a5,1407 # 464c457f <_entry-0x39b3ba81>
+    800051b0:	04f70463          	beq	a4,a5,800051f8 <exec+0xc8>
 
  bad:
   if(pagetable)
     proc_freepagetable(pagetable, sz);
   if(ip){
     iunlockput(ip);
-    800062b8:	8526                	mv	a0,s1
-    800062ba:	fffff097          	auipc	ra,0xfffff
-    800062be:	cde080e7          	jalr	-802(ra) # 80004f98 <iunlockput>
+    800051b4:	8526                	mv	a0,s1
+    800051b6:	fffff097          	auipc	ra,0xfffff
+    800051ba:	cde080e7          	jalr	-802(ra) # 80003e94 <iunlockput>
     end_op();
-    800062c2:	fffff097          	auipc	ra,0xfffff
-    800062c6:	4c6080e7          	jalr	1222(ra) # 80005788 <end_op>
+    800051be:	fffff097          	auipc	ra,0xfffff
+    800051c2:	4c6080e7          	jalr	1222(ra) # 80004684 <end_op>
   }
   return -1;
-    800062ca:	557d                	li	a0,-1
-}
-    800062cc:	20813083          	ld	ra,520(sp)
-    800062d0:	20013403          	ld	s0,512(sp)
-    800062d4:	74fe                	ld	s1,504(sp)
-    800062d6:	795e                	ld	s2,496(sp)
-    800062d8:	79be                	ld	s3,488(sp)
-    800062da:	7a1e                	ld	s4,480(sp)
-    800062dc:	6afe                	ld	s5,472(sp)
-    800062de:	6b5e                	ld	s6,464(sp)
-    800062e0:	6bbe                	ld	s7,456(sp)
-    800062e2:	6c1e                	ld	s8,448(sp)
-    800062e4:	7cfa                	ld	s9,440(sp)
-    800062e6:	7d5a                	ld	s10,432(sp)
-    800062e8:	7dba                	ld	s11,424(sp)
-    800062ea:	21010113          	addi	sp,sp,528
-    800062ee:	8082                	ret
+    800051c6:	557d                	li	a0,-1
+}
+    800051c8:	20813083          	ld	ra,520(sp)
+    800051cc:	20013403          	ld	s0,512(sp)
+    800051d0:	74fe                	ld	s1,504(sp)
+    800051d2:	795e                	ld	s2,496(sp)
+    800051d4:	79be                	ld	s3,488(sp)
+    800051d6:	7a1e                	ld	s4,480(sp)
+    800051d8:	6afe                	ld	s5,472(sp)
+    800051da:	6b5e                	ld	s6,464(sp)
+    800051dc:	6bbe                	ld	s7,456(sp)
+    800051de:	6c1e                	ld	s8,448(sp)
+    800051e0:	7cfa                	ld	s9,440(sp)
+    800051e2:	7d5a                	ld	s10,432(sp)
+    800051e4:	7dba                	ld	s11,424(sp)
+    800051e6:	21010113          	addi	sp,sp,528
+    800051ea:	8082                	ret
     end_op();
-    800062f0:	fffff097          	auipc	ra,0xfffff
-    800062f4:	498080e7          	jalr	1176(ra) # 80005788 <end_op>
+    800051ec:	fffff097          	auipc	ra,0xfffff
+    800051f0:	498080e7          	jalr	1176(ra) # 80004684 <end_op>
     return -1;
-    800062f8:	557d                	li	a0,-1
-    800062fa:	bfc9                	j	800062cc <exec+0x98>
+    800051f4:	557d                	li	a0,-1
+    800051f6:	bfc9                	j	800051c8 <exec+0x98>
   if((pagetable = proc_pagetable(p)) == 0)
-    800062fc:	854a                	mv	a0,s2
-    800062fe:	ffffc097          	auipc	ra,0xffffc
-    80006302:	95e080e7          	jalr	-1698(ra) # 80001c5c <proc_pagetable>
-    80006306:	8baa                	mv	s7,a0
-    80006308:	d945                	beqz	a0,800062b8 <exec+0x84>
+    800051f8:	854a                	mv	a0,s2
+    800051fa:	ffffd097          	auipc	ra,0xffffd
+    800051fe:	b94080e7          	jalr	-1132(ra) # 80001d8e <proc_pagetable>
+    80005202:	8baa                	mv	s7,a0
+    80005204:	d945                	beqz	a0,800051b4 <exec+0x84>
   for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
-    8000630a:	e7042983          	lw	s3,-400(s0)
-    8000630e:	e8845783          	lhu	a5,-376(s0)
-    80006312:	c7ad                	beqz	a5,8000637c <exec+0x148>
+    80005206:	e7042983          	lw	s3,-400(s0)
+    8000520a:	e8845783          	lhu	a5,-376(s0)
+    8000520e:	c7ad                	beqz	a5,80005278 <exec+0x148>
   uint64 argc, sz = 0, sp, ustack[MAXARG], stackbase;
-    80006314:	4901                	li	s2,0
+    80005210:	4901                	li	s2,0
   for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
-    80006316:	4b01                	li	s6,0
+    80005212:	4b01                	li	s6,0
     if((ph.vaddr % PGSIZE) != 0)
-    80006318:	6c85                	lui	s9,0x1
-    8000631a:	fffc8793          	addi	a5,s9,-1 # fff <_entry-0x7ffff001>
-    8000631e:	def43823          	sd	a5,-528(s0)
-    80006322:	a42d                	j	8000654c <exec+0x318>
+    80005214:	6c85                	lui	s9,0x1
+    80005216:	fffc8793          	addi	a5,s9,-1 # fff <_entry-0x7ffff001>
+    8000521a:	def43823          	sd	a5,-528(s0)
+    8000521e:	a42d                	j	80005448 <exec+0x318>
   uint64 pa;
 
   for(i = 0; i < sz; i += PGSIZE){
     pa = walkaddr(pagetable, va + i);
     if(pa == 0)
       panic("loadseg: address should exist");
-    80006324:	00003517          	auipc	a0,0x3
-    80006328:	7ac50513          	addi	a0,a0,1964 # 80009ad0 <syscalls+0x2a8>
-    8000632c:	ffffa097          	auipc	ra,0xffffa
-    80006330:	212080e7          	jalr	530(ra) # 8000053e <panic>
+    80005220:	00003517          	auipc	a0,0x3
+    80005224:	54050513          	addi	a0,a0,1344 # 80008760 <syscalls+0x290>
+    80005228:	ffffb097          	auipc	ra,0xffffb
+    8000522c:	316080e7          	jalr	790(ra) # 8000053e <panic>
     if(sz - i < PGSIZE)
       n = sz - i;
     else
       n = PGSIZE;
     if(readi(ip, 0, (uint64)pa, offset+i, n) != n)
-    80006334:	8756                	mv	a4,s5
-    80006336:	012d86bb          	addw	a3,s11,s2
-    8000633a:	4581                	li	a1,0
-    8000633c:	8526                	mv	a0,s1
-    8000633e:	fffff097          	auipc	ra,0xfffff
-    80006342:	cac080e7          	jalr	-852(ra) # 80004fea <readi>
-    80006346:	2501                	sext.w	a0,a0
-    80006348:	1aaa9963          	bne	s5,a0,800064fa <exec+0x2c6>
+    80005230:	8756                	mv	a4,s5
+    80005232:	012d86bb          	addw	a3,s11,s2
+    80005236:	4581                	li	a1,0
+    80005238:	8526                	mv	a0,s1
+    8000523a:	fffff097          	auipc	ra,0xfffff
+    8000523e:	cac080e7          	jalr	-852(ra) # 80003ee6 <readi>
+    80005242:	2501                	sext.w	a0,a0
+    80005244:	1aaa9963          	bne	s5,a0,800053f6 <exec+0x2c6>
   for(i = 0; i < sz; i += PGSIZE){
-    8000634c:	6785                	lui	a5,0x1
-    8000634e:	0127893b          	addw	s2,a5,s2
-    80006352:	77fd                	lui	a5,0xfffff
-    80006354:	01478a3b          	addw	s4,a5,s4
-    80006358:	1f897163          	bgeu	s2,s8,8000653a <exec+0x306>
+    80005248:	6785                	lui	a5,0x1
+    8000524a:	0127893b          	addw	s2,a5,s2
+    8000524e:	77fd                	lui	a5,0xfffff
+    80005250:	01478a3b          	addw	s4,a5,s4
+    80005254:	1f897163          	bgeu	s2,s8,80005436 <exec+0x306>
     pa = walkaddr(pagetable, va + i);
-    8000635c:	02091593          	slli	a1,s2,0x20
-    80006360:	9181                	srli	a1,a1,0x20
-    80006362:	95ea                	add	a1,a1,s10
-    80006364:	855e                	mv	a0,s7
-    80006366:	ffffb097          	auipc	ra,0xffffb
-    8000636a:	d10080e7          	jalr	-752(ra) # 80001076 <walkaddr>
-    8000636e:	862a                	mv	a2,a0
+    80005258:	02091593          	slli	a1,s2,0x20
+    8000525c:	9181                	srli	a1,a1,0x20
+    8000525e:	95ea                	add	a1,a1,s10
+    80005260:	855e                	mv	a0,s7
+    80005262:	ffffc097          	auipc	ra,0xffffc
+    80005266:	e0c080e7          	jalr	-500(ra) # 8000106e <walkaddr>
+    8000526a:	862a                	mv	a2,a0
     if(pa == 0)
-    80006370:	d955                	beqz	a0,80006324 <exec+0xf0>
+    8000526c:	d955                	beqz	a0,80005220 <exec+0xf0>
       n = PGSIZE;
-    80006372:	8ae6                	mv	s5,s9
+    8000526e:	8ae6                	mv	s5,s9
     if(sz - i < PGSIZE)
-    80006374:	fd9a70e3          	bgeu	s4,s9,80006334 <exec+0x100>
+    80005270:	fd9a70e3          	bgeu	s4,s9,80005230 <exec+0x100>
       n = sz - i;
-    80006378:	8ad2                	mv	s5,s4
-    8000637a:	bf6d                	j	80006334 <exec+0x100>
+    80005274:	8ad2                	mv	s5,s4
+    80005276:	bf6d                	j	80005230 <exec+0x100>
   uint64 argc, sz = 0, sp, ustack[MAXARG], stackbase;
-    8000637c:	4901                	li	s2,0
+    80005278:	4901                	li	s2,0
   iunlockput(ip);
-    8000637e:	8526                	mv	a0,s1
-    80006380:	fffff097          	auipc	ra,0xfffff
-    80006384:	c18080e7          	jalr	-1000(ra) # 80004f98 <iunlockput>
+    8000527a:	8526                	mv	a0,s1
+    8000527c:	fffff097          	auipc	ra,0xfffff
+    80005280:	c18080e7          	jalr	-1000(ra) # 80003e94 <iunlockput>
   end_op();
-    80006388:	fffff097          	auipc	ra,0xfffff
-    8000638c:	400080e7          	jalr	1024(ra) # 80005788 <end_op>
+    80005284:	fffff097          	auipc	ra,0xfffff
+    80005288:	400080e7          	jalr	1024(ra) # 80004684 <end_op>
   p = myproc();
-    80006390:	ffffc097          	auipc	ra,0xffffc
-    80006394:	804080e7          	jalr	-2044(ra) # 80001b94 <myproc>
-    80006398:	8aaa                	mv	s5,a0
+    8000528c:	ffffd097          	auipc	ra,0xffffd
+    80005290:	a44080e7          	jalr	-1468(ra) # 80001cd0 <myproc>
+    80005294:	8aaa                	mv	s5,a0
   uint64 oldsz = p->sz;
-    8000639a:	07853d03          	ld	s10,120(a0)
+    80005296:	04853d03          	ld	s10,72(a0)
   sz = PGROUNDUP(sz);
-    8000639e:	6785                	lui	a5,0x1
-    800063a0:	17fd                	addi	a5,a5,-1
-    800063a2:	993e                	add	s2,s2,a5
-    800063a4:	757d                	lui	a0,0xfffff
-    800063a6:	00a977b3          	and	a5,s2,a0
-    800063aa:	e0f43423          	sd	a5,-504(s0)
+    8000529a:	6785                	lui	a5,0x1
+    8000529c:	17fd                	addi	a5,a5,-1
+    8000529e:	993e                	add	s2,s2,a5
+    800052a0:	757d                	lui	a0,0xfffff
+    800052a2:	00a977b3          	and	a5,s2,a0
+    800052a6:	e0f43423          	sd	a5,-504(s0)
   if((sz1 = uvmalloc(pagetable, sz, sz + 2*PGSIZE)) == 0)
-    800063ae:	6609                	lui	a2,0x2
-    800063b0:	963e                	add	a2,a2,a5
-    800063b2:	85be                	mv	a1,a5
-    800063b4:	855e                	mv	a0,s7
-    800063b6:	ffffb097          	auipc	ra,0xffffb
-    800063ba:	074080e7          	jalr	116(ra) # 8000142a <uvmalloc>
-    800063be:	8b2a                	mv	s6,a0
+    800052aa:	6609                	lui	a2,0x2
+    800052ac:	963e                	add	a2,a2,a5
+    800052ae:	85be                	mv	a1,a5
+    800052b0:	855e                	mv	a0,s7
+    800052b2:	ffffc097          	auipc	ra,0xffffc
+    800052b6:	170080e7          	jalr	368(ra) # 80001422 <uvmalloc>
+    800052ba:	8b2a                	mv	s6,a0
   ip = 0;
-    800063c0:	4481                	li	s1,0
+    800052bc:	4481                	li	s1,0
   if((sz1 = uvmalloc(pagetable, sz, sz + 2*PGSIZE)) == 0)
-    800063c2:	12050c63          	beqz	a0,800064fa <exec+0x2c6>
+    800052be:	12050c63          	beqz	a0,800053f6 <exec+0x2c6>
   uvmclear(pagetable, sz-2*PGSIZE);
-    800063c6:	75f9                	lui	a1,0xffffe
-    800063c8:	95aa                	add	a1,a1,a0
-    800063ca:	855e                	mv	a0,s7
-    800063cc:	ffffb097          	auipc	ra,0xffffb
-    800063d0:	27c080e7          	jalr	636(ra) # 80001648 <uvmclear>
+    800052c2:	75f9                	lui	a1,0xffffe
+    800052c4:	95aa                	add	a1,a1,a0
+    800052c6:	855e                	mv	a0,s7
+    800052c8:	ffffc097          	auipc	ra,0xffffc
+    800052cc:	378080e7          	jalr	888(ra) # 80001640 <uvmclear>
   stackbase = sp - PGSIZE;
-    800063d4:	7c7d                	lui	s8,0xfffff
-    800063d6:	9c5a                	add	s8,s8,s6
+    800052d0:	7c7d                	lui	s8,0xfffff
+    800052d2:	9c5a                	add	s8,s8,s6
   for(argc = 0; argv[argc]; argc++) {
-    800063d8:	e0043783          	ld	a5,-512(s0)
-    800063dc:	6388                	ld	a0,0(a5)
-    800063de:	c535                	beqz	a0,8000644a <exec+0x216>
-    800063e0:	e9040993          	addi	s3,s0,-368
-    800063e4:	f9040c93          	addi	s9,s0,-112
+    800052d4:	e0043783          	ld	a5,-512(s0)
+    800052d8:	6388                	ld	a0,0(a5)
+    800052da:	c535                	beqz	a0,80005346 <exec+0x216>
+    800052dc:	e9040993          	addi	s3,s0,-368
+    800052e0:	f9040c93          	addi	s9,s0,-112
   sp = sz;
-    800063e8:	895a                	mv	s2,s6
+    800052e4:	895a                	mv	s2,s6
     sp -= strlen(argv[argc]) + 1;
-    800063ea:	ffffb097          	auipc	ra,0xffffb
-    800063ee:	a7a080e7          	jalr	-1414(ra) # 80000e64 <strlen>
-    800063f2:	2505                	addiw	a0,a0,1
-    800063f4:	40a90933          	sub	s2,s2,a0
+    800052e6:	ffffc097          	auipc	ra,0xffffc
+    800052ea:	b7e080e7          	jalr	-1154(ra) # 80000e64 <strlen>
+    800052ee:	2505                	addiw	a0,a0,1
+    800052f0:	40a90933          	sub	s2,s2,a0
     sp -= sp % 16; // riscv sp must be 16-byte aligned
-    800063f8:	ff097913          	andi	s2,s2,-16
+    800052f4:	ff097913          	andi	s2,s2,-16
     if(sp < stackbase)
-    800063fc:	13896363          	bltu	s2,s8,80006522 <exec+0x2ee>
+    800052f8:	13896363          	bltu	s2,s8,8000541e <exec+0x2ee>
     if(copyout(pagetable, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
-    80006400:	e0043d83          	ld	s11,-512(s0)
-    80006404:	000dba03          	ld	s4,0(s11)
-    80006408:	8552                	mv	a0,s4
-    8000640a:	ffffb097          	auipc	ra,0xffffb
-    8000640e:	a5a080e7          	jalr	-1446(ra) # 80000e64 <strlen>
-    80006412:	0015069b          	addiw	a3,a0,1
-    80006416:	8652                	mv	a2,s4
-    80006418:	85ca                	mv	a1,s2
-    8000641a:	855e                	mv	a0,s7
-    8000641c:	ffffb097          	auipc	ra,0xffffb
-    80006420:	25e080e7          	jalr	606(ra) # 8000167a <copyout>
-    80006424:	10054363          	bltz	a0,8000652a <exec+0x2f6>
+    800052fc:	e0043d83          	ld	s11,-512(s0)
+    80005300:	000dba03          	ld	s4,0(s11)
+    80005304:	8552                	mv	a0,s4
+    80005306:	ffffc097          	auipc	ra,0xffffc
+    8000530a:	b5e080e7          	jalr	-1186(ra) # 80000e64 <strlen>
+    8000530e:	0015069b          	addiw	a3,a0,1
+    80005312:	8652                	mv	a2,s4
+    80005314:	85ca                	mv	a1,s2
+    80005316:	855e                	mv	a0,s7
+    80005318:	ffffc097          	auipc	ra,0xffffc
+    8000531c:	35a080e7          	jalr	858(ra) # 80001672 <copyout>
+    80005320:	10054363          	bltz	a0,80005426 <exec+0x2f6>
     ustack[argc] = sp;
-    80006428:	0129b023          	sd	s2,0(s3)
+    80005324:	0129b023          	sd	s2,0(s3)
   for(argc = 0; argv[argc]; argc++) {
-    8000642c:	0485                	addi	s1,s1,1
-    8000642e:	008d8793          	addi	a5,s11,8
-    80006432:	e0f43023          	sd	a5,-512(s0)
-    80006436:	008db503          	ld	a0,8(s11)
-    8000643a:	c911                	beqz	a0,8000644e <exec+0x21a>
+    80005328:	0485                	addi	s1,s1,1
+    8000532a:	008d8793          	addi	a5,s11,8
+    8000532e:	e0f43023          	sd	a5,-512(s0)
+    80005332:	008db503          	ld	a0,8(s11)
+    80005336:	c911                	beqz	a0,8000534a <exec+0x21a>
     if(argc >= MAXARG)
-    8000643c:	09a1                	addi	s3,s3,8
-    8000643e:	fb3c96e3          	bne	s9,s3,800063ea <exec+0x1b6>
+    80005338:	09a1                	addi	s3,s3,8
+    8000533a:	fb3c96e3          	bne	s9,s3,800052e6 <exec+0x1b6>
   sz = sz1;
-    80006442:	e1643423          	sd	s6,-504(s0)
+    8000533e:	e1643423          	sd	s6,-504(s0)
   ip = 0;
-    80006446:	4481                	li	s1,0
-    80006448:	a84d                	j	800064fa <exec+0x2c6>
+    80005342:	4481                	li	s1,0
+    80005344:	a84d                	j	800053f6 <exec+0x2c6>
   sp = sz;
-    8000644a:	895a                	mv	s2,s6
+    80005346:	895a                	mv	s2,s6
   for(argc = 0; argv[argc]; argc++) {
-    8000644c:	4481                	li	s1,0
+    80005348:	4481                	li	s1,0
   ustack[argc] = 0;
-    8000644e:	00349793          	slli	a5,s1,0x3
-    80006452:	f9040713          	addi	a4,s0,-112
-    80006456:	97ba                	add	a5,a5,a4
-    80006458:	f007b023          	sd	zero,-256(a5) # f00 <_entry-0x7ffff100>
+    8000534a:	00349793          	slli	a5,s1,0x3
+    8000534e:	f9040713          	addi	a4,s0,-112
+    80005352:	97ba                	add	a5,a5,a4
+    80005354:	f007b023          	sd	zero,-256(a5) # f00 <_entry-0x7ffff100>
   sp -= (argc+1) * sizeof(uint64);
-    8000645c:	00148693          	addi	a3,s1,1
-    80006460:	068e                	slli	a3,a3,0x3
-    80006462:	40d90933          	sub	s2,s2,a3
+    80005358:	00148693          	addi	a3,s1,1
+    8000535c:	068e                	slli	a3,a3,0x3
+    8000535e:	40d90933          	sub	s2,s2,a3
   sp -= sp % 16;
-    80006466:	ff097913          	andi	s2,s2,-16
+    80005362:	ff097913          	andi	s2,s2,-16
   if(sp < stackbase)
-    8000646a:	01897663          	bgeu	s2,s8,80006476 <exec+0x242>
+    80005366:	01897663          	bgeu	s2,s8,80005372 <exec+0x242>
   sz = sz1;
-    8000646e:	e1643423          	sd	s6,-504(s0)
+    8000536a:	e1643423          	sd	s6,-504(s0)
   ip = 0;
-    80006472:	4481                	li	s1,0
-    80006474:	a059                	j	800064fa <exec+0x2c6>
+    8000536e:	4481                	li	s1,0
+    80005370:	a059                	j	800053f6 <exec+0x2c6>
   if(copyout(pagetable, sp, (char *)ustack, (argc+1)*sizeof(uint64)) < 0)
-    80006476:	e9040613          	addi	a2,s0,-368
-    8000647a:	85ca                	mv	a1,s2
-    8000647c:	855e                	mv	a0,s7
-    8000647e:	ffffb097          	auipc	ra,0xffffb
-    80006482:	1fc080e7          	jalr	508(ra) # 8000167a <copyout>
-    80006486:	0a054663          	bltz	a0,80006532 <exec+0x2fe>
+    80005372:	e9040613          	addi	a2,s0,-368
+    80005376:	85ca                	mv	a1,s2
+    80005378:	855e                	mv	a0,s7
+    8000537a:	ffffc097          	auipc	ra,0xffffc
+    8000537e:	2f8080e7          	jalr	760(ra) # 80001672 <copyout>
+    80005382:	0a054663          	bltz	a0,8000542e <exec+0x2fe>
   p->trapframe->a1 = sp;
-    8000648a:	088ab783          	ld	a5,136(s5)
-    8000648e:	0727bc23          	sd	s2,120(a5)
+    80005386:	058ab783          	ld	a5,88(s5)
+    8000538a:	0727bc23          	sd	s2,120(a5)
   for(last=s=path; *s; s++)
-    80006492:	df843783          	ld	a5,-520(s0)
-    80006496:	0007c703          	lbu	a4,0(a5)
-    8000649a:	cf11                	beqz	a4,800064b6 <exec+0x282>
-    8000649c:	0785                	addi	a5,a5,1
+    8000538e:	df843783          	ld	a5,-520(s0)
+    80005392:	0007c703          	lbu	a4,0(a5)
+    80005396:	cf11                	beqz	a4,800053b2 <exec+0x282>
+    80005398:	0785                	addi	a5,a5,1
     if(*s == '/')
-    8000649e:	02f00693          	li	a3,47
-    800064a2:	a039                	j	800064b0 <exec+0x27c>
+    8000539a:	02f00693          	li	a3,47
+    8000539e:	a039                	j	800053ac <exec+0x27c>
       last = s+1;
-    800064a4:	def43c23          	sd	a5,-520(s0)
+    800053a0:	def43c23          	sd	a5,-520(s0)
   for(last=s=path; *s; s++)
-    800064a8:	0785                	addi	a5,a5,1
-    800064aa:	fff7c703          	lbu	a4,-1(a5)
-    800064ae:	c701                	beqz	a4,800064b6 <exec+0x282>
+    800053a4:	0785                	addi	a5,a5,1
+    800053a6:	fff7c703          	lbu	a4,-1(a5)
+    800053aa:	c701                	beqz	a4,800053b2 <exec+0x282>
     if(*s == '/')
-    800064b0:	fed71ce3          	bne	a4,a3,800064a8 <exec+0x274>
-    800064b4:	bfc5                	j	800064a4 <exec+0x270>
+    800053ac:	fed71ce3          	bne	a4,a3,800053a4 <exec+0x274>
+    800053b0:	bfc5                	j	800053a0 <exec+0x270>
   safestrcpy(p->name, last, sizeof(p->name));
-    800064b6:	4641                	li	a2,16
-    800064b8:	df843583          	ld	a1,-520(s0)
-    800064bc:	188a8513          	addi	a0,s5,392
-    800064c0:	ffffb097          	auipc	ra,0xffffb
-    800064c4:	972080e7          	jalr	-1678(ra) # 80000e32 <safestrcpy>
+    800053b2:	4641                	li	a2,16
+    800053b4:	df843583          	ld	a1,-520(s0)
+    800053b8:	158a8513          	addi	a0,s5,344
+    800053bc:	ffffc097          	auipc	ra,0xffffc
+    800053c0:	a76080e7          	jalr	-1418(ra) # 80000e32 <safestrcpy>
   oldpagetable = p->pagetable;
-    800064c8:	080ab503          	ld	a0,128(s5)
+    800053c4:	050ab503          	ld	a0,80(s5)
   p->pagetable = pagetable;
-    800064cc:	097ab023          	sd	s7,128(s5)
+    800053c8:	057ab823          	sd	s7,80(s5)
   p->sz = sz;
-    800064d0:	076abc23          	sd	s6,120(s5)
+    800053cc:	056ab423          	sd	s6,72(s5)
   p->trapframe->epc = elf.entry;  // initial program counter = main
-    800064d4:	088ab783          	ld	a5,136(s5)
-    800064d8:	e6843703          	ld	a4,-408(s0)
-    800064dc:	ef98                	sd	a4,24(a5)
+    800053d0:	058ab783          	ld	a5,88(s5)
+    800053d4:	e6843703          	ld	a4,-408(s0)
+    800053d8:	ef98                	sd	a4,24(a5)
   p->trapframe->sp = sp; // initial stack pointer
-    800064de:	088ab783          	ld	a5,136(s5)
-    800064e2:	0327b823          	sd	s2,48(a5)
+    800053da:	058ab783          	ld	a5,88(s5)
+    800053de:	0327b823          	sd	s2,48(a5)
   proc_freepagetable(oldpagetable, oldsz);
-    800064e6:	85ea                	mv	a1,s10
-    800064e8:	ffffc097          	auipc	ra,0xffffc
-    800064ec:	810080e7          	jalr	-2032(ra) # 80001cf8 <proc_freepagetable>
+    800053e2:	85ea                	mv	a1,s10
+    800053e4:	ffffd097          	auipc	ra,0xffffd
+    800053e8:	a46080e7          	jalr	-1466(ra) # 80001e2a <proc_freepagetable>
   return argc; // this ends up in a0, the first argument to main(argc, argv)
-    800064f0:	0004851b          	sext.w	a0,s1
-    800064f4:	bbe1                	j	800062cc <exec+0x98>
-    800064f6:	e1243423          	sd	s2,-504(s0)
+    800053ec:	0004851b          	sext.w	a0,s1
+    800053f0:	bbe1                	j	800051c8 <exec+0x98>
+    800053f2:	e1243423          	sd	s2,-504(s0)
     proc_freepagetable(pagetable, sz);
-    800064fa:	e0843583          	ld	a1,-504(s0)
-    800064fe:	855e                	mv	a0,s7
-    80006500:	ffffb097          	auipc	ra,0xffffb
-    80006504:	7f8080e7          	jalr	2040(ra) # 80001cf8 <proc_freepagetable>
+    800053f6:	e0843583          	ld	a1,-504(s0)
+    800053fa:	855e                	mv	a0,s7
+    800053fc:	ffffd097          	auipc	ra,0xffffd
+    80005400:	a2e080e7          	jalr	-1490(ra) # 80001e2a <proc_freepagetable>
   if(ip){
-    80006508:	da0498e3          	bnez	s1,800062b8 <exec+0x84>
+    80005404:	da0498e3          	bnez	s1,800051b4 <exec+0x84>
   return -1;
-    8000650c:	557d                	li	a0,-1
-    8000650e:	bb7d                	j	800062cc <exec+0x98>
-    80006510:	e1243423          	sd	s2,-504(s0)
-    80006514:	b7dd                	j	800064fa <exec+0x2c6>
-    80006516:	e1243423          	sd	s2,-504(s0)
-    8000651a:	b7c5                	j	800064fa <exec+0x2c6>
-    8000651c:	e1243423          	sd	s2,-504(s0)
-    80006520:	bfe9                	j	800064fa <exec+0x2c6>
+    80005408:	557d                	li	a0,-1
+    8000540a:	bb7d                	j	800051c8 <exec+0x98>
+    8000540c:	e1243423          	sd	s2,-504(s0)
+    80005410:	b7dd                	j	800053f6 <exec+0x2c6>
+    80005412:	e1243423          	sd	s2,-504(s0)
+    80005416:	b7c5                	j	800053f6 <exec+0x2c6>
+    80005418:	e1243423          	sd	s2,-504(s0)
+    8000541c:	bfe9                	j	800053f6 <exec+0x2c6>
   sz = sz1;
-    80006522:	e1643423          	sd	s6,-504(s0)
+    8000541e:	e1643423          	sd	s6,-504(s0)
   ip = 0;
-    80006526:	4481                	li	s1,0
-    80006528:	bfc9                	j	800064fa <exec+0x2c6>
+    80005422:	4481                	li	s1,0
+    80005424:	bfc9                	j	800053f6 <exec+0x2c6>
   sz = sz1;
-    8000652a:	e1643423          	sd	s6,-504(s0)
+    80005426:	e1643423          	sd	s6,-504(s0)
   ip = 0;
-    8000652e:	4481                	li	s1,0
-    80006530:	b7e9                	j	800064fa <exec+0x2c6>
+    8000542a:	4481                	li	s1,0
+    8000542c:	b7e9                	j	800053f6 <exec+0x2c6>
   sz = sz1;
-    80006532:	e1643423          	sd	s6,-504(s0)
+    8000542e:	e1643423          	sd	s6,-504(s0)
   ip = 0;
-    80006536:	4481                	li	s1,0
-    80006538:	b7c9                	j	800064fa <exec+0x2c6>
+    80005432:	4481                	li	s1,0
+    80005434:	b7c9                	j	800053f6 <exec+0x2c6>
     if((sz1 = uvmalloc(pagetable, sz, ph.vaddr + ph.memsz)) == 0)
-    8000653a:	e0843903          	ld	s2,-504(s0)
+    80005436:	e0843903          	ld	s2,-504(s0)
   for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
-    8000653e:	2b05                	addiw	s6,s6,1
-    80006540:	0389899b          	addiw	s3,s3,56
-    80006544:	e8845783          	lhu	a5,-376(s0)
-    80006548:	e2fb5be3          	bge	s6,a5,8000637e <exec+0x14a>
+    8000543a:	2b05                	addiw	s6,s6,1
+    8000543c:	0389899b          	addiw	s3,s3,56
+    80005440:	e8845783          	lhu	a5,-376(s0)
+    80005444:	e2fb5be3          	bge	s6,a5,8000527a <exec+0x14a>
     if(readi(ip, 0, (uint64)&ph, off, sizeof(ph)) != sizeof(ph))
-    8000654c:	2981                	sext.w	s3,s3
-    8000654e:	03800713          	li	a4,56
-    80006552:	86ce                	mv	a3,s3
-    80006554:	e1840613          	addi	a2,s0,-488
-    80006558:	4581                	li	a1,0
-    8000655a:	8526                	mv	a0,s1
-    8000655c:	fffff097          	auipc	ra,0xfffff
-    80006560:	a8e080e7          	jalr	-1394(ra) # 80004fea <readi>
-    80006564:	03800793          	li	a5,56
-    80006568:	f8f517e3          	bne	a0,a5,800064f6 <exec+0x2c2>
+    80005448:	2981                	sext.w	s3,s3
+    8000544a:	03800713          	li	a4,56
+    8000544e:	86ce                	mv	a3,s3
+    80005450:	e1840613          	addi	a2,s0,-488
+    80005454:	4581                	li	a1,0
+    80005456:	8526                	mv	a0,s1
+    80005458:	fffff097          	auipc	ra,0xfffff
+    8000545c:	a8e080e7          	jalr	-1394(ra) # 80003ee6 <readi>
+    80005460:	03800793          	li	a5,56
+    80005464:	f8f517e3          	bne	a0,a5,800053f2 <exec+0x2c2>
     if(ph.type != ELF_PROG_LOAD)
-    8000656c:	e1842783          	lw	a5,-488(s0)
-    80006570:	4705                	li	a4,1
-    80006572:	fce796e3          	bne	a5,a4,8000653e <exec+0x30a>
+    80005468:	e1842783          	lw	a5,-488(s0)
+    8000546c:	4705                	li	a4,1
+    8000546e:	fce796e3          	bne	a5,a4,8000543a <exec+0x30a>
     if(ph.memsz < ph.filesz)
-    80006576:	e4043603          	ld	a2,-448(s0)
-    8000657a:	e3843783          	ld	a5,-456(s0)
-    8000657e:	f8f669e3          	bltu	a2,a5,80006510 <exec+0x2dc>
+    80005472:	e4043603          	ld	a2,-448(s0)
+    80005476:	e3843783          	ld	a5,-456(s0)
+    8000547a:	f8f669e3          	bltu	a2,a5,8000540c <exec+0x2dc>
     if(ph.vaddr + ph.memsz < ph.vaddr)
-    80006582:	e2843783          	ld	a5,-472(s0)
-    80006586:	963e                	add	a2,a2,a5
-    80006588:	f8f667e3          	bltu	a2,a5,80006516 <exec+0x2e2>
+    8000547e:	e2843783          	ld	a5,-472(s0)
+    80005482:	963e                	add	a2,a2,a5
+    80005484:	f8f667e3          	bltu	a2,a5,80005412 <exec+0x2e2>
     if((sz1 = uvmalloc(pagetable, sz, ph.vaddr + ph.memsz)) == 0)
-    8000658c:	85ca                	mv	a1,s2
-    8000658e:	855e                	mv	a0,s7
-    80006590:	ffffb097          	auipc	ra,0xffffb
-    80006594:	e9a080e7          	jalr	-358(ra) # 8000142a <uvmalloc>
-    80006598:	e0a43423          	sd	a0,-504(s0)
-    8000659c:	d141                	beqz	a0,8000651c <exec+0x2e8>
+    80005488:	85ca                	mv	a1,s2
+    8000548a:	855e                	mv	a0,s7
+    8000548c:	ffffc097          	auipc	ra,0xffffc
+    80005490:	f96080e7          	jalr	-106(ra) # 80001422 <uvmalloc>
+    80005494:	e0a43423          	sd	a0,-504(s0)
+    80005498:	d141                	beqz	a0,80005418 <exec+0x2e8>
     if((ph.vaddr % PGSIZE) != 0)
-    8000659e:	e2843d03          	ld	s10,-472(s0)
-    800065a2:	df043783          	ld	a5,-528(s0)
-    800065a6:	00fd77b3          	and	a5,s10,a5
-    800065aa:	fba1                	bnez	a5,800064fa <exec+0x2c6>
+    8000549a:	e2843d03          	ld	s10,-472(s0)
+    8000549e:	df043783          	ld	a5,-528(s0)
+    800054a2:	00fd77b3          	and	a5,s10,a5
+    800054a6:	fba1                	bnez	a5,800053f6 <exec+0x2c6>
     if(loadseg(pagetable, ph.vaddr, ip, ph.off, ph.filesz) < 0)
-    800065ac:	e2042d83          	lw	s11,-480(s0)
-    800065b0:	e3842c03          	lw	s8,-456(s0)
+    800054a8:	e2042d83          	lw	s11,-480(s0)
+    800054ac:	e3842c03          	lw	s8,-456(s0)
   for(i = 0; i < sz; i += PGSIZE){
-    800065b4:	f80c03e3          	beqz	s8,8000653a <exec+0x306>
-    800065b8:	8a62                	mv	s4,s8
-    800065ba:	4901                	li	s2,0
-    800065bc:	b345                	j	8000635c <exec+0x128>
+    800054b0:	f80c03e3          	beqz	s8,80005436 <exec+0x306>
+    800054b4:	8a62                	mv	s4,s8
+    800054b6:	4901                	li	s2,0
+    800054b8:	b345                	j	80005258 <exec+0x128>
 
-00000000800065be <argfd>:
+00000000800054ba <argfd>:
 
 // Fetch the nth word-sized system call argument as a file descriptor
 // and return both the descriptor and the corresponding struct file.
 static int
 argfd(int n, int *pfd, struct file **pf)
 {
-    800065be:	7179                	addi	sp,sp,-48
-    800065c0:	f406                	sd	ra,40(sp)
-    800065c2:	f022                	sd	s0,32(sp)
-    800065c4:	ec26                	sd	s1,24(sp)
-    800065c6:	e84a                	sd	s2,16(sp)
-    800065c8:	1800                	addi	s0,sp,48
-    800065ca:	892e                	mv	s2,a1
-    800065cc:	84b2                	mv	s1,a2
+    800054ba:	7179                	addi	sp,sp,-48
+    800054bc:	f406                	sd	ra,40(sp)
+    800054be:	f022                	sd	s0,32(sp)
+    800054c0:	ec26                	sd	s1,24(sp)
+    800054c2:	e84a                	sd	s2,16(sp)
+    800054c4:	1800                	addi	s0,sp,48
+    800054c6:	892e                	mv	s2,a1
+    800054c8:	84b2                	mv	s1,a2
   int fd;
   struct file *f;
 
   if(argint(n, &fd) < 0)
-    800065ce:	fdc40593          	addi	a1,s0,-36
-    800065d2:	ffffe097          	auipc	ra,0xffffe
-    800065d6:	b46080e7          	jalr	-1210(ra) # 80004118 <argint>
-    800065da:	04054063          	bltz	a0,8000661a <argfd+0x5c>
+    800054ca:	fdc40593          	addi	a1,s0,-36
+    800054ce:	ffffe097          	auipc	ra,0xffffe
+    800054d2:	ba8080e7          	jalr	-1112(ra) # 80003076 <argint>
+    800054d6:	04054063          	bltz	a0,80005516 <argfd+0x5c>
     return -1;
   if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
-    800065de:	fdc42703          	lw	a4,-36(s0)
-    800065e2:	47bd                	li	a5,15
-    800065e4:	02e7ed63          	bltu	a5,a4,8000661e <argfd+0x60>
-    800065e8:	ffffb097          	auipc	ra,0xffffb
-    800065ec:	5ac080e7          	jalr	1452(ra) # 80001b94 <myproc>
-    800065f0:	fdc42703          	lw	a4,-36(s0)
-    800065f4:	02070793          	addi	a5,a4,32
-    800065f8:	078e                	slli	a5,a5,0x3
-    800065fa:	953e                	add	a0,a0,a5
-    800065fc:	611c                	ld	a5,0(a0)
-    800065fe:	c395                	beqz	a5,80006622 <argfd+0x64>
+    800054da:	fdc42703          	lw	a4,-36(s0)
+    800054de:	47bd                	li	a5,15
+    800054e0:	02e7ed63          	bltu	a5,a4,8000551a <argfd+0x60>
+    800054e4:	ffffc097          	auipc	ra,0xffffc
+    800054e8:	7ec080e7          	jalr	2028(ra) # 80001cd0 <myproc>
+    800054ec:	fdc42703          	lw	a4,-36(s0)
+    800054f0:	01a70793          	addi	a5,a4,26
+    800054f4:	078e                	slli	a5,a5,0x3
+    800054f6:	953e                	add	a0,a0,a5
+    800054f8:	611c                	ld	a5,0(a0)
+    800054fa:	c395                	beqz	a5,8000551e <argfd+0x64>
     return -1;
   if(pfd)
-    80006600:	00090463          	beqz	s2,80006608 <argfd+0x4a>
+    800054fc:	00090463          	beqz	s2,80005504 <argfd+0x4a>
     *pfd = fd;
-    80006604:	00e92023          	sw	a4,0(s2)
+    80005500:	00e92023          	sw	a4,0(s2)
   if(pf)
     *pf = f;
   return 0;
-    80006608:	4501                	li	a0,0
+    80005504:	4501                	li	a0,0
   if(pf)
-    8000660a:	c091                	beqz	s1,8000660e <argfd+0x50>
+    80005506:	c091                	beqz	s1,8000550a <argfd+0x50>
     *pf = f;
-    8000660c:	e09c                	sd	a5,0(s1)
-}
-    8000660e:	70a2                	ld	ra,40(sp)
-    80006610:	7402                	ld	s0,32(sp)
-    80006612:	64e2                	ld	s1,24(sp)
-    80006614:	6942                	ld	s2,16(sp)
-    80006616:	6145                	addi	sp,sp,48
-    80006618:	8082                	ret
+    80005508:	e09c                	sd	a5,0(s1)
+}
+    8000550a:	70a2                	ld	ra,40(sp)
+    8000550c:	7402                	ld	s0,32(sp)
+    8000550e:	64e2                	ld	s1,24(sp)
+    80005510:	6942                	ld	s2,16(sp)
+    80005512:	6145                	addi	sp,sp,48
+    80005514:	8082                	ret
     return -1;
-    8000661a:	557d                	li	a0,-1
-    8000661c:	bfcd                	j	8000660e <argfd+0x50>
+    80005516:	557d                	li	a0,-1
+    80005518:	bfcd                	j	8000550a <argfd+0x50>
     return -1;
-    8000661e:	557d                	li	a0,-1
-    80006620:	b7fd                	j	8000660e <argfd+0x50>
-    80006622:	557d                	li	a0,-1
-    80006624:	b7ed                	j	8000660e <argfd+0x50>
+    8000551a:	557d                	li	a0,-1
+    8000551c:	b7fd                	j	8000550a <argfd+0x50>
+    8000551e:	557d                	li	a0,-1
+    80005520:	b7ed                	j	8000550a <argfd+0x50>
 
-0000000080006626 <fdalloc>:
+0000000080005522 <fdalloc>:
 
 // Allocate a file descriptor for the given file.
 // Takes over file reference from caller on success.
 static int
 fdalloc(struct file *f)
 {
-    80006626:	1101                	addi	sp,sp,-32
-    80006628:	ec06                	sd	ra,24(sp)
-    8000662a:	e822                	sd	s0,16(sp)
-    8000662c:	e426                	sd	s1,8(sp)
-    8000662e:	1000                	addi	s0,sp,32
-    80006630:	84aa                	mv	s1,a0
+    80005522:	1101                	addi	sp,sp,-32
+    80005524:	ec06                	sd	ra,24(sp)
+    80005526:	e822                	sd	s0,16(sp)
+    80005528:	e426                	sd	s1,8(sp)
+    8000552a:	1000                	addi	s0,sp,32
+    8000552c:	84aa                	mv	s1,a0
   int fd;
   struct proc *p = myproc();
-    80006632:	ffffb097          	auipc	ra,0xffffb
-    80006636:	562080e7          	jalr	1378(ra) # 80001b94 <myproc>
-    8000663a:	862a                	mv	a2,a0
+    8000552e:	ffffc097          	auipc	ra,0xffffc
+    80005532:	7a2080e7          	jalr	1954(ra) # 80001cd0 <myproc>
+    80005536:	862a                	mv	a2,a0
 
   for(fd = 0; fd < NOFILE; fd++){
-    8000663c:	10050793          	addi	a5,a0,256 # fffffffffffff100 <end+0xffffffff7ffd7100>
-    80006640:	4501                	li	a0,0
-    80006642:	46c1                	li	a3,16
+    80005538:	0d050793          	addi	a5,a0,208 # fffffffffffff0d0 <end+0xffffffff7ffd90d0>
+    8000553c:	4501                	li	a0,0
+    8000553e:	46c1                	li	a3,16
     if(p->ofile[fd] == 0){
-    80006644:	6398                	ld	a4,0(a5)
-    80006646:	cb19                	beqz	a4,8000665c <fdalloc+0x36>
+    80005540:	6398                	ld	a4,0(a5)
+    80005542:	cb19                	beqz	a4,80005558 <fdalloc+0x36>
   for(fd = 0; fd < NOFILE; fd++){
-    80006648:	2505                	addiw	a0,a0,1
-    8000664a:	07a1                	addi	a5,a5,8
-    8000664c:	fed51ce3          	bne	a0,a3,80006644 <fdalloc+0x1e>
+    80005544:	2505                	addiw	a0,a0,1
+    80005546:	07a1                	addi	a5,a5,8
+    80005548:	fed51ce3          	bne	a0,a3,80005540 <fdalloc+0x1e>
       p->ofile[fd] = f;
       return fd;
     }
   }
   return -1;
-    80006650:	557d                	li	a0,-1
+    8000554c:	557d                	li	a0,-1
 }
-    80006652:	60e2                	ld	ra,24(sp)
-    80006654:	6442                	ld	s0,16(sp)
-    80006656:	64a2                	ld	s1,8(sp)
-    80006658:	6105                	addi	sp,sp,32
-    8000665a:	8082                	ret
+    8000554e:	60e2                	ld	ra,24(sp)
+    80005550:	6442                	ld	s0,16(sp)
+    80005552:	64a2                	ld	s1,8(sp)
+    80005554:	6105                	addi	sp,sp,32
+    80005556:	8082                	ret
       p->ofile[fd] = f;
-    8000665c:	02050793          	addi	a5,a0,32
-    80006660:	078e                	slli	a5,a5,0x3
-    80006662:	963e                	add	a2,a2,a5
-    80006664:	e204                	sd	s1,0(a2)
+    80005558:	01a50793          	addi	a5,a0,26
+    8000555c:	078e                	slli	a5,a5,0x3
+    8000555e:	963e                	add	a2,a2,a5
+    80005560:	e204                	sd	s1,0(a2)
       return fd;
-    80006666:	b7f5                	j	80006652 <fdalloc+0x2c>
+    80005562:	b7f5                	j	8000554e <fdalloc+0x2c>
 
-0000000080006668 <create>:
+0000000080005564 <create>:
   return -1;
 }
 
 static struct inode*
 create(char *path, short type, short major, short minor)
 {
-    80006668:	715d                	addi	sp,sp,-80
-    8000666a:	e486                	sd	ra,72(sp)
-    8000666c:	e0a2                	sd	s0,64(sp)
-    8000666e:	fc26                	sd	s1,56(sp)
-    80006670:	f84a                	sd	s2,48(sp)
-    80006672:	f44e                	sd	s3,40(sp)
-    80006674:	f052                	sd	s4,32(sp)
-    80006676:	ec56                	sd	s5,24(sp)
-    80006678:	0880                	addi	s0,sp,80
-    8000667a:	89ae                	mv	s3,a1
-    8000667c:	8ab2                	mv	s5,a2
-    8000667e:	8a36                	mv	s4,a3
+    80005564:	715d                	addi	sp,sp,-80
+    80005566:	e486                	sd	ra,72(sp)
+    80005568:	e0a2                	sd	s0,64(sp)
+    8000556a:	fc26                	sd	s1,56(sp)
+    8000556c:	f84a                	sd	s2,48(sp)
+    8000556e:	f44e                	sd	s3,40(sp)
+    80005570:	f052                	sd	s4,32(sp)
+    80005572:	ec56                	sd	s5,24(sp)
+    80005574:	0880                	addi	s0,sp,80
+    80005576:	89ae                	mv	s3,a1
+    80005578:	8ab2                	mv	s5,a2
+    8000557a:	8a36                	mv	s4,a3
   struct inode *ip, *dp;
   char name[DIRSIZ];
 
   if((dp = nameiparent(path, name)) == 0)
-    80006680:	fb040593          	addi	a1,s0,-80
-    80006684:	fffff097          	auipc	ra,0xfffff
-    80006688:	e86080e7          	jalr	-378(ra) # 8000550a <nameiparent>
-    8000668c:	892a                	mv	s2,a0
-    8000668e:	12050f63          	beqz	a0,800067cc <create+0x164>
+    8000557c:	fb040593          	addi	a1,s0,-80
+    80005580:	fffff097          	auipc	ra,0xfffff
+    80005584:	e86080e7          	jalr	-378(ra) # 80004406 <nameiparent>
+    80005588:	892a                	mv	s2,a0
+    8000558a:	12050f63          	beqz	a0,800056c8 <create+0x164>
     return 0;
 
   ilock(dp);
-    80006692:	ffffe097          	auipc	ra,0xffffe
-    80006696:	6a4080e7          	jalr	1700(ra) # 80004d36 <ilock>
+    8000558e:	ffffe097          	auipc	ra,0xffffe
+    80005592:	6a4080e7          	jalr	1700(ra) # 80003c32 <ilock>
 
   if((ip = dirlookup(dp, name, 0)) != 0){
-    8000669a:	4601                	li	a2,0
-    8000669c:	fb040593          	addi	a1,s0,-80
-    800066a0:	854a                	mv	a0,s2
-    800066a2:	fffff097          	auipc	ra,0xfffff
-    800066a6:	b78080e7          	jalr	-1160(ra) # 8000521a <dirlookup>
-    800066aa:	84aa                	mv	s1,a0
-    800066ac:	c921                	beqz	a0,800066fc <create+0x94>
+    80005596:	4601                	li	a2,0
+    80005598:	fb040593          	addi	a1,s0,-80
+    8000559c:	854a                	mv	a0,s2
+    8000559e:	fffff097          	auipc	ra,0xfffff
+    800055a2:	b78080e7          	jalr	-1160(ra) # 80004116 <dirlookup>
+    800055a6:	84aa                	mv	s1,a0
+    800055a8:	c921                	beqz	a0,800055f8 <create+0x94>
     iunlockput(dp);
-    800066ae:	854a                	mv	a0,s2
-    800066b0:	fffff097          	auipc	ra,0xfffff
-    800066b4:	8e8080e7          	jalr	-1816(ra) # 80004f98 <iunlockput>
+    800055aa:	854a                	mv	a0,s2
+    800055ac:	fffff097          	auipc	ra,0xfffff
+    800055b0:	8e8080e7          	jalr	-1816(ra) # 80003e94 <iunlockput>
     ilock(ip);
-    800066b8:	8526                	mv	a0,s1
-    800066ba:	ffffe097          	auipc	ra,0xffffe
-    800066be:	67c080e7          	jalr	1660(ra) # 80004d36 <ilock>
+    800055b4:	8526                	mv	a0,s1
+    800055b6:	ffffe097          	auipc	ra,0xffffe
+    800055ba:	67c080e7          	jalr	1660(ra) # 80003c32 <ilock>
     if(type == T_FILE && (ip->type == T_FILE || ip->type == T_DEVICE))
-    800066c2:	2981                	sext.w	s3,s3
-    800066c4:	4789                	li	a5,2
-    800066c6:	02f99463          	bne	s3,a5,800066ee <create+0x86>
-    800066ca:	0444d783          	lhu	a5,68(s1)
-    800066ce:	37f9                	addiw	a5,a5,-2
-    800066d0:	17c2                	slli	a5,a5,0x30
-    800066d2:	93c1                	srli	a5,a5,0x30
-    800066d4:	4705                	li	a4,1
-    800066d6:	00f76c63          	bltu	a4,a5,800066ee <create+0x86>
+    800055be:	2981                	sext.w	s3,s3
+    800055c0:	4789                	li	a5,2
+    800055c2:	02f99463          	bne	s3,a5,800055ea <create+0x86>
+    800055c6:	0444d783          	lhu	a5,68(s1)
+    800055ca:	37f9                	addiw	a5,a5,-2
+    800055cc:	17c2                	slli	a5,a5,0x30
+    800055ce:	93c1                	srli	a5,a5,0x30
+    800055d0:	4705                	li	a4,1
+    800055d2:	00f76c63          	bltu	a4,a5,800055ea <create+0x86>
     panic("create: dirlink");
 
   iunlockput(dp);
 
   return ip;
 }
-    800066da:	8526                	mv	a0,s1
-    800066dc:	60a6                	ld	ra,72(sp)
-    800066de:	6406                	ld	s0,64(sp)
-    800066e0:	74e2                	ld	s1,56(sp)
-    800066e2:	7942                	ld	s2,48(sp)
-    800066e4:	79a2                	ld	s3,40(sp)
-    800066e6:	7a02                	ld	s4,32(sp)
-    800066e8:	6ae2                	ld	s5,24(sp)
-    800066ea:	6161                	addi	sp,sp,80
-    800066ec:	8082                	ret
+    800055d6:	8526                	mv	a0,s1
+    800055d8:	60a6                	ld	ra,72(sp)
+    800055da:	6406                	ld	s0,64(sp)
+    800055dc:	74e2                	ld	s1,56(sp)
+    800055de:	7942                	ld	s2,48(sp)
+    800055e0:	79a2                	ld	s3,40(sp)
+    800055e2:	7a02                	ld	s4,32(sp)
+    800055e4:	6ae2                	ld	s5,24(sp)
+    800055e6:	6161                	addi	sp,sp,80
+    800055e8:	8082                	ret
     iunlockput(ip);
-    800066ee:	8526                	mv	a0,s1
-    800066f0:	fffff097          	auipc	ra,0xfffff
-    800066f4:	8a8080e7          	jalr	-1880(ra) # 80004f98 <iunlockput>
+    800055ea:	8526                	mv	a0,s1
+    800055ec:	fffff097          	auipc	ra,0xfffff
+    800055f0:	8a8080e7          	jalr	-1880(ra) # 80003e94 <iunlockput>
     return 0;
-    800066f8:	4481                	li	s1,0
-    800066fa:	b7c5                	j	800066da <create+0x72>
+    800055f4:	4481                	li	s1,0
+    800055f6:	b7c5                	j	800055d6 <create+0x72>
   if((ip = ialloc(dp->dev, type)) == 0)
-    800066fc:	85ce                	mv	a1,s3
-    800066fe:	00092503          	lw	a0,0(s2)
-    80006702:	ffffe097          	auipc	ra,0xffffe
-    80006706:	49c080e7          	jalr	1180(ra) # 80004b9e <ialloc>
-    8000670a:	84aa                	mv	s1,a0
-    8000670c:	c529                	beqz	a0,80006756 <create+0xee>
+    800055f8:	85ce                	mv	a1,s3
+    800055fa:	00092503          	lw	a0,0(s2)
+    800055fe:	ffffe097          	auipc	ra,0xffffe
+    80005602:	49c080e7          	jalr	1180(ra) # 80003a9a <ialloc>
+    80005606:	84aa                	mv	s1,a0
+    80005608:	c529                	beqz	a0,80005652 <create+0xee>
   ilock(ip);
-    8000670e:	ffffe097          	auipc	ra,0xffffe
-    80006712:	628080e7          	jalr	1576(ra) # 80004d36 <ilock>
+    8000560a:	ffffe097          	auipc	ra,0xffffe
+    8000560e:	628080e7          	jalr	1576(ra) # 80003c32 <ilock>
   ip->major = major;
-    80006716:	05549323          	sh	s5,70(s1)
+    80005612:	05549323          	sh	s5,70(s1)
   ip->minor = minor;
-    8000671a:	05449423          	sh	s4,72(s1)
+    80005616:	05449423          	sh	s4,72(s1)
   ip->nlink = 1;
-    8000671e:	4785                	li	a5,1
-    80006720:	04f49523          	sh	a5,74(s1)
+    8000561a:	4785                	li	a5,1
+    8000561c:	04f49523          	sh	a5,74(s1)
   iupdate(ip);
-    80006724:	8526                	mv	a0,s1
-    80006726:	ffffe097          	auipc	ra,0xffffe
-    8000672a:	546080e7          	jalr	1350(ra) # 80004c6c <iupdate>
+    80005620:	8526                	mv	a0,s1
+    80005622:	ffffe097          	auipc	ra,0xffffe
+    80005626:	546080e7          	jalr	1350(ra) # 80003b68 <iupdate>
   if(type == T_DIR){  // Create . and .. entries.
-    8000672e:	2981                	sext.w	s3,s3
-    80006730:	4785                	li	a5,1
-    80006732:	02f98a63          	beq	s3,a5,80006766 <create+0xfe>
+    8000562a:	2981                	sext.w	s3,s3
+    8000562c:	4785                	li	a5,1
+    8000562e:	02f98a63          	beq	s3,a5,80005662 <create+0xfe>
   if(dirlink(dp, name, ip->inum) < 0)
-    80006736:	40d0                	lw	a2,4(s1)
-    80006738:	fb040593          	addi	a1,s0,-80
-    8000673c:	854a                	mv	a0,s2
-    8000673e:	fffff097          	auipc	ra,0xfffff
-    80006742:	cec080e7          	jalr	-788(ra) # 8000542a <dirlink>
-    80006746:	06054b63          	bltz	a0,800067bc <create+0x154>
+    80005632:	40d0                	lw	a2,4(s1)
+    80005634:	fb040593          	addi	a1,s0,-80
+    80005638:	854a                	mv	a0,s2
+    8000563a:	fffff097          	auipc	ra,0xfffff
+    8000563e:	cec080e7          	jalr	-788(ra) # 80004326 <dirlink>
+    80005642:	06054b63          	bltz	a0,800056b8 <create+0x154>
   iunlockput(dp);
-    8000674a:	854a                	mv	a0,s2
-    8000674c:	fffff097          	auipc	ra,0xfffff
-    80006750:	84c080e7          	jalr	-1972(ra) # 80004f98 <iunlockput>
+    80005646:	854a                	mv	a0,s2
+    80005648:	fffff097          	auipc	ra,0xfffff
+    8000564c:	84c080e7          	jalr	-1972(ra) # 80003e94 <iunlockput>
   return ip;
-    80006754:	b759                	j	800066da <create+0x72>
+    80005650:	b759                	j	800055d6 <create+0x72>
     panic("create: ialloc");
-    80006756:	00003517          	auipc	a0,0x3
-    8000675a:	39a50513          	addi	a0,a0,922 # 80009af0 <syscalls+0x2c8>
-    8000675e:	ffffa097          	auipc	ra,0xffffa
-    80006762:	de0080e7          	jalr	-544(ra) # 8000053e <panic>
+    80005652:	00003517          	auipc	a0,0x3
+    80005656:	12e50513          	addi	a0,a0,302 # 80008780 <syscalls+0x2b0>
+    8000565a:	ffffb097          	auipc	ra,0xffffb
+    8000565e:	ee4080e7          	jalr	-284(ra) # 8000053e <panic>
     dp->nlink++;  // for ".."
-    80006766:	04a95783          	lhu	a5,74(s2)
-    8000676a:	2785                	addiw	a5,a5,1
-    8000676c:	04f91523          	sh	a5,74(s2)
+    80005662:	04a95783          	lhu	a5,74(s2)
+    80005666:	2785                	addiw	a5,a5,1
+    80005668:	04f91523          	sh	a5,74(s2)
     iupdate(dp);
-    80006770:	854a                	mv	a0,s2
-    80006772:	ffffe097          	auipc	ra,0xffffe
-    80006776:	4fa080e7          	jalr	1274(ra) # 80004c6c <iupdate>
+    8000566c:	854a                	mv	a0,s2
+    8000566e:	ffffe097          	auipc	ra,0xffffe
+    80005672:	4fa080e7          	jalr	1274(ra) # 80003b68 <iupdate>
     if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
-    8000677a:	40d0                	lw	a2,4(s1)
-    8000677c:	00003597          	auipc	a1,0x3
-    80006780:	38458593          	addi	a1,a1,900 # 80009b00 <syscalls+0x2d8>
-    80006784:	8526                	mv	a0,s1
-    80006786:	fffff097          	auipc	ra,0xfffff
-    8000678a:	ca4080e7          	jalr	-860(ra) # 8000542a <dirlink>
-    8000678e:	00054f63          	bltz	a0,800067ac <create+0x144>
-    80006792:	00492603          	lw	a2,4(s2)
-    80006796:	00003597          	auipc	a1,0x3
-    8000679a:	37258593          	addi	a1,a1,882 # 80009b08 <syscalls+0x2e0>
-    8000679e:	8526                	mv	a0,s1
-    800067a0:	fffff097          	auipc	ra,0xfffff
-    800067a4:	c8a080e7          	jalr	-886(ra) # 8000542a <dirlink>
-    800067a8:	f80557e3          	bgez	a0,80006736 <create+0xce>
+    80005676:	40d0                	lw	a2,4(s1)
+    80005678:	00003597          	auipc	a1,0x3
+    8000567c:	11858593          	addi	a1,a1,280 # 80008790 <syscalls+0x2c0>
+    80005680:	8526                	mv	a0,s1
+    80005682:	fffff097          	auipc	ra,0xfffff
+    80005686:	ca4080e7          	jalr	-860(ra) # 80004326 <dirlink>
+    8000568a:	00054f63          	bltz	a0,800056a8 <create+0x144>
+    8000568e:	00492603          	lw	a2,4(s2)
+    80005692:	00003597          	auipc	a1,0x3
+    80005696:	10658593          	addi	a1,a1,262 # 80008798 <syscalls+0x2c8>
+    8000569a:	8526                	mv	a0,s1
+    8000569c:	fffff097          	auipc	ra,0xfffff
+    800056a0:	c8a080e7          	jalr	-886(ra) # 80004326 <dirlink>
+    800056a4:	f80557e3          	bgez	a0,80005632 <create+0xce>
       panic("create dots");
-    800067ac:	00003517          	auipc	a0,0x3
-    800067b0:	36450513          	addi	a0,a0,868 # 80009b10 <syscalls+0x2e8>
-    800067b4:	ffffa097          	auipc	ra,0xffffa
-    800067b8:	d8a080e7          	jalr	-630(ra) # 8000053e <panic>
+    800056a8:	00003517          	auipc	a0,0x3
+    800056ac:	0f850513          	addi	a0,a0,248 # 800087a0 <syscalls+0x2d0>
+    800056b0:	ffffb097          	auipc	ra,0xffffb
+    800056b4:	e8e080e7          	jalr	-370(ra) # 8000053e <panic>
     panic("create: dirlink");
-    800067bc:	00003517          	auipc	a0,0x3
-    800067c0:	36450513          	addi	a0,a0,868 # 80009b20 <syscalls+0x2f8>
-    800067c4:	ffffa097          	auipc	ra,0xffffa
-    800067c8:	d7a080e7          	jalr	-646(ra) # 8000053e <panic>
+    800056b8:	00003517          	auipc	a0,0x3
+    800056bc:	0f850513          	addi	a0,a0,248 # 800087b0 <syscalls+0x2e0>
+    800056c0:	ffffb097          	auipc	ra,0xffffb
+    800056c4:	e7e080e7          	jalr	-386(ra) # 8000053e <panic>
     return 0;
-    800067cc:	84aa                	mv	s1,a0
-    800067ce:	b731                	j	800066da <create+0x72>
+    800056c8:	84aa                	mv	s1,a0
+    800056ca:	b731                	j	800055d6 <create+0x72>
 
-00000000800067d0 <sys_dup>:
+00000000800056cc <sys_dup>:
 {
-    800067d0:	7179                	addi	sp,sp,-48
-    800067d2:	f406                	sd	ra,40(sp)
-    800067d4:	f022                	sd	s0,32(sp)
-    800067d6:	ec26                	sd	s1,24(sp)
-    800067d8:	1800                	addi	s0,sp,48
+    800056cc:	7179                	addi	sp,sp,-48
+    800056ce:	f406                	sd	ra,40(sp)
+    800056d0:	f022                	sd	s0,32(sp)
+    800056d2:	ec26                	sd	s1,24(sp)
+    800056d4:	1800                	addi	s0,sp,48
   if(argfd(0, 0, &f) < 0)
-    800067da:	fd840613          	addi	a2,s0,-40
-    800067de:	4581                	li	a1,0
-    800067e0:	4501                	li	a0,0
-    800067e2:	00000097          	auipc	ra,0x0
-    800067e6:	ddc080e7          	jalr	-548(ra) # 800065be <argfd>
+    800056d6:	fd840613          	addi	a2,s0,-40
+    800056da:	4581                	li	a1,0
+    800056dc:	4501                	li	a0,0
+    800056de:	00000097          	auipc	ra,0x0
+    800056e2:	ddc080e7          	jalr	-548(ra) # 800054ba <argfd>
     return -1;
-    800067ea:	57fd                	li	a5,-1
+    800056e6:	57fd                	li	a5,-1
   if(argfd(0, 0, &f) < 0)
-    800067ec:	02054363          	bltz	a0,80006812 <sys_dup+0x42>
+    800056e8:	02054363          	bltz	a0,8000570e <sys_dup+0x42>
   if((fd=fdalloc(f)) < 0)
-    800067f0:	fd843503          	ld	a0,-40(s0)
-    800067f4:	00000097          	auipc	ra,0x0
-    800067f8:	e32080e7          	jalr	-462(ra) # 80006626 <fdalloc>
-    800067fc:	84aa                	mv	s1,a0
+    800056ec:	fd843503          	ld	a0,-40(s0)
+    800056f0:	00000097          	auipc	ra,0x0
+    800056f4:	e32080e7          	jalr	-462(ra) # 80005522 <fdalloc>
+    800056f8:	84aa                	mv	s1,a0
     return -1;
-    800067fe:	57fd                	li	a5,-1
+    800056fa:	57fd                	li	a5,-1
   if((fd=fdalloc(f)) < 0)
-    80006800:	00054963          	bltz	a0,80006812 <sys_dup+0x42>
+    800056fc:	00054963          	bltz	a0,8000570e <sys_dup+0x42>
   filedup(f);
-    80006804:	fd843503          	ld	a0,-40(s0)
-    80006808:	fffff097          	auipc	ra,0xfffff
-    8000680c:	37a080e7          	jalr	890(ra) # 80005b82 <filedup>
+    80005700:	fd843503          	ld	a0,-40(s0)
+    80005704:	fffff097          	auipc	ra,0xfffff
+    80005708:	37a080e7          	jalr	890(ra) # 80004a7e <filedup>
   return fd;
-    80006810:	87a6                	mv	a5,s1
+    8000570c:	87a6                	mv	a5,s1
 }
-    80006812:	853e                	mv	a0,a5
-    80006814:	70a2                	ld	ra,40(sp)
-    80006816:	7402                	ld	s0,32(sp)
-    80006818:	64e2                	ld	s1,24(sp)
-    8000681a:	6145                	addi	sp,sp,48
-    8000681c:	8082                	ret
+    8000570e:	853e                	mv	a0,a5
+    80005710:	70a2                	ld	ra,40(sp)
+    80005712:	7402                	ld	s0,32(sp)
+    80005714:	64e2                	ld	s1,24(sp)
+    80005716:	6145                	addi	sp,sp,48
+    80005718:	8082                	ret
 
-000000008000681e <sys_read>:
+000000008000571a <sys_read>:
 {
-    8000681e:	7179                	addi	sp,sp,-48
-    80006820:	f406                	sd	ra,40(sp)
-    80006822:	f022                	sd	s0,32(sp)
-    80006824:	1800                	addi	s0,sp,48
+    8000571a:	7179                	addi	sp,sp,-48
+    8000571c:	f406                	sd	ra,40(sp)
+    8000571e:	f022                	sd	s0,32(sp)
+    80005720:	1800                	addi	s0,sp,48
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
-    80006826:	fe840613          	addi	a2,s0,-24
-    8000682a:	4581                	li	a1,0
-    8000682c:	4501                	li	a0,0
-    8000682e:	00000097          	auipc	ra,0x0
-    80006832:	d90080e7          	jalr	-624(ra) # 800065be <argfd>
+    80005722:	fe840613          	addi	a2,s0,-24
+    80005726:	4581                	li	a1,0
+    80005728:	4501                	li	a0,0
+    8000572a:	00000097          	auipc	ra,0x0
+    8000572e:	d90080e7          	jalr	-624(ra) # 800054ba <argfd>
     return -1;
-    80006836:	57fd                	li	a5,-1
+    80005732:	57fd                	li	a5,-1
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
-    80006838:	04054163          	bltz	a0,8000687a <sys_read+0x5c>
-    8000683c:	fe440593          	addi	a1,s0,-28
-    80006840:	4509                	li	a0,2
-    80006842:	ffffe097          	auipc	ra,0xffffe
-    80006846:	8d6080e7          	jalr	-1834(ra) # 80004118 <argint>
+    80005734:	04054163          	bltz	a0,80005776 <sys_read+0x5c>
+    80005738:	fe440593          	addi	a1,s0,-28
+    8000573c:	4509                	li	a0,2
+    8000573e:	ffffe097          	auipc	ra,0xffffe
+    80005742:	938080e7          	jalr	-1736(ra) # 80003076 <argint>
     return -1;
-    8000684a:	57fd                	li	a5,-1
+    80005746:	57fd                	li	a5,-1
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
-    8000684c:	02054763          	bltz	a0,8000687a <sys_read+0x5c>
-    80006850:	fd840593          	addi	a1,s0,-40
-    80006854:	4505                	li	a0,1
-    80006856:	ffffe097          	auipc	ra,0xffffe
-    8000685a:	8e4080e7          	jalr	-1820(ra) # 8000413a <argaddr>
+    80005748:	02054763          	bltz	a0,80005776 <sys_read+0x5c>
+    8000574c:	fd840593          	addi	a1,s0,-40
+    80005750:	4505                	li	a0,1
+    80005752:	ffffe097          	auipc	ra,0xffffe
+    80005756:	946080e7          	jalr	-1722(ra) # 80003098 <argaddr>
     return -1;
-    8000685e:	57fd                	li	a5,-1
+    8000575a:	57fd                	li	a5,-1
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
-    80006860:	00054d63          	bltz	a0,8000687a <sys_read+0x5c>
+    8000575c:	00054d63          	bltz	a0,80005776 <sys_read+0x5c>
   return fileread(f, p, n);
-    80006864:	fe442603          	lw	a2,-28(s0)
-    80006868:	fd843583          	ld	a1,-40(s0)
-    8000686c:	fe843503          	ld	a0,-24(s0)
-    80006870:	fffff097          	auipc	ra,0xfffff
-    80006874:	49e080e7          	jalr	1182(ra) # 80005d0e <fileread>
-    80006878:	87aa                	mv	a5,a0
-}
-    8000687a:	853e                	mv	a0,a5
-    8000687c:	70a2                	ld	ra,40(sp)
-    8000687e:	7402                	ld	s0,32(sp)
-    80006880:	6145                	addi	sp,sp,48
-    80006882:	8082                	ret
-
-0000000080006884 <sys_write>:
-{
-    80006884:	7179                	addi	sp,sp,-48
-    80006886:	f406                	sd	ra,40(sp)
-    80006888:	f022                	sd	s0,32(sp)
-    8000688a:	1800                	addi	s0,sp,48
+    80005760:	fe442603          	lw	a2,-28(s0)
+    80005764:	fd843583          	ld	a1,-40(s0)
+    80005768:	fe843503          	ld	a0,-24(s0)
+    8000576c:	fffff097          	auipc	ra,0xfffff
+    80005770:	49e080e7          	jalr	1182(ra) # 80004c0a <fileread>
+    80005774:	87aa                	mv	a5,a0
+}
+    80005776:	853e                	mv	a0,a5
+    80005778:	70a2                	ld	ra,40(sp)
+    8000577a:	7402                	ld	s0,32(sp)
+    8000577c:	6145                	addi	sp,sp,48
+    8000577e:	8082                	ret
+
+0000000080005780 <sys_write>:
+{
+    80005780:	7179                	addi	sp,sp,-48
+    80005782:	f406                	sd	ra,40(sp)
+    80005784:	f022                	sd	s0,32(sp)
+    80005786:	1800                	addi	s0,sp,48
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
-    8000688c:	fe840613          	addi	a2,s0,-24
-    80006890:	4581                	li	a1,0
-    80006892:	4501                	li	a0,0
-    80006894:	00000097          	auipc	ra,0x0
-    80006898:	d2a080e7          	jalr	-726(ra) # 800065be <argfd>
+    80005788:	fe840613          	addi	a2,s0,-24
+    8000578c:	4581                	li	a1,0
+    8000578e:	4501                	li	a0,0
+    80005790:	00000097          	auipc	ra,0x0
+    80005794:	d2a080e7          	jalr	-726(ra) # 800054ba <argfd>
     return -1;
-    8000689c:	57fd                	li	a5,-1
+    80005798:	57fd                	li	a5,-1
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
-    8000689e:	04054163          	bltz	a0,800068e0 <sys_write+0x5c>
-    800068a2:	fe440593          	addi	a1,s0,-28
-    800068a6:	4509                	li	a0,2
-    800068a8:	ffffe097          	auipc	ra,0xffffe
-    800068ac:	870080e7          	jalr	-1936(ra) # 80004118 <argint>
+    8000579a:	04054163          	bltz	a0,800057dc <sys_write+0x5c>
+    8000579e:	fe440593          	addi	a1,s0,-28
+    800057a2:	4509                	li	a0,2
+    800057a4:	ffffe097          	auipc	ra,0xffffe
+    800057a8:	8d2080e7          	jalr	-1838(ra) # 80003076 <argint>
     return -1;
-    800068b0:	57fd                	li	a5,-1
+    800057ac:	57fd                	li	a5,-1
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
-    800068b2:	02054763          	bltz	a0,800068e0 <sys_write+0x5c>
-    800068b6:	fd840593          	addi	a1,s0,-40
-    800068ba:	4505                	li	a0,1
-    800068bc:	ffffe097          	auipc	ra,0xffffe
-    800068c0:	87e080e7          	jalr	-1922(ra) # 8000413a <argaddr>
+    800057ae:	02054763          	bltz	a0,800057dc <sys_write+0x5c>
+    800057b2:	fd840593          	addi	a1,s0,-40
+    800057b6:	4505                	li	a0,1
+    800057b8:	ffffe097          	auipc	ra,0xffffe
+    800057bc:	8e0080e7          	jalr	-1824(ra) # 80003098 <argaddr>
     return -1;
-    800068c4:	57fd                	li	a5,-1
+    800057c0:	57fd                	li	a5,-1
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
-    800068c6:	00054d63          	bltz	a0,800068e0 <sys_write+0x5c>
+    800057c2:	00054d63          	bltz	a0,800057dc <sys_write+0x5c>
   return filewrite(f, p, n);
-    800068ca:	fe442603          	lw	a2,-28(s0)
-    800068ce:	fd843583          	ld	a1,-40(s0)
-    800068d2:	fe843503          	ld	a0,-24(s0)
-    800068d6:	fffff097          	auipc	ra,0xfffff
-    800068da:	4fa080e7          	jalr	1274(ra) # 80005dd0 <filewrite>
-    800068de:	87aa                	mv	a5,a0
-}
-    800068e0:	853e                	mv	a0,a5
-    800068e2:	70a2                	ld	ra,40(sp)
-    800068e4:	7402                	ld	s0,32(sp)
-    800068e6:	6145                	addi	sp,sp,48
-    800068e8:	8082                	ret
-
-00000000800068ea <sys_close>:
-{
-    800068ea:	1101                	addi	sp,sp,-32
-    800068ec:	ec06                	sd	ra,24(sp)
-    800068ee:	e822                	sd	s0,16(sp)
-    800068f0:	1000                	addi	s0,sp,32
+    800057c6:	fe442603          	lw	a2,-28(s0)
+    800057ca:	fd843583          	ld	a1,-40(s0)
+    800057ce:	fe843503          	ld	a0,-24(s0)
+    800057d2:	fffff097          	auipc	ra,0xfffff
+    800057d6:	4fa080e7          	jalr	1274(ra) # 80004ccc <filewrite>
+    800057da:	87aa                	mv	a5,a0
+}
+    800057dc:	853e                	mv	a0,a5
+    800057de:	70a2                	ld	ra,40(sp)
+    800057e0:	7402                	ld	s0,32(sp)
+    800057e2:	6145                	addi	sp,sp,48
+    800057e4:	8082                	ret
+
+00000000800057e6 <sys_close>:
+{
+    800057e6:	1101                	addi	sp,sp,-32
+    800057e8:	ec06                	sd	ra,24(sp)
+    800057ea:	e822                	sd	s0,16(sp)
+    800057ec:	1000                	addi	s0,sp,32
   if(argfd(0, &fd, &f) < 0)
-    800068f2:	fe040613          	addi	a2,s0,-32
-    800068f6:	fec40593          	addi	a1,s0,-20
-    800068fa:	4501                	li	a0,0
-    800068fc:	00000097          	auipc	ra,0x0
-    80006900:	cc2080e7          	jalr	-830(ra) # 800065be <argfd>
+    800057ee:	fe040613          	addi	a2,s0,-32
+    800057f2:	fec40593          	addi	a1,s0,-20
+    800057f6:	4501                	li	a0,0
+    800057f8:	00000097          	auipc	ra,0x0
+    800057fc:	cc2080e7          	jalr	-830(ra) # 800054ba <argfd>
     return -1;
-    80006904:	57fd                	li	a5,-1
+    80005800:	57fd                	li	a5,-1
   if(argfd(0, &fd, &f) < 0)
-    80006906:	02054563          	bltz	a0,80006930 <sys_close+0x46>
+    80005802:	02054463          	bltz	a0,8000582a <sys_close+0x44>
   myproc()->ofile[fd] = 0;
-    8000690a:	ffffb097          	auipc	ra,0xffffb
-    8000690e:	28a080e7          	jalr	650(ra) # 80001b94 <myproc>
-    80006912:	fec42783          	lw	a5,-20(s0)
-    80006916:	02078793          	addi	a5,a5,32
-    8000691a:	078e                	slli	a5,a5,0x3
-    8000691c:	97aa                	add	a5,a5,a0
-    8000691e:	0007b023          	sd	zero,0(a5)
+    80005806:	ffffc097          	auipc	ra,0xffffc
+    8000580a:	4ca080e7          	jalr	1226(ra) # 80001cd0 <myproc>
+    8000580e:	fec42783          	lw	a5,-20(s0)
+    80005812:	07e9                	addi	a5,a5,26
+    80005814:	078e                	slli	a5,a5,0x3
+    80005816:	97aa                	add	a5,a5,a0
+    80005818:	0007b023          	sd	zero,0(a5)
   fileclose(f);
-    80006922:	fe043503          	ld	a0,-32(s0)
-    80006926:	fffff097          	auipc	ra,0xfffff
-    8000692a:	2ae080e7          	jalr	686(ra) # 80005bd4 <fileclose>
+    8000581c:	fe043503          	ld	a0,-32(s0)
+    80005820:	fffff097          	auipc	ra,0xfffff
+    80005824:	2b0080e7          	jalr	688(ra) # 80004ad0 <fileclose>
   return 0;
-    8000692e:	4781                	li	a5,0
+    80005828:	4781                	li	a5,0
 }
-    80006930:	853e                	mv	a0,a5
-    80006932:	60e2                	ld	ra,24(sp)
-    80006934:	6442                	ld	s0,16(sp)
-    80006936:	6105                	addi	sp,sp,32
-    80006938:	8082                	ret
+    8000582a:	853e                	mv	a0,a5
+    8000582c:	60e2                	ld	ra,24(sp)
+    8000582e:	6442                	ld	s0,16(sp)
+    80005830:	6105                	addi	sp,sp,32
+    80005832:	8082                	ret
 
-000000008000693a <sys_fstat>:
+0000000080005834 <sys_fstat>:
 {
-    8000693a:	1101                	addi	sp,sp,-32
-    8000693c:	ec06                	sd	ra,24(sp)
-    8000693e:	e822                	sd	s0,16(sp)
-    80006940:	1000                	addi	s0,sp,32
+    80005834:	1101                	addi	sp,sp,-32
+    80005836:	ec06                	sd	ra,24(sp)
+    80005838:	e822                	sd	s0,16(sp)
+    8000583a:	1000                	addi	s0,sp,32
   if(argfd(0, 0, &f) < 0 || argaddr(1, &st) < 0)
-    80006942:	fe840613          	addi	a2,s0,-24
-    80006946:	4581                	li	a1,0
-    80006948:	4501                	li	a0,0
-    8000694a:	00000097          	auipc	ra,0x0
-    8000694e:	c74080e7          	jalr	-908(ra) # 800065be <argfd>
+    8000583c:	fe840613          	addi	a2,s0,-24
+    80005840:	4581                	li	a1,0
+    80005842:	4501                	li	a0,0
+    80005844:	00000097          	auipc	ra,0x0
+    80005848:	c76080e7          	jalr	-906(ra) # 800054ba <argfd>
     return -1;
-    80006952:	57fd                	li	a5,-1
+    8000584c:	57fd                	li	a5,-1
   if(argfd(0, 0, &f) < 0 || argaddr(1, &st) < 0)
-    80006954:	02054563          	bltz	a0,8000697e <sys_fstat+0x44>
-    80006958:	fe040593          	addi	a1,s0,-32
-    8000695c:	4505                	li	a0,1
-    8000695e:	ffffd097          	auipc	ra,0xffffd
-    80006962:	7dc080e7          	jalr	2012(ra) # 8000413a <argaddr>
+    8000584e:	02054563          	bltz	a0,80005878 <sys_fstat+0x44>
+    80005852:	fe040593          	addi	a1,s0,-32
+    80005856:	4505                	li	a0,1
+    80005858:	ffffe097          	auipc	ra,0xffffe
+    8000585c:	840080e7          	jalr	-1984(ra) # 80003098 <argaddr>
     return -1;
-    80006966:	57fd                	li	a5,-1
+    80005860:	57fd                	li	a5,-1
   if(argfd(0, 0, &f) < 0 || argaddr(1, &st) < 0)
-    80006968:	00054b63          	bltz	a0,8000697e <sys_fstat+0x44>
+    80005862:	00054b63          	bltz	a0,80005878 <sys_fstat+0x44>
   return filestat(f, st);
-    8000696c:	fe043583          	ld	a1,-32(s0)
-    80006970:	fe843503          	ld	a0,-24(s0)
-    80006974:	fffff097          	auipc	ra,0xfffff
-    80006978:	328080e7          	jalr	808(ra) # 80005c9c <filestat>
-    8000697c:	87aa                	mv	a5,a0
-}
-    8000697e:	853e                	mv	a0,a5
-    80006980:	60e2                	ld	ra,24(sp)
-    80006982:	6442                	ld	s0,16(sp)
-    80006984:	6105                	addi	sp,sp,32
-    80006986:	8082                	ret
-
-0000000080006988 <sys_link>:
-{
-    80006988:	7169                	addi	sp,sp,-304
-    8000698a:	f606                	sd	ra,296(sp)
-    8000698c:	f222                	sd	s0,288(sp)
-    8000698e:	ee26                	sd	s1,280(sp)
-    80006990:	ea4a                	sd	s2,272(sp)
-    80006992:	1a00                	addi	s0,sp,304
+    80005866:	fe043583          	ld	a1,-32(s0)
+    8000586a:	fe843503          	ld	a0,-24(s0)
+    8000586e:	fffff097          	auipc	ra,0xfffff
+    80005872:	32a080e7          	jalr	810(ra) # 80004b98 <filestat>
+    80005876:	87aa                	mv	a5,a0
+}
+    80005878:	853e                	mv	a0,a5
+    8000587a:	60e2                	ld	ra,24(sp)
+    8000587c:	6442                	ld	s0,16(sp)
+    8000587e:	6105                	addi	sp,sp,32
+    80005880:	8082                	ret
+
+0000000080005882 <sys_link>:
+{
+    80005882:	7169                	addi	sp,sp,-304
+    80005884:	f606                	sd	ra,296(sp)
+    80005886:	f222                	sd	s0,288(sp)
+    80005888:	ee26                	sd	s1,280(sp)
+    8000588a:	ea4a                	sd	s2,272(sp)
+    8000588c:	1a00                	addi	s0,sp,304
   if(argstr(0, old, MAXPATH) < 0 || argstr(1, new, MAXPATH) < 0)
-    80006994:	08000613          	li	a2,128
-    80006998:	ed040593          	addi	a1,s0,-304
-    8000699c:	4501                	li	a0,0
-    8000699e:	ffffd097          	auipc	ra,0xffffd
-    800069a2:	7be080e7          	jalr	1982(ra) # 8000415c <argstr>
+    8000588e:	08000613          	li	a2,128
+    80005892:	ed040593          	addi	a1,s0,-304
+    80005896:	4501                	li	a0,0
+    80005898:	ffffe097          	auipc	ra,0xffffe
+    8000589c:	822080e7          	jalr	-2014(ra) # 800030ba <argstr>
     return -1;
-    800069a6:	57fd                	li	a5,-1
+    800058a0:	57fd                	li	a5,-1
   if(argstr(0, old, MAXPATH) < 0 || argstr(1, new, MAXPATH) < 0)
-    800069a8:	10054e63          	bltz	a0,80006ac4 <sys_link+0x13c>
-    800069ac:	08000613          	li	a2,128
-    800069b0:	f5040593          	addi	a1,s0,-176
-    800069b4:	4505                	li	a0,1
-    800069b6:	ffffd097          	auipc	ra,0xffffd
-    800069ba:	7a6080e7          	jalr	1958(ra) # 8000415c <argstr>
+    800058a2:	10054e63          	bltz	a0,800059be <sys_link+0x13c>
+    800058a6:	08000613          	li	a2,128
+    800058aa:	f5040593          	addi	a1,s0,-176
+    800058ae:	4505                	li	a0,1
+    800058b0:	ffffe097          	auipc	ra,0xffffe
+    800058b4:	80a080e7          	jalr	-2038(ra) # 800030ba <argstr>
     return -1;
-    800069be:	57fd                	li	a5,-1
+    800058b8:	57fd                	li	a5,-1
   if(argstr(0, old, MAXPATH) < 0 || argstr(1, new, MAXPATH) < 0)
-    800069c0:	10054263          	bltz	a0,80006ac4 <sys_link+0x13c>
+    800058ba:	10054263          	bltz	a0,800059be <sys_link+0x13c>
   begin_op();
-    800069c4:	fffff097          	auipc	ra,0xfffff
-    800069c8:	d44080e7          	jalr	-700(ra) # 80005708 <begin_op>
+    800058be:	fffff097          	auipc	ra,0xfffff
+    800058c2:	d46080e7          	jalr	-698(ra) # 80004604 <begin_op>
   if((ip = namei(old)) == 0){
-    800069cc:	ed040513          	addi	a0,s0,-304
-    800069d0:	fffff097          	auipc	ra,0xfffff
-    800069d4:	b1c080e7          	jalr	-1252(ra) # 800054ec <namei>
-    800069d8:	84aa                	mv	s1,a0
-    800069da:	c551                	beqz	a0,80006a66 <sys_link+0xde>
+    800058c6:	ed040513          	addi	a0,s0,-304
+    800058ca:	fffff097          	auipc	ra,0xfffff
+    800058ce:	b1e080e7          	jalr	-1250(ra) # 800043e8 <namei>
+    800058d2:	84aa                	mv	s1,a0
+    800058d4:	c551                	beqz	a0,80005960 <sys_link+0xde>
   ilock(ip);
-    800069dc:	ffffe097          	auipc	ra,0xffffe
-    800069e0:	35a080e7          	jalr	858(ra) # 80004d36 <ilock>
+    800058d6:	ffffe097          	auipc	ra,0xffffe
+    800058da:	35c080e7          	jalr	860(ra) # 80003c32 <ilock>
   if(ip->type == T_DIR){
-    800069e4:	04449703          	lh	a4,68(s1)
-    800069e8:	4785                	li	a5,1
-    800069ea:	08f70463          	beq	a4,a5,80006a72 <sys_link+0xea>
+    800058de:	04449703          	lh	a4,68(s1)
+    800058e2:	4785                	li	a5,1
+    800058e4:	08f70463          	beq	a4,a5,8000596c <sys_link+0xea>
   ip->nlink++;
-    800069ee:	04a4d783          	lhu	a5,74(s1)
-    800069f2:	2785                	addiw	a5,a5,1
-    800069f4:	04f49523          	sh	a5,74(s1)
+    800058e8:	04a4d783          	lhu	a5,74(s1)
+    800058ec:	2785                	addiw	a5,a5,1
+    800058ee:	04f49523          	sh	a5,74(s1)
   iupdate(ip);
-    800069f8:	8526                	mv	a0,s1
-    800069fa:	ffffe097          	auipc	ra,0xffffe
-    800069fe:	272080e7          	jalr	626(ra) # 80004c6c <iupdate>
+    800058f2:	8526                	mv	a0,s1
+    800058f4:	ffffe097          	auipc	ra,0xffffe
+    800058f8:	274080e7          	jalr	628(ra) # 80003b68 <iupdate>
   iunlock(ip);
-    80006a02:	8526                	mv	a0,s1
-    80006a04:	ffffe097          	auipc	ra,0xffffe
-    80006a08:	3f4080e7          	jalr	1012(ra) # 80004df8 <iunlock>
+    800058fc:	8526                	mv	a0,s1
+    800058fe:	ffffe097          	auipc	ra,0xffffe
+    80005902:	3f6080e7          	jalr	1014(ra) # 80003cf4 <iunlock>
   if((dp = nameiparent(new, name)) == 0)
-    80006a0c:	fd040593          	addi	a1,s0,-48
-    80006a10:	f5040513          	addi	a0,s0,-176
-    80006a14:	fffff097          	auipc	ra,0xfffff
-    80006a18:	af6080e7          	jalr	-1290(ra) # 8000550a <nameiparent>
-    80006a1c:	892a                	mv	s2,a0
-    80006a1e:	c935                	beqz	a0,80006a92 <sys_link+0x10a>
+    80005906:	fd040593          	addi	a1,s0,-48
+    8000590a:	f5040513          	addi	a0,s0,-176
+    8000590e:	fffff097          	auipc	ra,0xfffff
+    80005912:	af8080e7          	jalr	-1288(ra) # 80004406 <nameiparent>
+    80005916:	892a                	mv	s2,a0
+    80005918:	c935                	beqz	a0,8000598c <sys_link+0x10a>
   ilock(dp);
-    80006a20:	ffffe097          	auipc	ra,0xffffe
-    80006a24:	316080e7          	jalr	790(ra) # 80004d36 <ilock>
+    8000591a:	ffffe097          	auipc	ra,0xffffe
+    8000591e:	318080e7          	jalr	792(ra) # 80003c32 <ilock>
   if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
-    80006a28:	00092703          	lw	a4,0(s2)
-    80006a2c:	409c                	lw	a5,0(s1)
-    80006a2e:	04f71d63          	bne	a4,a5,80006a88 <sys_link+0x100>
-    80006a32:	40d0                	lw	a2,4(s1)
-    80006a34:	fd040593          	addi	a1,s0,-48
-    80006a38:	854a                	mv	a0,s2
-    80006a3a:	fffff097          	auipc	ra,0xfffff
-    80006a3e:	9f0080e7          	jalr	-1552(ra) # 8000542a <dirlink>
-    80006a42:	04054363          	bltz	a0,80006a88 <sys_link+0x100>
+    80005922:	00092703          	lw	a4,0(s2)
+    80005926:	409c                	lw	a5,0(s1)
+    80005928:	04f71d63          	bne	a4,a5,80005982 <sys_link+0x100>
+    8000592c:	40d0                	lw	a2,4(s1)
+    8000592e:	fd040593          	addi	a1,s0,-48
+    80005932:	854a                	mv	a0,s2
+    80005934:	fffff097          	auipc	ra,0xfffff
+    80005938:	9f2080e7          	jalr	-1550(ra) # 80004326 <dirlink>
+    8000593c:	04054363          	bltz	a0,80005982 <sys_link+0x100>
   iunlockput(dp);
-    80006a46:	854a                	mv	a0,s2
-    80006a48:	ffffe097          	auipc	ra,0xffffe
-    80006a4c:	550080e7          	jalr	1360(ra) # 80004f98 <iunlockput>
+    80005940:	854a                	mv	a0,s2
+    80005942:	ffffe097          	auipc	ra,0xffffe
+    80005946:	552080e7          	jalr	1362(ra) # 80003e94 <iunlockput>
   iput(ip);
-    80006a50:	8526                	mv	a0,s1
-    80006a52:	ffffe097          	auipc	ra,0xffffe
-    80006a56:	49e080e7          	jalr	1182(ra) # 80004ef0 <iput>
+    8000594a:	8526                	mv	a0,s1
+    8000594c:	ffffe097          	auipc	ra,0xffffe
+    80005950:	4a0080e7          	jalr	1184(ra) # 80003dec <iput>
   end_op();
-    80006a5a:	fffff097          	auipc	ra,0xfffff
-    80006a5e:	d2e080e7          	jalr	-722(ra) # 80005788 <end_op>
+    80005954:	fffff097          	auipc	ra,0xfffff
+    80005958:	d30080e7          	jalr	-720(ra) # 80004684 <end_op>
   return 0;
-    80006a62:	4781                	li	a5,0
-    80006a64:	a085                	j	80006ac4 <sys_link+0x13c>
+    8000595c:	4781                	li	a5,0
+    8000595e:	a085                	j	800059be <sys_link+0x13c>
     end_op();
-    80006a66:	fffff097          	auipc	ra,0xfffff
-    80006a6a:	d22080e7          	jalr	-734(ra) # 80005788 <end_op>
+    80005960:	fffff097          	auipc	ra,0xfffff
+    80005964:	d24080e7          	jalr	-732(ra) # 80004684 <end_op>
     return -1;
-    80006a6e:	57fd                	li	a5,-1
-    80006a70:	a891                	j	80006ac4 <sys_link+0x13c>
+    80005968:	57fd                	li	a5,-1
+    8000596a:	a891                	j	800059be <sys_link+0x13c>
     iunlockput(ip);
-    80006a72:	8526                	mv	a0,s1
-    80006a74:	ffffe097          	auipc	ra,0xffffe
-    80006a78:	524080e7          	jalr	1316(ra) # 80004f98 <iunlockput>
+    8000596c:	8526                	mv	a0,s1
+    8000596e:	ffffe097          	auipc	ra,0xffffe
+    80005972:	526080e7          	jalr	1318(ra) # 80003e94 <iunlockput>
     end_op();
-    80006a7c:	fffff097          	auipc	ra,0xfffff
-    80006a80:	d0c080e7          	jalr	-756(ra) # 80005788 <end_op>
+    80005976:	fffff097          	auipc	ra,0xfffff
+    8000597a:	d0e080e7          	jalr	-754(ra) # 80004684 <end_op>
     return -1;
-    80006a84:	57fd                	li	a5,-1
-    80006a86:	a83d                	j	80006ac4 <sys_link+0x13c>
+    8000597e:	57fd                	li	a5,-1
+    80005980:	a83d                	j	800059be <sys_link+0x13c>
     iunlockput(dp);
-    80006a88:	854a                	mv	a0,s2
-    80006a8a:	ffffe097          	auipc	ra,0xffffe
-    80006a8e:	50e080e7          	jalr	1294(ra) # 80004f98 <iunlockput>
+    80005982:	854a                	mv	a0,s2
+    80005984:	ffffe097          	auipc	ra,0xffffe
+    80005988:	510080e7          	jalr	1296(ra) # 80003e94 <iunlockput>
   ilock(ip);
-    80006a92:	8526                	mv	a0,s1
-    80006a94:	ffffe097          	auipc	ra,0xffffe
-    80006a98:	2a2080e7          	jalr	674(ra) # 80004d36 <ilock>
+    8000598c:	8526                	mv	a0,s1
+    8000598e:	ffffe097          	auipc	ra,0xffffe
+    80005992:	2a4080e7          	jalr	676(ra) # 80003c32 <ilock>
   ip->nlink--;
-    80006a9c:	04a4d783          	lhu	a5,74(s1)
-    80006aa0:	37fd                	addiw	a5,a5,-1
-    80006aa2:	04f49523          	sh	a5,74(s1)
+    80005996:	04a4d783          	lhu	a5,74(s1)
+    8000599a:	37fd                	addiw	a5,a5,-1
+    8000599c:	04f49523          	sh	a5,74(s1)
   iupdate(ip);
-    80006aa6:	8526                	mv	a0,s1
-    80006aa8:	ffffe097          	auipc	ra,0xffffe
-    80006aac:	1c4080e7          	jalr	452(ra) # 80004c6c <iupdate>
+    800059a0:	8526                	mv	a0,s1
+    800059a2:	ffffe097          	auipc	ra,0xffffe
+    800059a6:	1c6080e7          	jalr	454(ra) # 80003b68 <iupdate>
   iunlockput(ip);
-    80006ab0:	8526                	mv	a0,s1
-    80006ab2:	ffffe097          	auipc	ra,0xffffe
-    80006ab6:	4e6080e7          	jalr	1254(ra) # 80004f98 <iunlockput>
+    800059aa:	8526                	mv	a0,s1
+    800059ac:	ffffe097          	auipc	ra,0xffffe
+    800059b0:	4e8080e7          	jalr	1256(ra) # 80003e94 <iunlockput>
   end_op();
-    80006aba:	fffff097          	auipc	ra,0xfffff
-    80006abe:	cce080e7          	jalr	-818(ra) # 80005788 <end_op>
+    800059b4:	fffff097          	auipc	ra,0xfffff
+    800059b8:	cd0080e7          	jalr	-816(ra) # 80004684 <end_op>
   return -1;
-    80006ac2:	57fd                	li	a5,-1
-}
-    80006ac4:	853e                	mv	a0,a5
-    80006ac6:	70b2                	ld	ra,296(sp)
-    80006ac8:	7412                	ld	s0,288(sp)
-    80006aca:	64f2                	ld	s1,280(sp)
-    80006acc:	6952                	ld	s2,272(sp)
-    80006ace:	6155                	addi	sp,sp,304
-    80006ad0:	8082                	ret
-
-0000000080006ad2 <sys_unlink>:
-{
-    80006ad2:	7151                	addi	sp,sp,-240
-    80006ad4:	f586                	sd	ra,232(sp)
-    80006ad6:	f1a2                	sd	s0,224(sp)
-    80006ad8:	eda6                	sd	s1,216(sp)
-    80006ada:	e9ca                	sd	s2,208(sp)
-    80006adc:	e5ce                	sd	s3,200(sp)
-    80006ade:	1980                	addi	s0,sp,240
+    800059bc:	57fd                	li	a5,-1
+}
+    800059be:	853e                	mv	a0,a5
+    800059c0:	70b2                	ld	ra,296(sp)
+    800059c2:	7412                	ld	s0,288(sp)
+    800059c4:	64f2                	ld	s1,280(sp)
+    800059c6:	6952                	ld	s2,272(sp)
+    800059c8:	6155                	addi	sp,sp,304
+    800059ca:	8082                	ret
+
+00000000800059cc <sys_unlink>:
+{
+    800059cc:	7151                	addi	sp,sp,-240
+    800059ce:	f586                	sd	ra,232(sp)
+    800059d0:	f1a2                	sd	s0,224(sp)
+    800059d2:	eda6                	sd	s1,216(sp)
+    800059d4:	e9ca                	sd	s2,208(sp)
+    800059d6:	e5ce                	sd	s3,200(sp)
+    800059d8:	1980                	addi	s0,sp,240
   if(argstr(0, path, MAXPATH) < 0)
-    80006ae0:	08000613          	li	a2,128
-    80006ae4:	f3040593          	addi	a1,s0,-208
-    80006ae8:	4501                	li	a0,0
-    80006aea:	ffffd097          	auipc	ra,0xffffd
-    80006aee:	672080e7          	jalr	1650(ra) # 8000415c <argstr>
-    80006af2:	18054163          	bltz	a0,80006c74 <sys_unlink+0x1a2>
+    800059da:	08000613          	li	a2,128
+    800059de:	f3040593          	addi	a1,s0,-208
+    800059e2:	4501                	li	a0,0
+    800059e4:	ffffd097          	auipc	ra,0xffffd
+    800059e8:	6d6080e7          	jalr	1750(ra) # 800030ba <argstr>
+    800059ec:	18054163          	bltz	a0,80005b6e <sys_unlink+0x1a2>
   begin_op();
-    80006af6:	fffff097          	auipc	ra,0xfffff
-    80006afa:	c12080e7          	jalr	-1006(ra) # 80005708 <begin_op>
+    800059f0:	fffff097          	auipc	ra,0xfffff
+    800059f4:	c14080e7          	jalr	-1004(ra) # 80004604 <begin_op>
   if((dp = nameiparent(path, name)) == 0){
-    80006afe:	fb040593          	addi	a1,s0,-80
-    80006b02:	f3040513          	addi	a0,s0,-208
-    80006b06:	fffff097          	auipc	ra,0xfffff
-    80006b0a:	a04080e7          	jalr	-1532(ra) # 8000550a <nameiparent>
-    80006b0e:	84aa                	mv	s1,a0
-    80006b10:	c979                	beqz	a0,80006be6 <sys_unlink+0x114>
+    800059f8:	fb040593          	addi	a1,s0,-80
+    800059fc:	f3040513          	addi	a0,s0,-208
+    80005a00:	fffff097          	auipc	ra,0xfffff
+    80005a04:	a06080e7          	jalr	-1530(ra) # 80004406 <nameiparent>
+    80005a08:	84aa                	mv	s1,a0
+    80005a0a:	c979                	beqz	a0,80005ae0 <sys_unlink+0x114>
   ilock(dp);
-    80006b12:	ffffe097          	auipc	ra,0xffffe
-    80006b16:	224080e7          	jalr	548(ra) # 80004d36 <ilock>
+    80005a0c:	ffffe097          	auipc	ra,0xffffe
+    80005a10:	226080e7          	jalr	550(ra) # 80003c32 <ilock>
   if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
-    80006b1a:	00003597          	auipc	a1,0x3
-    80006b1e:	fe658593          	addi	a1,a1,-26 # 80009b00 <syscalls+0x2d8>
-    80006b22:	fb040513          	addi	a0,s0,-80
-    80006b26:	ffffe097          	auipc	ra,0xffffe
-    80006b2a:	6da080e7          	jalr	1754(ra) # 80005200 <namecmp>
-    80006b2e:	14050a63          	beqz	a0,80006c82 <sys_unlink+0x1b0>
-    80006b32:	00003597          	auipc	a1,0x3
-    80006b36:	fd658593          	addi	a1,a1,-42 # 80009b08 <syscalls+0x2e0>
-    80006b3a:	fb040513          	addi	a0,s0,-80
-    80006b3e:	ffffe097          	auipc	ra,0xffffe
-    80006b42:	6c2080e7          	jalr	1730(ra) # 80005200 <namecmp>
-    80006b46:	12050e63          	beqz	a0,80006c82 <sys_unlink+0x1b0>
+    80005a14:	00003597          	auipc	a1,0x3
+    80005a18:	d7c58593          	addi	a1,a1,-644 # 80008790 <syscalls+0x2c0>
+    80005a1c:	fb040513          	addi	a0,s0,-80
+    80005a20:	ffffe097          	auipc	ra,0xffffe
+    80005a24:	6dc080e7          	jalr	1756(ra) # 800040fc <namecmp>
+    80005a28:	14050a63          	beqz	a0,80005b7c <sys_unlink+0x1b0>
+    80005a2c:	00003597          	auipc	a1,0x3
+    80005a30:	d6c58593          	addi	a1,a1,-660 # 80008798 <syscalls+0x2c8>
+    80005a34:	fb040513          	addi	a0,s0,-80
+    80005a38:	ffffe097          	auipc	ra,0xffffe
+    80005a3c:	6c4080e7          	jalr	1732(ra) # 800040fc <namecmp>
+    80005a40:	12050e63          	beqz	a0,80005b7c <sys_unlink+0x1b0>
   if((ip = dirlookup(dp, name, &off)) == 0)
-    80006b4a:	f2c40613          	addi	a2,s0,-212
-    80006b4e:	fb040593          	addi	a1,s0,-80
-    80006b52:	8526                	mv	a0,s1
-    80006b54:	ffffe097          	auipc	ra,0xffffe
-    80006b58:	6c6080e7          	jalr	1734(ra) # 8000521a <dirlookup>
-    80006b5c:	892a                	mv	s2,a0
-    80006b5e:	12050263          	beqz	a0,80006c82 <sys_unlink+0x1b0>
+    80005a44:	f2c40613          	addi	a2,s0,-212
+    80005a48:	fb040593          	addi	a1,s0,-80
+    80005a4c:	8526                	mv	a0,s1
+    80005a4e:	ffffe097          	auipc	ra,0xffffe
+    80005a52:	6c8080e7          	jalr	1736(ra) # 80004116 <dirlookup>
+    80005a56:	892a                	mv	s2,a0
+    80005a58:	12050263          	beqz	a0,80005b7c <sys_unlink+0x1b0>
   ilock(ip);
-    80006b62:	ffffe097          	auipc	ra,0xffffe
-    80006b66:	1d4080e7          	jalr	468(ra) # 80004d36 <ilock>
+    80005a5c:	ffffe097          	auipc	ra,0xffffe
+    80005a60:	1d6080e7          	jalr	470(ra) # 80003c32 <ilock>
   if(ip->nlink < 1)
-    80006b6a:	04a91783          	lh	a5,74(s2)
-    80006b6e:	08f05263          	blez	a5,80006bf2 <sys_unlink+0x120>
+    80005a64:	04a91783          	lh	a5,74(s2)
+    80005a68:	08f05263          	blez	a5,80005aec <sys_unlink+0x120>
   if(ip->type == T_DIR && !isdirempty(ip)){
-    80006b72:	04491703          	lh	a4,68(s2)
-    80006b76:	4785                	li	a5,1
-    80006b78:	08f70563          	beq	a4,a5,80006c02 <sys_unlink+0x130>
+    80005a6c:	04491703          	lh	a4,68(s2)
+    80005a70:	4785                	li	a5,1
+    80005a72:	08f70563          	beq	a4,a5,80005afc <sys_unlink+0x130>
   memset(&de, 0, sizeof(de));
-    80006b7c:	4641                	li	a2,16
-    80006b7e:	4581                	li	a1,0
-    80006b80:	fc040513          	addi	a0,s0,-64
-    80006b84:	ffffa097          	auipc	ra,0xffffa
-    80006b88:	15c080e7          	jalr	348(ra) # 80000ce0 <memset>
+    80005a76:	4641                	li	a2,16
+    80005a78:	4581                	li	a1,0
+    80005a7a:	fc040513          	addi	a0,s0,-64
+    80005a7e:	ffffb097          	auipc	ra,0xffffb
+    80005a82:	262080e7          	jalr	610(ra) # 80000ce0 <memset>
   if(writei(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
-    80006b8c:	4741                	li	a4,16
-    80006b8e:	f2c42683          	lw	a3,-212(s0)
-    80006b92:	fc040613          	addi	a2,s0,-64
-    80006b96:	4581                	li	a1,0
-    80006b98:	8526                	mv	a0,s1
-    80006b9a:	ffffe097          	auipc	ra,0xffffe
-    80006b9e:	548080e7          	jalr	1352(ra) # 800050e2 <writei>
-    80006ba2:	47c1                	li	a5,16
-    80006ba4:	0af51563          	bne	a0,a5,80006c4e <sys_unlink+0x17c>
+    80005a86:	4741                	li	a4,16
+    80005a88:	f2c42683          	lw	a3,-212(s0)
+    80005a8c:	fc040613          	addi	a2,s0,-64
+    80005a90:	4581                	li	a1,0
+    80005a92:	8526                	mv	a0,s1
+    80005a94:	ffffe097          	auipc	ra,0xffffe
+    80005a98:	54a080e7          	jalr	1354(ra) # 80003fde <writei>
+    80005a9c:	47c1                	li	a5,16
+    80005a9e:	0af51563          	bne	a0,a5,80005b48 <sys_unlink+0x17c>
   if(ip->type == T_DIR){
-    80006ba8:	04491703          	lh	a4,68(s2)
-    80006bac:	4785                	li	a5,1
-    80006bae:	0af70863          	beq	a4,a5,80006c5e <sys_unlink+0x18c>
+    80005aa2:	04491703          	lh	a4,68(s2)
+    80005aa6:	4785                	li	a5,1
+    80005aa8:	0af70863          	beq	a4,a5,80005b58 <sys_unlink+0x18c>
   iunlockput(dp);
-    80006bb2:	8526                	mv	a0,s1
-    80006bb4:	ffffe097          	auipc	ra,0xffffe
-    80006bb8:	3e4080e7          	jalr	996(ra) # 80004f98 <iunlockput>
+    80005aac:	8526                	mv	a0,s1
+    80005aae:	ffffe097          	auipc	ra,0xffffe
+    80005ab2:	3e6080e7          	jalr	998(ra) # 80003e94 <iunlockput>
   ip->nlink--;
-    80006bbc:	04a95783          	lhu	a5,74(s2)
-    80006bc0:	37fd                	addiw	a5,a5,-1
-    80006bc2:	04f91523          	sh	a5,74(s2)
+    80005ab6:	04a95783          	lhu	a5,74(s2)
+    80005aba:	37fd                	addiw	a5,a5,-1
+    80005abc:	04f91523          	sh	a5,74(s2)
   iupdate(ip);
-    80006bc6:	854a                	mv	a0,s2
-    80006bc8:	ffffe097          	auipc	ra,0xffffe
-    80006bcc:	0a4080e7          	jalr	164(ra) # 80004c6c <iupdate>
+    80005ac0:	854a                	mv	a0,s2
+    80005ac2:	ffffe097          	auipc	ra,0xffffe
+    80005ac6:	0a6080e7          	jalr	166(ra) # 80003b68 <iupdate>
   iunlockput(ip);
-    80006bd0:	854a                	mv	a0,s2
-    80006bd2:	ffffe097          	auipc	ra,0xffffe
-    80006bd6:	3c6080e7          	jalr	966(ra) # 80004f98 <iunlockput>
+    80005aca:	854a                	mv	a0,s2
+    80005acc:	ffffe097          	auipc	ra,0xffffe
+    80005ad0:	3c8080e7          	jalr	968(ra) # 80003e94 <iunlockput>
   end_op();
-    80006bda:	fffff097          	auipc	ra,0xfffff
-    80006bde:	bae080e7          	jalr	-1106(ra) # 80005788 <end_op>
+    80005ad4:	fffff097          	auipc	ra,0xfffff
+    80005ad8:	bb0080e7          	jalr	-1104(ra) # 80004684 <end_op>
   return 0;
-    80006be2:	4501                	li	a0,0
-    80006be4:	a84d                	j	80006c96 <sys_unlink+0x1c4>
+    80005adc:	4501                	li	a0,0
+    80005ade:	a84d                	j	80005b90 <sys_unlink+0x1c4>
     end_op();
-    80006be6:	fffff097          	auipc	ra,0xfffff
-    80006bea:	ba2080e7          	jalr	-1118(ra) # 80005788 <end_op>
+    80005ae0:	fffff097          	auipc	ra,0xfffff
+    80005ae4:	ba4080e7          	jalr	-1116(ra) # 80004684 <end_op>
     return -1;
-    80006bee:	557d                	li	a0,-1
-    80006bf0:	a05d                	j	80006c96 <sys_unlink+0x1c4>
+    80005ae8:	557d                	li	a0,-1
+    80005aea:	a05d                	j	80005b90 <sys_unlink+0x1c4>
     panic("unlink: nlink < 1");
-    80006bf2:	00003517          	auipc	a0,0x3
-    80006bf6:	f3e50513          	addi	a0,a0,-194 # 80009b30 <syscalls+0x308>
-    80006bfa:	ffffa097          	auipc	ra,0xffffa
-    80006bfe:	944080e7          	jalr	-1724(ra) # 8000053e <panic>
+    80005aec:	00003517          	auipc	a0,0x3
+    80005af0:	cd450513          	addi	a0,a0,-812 # 800087c0 <syscalls+0x2f0>
+    80005af4:	ffffb097          	auipc	ra,0xffffb
+    80005af8:	a4a080e7          	jalr	-1462(ra) # 8000053e <panic>
   for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
-    80006c02:	04c92703          	lw	a4,76(s2)
-    80006c06:	02000793          	li	a5,32
-    80006c0a:	f6e7f9e3          	bgeu	a5,a4,80006b7c <sys_unlink+0xaa>
-    80006c0e:	02000993          	li	s3,32
+    80005afc:	04c92703          	lw	a4,76(s2)
+    80005b00:	02000793          	li	a5,32
+    80005b04:	f6e7f9e3          	bgeu	a5,a4,80005a76 <sys_unlink+0xaa>
+    80005b08:	02000993          	li	s3,32
     if(readi(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
-    80006c12:	4741                	li	a4,16
-    80006c14:	86ce                	mv	a3,s3
-    80006c16:	f1840613          	addi	a2,s0,-232
-    80006c1a:	4581                	li	a1,0
-    80006c1c:	854a                	mv	a0,s2
-    80006c1e:	ffffe097          	auipc	ra,0xffffe
-    80006c22:	3cc080e7          	jalr	972(ra) # 80004fea <readi>
-    80006c26:	47c1                	li	a5,16
-    80006c28:	00f51b63          	bne	a0,a5,80006c3e <sys_unlink+0x16c>
+    80005b0c:	4741                	li	a4,16
+    80005b0e:	86ce                	mv	a3,s3
+    80005b10:	f1840613          	addi	a2,s0,-232
+    80005b14:	4581                	li	a1,0
+    80005b16:	854a                	mv	a0,s2
+    80005b18:	ffffe097          	auipc	ra,0xffffe
+    80005b1c:	3ce080e7          	jalr	974(ra) # 80003ee6 <readi>
+    80005b20:	47c1                	li	a5,16
+    80005b22:	00f51b63          	bne	a0,a5,80005b38 <sys_unlink+0x16c>
     if(de.inum != 0)
-    80006c2c:	f1845783          	lhu	a5,-232(s0)
-    80006c30:	e7a1                	bnez	a5,80006c78 <sys_unlink+0x1a6>
+    80005b26:	f1845783          	lhu	a5,-232(s0)
+    80005b2a:	e7a1                	bnez	a5,80005b72 <sys_unlink+0x1a6>
   for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
-    80006c32:	29c1                	addiw	s3,s3,16
-    80006c34:	04c92783          	lw	a5,76(s2)
-    80006c38:	fcf9ede3          	bltu	s3,a5,80006c12 <sys_unlink+0x140>
-    80006c3c:	b781                	j	80006b7c <sys_unlink+0xaa>
+    80005b2c:	29c1                	addiw	s3,s3,16
+    80005b2e:	04c92783          	lw	a5,76(s2)
+    80005b32:	fcf9ede3          	bltu	s3,a5,80005b0c <sys_unlink+0x140>
+    80005b36:	b781                	j	80005a76 <sys_unlink+0xaa>
       panic("isdirempty: readi");
-    80006c3e:	00003517          	auipc	a0,0x3
-    80006c42:	f0a50513          	addi	a0,a0,-246 # 80009b48 <syscalls+0x320>
-    80006c46:	ffffa097          	auipc	ra,0xffffa
-    80006c4a:	8f8080e7          	jalr	-1800(ra) # 8000053e <panic>
+    80005b38:	00003517          	auipc	a0,0x3
+    80005b3c:	ca050513          	addi	a0,a0,-864 # 800087d8 <syscalls+0x308>
+    80005b40:	ffffb097          	auipc	ra,0xffffb
+    80005b44:	9fe080e7          	jalr	-1538(ra) # 8000053e <panic>
     panic("unlink: writei");
-    80006c4e:	00003517          	auipc	a0,0x3
-    80006c52:	f1250513          	addi	a0,a0,-238 # 80009b60 <syscalls+0x338>
-    80006c56:	ffffa097          	auipc	ra,0xffffa
-    80006c5a:	8e8080e7          	jalr	-1816(ra) # 8000053e <panic>
+    80005b48:	00003517          	auipc	a0,0x3
+    80005b4c:	ca850513          	addi	a0,a0,-856 # 800087f0 <syscalls+0x320>
+    80005b50:	ffffb097          	auipc	ra,0xffffb
+    80005b54:	9ee080e7          	jalr	-1554(ra) # 8000053e <panic>
     dp->nlink--;
-    80006c5e:	04a4d783          	lhu	a5,74(s1)
-    80006c62:	37fd                	addiw	a5,a5,-1
-    80006c64:	04f49523          	sh	a5,74(s1)
+    80005b58:	04a4d783          	lhu	a5,74(s1)
+    80005b5c:	37fd                	addiw	a5,a5,-1
+    80005b5e:	04f49523          	sh	a5,74(s1)
     iupdate(dp);
-    80006c68:	8526                	mv	a0,s1
-    80006c6a:	ffffe097          	auipc	ra,0xffffe
-    80006c6e:	002080e7          	jalr	2(ra) # 80004c6c <iupdate>
-    80006c72:	b781                	j	80006bb2 <sys_unlink+0xe0>
+    80005b62:	8526                	mv	a0,s1
+    80005b64:	ffffe097          	auipc	ra,0xffffe
+    80005b68:	004080e7          	jalr	4(ra) # 80003b68 <iupdate>
+    80005b6c:	b781                	j	80005aac <sys_unlink+0xe0>
     return -1;
-    80006c74:	557d                	li	a0,-1
-    80006c76:	a005                	j	80006c96 <sys_unlink+0x1c4>
+    80005b6e:	557d                	li	a0,-1
+    80005b70:	a005                	j	80005b90 <sys_unlink+0x1c4>
     iunlockput(ip);
-    80006c78:	854a                	mv	a0,s2
-    80006c7a:	ffffe097          	auipc	ra,0xffffe
-    80006c7e:	31e080e7          	jalr	798(ra) # 80004f98 <iunlockput>
+    80005b72:	854a                	mv	a0,s2
+    80005b74:	ffffe097          	auipc	ra,0xffffe
+    80005b78:	320080e7          	jalr	800(ra) # 80003e94 <iunlockput>
   iunlockput(dp);
-    80006c82:	8526                	mv	a0,s1
-    80006c84:	ffffe097          	auipc	ra,0xffffe
-    80006c88:	314080e7          	jalr	788(ra) # 80004f98 <iunlockput>
+    80005b7c:	8526                	mv	a0,s1
+    80005b7e:	ffffe097          	auipc	ra,0xffffe
+    80005b82:	316080e7          	jalr	790(ra) # 80003e94 <iunlockput>
   end_op();
-    80006c8c:	fffff097          	auipc	ra,0xfffff
-    80006c90:	afc080e7          	jalr	-1284(ra) # 80005788 <end_op>
+    80005b86:	fffff097          	auipc	ra,0xfffff
+    80005b8a:	afe080e7          	jalr	-1282(ra) # 80004684 <end_op>
   return -1;
-    80006c94:	557d                	li	a0,-1
+    80005b8e:	557d                	li	a0,-1
 }
-    80006c96:	70ae                	ld	ra,232(sp)
-    80006c98:	740e                	ld	s0,224(sp)
-    80006c9a:	64ee                	ld	s1,216(sp)
-    80006c9c:	694e                	ld	s2,208(sp)
-    80006c9e:	69ae                	ld	s3,200(sp)
-    80006ca0:	616d                	addi	sp,sp,240
-    80006ca2:	8082                	ret
+    80005b90:	70ae                	ld	ra,232(sp)
+    80005b92:	740e                	ld	s0,224(sp)
+    80005b94:	64ee                	ld	s1,216(sp)
+    80005b96:	694e                	ld	s2,208(sp)
+    80005b98:	69ae                	ld	s3,200(sp)
+    80005b9a:	616d                	addi	sp,sp,240
+    80005b9c:	8082                	ret
 
-0000000080006ca4 <sys_open>:
+0000000080005b9e <sys_open>:
 
 uint64
 sys_open(void)
 {
-    80006ca4:	7131                	addi	sp,sp,-192
-    80006ca6:	fd06                	sd	ra,184(sp)
-    80006ca8:	f922                	sd	s0,176(sp)
-    80006caa:	f526                	sd	s1,168(sp)
-    80006cac:	f14a                	sd	s2,160(sp)
-    80006cae:	ed4e                	sd	s3,152(sp)
-    80006cb0:	0180                	addi	s0,sp,192
+    80005b9e:	7131                	addi	sp,sp,-192
+    80005ba0:	fd06                	sd	ra,184(sp)
+    80005ba2:	f922                	sd	s0,176(sp)
+    80005ba4:	f526                	sd	s1,168(sp)
+    80005ba6:	f14a                	sd	s2,160(sp)
+    80005ba8:	ed4e                	sd	s3,152(sp)
+    80005baa:	0180                	addi	s0,sp,192
   int fd, omode;
   struct file *f;
   struct inode *ip;
   int n;
 
   if((n = argstr(0, path, MAXPATH)) < 0 || argint(1, &omode) < 0)
-    80006cb2:	08000613          	li	a2,128
-    80006cb6:	f5040593          	addi	a1,s0,-176
-    80006cba:	4501                	li	a0,0
-    80006cbc:	ffffd097          	auipc	ra,0xffffd
-    80006cc0:	4a0080e7          	jalr	1184(ra) # 8000415c <argstr>
+    80005bac:	08000613          	li	a2,128
+    80005bb0:	f5040593          	addi	a1,s0,-176
+    80005bb4:	4501                	li	a0,0
+    80005bb6:	ffffd097          	auipc	ra,0xffffd
+    80005bba:	504080e7          	jalr	1284(ra) # 800030ba <argstr>
     return -1;
-    80006cc4:	54fd                	li	s1,-1
+    80005bbe:	54fd                	li	s1,-1
   if((n = argstr(0, path, MAXPATH)) < 0 || argint(1, &omode) < 0)
-    80006cc6:	0c054163          	bltz	a0,80006d88 <sys_open+0xe4>
-    80006cca:	f4c40593          	addi	a1,s0,-180
-    80006cce:	4505                	li	a0,1
-    80006cd0:	ffffd097          	auipc	ra,0xffffd
-    80006cd4:	448080e7          	jalr	1096(ra) # 80004118 <argint>
-    80006cd8:	0a054863          	bltz	a0,80006d88 <sys_open+0xe4>
+    80005bc0:	0c054163          	bltz	a0,80005c82 <sys_open+0xe4>
+    80005bc4:	f4c40593          	addi	a1,s0,-180
+    80005bc8:	4505                	li	a0,1
+    80005bca:	ffffd097          	auipc	ra,0xffffd
+    80005bce:	4ac080e7          	jalr	1196(ra) # 80003076 <argint>
+    80005bd2:	0a054863          	bltz	a0,80005c82 <sys_open+0xe4>
 
   begin_op();
-    80006cdc:	fffff097          	auipc	ra,0xfffff
-    80006ce0:	a2c080e7          	jalr	-1492(ra) # 80005708 <begin_op>
+    80005bd6:	fffff097          	auipc	ra,0xfffff
+    80005bda:	a2e080e7          	jalr	-1490(ra) # 80004604 <begin_op>
 
   if(omode & O_CREATE){
-    80006ce4:	f4c42783          	lw	a5,-180(s0)
-    80006ce8:	2007f793          	andi	a5,a5,512
-    80006cec:	cbdd                	beqz	a5,80006da2 <sys_open+0xfe>
+    80005bde:	f4c42783          	lw	a5,-180(s0)
+    80005be2:	2007f793          	andi	a5,a5,512
+    80005be6:	cbdd                	beqz	a5,80005c9c <sys_open+0xfe>
     ip = create(path, T_FILE, 0, 0);
-    80006cee:	4681                	li	a3,0
-    80006cf0:	4601                	li	a2,0
-    80006cf2:	4589                	li	a1,2
-    80006cf4:	f5040513          	addi	a0,s0,-176
-    80006cf8:	00000097          	auipc	ra,0x0
-    80006cfc:	970080e7          	jalr	-1680(ra) # 80006668 <create>
-    80006d00:	892a                	mv	s2,a0
+    80005be8:	4681                	li	a3,0
+    80005bea:	4601                	li	a2,0
+    80005bec:	4589                	li	a1,2
+    80005bee:	f5040513          	addi	a0,s0,-176
+    80005bf2:	00000097          	auipc	ra,0x0
+    80005bf6:	972080e7          	jalr	-1678(ra) # 80005564 <create>
+    80005bfa:	892a                	mv	s2,a0
     if(ip == 0){
-    80006d02:	c959                	beqz	a0,80006d98 <sys_open+0xf4>
+    80005bfc:	c959                	beqz	a0,80005c92 <sys_open+0xf4>
       end_op();
       return -1;
     }
   }
 
   if(ip->type == T_DEVICE && (ip->major < 0 || ip->major >= NDEV)){
-    80006d04:	04491703          	lh	a4,68(s2)
-    80006d08:	478d                	li	a5,3
-    80006d0a:	00f71763          	bne	a4,a5,80006d18 <sys_open+0x74>
-    80006d0e:	04695703          	lhu	a4,70(s2)
-    80006d12:	47a5                	li	a5,9
-    80006d14:	0ce7ec63          	bltu	a5,a4,80006dec <sys_open+0x148>
+    80005bfe:	04491703          	lh	a4,68(s2)
+    80005c02:	478d                	li	a5,3
+    80005c04:	00f71763          	bne	a4,a5,80005c12 <sys_open+0x74>
+    80005c08:	04695703          	lhu	a4,70(s2)
+    80005c0c:	47a5                	li	a5,9
+    80005c0e:	0ce7ec63          	bltu	a5,a4,80005ce6 <sys_open+0x148>
     iunlockput(ip);
     end_op();
     return -1;
   }
 
   if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
-    80006d18:	fffff097          	auipc	ra,0xfffff
-    80006d1c:	e00080e7          	jalr	-512(ra) # 80005b18 <filealloc>
-    80006d20:	89aa                	mv	s3,a0
-    80006d22:	10050263          	beqz	a0,80006e26 <sys_open+0x182>
-    80006d26:	00000097          	auipc	ra,0x0
-    80006d2a:	900080e7          	jalr	-1792(ra) # 80006626 <fdalloc>
-    80006d2e:	84aa                	mv	s1,a0
-    80006d30:	0e054663          	bltz	a0,80006e1c <sys_open+0x178>
+    80005c12:	fffff097          	auipc	ra,0xfffff
+    80005c16:	e02080e7          	jalr	-510(ra) # 80004a14 <filealloc>
+    80005c1a:	89aa                	mv	s3,a0
+    80005c1c:	10050263          	beqz	a0,80005d20 <sys_open+0x182>
+    80005c20:	00000097          	auipc	ra,0x0
+    80005c24:	902080e7          	jalr	-1790(ra) # 80005522 <fdalloc>
+    80005c28:	84aa                	mv	s1,a0
+    80005c2a:	0e054663          	bltz	a0,80005d16 <sys_open+0x178>
     iunlockput(ip);
     end_op();
     return -1;
   }
 
   if(ip->type == T_DEVICE){
-    80006d34:	04491703          	lh	a4,68(s2)
-    80006d38:	478d                	li	a5,3
-    80006d3a:	0cf70463          	beq	a4,a5,80006e02 <sys_open+0x15e>
+    80005c2e:	04491703          	lh	a4,68(s2)
+    80005c32:	478d                	li	a5,3
+    80005c34:	0cf70463          	beq	a4,a5,80005cfc <sys_open+0x15e>
     f->type = FD_DEVICE;
     f->major = ip->major;
   } else {
     f->type = FD_INODE;
-    80006d3e:	4789                	li	a5,2
-    80006d40:	00f9a023          	sw	a5,0(s3)
+    80005c38:	4789                	li	a5,2
+    80005c3a:	00f9a023          	sw	a5,0(s3)
     f->off = 0;
-    80006d44:	0209a023          	sw	zero,32(s3)
+    80005c3e:	0209a023          	sw	zero,32(s3)
   }
   f->ip = ip;
-    80006d48:	0129bc23          	sd	s2,24(s3)
+    80005c42:	0129bc23          	sd	s2,24(s3)
   f->readable = !(omode & O_WRONLY);
-    80006d4c:	f4c42783          	lw	a5,-180(s0)
-    80006d50:	0017c713          	xori	a4,a5,1
-    80006d54:	8b05                	andi	a4,a4,1
-    80006d56:	00e98423          	sb	a4,8(s3)
+    80005c46:	f4c42783          	lw	a5,-180(s0)
+    80005c4a:	0017c713          	xori	a4,a5,1
+    80005c4e:	8b05                	andi	a4,a4,1
+    80005c50:	00e98423          	sb	a4,8(s3)
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-    80006d5a:	0037f713          	andi	a4,a5,3
-    80006d5e:	00e03733          	snez	a4,a4
-    80006d62:	00e984a3          	sb	a4,9(s3)
+    80005c54:	0037f713          	andi	a4,a5,3
+    80005c58:	00e03733          	snez	a4,a4
+    80005c5c:	00e984a3          	sb	a4,9(s3)
 
   if((omode & O_TRUNC) && ip->type == T_FILE){
-    80006d66:	4007f793          	andi	a5,a5,1024
-    80006d6a:	c791                	beqz	a5,80006d76 <sys_open+0xd2>
-    80006d6c:	04491703          	lh	a4,68(s2)
-    80006d70:	4789                	li	a5,2
-    80006d72:	08f70f63          	beq	a4,a5,80006e10 <sys_open+0x16c>
+    80005c60:	4007f793          	andi	a5,a5,1024
+    80005c64:	c791                	beqz	a5,80005c70 <sys_open+0xd2>
+    80005c66:	04491703          	lh	a4,68(s2)
+    80005c6a:	4789                	li	a5,2
+    80005c6c:	08f70f63          	beq	a4,a5,80005d0a <sys_open+0x16c>
     itrunc(ip);
   }
 
   iunlock(ip);
-    80006d76:	854a                	mv	a0,s2
-    80006d78:	ffffe097          	auipc	ra,0xffffe
-    80006d7c:	080080e7          	jalr	128(ra) # 80004df8 <iunlock>
+    80005c70:	854a                	mv	a0,s2
+    80005c72:	ffffe097          	auipc	ra,0xffffe
+    80005c76:	082080e7          	jalr	130(ra) # 80003cf4 <iunlock>
   end_op();
-    80006d80:	fffff097          	auipc	ra,0xfffff
-    80006d84:	a08080e7          	jalr	-1528(ra) # 80005788 <end_op>
+    80005c7a:	fffff097          	auipc	ra,0xfffff
+    80005c7e:	a0a080e7          	jalr	-1526(ra) # 80004684 <end_op>
 
   return fd;
 }
-    80006d88:	8526                	mv	a0,s1
-    80006d8a:	70ea                	ld	ra,184(sp)
-    80006d8c:	744a                	ld	s0,176(sp)
-    80006d8e:	74aa                	ld	s1,168(sp)
-    80006d90:	790a                	ld	s2,160(sp)
-    80006d92:	69ea                	ld	s3,152(sp)
-    80006d94:	6129                	addi	sp,sp,192
-    80006d96:	8082                	ret
+    80005c82:	8526                	mv	a0,s1
+    80005c84:	70ea                	ld	ra,184(sp)
+    80005c86:	744a                	ld	s0,176(sp)
+    80005c88:	74aa                	ld	s1,168(sp)
+    80005c8a:	790a                	ld	s2,160(sp)
+    80005c8c:	69ea                	ld	s3,152(sp)
+    80005c8e:	6129                	addi	sp,sp,192
+    80005c90:	8082                	ret
       end_op();
-    80006d98:	fffff097          	auipc	ra,0xfffff
-    80006d9c:	9f0080e7          	jalr	-1552(ra) # 80005788 <end_op>
+    80005c92:	fffff097          	auipc	ra,0xfffff
+    80005c96:	9f2080e7          	jalr	-1550(ra) # 80004684 <end_op>
       return -1;
-    80006da0:	b7e5                	j	80006d88 <sys_open+0xe4>
+    80005c9a:	b7e5                	j	80005c82 <sys_open+0xe4>
     if((ip = namei(path)) == 0){
-    80006da2:	f5040513          	addi	a0,s0,-176
-    80006da6:	ffffe097          	auipc	ra,0xffffe
-    80006daa:	746080e7          	jalr	1862(ra) # 800054ec <namei>
-    80006dae:	892a                	mv	s2,a0
-    80006db0:	c905                	beqz	a0,80006de0 <sys_open+0x13c>
+    80005c9c:	f5040513          	addi	a0,s0,-176
+    80005ca0:	ffffe097          	auipc	ra,0xffffe
+    80005ca4:	748080e7          	jalr	1864(ra) # 800043e8 <namei>
+    80005ca8:	892a                	mv	s2,a0
+    80005caa:	c905                	beqz	a0,80005cda <sys_open+0x13c>
     ilock(ip);
-    80006db2:	ffffe097          	auipc	ra,0xffffe
-    80006db6:	f84080e7          	jalr	-124(ra) # 80004d36 <ilock>
+    80005cac:	ffffe097          	auipc	ra,0xffffe
+    80005cb0:	f86080e7          	jalr	-122(ra) # 80003c32 <ilock>
     if(ip->type == T_DIR && omode != O_RDONLY){
-    80006dba:	04491703          	lh	a4,68(s2)
-    80006dbe:	4785                	li	a5,1
-    80006dc0:	f4f712e3          	bne	a4,a5,80006d04 <sys_open+0x60>
-    80006dc4:	f4c42783          	lw	a5,-180(s0)
-    80006dc8:	dba1                	beqz	a5,80006d18 <sys_open+0x74>
+    80005cb4:	04491703          	lh	a4,68(s2)
+    80005cb8:	4785                	li	a5,1
+    80005cba:	f4f712e3          	bne	a4,a5,80005bfe <sys_open+0x60>
+    80005cbe:	f4c42783          	lw	a5,-180(s0)
+    80005cc2:	dba1                	beqz	a5,80005c12 <sys_open+0x74>
       iunlockput(ip);
-    80006dca:	854a                	mv	a0,s2
-    80006dcc:	ffffe097          	auipc	ra,0xffffe
-    80006dd0:	1cc080e7          	jalr	460(ra) # 80004f98 <iunlockput>
+    80005cc4:	854a                	mv	a0,s2
+    80005cc6:	ffffe097          	auipc	ra,0xffffe
+    80005cca:	1ce080e7          	jalr	462(ra) # 80003e94 <iunlockput>
       end_op();
-    80006dd4:	fffff097          	auipc	ra,0xfffff
-    80006dd8:	9b4080e7          	jalr	-1612(ra) # 80005788 <end_op>
+    80005cce:	fffff097          	auipc	ra,0xfffff
+    80005cd2:	9b6080e7          	jalr	-1610(ra) # 80004684 <end_op>
       return -1;
-    80006ddc:	54fd                	li	s1,-1
-    80006dde:	b76d                	j	80006d88 <sys_open+0xe4>
+    80005cd6:	54fd                	li	s1,-1
+    80005cd8:	b76d                	j	80005c82 <sys_open+0xe4>
       end_op();
-    80006de0:	fffff097          	auipc	ra,0xfffff
-    80006de4:	9a8080e7          	jalr	-1624(ra) # 80005788 <end_op>
+    80005cda:	fffff097          	auipc	ra,0xfffff
+    80005cde:	9aa080e7          	jalr	-1622(ra) # 80004684 <end_op>
       return -1;
-    80006de8:	54fd                	li	s1,-1
-    80006dea:	bf79                	j	80006d88 <sys_open+0xe4>
+    80005ce2:	54fd                	li	s1,-1
+    80005ce4:	bf79                	j	80005c82 <sys_open+0xe4>
     iunlockput(ip);
-    80006dec:	854a                	mv	a0,s2
-    80006dee:	ffffe097          	auipc	ra,0xffffe
-    80006df2:	1aa080e7          	jalr	426(ra) # 80004f98 <iunlockput>
+    80005ce6:	854a                	mv	a0,s2
+    80005ce8:	ffffe097          	auipc	ra,0xffffe
+    80005cec:	1ac080e7          	jalr	428(ra) # 80003e94 <iunlockput>
     end_op();
-    80006df6:	fffff097          	auipc	ra,0xfffff
-    80006dfa:	992080e7          	jalr	-1646(ra) # 80005788 <end_op>
+    80005cf0:	fffff097          	auipc	ra,0xfffff
+    80005cf4:	994080e7          	jalr	-1644(ra) # 80004684 <end_op>
     return -1;
-    80006dfe:	54fd                	li	s1,-1
-    80006e00:	b761                	j	80006d88 <sys_open+0xe4>
+    80005cf8:	54fd                	li	s1,-1
+    80005cfa:	b761                	j	80005c82 <sys_open+0xe4>
     f->type = FD_DEVICE;
-    80006e02:	00f9a023          	sw	a5,0(s3)
+    80005cfc:	00f9a023          	sw	a5,0(s3)
     f->major = ip->major;
-    80006e06:	04691783          	lh	a5,70(s2)
-    80006e0a:	02f99223          	sh	a5,36(s3)
-    80006e0e:	bf2d                	j	80006d48 <sys_open+0xa4>
+    80005d00:	04691783          	lh	a5,70(s2)
+    80005d04:	02f99223          	sh	a5,36(s3)
+    80005d08:	bf2d                	j	80005c42 <sys_open+0xa4>
     itrunc(ip);
-    80006e10:	854a                	mv	a0,s2
-    80006e12:	ffffe097          	auipc	ra,0xffffe
-    80006e16:	032080e7          	jalr	50(ra) # 80004e44 <itrunc>
-    80006e1a:	bfb1                	j	80006d76 <sys_open+0xd2>
+    80005d0a:	854a                	mv	a0,s2
+    80005d0c:	ffffe097          	auipc	ra,0xffffe
+    80005d10:	034080e7          	jalr	52(ra) # 80003d40 <itrunc>
+    80005d14:	bfb1                	j	80005c70 <sys_open+0xd2>
       fileclose(f);
-    80006e1c:	854e                	mv	a0,s3
-    80006e1e:	fffff097          	auipc	ra,0xfffff
-    80006e22:	db6080e7          	jalr	-586(ra) # 80005bd4 <fileclose>
+    80005d16:	854e                	mv	a0,s3
+    80005d18:	fffff097          	auipc	ra,0xfffff
+    80005d1c:	db8080e7          	jalr	-584(ra) # 80004ad0 <fileclose>
     iunlockput(ip);
-    80006e26:	854a                	mv	a0,s2
-    80006e28:	ffffe097          	auipc	ra,0xffffe
-    80006e2c:	170080e7          	jalr	368(ra) # 80004f98 <iunlockput>
+    80005d20:	854a                	mv	a0,s2
+    80005d22:	ffffe097          	auipc	ra,0xffffe
+    80005d26:	172080e7          	jalr	370(ra) # 80003e94 <iunlockput>
     end_op();
-    80006e30:	fffff097          	auipc	ra,0xfffff
-    80006e34:	958080e7          	jalr	-1704(ra) # 80005788 <end_op>
+    80005d2a:	fffff097          	auipc	ra,0xfffff
+    80005d2e:	95a080e7          	jalr	-1702(ra) # 80004684 <end_op>
     return -1;
-    80006e38:	54fd                	li	s1,-1
-    80006e3a:	b7b9                	j	80006d88 <sys_open+0xe4>
+    80005d32:	54fd                	li	s1,-1
+    80005d34:	b7b9                	j	80005c82 <sys_open+0xe4>
 
-0000000080006e3c <sys_mkdir>:
+0000000080005d36 <sys_mkdir>:
 
 uint64
 sys_mkdir(void)
 {
-    80006e3c:	7175                	addi	sp,sp,-144
-    80006e3e:	e506                	sd	ra,136(sp)
-    80006e40:	e122                	sd	s0,128(sp)
-    80006e42:	0900                	addi	s0,sp,144
+    80005d36:	7175                	addi	sp,sp,-144
+    80005d38:	e506                	sd	ra,136(sp)
+    80005d3a:	e122                	sd	s0,128(sp)
+    80005d3c:	0900                	addi	s0,sp,144
   char path[MAXPATH];
   struct inode *ip;
 
   begin_op();
-    80006e44:	fffff097          	auipc	ra,0xfffff
-    80006e48:	8c4080e7          	jalr	-1852(ra) # 80005708 <begin_op>
+    80005d3e:	fffff097          	auipc	ra,0xfffff
+    80005d42:	8c6080e7          	jalr	-1850(ra) # 80004604 <begin_op>
   if(argstr(0, path, MAXPATH) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
-    80006e4c:	08000613          	li	a2,128
-    80006e50:	f7040593          	addi	a1,s0,-144
-    80006e54:	4501                	li	a0,0
-    80006e56:	ffffd097          	auipc	ra,0xffffd
-    80006e5a:	306080e7          	jalr	774(ra) # 8000415c <argstr>
-    80006e5e:	02054963          	bltz	a0,80006e90 <sys_mkdir+0x54>
-    80006e62:	4681                	li	a3,0
-    80006e64:	4601                	li	a2,0
-    80006e66:	4585                	li	a1,1
-    80006e68:	f7040513          	addi	a0,s0,-144
-    80006e6c:	fffff097          	auipc	ra,0xfffff
-    80006e70:	7fc080e7          	jalr	2044(ra) # 80006668 <create>
-    80006e74:	cd11                	beqz	a0,80006e90 <sys_mkdir+0x54>
+    80005d46:	08000613          	li	a2,128
+    80005d4a:	f7040593          	addi	a1,s0,-144
+    80005d4e:	4501                	li	a0,0
+    80005d50:	ffffd097          	auipc	ra,0xffffd
+    80005d54:	36a080e7          	jalr	874(ra) # 800030ba <argstr>
+    80005d58:	02054963          	bltz	a0,80005d8a <sys_mkdir+0x54>
+    80005d5c:	4681                	li	a3,0
+    80005d5e:	4601                	li	a2,0
+    80005d60:	4585                	li	a1,1
+    80005d62:	f7040513          	addi	a0,s0,-144
+    80005d66:	fffff097          	auipc	ra,0xfffff
+    80005d6a:	7fe080e7          	jalr	2046(ra) # 80005564 <create>
+    80005d6e:	cd11                	beqz	a0,80005d8a <sys_mkdir+0x54>
     end_op();
     return -1;
   }
   iunlockput(ip);
-    80006e76:	ffffe097          	auipc	ra,0xffffe
-    80006e7a:	122080e7          	jalr	290(ra) # 80004f98 <iunlockput>
+    80005d70:	ffffe097          	auipc	ra,0xffffe
+    80005d74:	124080e7          	jalr	292(ra) # 80003e94 <iunlockput>
   end_op();
-    80006e7e:	fffff097          	auipc	ra,0xfffff
-    80006e82:	90a080e7          	jalr	-1782(ra) # 80005788 <end_op>
+    80005d78:	fffff097          	auipc	ra,0xfffff
+    80005d7c:	90c080e7          	jalr	-1780(ra) # 80004684 <end_op>
   return 0;
-    80006e86:	4501                	li	a0,0
+    80005d80:	4501                	li	a0,0
 }
-    80006e88:	60aa                	ld	ra,136(sp)
-    80006e8a:	640a                	ld	s0,128(sp)
-    80006e8c:	6149                	addi	sp,sp,144
-    80006e8e:	8082                	ret
+    80005d82:	60aa                	ld	ra,136(sp)
+    80005d84:	640a                	ld	s0,128(sp)
+    80005d86:	6149                	addi	sp,sp,144
+    80005d88:	8082                	ret
     end_op();
-    80006e90:	fffff097          	auipc	ra,0xfffff
-    80006e94:	8f8080e7          	jalr	-1800(ra) # 80005788 <end_op>
+    80005d8a:	fffff097          	auipc	ra,0xfffff
+    80005d8e:	8fa080e7          	jalr	-1798(ra) # 80004684 <end_op>
     return -1;
-    80006e98:	557d                	li	a0,-1
-    80006e9a:	b7fd                	j	80006e88 <sys_mkdir+0x4c>
+    80005d92:	557d                	li	a0,-1
+    80005d94:	b7fd                	j	80005d82 <sys_mkdir+0x4c>
 
-0000000080006e9c <sys_mknod>:
+0000000080005d96 <sys_mknod>:
 
 uint64
 sys_mknod(void)
 {
-    80006e9c:	7135                	addi	sp,sp,-160
-    80006e9e:	ed06                	sd	ra,152(sp)
-    80006ea0:	e922                	sd	s0,144(sp)
-    80006ea2:	1100                	addi	s0,sp,160
+    80005d96:	7135                	addi	sp,sp,-160
+    80005d98:	ed06                	sd	ra,152(sp)
+    80005d9a:	e922                	sd	s0,144(sp)
+    80005d9c:	1100                	addi	s0,sp,160
   struct inode *ip;
   char path[MAXPATH];
   int major, minor;
 
   begin_op();
-    80006ea4:	fffff097          	auipc	ra,0xfffff
-    80006ea8:	864080e7          	jalr	-1948(ra) # 80005708 <begin_op>
+    80005d9e:	fffff097          	auipc	ra,0xfffff
+    80005da2:	866080e7          	jalr	-1946(ra) # 80004604 <begin_op>
   if((argstr(0, path, MAXPATH)) < 0 ||
-    80006eac:	08000613          	li	a2,128
-    80006eb0:	f7040593          	addi	a1,s0,-144
-    80006eb4:	4501                	li	a0,0
-    80006eb6:	ffffd097          	auipc	ra,0xffffd
-    80006eba:	2a6080e7          	jalr	678(ra) # 8000415c <argstr>
-    80006ebe:	04054a63          	bltz	a0,80006f12 <sys_mknod+0x76>
+    80005da6:	08000613          	li	a2,128
+    80005daa:	f7040593          	addi	a1,s0,-144
+    80005dae:	4501                	li	a0,0
+    80005db0:	ffffd097          	auipc	ra,0xffffd
+    80005db4:	30a080e7          	jalr	778(ra) # 800030ba <argstr>
+    80005db8:	04054a63          	bltz	a0,80005e0c <sys_mknod+0x76>
      argint(1, &major) < 0 ||
-    80006ec2:	f6c40593          	addi	a1,s0,-148
-    80006ec6:	4505                	li	a0,1
-    80006ec8:	ffffd097          	auipc	ra,0xffffd
-    80006ecc:	250080e7          	jalr	592(ra) # 80004118 <argint>
+    80005dbc:	f6c40593          	addi	a1,s0,-148
+    80005dc0:	4505                	li	a0,1
+    80005dc2:	ffffd097          	auipc	ra,0xffffd
+    80005dc6:	2b4080e7          	jalr	692(ra) # 80003076 <argint>
   if((argstr(0, path, MAXPATH)) < 0 ||
-    80006ed0:	04054163          	bltz	a0,80006f12 <sys_mknod+0x76>
+    80005dca:	04054163          	bltz	a0,80005e0c <sys_mknod+0x76>
      argint(2, &minor) < 0 ||
-    80006ed4:	f6840593          	addi	a1,s0,-152
-    80006ed8:	4509                	li	a0,2
-    80006eda:	ffffd097          	auipc	ra,0xffffd
-    80006ede:	23e080e7          	jalr	574(ra) # 80004118 <argint>
+    80005dce:	f6840593          	addi	a1,s0,-152
+    80005dd2:	4509                	li	a0,2
+    80005dd4:	ffffd097          	auipc	ra,0xffffd
+    80005dd8:	2a2080e7          	jalr	674(ra) # 80003076 <argint>
      argint(1, &major) < 0 ||
-    80006ee2:	02054863          	bltz	a0,80006f12 <sys_mknod+0x76>
+    80005ddc:	02054863          	bltz	a0,80005e0c <sys_mknod+0x76>
      (ip = create(path, T_DEVICE, major, minor)) == 0){
-    80006ee6:	f6841683          	lh	a3,-152(s0)
-    80006eea:	f6c41603          	lh	a2,-148(s0)
-    80006eee:	458d                	li	a1,3
-    80006ef0:	f7040513          	addi	a0,s0,-144
-    80006ef4:	fffff097          	auipc	ra,0xfffff
-    80006ef8:	774080e7          	jalr	1908(ra) # 80006668 <create>
+    80005de0:	f6841683          	lh	a3,-152(s0)
+    80005de4:	f6c41603          	lh	a2,-148(s0)
+    80005de8:	458d                	li	a1,3
+    80005dea:	f7040513          	addi	a0,s0,-144
+    80005dee:	fffff097          	auipc	ra,0xfffff
+    80005df2:	776080e7          	jalr	1910(ra) # 80005564 <create>
      argint(2, &minor) < 0 ||
-    80006efc:	c919                	beqz	a0,80006f12 <sys_mknod+0x76>
+    80005df6:	c919                	beqz	a0,80005e0c <sys_mknod+0x76>
     end_op();
     return -1;
   }
   iunlockput(ip);
-    80006efe:	ffffe097          	auipc	ra,0xffffe
-    80006f02:	09a080e7          	jalr	154(ra) # 80004f98 <iunlockput>
+    80005df8:	ffffe097          	auipc	ra,0xffffe
+    80005dfc:	09c080e7          	jalr	156(ra) # 80003e94 <iunlockput>
   end_op();
-    80006f06:	fffff097          	auipc	ra,0xfffff
-    80006f0a:	882080e7          	jalr	-1918(ra) # 80005788 <end_op>
+    80005e00:	fffff097          	auipc	ra,0xfffff
+    80005e04:	884080e7          	jalr	-1916(ra) # 80004684 <end_op>
   return 0;
-    80006f0e:	4501                	li	a0,0
-    80006f10:	a031                	j	80006f1c <sys_mknod+0x80>
+    80005e08:	4501                	li	a0,0
+    80005e0a:	a031                	j	80005e16 <sys_mknod+0x80>
     end_op();
-    80006f12:	fffff097          	auipc	ra,0xfffff
-    80006f16:	876080e7          	jalr	-1930(ra) # 80005788 <end_op>
+    80005e0c:	fffff097          	auipc	ra,0xfffff
+    80005e10:	878080e7          	jalr	-1928(ra) # 80004684 <end_op>
     return -1;
-    80006f1a:	557d                	li	a0,-1
+    80005e14:	557d                	li	a0,-1
 }
-    80006f1c:	60ea                	ld	ra,152(sp)
-    80006f1e:	644a                	ld	s0,144(sp)
-    80006f20:	610d                	addi	sp,sp,160
-    80006f22:	8082                	ret
+    80005e16:	60ea                	ld	ra,152(sp)
+    80005e18:	644a                	ld	s0,144(sp)
+    80005e1a:	610d                	addi	sp,sp,160
+    80005e1c:	8082                	ret
 
-0000000080006f24 <sys_chdir>:
+0000000080005e1e <sys_chdir>:
 
 uint64
 sys_chdir(void)
 {
-    80006f24:	7135                	addi	sp,sp,-160
-    80006f26:	ed06                	sd	ra,152(sp)
-    80006f28:	e922                	sd	s0,144(sp)
-    80006f2a:	e526                	sd	s1,136(sp)
-    80006f2c:	e14a                	sd	s2,128(sp)
-    80006f2e:	1100                	addi	s0,sp,160
+    80005e1e:	7135                	addi	sp,sp,-160
+    80005e20:	ed06                	sd	ra,152(sp)
+    80005e22:	e922                	sd	s0,144(sp)
+    80005e24:	e526                	sd	s1,136(sp)
+    80005e26:	e14a                	sd	s2,128(sp)
+    80005e28:	1100                	addi	s0,sp,160
   char path[MAXPATH];
   struct inode *ip;
   struct proc *p = myproc();
-    80006f30:	ffffb097          	auipc	ra,0xffffb
-    80006f34:	c64080e7          	jalr	-924(ra) # 80001b94 <myproc>
-    80006f38:	892a                	mv	s2,a0
+    80005e2a:	ffffc097          	auipc	ra,0xffffc
+    80005e2e:	ea6080e7          	jalr	-346(ra) # 80001cd0 <myproc>
+    80005e32:	892a                	mv	s2,a0
   
   begin_op();
-    80006f3a:	ffffe097          	auipc	ra,0xffffe
-    80006f3e:	7ce080e7          	jalr	1998(ra) # 80005708 <begin_op>
+    80005e34:	ffffe097          	auipc	ra,0xffffe
+    80005e38:	7d0080e7          	jalr	2000(ra) # 80004604 <begin_op>
   if(argstr(0, path, MAXPATH) < 0 || (ip = namei(path)) == 0){
-    80006f42:	08000613          	li	a2,128
-    80006f46:	f6040593          	addi	a1,s0,-160
-    80006f4a:	4501                	li	a0,0
-    80006f4c:	ffffd097          	auipc	ra,0xffffd
-    80006f50:	210080e7          	jalr	528(ra) # 8000415c <argstr>
-    80006f54:	04054b63          	bltz	a0,80006faa <sys_chdir+0x86>
-    80006f58:	f6040513          	addi	a0,s0,-160
-    80006f5c:	ffffe097          	auipc	ra,0xffffe
-    80006f60:	590080e7          	jalr	1424(ra) # 800054ec <namei>
-    80006f64:	84aa                	mv	s1,a0
-    80006f66:	c131                	beqz	a0,80006faa <sys_chdir+0x86>
+    80005e3c:	08000613          	li	a2,128
+    80005e40:	f6040593          	addi	a1,s0,-160
+    80005e44:	4501                	li	a0,0
+    80005e46:	ffffd097          	auipc	ra,0xffffd
+    80005e4a:	274080e7          	jalr	628(ra) # 800030ba <argstr>
+    80005e4e:	04054b63          	bltz	a0,80005ea4 <sys_chdir+0x86>
+    80005e52:	f6040513          	addi	a0,s0,-160
+    80005e56:	ffffe097          	auipc	ra,0xffffe
+    80005e5a:	592080e7          	jalr	1426(ra) # 800043e8 <namei>
+    80005e5e:	84aa                	mv	s1,a0
+    80005e60:	c131                	beqz	a0,80005ea4 <sys_chdir+0x86>
     end_op();
     return -1;
   }
   ilock(ip);
-    80006f68:	ffffe097          	auipc	ra,0xffffe
-    80006f6c:	dce080e7          	jalr	-562(ra) # 80004d36 <ilock>
+    80005e62:	ffffe097          	auipc	ra,0xffffe
+    80005e66:	dd0080e7          	jalr	-560(ra) # 80003c32 <ilock>
   if(ip->type != T_DIR){
-    80006f70:	04449703          	lh	a4,68(s1)
-    80006f74:	4785                	li	a5,1
-    80006f76:	04f71063          	bne	a4,a5,80006fb6 <sys_chdir+0x92>
+    80005e6a:	04449703          	lh	a4,68(s1)
+    80005e6e:	4785                	li	a5,1
+    80005e70:	04f71063          	bne	a4,a5,80005eb0 <sys_chdir+0x92>
     iunlockput(ip);
     end_op();
     return -1;
   }
   iunlock(ip);
-    80006f7a:	8526                	mv	a0,s1
-    80006f7c:	ffffe097          	auipc	ra,0xffffe
-    80006f80:	e7c080e7          	jalr	-388(ra) # 80004df8 <iunlock>
+    80005e74:	8526                	mv	a0,s1
+    80005e76:	ffffe097          	auipc	ra,0xffffe
+    80005e7a:	e7e080e7          	jalr	-386(ra) # 80003cf4 <iunlock>
   iput(p->cwd);
-    80006f84:	18093503          	ld	a0,384(s2)
-    80006f88:	ffffe097          	auipc	ra,0xffffe
-    80006f8c:	f68080e7          	jalr	-152(ra) # 80004ef0 <iput>
+    80005e7e:	15093503          	ld	a0,336(s2)
+    80005e82:	ffffe097          	auipc	ra,0xffffe
+    80005e86:	f6a080e7          	jalr	-150(ra) # 80003dec <iput>
   end_op();
-    80006f90:	ffffe097          	auipc	ra,0xffffe
-    80006f94:	7f8080e7          	jalr	2040(ra) # 80005788 <end_op>
+    80005e8a:	ffffe097          	auipc	ra,0xffffe
+    80005e8e:	7fa080e7          	jalr	2042(ra) # 80004684 <end_op>
   p->cwd = ip;
-    80006f98:	18993023          	sd	s1,384(s2)
+    80005e92:	14993823          	sd	s1,336(s2)
   return 0;
-    80006f9c:	4501                	li	a0,0
-}
-    80006f9e:	60ea                	ld	ra,152(sp)
-    80006fa0:	644a                	ld	s0,144(sp)
-    80006fa2:	64aa                	ld	s1,136(sp)
-    80006fa4:	690a                	ld	s2,128(sp)
-    80006fa6:	610d                	addi	sp,sp,160
-    80006fa8:	8082                	ret
+    80005e96:	4501                	li	a0,0
+}
+    80005e98:	60ea                	ld	ra,152(sp)
+    80005e9a:	644a                	ld	s0,144(sp)
+    80005e9c:	64aa                	ld	s1,136(sp)
+    80005e9e:	690a                	ld	s2,128(sp)
+    80005ea0:	610d                	addi	sp,sp,160
+    80005ea2:	8082                	ret
     end_op();
-    80006faa:	ffffe097          	auipc	ra,0xffffe
-    80006fae:	7de080e7          	jalr	2014(ra) # 80005788 <end_op>
+    80005ea4:	ffffe097          	auipc	ra,0xffffe
+    80005ea8:	7e0080e7          	jalr	2016(ra) # 80004684 <end_op>
     return -1;
-    80006fb2:	557d                	li	a0,-1
-    80006fb4:	b7ed                	j	80006f9e <sys_chdir+0x7a>
+    80005eac:	557d                	li	a0,-1
+    80005eae:	b7ed                	j	80005e98 <sys_chdir+0x7a>
     iunlockput(ip);
-    80006fb6:	8526                	mv	a0,s1
-    80006fb8:	ffffe097          	auipc	ra,0xffffe
-    80006fbc:	fe0080e7          	jalr	-32(ra) # 80004f98 <iunlockput>
+    80005eb0:	8526                	mv	a0,s1
+    80005eb2:	ffffe097          	auipc	ra,0xffffe
+    80005eb6:	fe2080e7          	jalr	-30(ra) # 80003e94 <iunlockput>
     end_op();
-    80006fc0:	ffffe097          	auipc	ra,0xffffe
-    80006fc4:	7c8080e7          	jalr	1992(ra) # 80005788 <end_op>
+    80005eba:	ffffe097          	auipc	ra,0xffffe
+    80005ebe:	7ca080e7          	jalr	1994(ra) # 80004684 <end_op>
     return -1;
-    80006fc8:	557d                	li	a0,-1
-    80006fca:	bfd1                	j	80006f9e <sys_chdir+0x7a>
+    80005ec2:	557d                	li	a0,-1
+    80005ec4:	bfd1                	j	80005e98 <sys_chdir+0x7a>
 
-0000000080006fcc <sys_exec>:
+0000000080005ec6 <sys_exec>:
 
 uint64
 sys_exec(void)
 {
-    80006fcc:	7145                	addi	sp,sp,-464
-    80006fce:	e786                	sd	ra,456(sp)
-    80006fd0:	e3a2                	sd	s0,448(sp)
-    80006fd2:	ff26                	sd	s1,440(sp)
-    80006fd4:	fb4a                	sd	s2,432(sp)
-    80006fd6:	f74e                	sd	s3,424(sp)
-    80006fd8:	f352                	sd	s4,416(sp)
-    80006fda:	ef56                	sd	s5,408(sp)
-    80006fdc:	0b80                	addi	s0,sp,464
+    80005ec6:	7145                	addi	sp,sp,-464
+    80005ec8:	e786                	sd	ra,456(sp)
+    80005eca:	e3a2                	sd	s0,448(sp)
+    80005ecc:	ff26                	sd	s1,440(sp)
+    80005ece:	fb4a                	sd	s2,432(sp)
+    80005ed0:	f74e                	sd	s3,424(sp)
+    80005ed2:	f352                	sd	s4,416(sp)
+    80005ed4:	ef56                	sd	s5,408(sp)
+    80005ed6:	0b80                	addi	s0,sp,464
   char path[MAXPATH], *argv[MAXARG];
   int i;
   uint64 uargv, uarg;
 
   if(argstr(0, path, MAXPATH) < 0 || argaddr(1, &uargv) < 0){
-    80006fde:	08000613          	li	a2,128
-    80006fe2:	f4040593          	addi	a1,s0,-192
-    80006fe6:	4501                	li	a0,0
-    80006fe8:	ffffd097          	auipc	ra,0xffffd
-    80006fec:	174080e7          	jalr	372(ra) # 8000415c <argstr>
+    80005ed8:	08000613          	li	a2,128
+    80005edc:	f4040593          	addi	a1,s0,-192
+    80005ee0:	4501                	li	a0,0
+    80005ee2:	ffffd097          	auipc	ra,0xffffd
+    80005ee6:	1d8080e7          	jalr	472(ra) # 800030ba <argstr>
     return -1;
-    80006ff0:	597d                	li	s2,-1
+    80005eea:	597d                	li	s2,-1
   if(argstr(0, path, MAXPATH) < 0 || argaddr(1, &uargv) < 0){
-    80006ff2:	0c054a63          	bltz	a0,800070c6 <sys_exec+0xfa>
-    80006ff6:	e3840593          	addi	a1,s0,-456
-    80006ffa:	4505                	li	a0,1
-    80006ffc:	ffffd097          	auipc	ra,0xffffd
-    80007000:	13e080e7          	jalr	318(ra) # 8000413a <argaddr>
-    80007004:	0c054163          	bltz	a0,800070c6 <sys_exec+0xfa>
+    80005eec:	0c054a63          	bltz	a0,80005fc0 <sys_exec+0xfa>
+    80005ef0:	e3840593          	addi	a1,s0,-456
+    80005ef4:	4505                	li	a0,1
+    80005ef6:	ffffd097          	auipc	ra,0xffffd
+    80005efa:	1a2080e7          	jalr	418(ra) # 80003098 <argaddr>
+    80005efe:	0c054163          	bltz	a0,80005fc0 <sys_exec+0xfa>
   }
   memset(argv, 0, sizeof(argv));
-    80007008:	10000613          	li	a2,256
-    8000700c:	4581                	li	a1,0
-    8000700e:	e4040513          	addi	a0,s0,-448
-    80007012:	ffffa097          	auipc	ra,0xffffa
-    80007016:	cce080e7          	jalr	-818(ra) # 80000ce0 <memset>
+    80005f02:	10000613          	li	a2,256
+    80005f06:	4581                	li	a1,0
+    80005f08:	e4040513          	addi	a0,s0,-448
+    80005f0c:	ffffb097          	auipc	ra,0xffffb
+    80005f10:	dd4080e7          	jalr	-556(ra) # 80000ce0 <memset>
   for(i=0;; i++){
     if(i >= NELEM(argv)){
-    8000701a:	e4040493          	addi	s1,s0,-448
+    80005f14:	e4040493          	addi	s1,s0,-448
   memset(argv, 0, sizeof(argv));
-    8000701e:	89a6                	mv	s3,s1
-    80007020:	4901                	li	s2,0
+    80005f18:	89a6                	mv	s3,s1
+    80005f1a:	4901                	li	s2,0
     if(i >= NELEM(argv)){
-    80007022:	02000a13          	li	s4,32
-    80007026:	00090a9b          	sext.w	s5,s2
+    80005f1c:	02000a13          	li	s4,32
+    80005f20:	00090a9b          	sext.w	s5,s2
       goto bad;
     }
     if(fetchaddr(uargv+sizeof(uint64)*i, (uint64*)&uarg) < 0){
-    8000702a:	00391513          	slli	a0,s2,0x3
-    8000702e:	e3040593          	addi	a1,s0,-464
-    80007032:	e3843783          	ld	a5,-456(s0)
-    80007036:	953e                	add	a0,a0,a5
-    80007038:	ffffd097          	auipc	ra,0xffffd
-    8000703c:	046080e7          	jalr	70(ra) # 8000407e <fetchaddr>
-    80007040:	02054a63          	bltz	a0,80007074 <sys_exec+0xa8>
+    80005f24:	00391513          	slli	a0,s2,0x3
+    80005f28:	e3040593          	addi	a1,s0,-464
+    80005f2c:	e3843783          	ld	a5,-456(s0)
+    80005f30:	953e                	add	a0,a0,a5
+    80005f32:	ffffd097          	auipc	ra,0xffffd
+    80005f36:	0aa080e7          	jalr	170(ra) # 80002fdc <fetchaddr>
+    80005f3a:	02054a63          	bltz	a0,80005f6e <sys_exec+0xa8>
       goto bad;
     }
     if(uarg == 0){
-    80007044:	e3043783          	ld	a5,-464(s0)
-    80007048:	c3b9                	beqz	a5,8000708e <sys_exec+0xc2>
+    80005f3e:	e3043783          	ld	a5,-464(s0)
+    80005f42:	c3b9                	beqz	a5,80005f88 <sys_exec+0xc2>
       argv[i] = 0;
       break;
     }
     argv[i] = kalloc();
-    8000704a:	ffffa097          	auipc	ra,0xffffa
-    8000704e:	aaa080e7          	jalr	-1366(ra) # 80000af4 <kalloc>
-    80007052:	85aa                	mv	a1,a0
-    80007054:	00a9b023          	sd	a0,0(s3)
+    80005f44:	ffffb097          	auipc	ra,0xffffb
+    80005f48:	bb0080e7          	jalr	-1104(ra) # 80000af4 <kalloc>
+    80005f4c:	85aa                	mv	a1,a0
+    80005f4e:	00a9b023          	sd	a0,0(s3)
     if(argv[i] == 0)
-    80007058:	cd11                	beqz	a0,80007074 <sys_exec+0xa8>
+    80005f52:	cd11                	beqz	a0,80005f6e <sys_exec+0xa8>
       goto bad;
     if(fetchstr(uarg, argv[i], PGSIZE) < 0)
-    8000705a:	6605                	lui	a2,0x1
-    8000705c:	e3043503          	ld	a0,-464(s0)
-    80007060:	ffffd097          	auipc	ra,0xffffd
-    80007064:	070080e7          	jalr	112(ra) # 800040d0 <fetchstr>
-    80007068:	00054663          	bltz	a0,80007074 <sys_exec+0xa8>
+    80005f54:	6605                	lui	a2,0x1
+    80005f56:	e3043503          	ld	a0,-464(s0)
+    80005f5a:	ffffd097          	auipc	ra,0xffffd
+    80005f5e:	0d4080e7          	jalr	212(ra) # 8000302e <fetchstr>
+    80005f62:	00054663          	bltz	a0,80005f6e <sys_exec+0xa8>
     if(i >= NELEM(argv)){
-    8000706c:	0905                	addi	s2,s2,1
-    8000706e:	09a1                	addi	s3,s3,8
-    80007070:	fb491be3          	bne	s2,s4,80007026 <sys_exec+0x5a>
+    80005f66:	0905                	addi	s2,s2,1
+    80005f68:	09a1                	addi	s3,s3,8
+    80005f6a:	fb491be3          	bne	s2,s4,80005f20 <sys_exec+0x5a>
     kfree(argv[i]);
 
   return ret;
 
  bad:
   for(i = 0; i < NELEM(argv) && argv[i] != 0; i++)
-    80007074:	10048913          	addi	s2,s1,256
-    80007078:	6088                	ld	a0,0(s1)
-    8000707a:	c529                	beqz	a0,800070c4 <sys_exec+0xf8>
+    80005f6e:	10048913          	addi	s2,s1,256
+    80005f72:	6088                	ld	a0,0(s1)
+    80005f74:	c529                	beqz	a0,80005fbe <sys_exec+0xf8>
     kfree(argv[i]);
-    8000707c:	ffffa097          	auipc	ra,0xffffa
-    80007080:	97c080e7          	jalr	-1668(ra) # 800009f8 <kfree>
+    80005f76:	ffffb097          	auipc	ra,0xffffb
+    80005f7a:	a82080e7          	jalr	-1406(ra) # 800009f8 <kfree>
   for(i = 0; i < NELEM(argv) && argv[i] != 0; i++)
-    80007084:	04a1                	addi	s1,s1,8
-    80007086:	ff2499e3          	bne	s1,s2,80007078 <sys_exec+0xac>
+    80005f7e:	04a1                	addi	s1,s1,8
+    80005f80:	ff2499e3          	bne	s1,s2,80005f72 <sys_exec+0xac>
   return -1;
-    8000708a:	597d                	li	s2,-1
-    8000708c:	a82d                	j	800070c6 <sys_exec+0xfa>
+    80005f84:	597d                	li	s2,-1
+    80005f86:	a82d                	j	80005fc0 <sys_exec+0xfa>
       argv[i] = 0;
-    8000708e:	0a8e                	slli	s5,s5,0x3
-    80007090:	fc040793          	addi	a5,s0,-64
-    80007094:	9abe                	add	s5,s5,a5
-    80007096:	e80ab023          	sd	zero,-384(s5)
+    80005f88:	0a8e                	slli	s5,s5,0x3
+    80005f8a:	fc040793          	addi	a5,s0,-64
+    80005f8e:	9abe                	add	s5,s5,a5
+    80005f90:	e80ab023          	sd	zero,-384(s5)
   int ret = exec(path, argv);
-    8000709a:	e4040593          	addi	a1,s0,-448
-    8000709e:	f4040513          	addi	a0,s0,-192
-    800070a2:	fffff097          	auipc	ra,0xfffff
-    800070a6:	192080e7          	jalr	402(ra) # 80006234 <exec>
-    800070aa:	892a                	mv	s2,a0
+    80005f94:	e4040593          	addi	a1,s0,-448
+    80005f98:	f4040513          	addi	a0,s0,-192
+    80005f9c:	fffff097          	auipc	ra,0xfffff
+    80005fa0:	194080e7          	jalr	404(ra) # 80005130 <exec>
+    80005fa4:	892a                	mv	s2,a0
   for(i = 0; i < NELEM(argv) && argv[i] != 0; i++)
-    800070ac:	10048993          	addi	s3,s1,256
-    800070b0:	6088                	ld	a0,0(s1)
-    800070b2:	c911                	beqz	a0,800070c6 <sys_exec+0xfa>
+    80005fa6:	10048993          	addi	s3,s1,256
+    80005faa:	6088                	ld	a0,0(s1)
+    80005fac:	c911                	beqz	a0,80005fc0 <sys_exec+0xfa>
     kfree(argv[i]);
-    800070b4:	ffffa097          	auipc	ra,0xffffa
-    800070b8:	944080e7          	jalr	-1724(ra) # 800009f8 <kfree>
+    80005fae:	ffffb097          	auipc	ra,0xffffb
+    80005fb2:	a4a080e7          	jalr	-1462(ra) # 800009f8 <kfree>
   for(i = 0; i < NELEM(argv) && argv[i] != 0; i++)
-    800070bc:	04a1                	addi	s1,s1,8
-    800070be:	ff3499e3          	bne	s1,s3,800070b0 <sys_exec+0xe4>
-    800070c2:	a011                	j	800070c6 <sys_exec+0xfa>
+    80005fb6:	04a1                	addi	s1,s1,8
+    80005fb8:	ff3499e3          	bne	s1,s3,80005faa <sys_exec+0xe4>
+    80005fbc:	a011                	j	80005fc0 <sys_exec+0xfa>
   return -1;
-    800070c4:	597d                	li	s2,-1
+    80005fbe:	597d                	li	s2,-1
 }
-    800070c6:	854a                	mv	a0,s2
-    800070c8:	60be                	ld	ra,456(sp)
-    800070ca:	641e                	ld	s0,448(sp)
-    800070cc:	74fa                	ld	s1,440(sp)
-    800070ce:	795a                	ld	s2,432(sp)
-    800070d0:	79ba                	ld	s3,424(sp)
-    800070d2:	7a1a                	ld	s4,416(sp)
-    800070d4:	6afa                	ld	s5,408(sp)
-    800070d6:	6179                	addi	sp,sp,464
-    800070d8:	8082                	ret
+    80005fc0:	854a                	mv	a0,s2
+    80005fc2:	60be                	ld	ra,456(sp)
+    80005fc4:	641e                	ld	s0,448(sp)
+    80005fc6:	74fa                	ld	s1,440(sp)
+    80005fc8:	795a                	ld	s2,432(sp)
+    80005fca:	79ba                	ld	s3,424(sp)
+    80005fcc:	7a1a                	ld	s4,416(sp)
+    80005fce:	6afa                	ld	s5,408(sp)
+    80005fd0:	6179                	addi	sp,sp,464
+    80005fd2:	8082                	ret
 
-00000000800070da <sys_pipe>:
+0000000080005fd4 <sys_pipe>:
 
 uint64
 sys_pipe(void)
 {
-    800070da:	7139                	addi	sp,sp,-64
-    800070dc:	fc06                	sd	ra,56(sp)
-    800070de:	f822                	sd	s0,48(sp)
-    800070e0:	f426                	sd	s1,40(sp)
-    800070e2:	0080                	addi	s0,sp,64
+    80005fd4:	7139                	addi	sp,sp,-64
+    80005fd6:	fc06                	sd	ra,56(sp)
+    80005fd8:	f822                	sd	s0,48(sp)
+    80005fda:	f426                	sd	s1,40(sp)
+    80005fdc:	0080                	addi	s0,sp,64
   uint64 fdarray; // user pointer to array of two integers
   struct file *rf, *wf;
   int fd0, fd1;
   struct proc *p = myproc();
-    800070e4:	ffffb097          	auipc	ra,0xffffb
-    800070e8:	ab0080e7          	jalr	-1360(ra) # 80001b94 <myproc>
-    800070ec:	84aa                	mv	s1,a0
+    80005fde:	ffffc097          	auipc	ra,0xffffc
+    80005fe2:	cf2080e7          	jalr	-782(ra) # 80001cd0 <myproc>
+    80005fe6:	84aa                	mv	s1,a0
 
   if(argaddr(0, &fdarray) < 0)
-    800070ee:	fd840593          	addi	a1,s0,-40
-    800070f2:	4501                	li	a0,0
-    800070f4:	ffffd097          	auipc	ra,0xffffd
-    800070f8:	046080e7          	jalr	70(ra) # 8000413a <argaddr>
+    80005fe8:	fd840593          	addi	a1,s0,-40
+    80005fec:	4501                	li	a0,0
+    80005fee:	ffffd097          	auipc	ra,0xffffd
+    80005ff2:	0aa080e7          	jalr	170(ra) # 80003098 <argaddr>
     return -1;
-    800070fc:	57fd                	li	a5,-1
+    80005ff6:	57fd                	li	a5,-1
   if(argaddr(0, &fdarray) < 0)
-    800070fe:	0e054263          	bltz	a0,800071e2 <sys_pipe+0x108>
+    80005ff8:	0e054063          	bltz	a0,800060d8 <sys_pipe+0x104>
   if(pipealloc(&rf, &wf) < 0)
-    80007102:	fc840593          	addi	a1,s0,-56
-    80007106:	fd040513          	addi	a0,s0,-48
-    8000710a:	fffff097          	auipc	ra,0xfffff
-    8000710e:	dfa080e7          	jalr	-518(ra) # 80005f04 <pipealloc>
+    80005ffc:	fc840593          	addi	a1,s0,-56
+    80006000:	fd040513          	addi	a0,s0,-48
+    80006004:	fffff097          	auipc	ra,0xfffff
+    80006008:	dfc080e7          	jalr	-516(ra) # 80004e00 <pipealloc>
     return -1;
-    80007112:	57fd                	li	a5,-1
+    8000600c:	57fd                	li	a5,-1
   if(pipealloc(&rf, &wf) < 0)
-    80007114:	0c054763          	bltz	a0,800071e2 <sys_pipe+0x108>
+    8000600e:	0c054563          	bltz	a0,800060d8 <sys_pipe+0x104>
   fd0 = -1;
-    80007118:	fcf42223          	sw	a5,-60(s0)
+    80006012:	fcf42223          	sw	a5,-60(s0)
   if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
-    8000711c:	fd043503          	ld	a0,-48(s0)
-    80007120:	fffff097          	auipc	ra,0xfffff
-    80007124:	506080e7          	jalr	1286(ra) # 80006626 <fdalloc>
-    80007128:	fca42223          	sw	a0,-60(s0)
-    8000712c:	08054e63          	bltz	a0,800071c8 <sys_pipe+0xee>
-    80007130:	fc843503          	ld	a0,-56(s0)
-    80007134:	fffff097          	auipc	ra,0xfffff
-    80007138:	4f2080e7          	jalr	1266(ra) # 80006626 <fdalloc>
-    8000713c:	fca42023          	sw	a0,-64(s0)
-    80007140:	06054a63          	bltz	a0,800071b4 <sys_pipe+0xda>
+    80006016:	fd043503          	ld	a0,-48(s0)
+    8000601a:	fffff097          	auipc	ra,0xfffff
+    8000601e:	508080e7          	jalr	1288(ra) # 80005522 <fdalloc>
+    80006022:	fca42223          	sw	a0,-60(s0)
+    80006026:	08054c63          	bltz	a0,800060be <sys_pipe+0xea>
+    8000602a:	fc843503          	ld	a0,-56(s0)
+    8000602e:	fffff097          	auipc	ra,0xfffff
+    80006032:	4f4080e7          	jalr	1268(ra) # 80005522 <fdalloc>
+    80006036:	fca42023          	sw	a0,-64(s0)
+    8000603a:	06054863          	bltz	a0,800060aa <sys_pipe+0xd6>
       p->ofile[fd0] = 0;
     fileclose(rf);
     fileclose(wf);
     return -1;
   }
   if(copyout(p->pagetable, fdarray, (char*)&fd0, sizeof(fd0)) < 0 ||
-    80007144:	4691                	li	a3,4
-    80007146:	fc440613          	addi	a2,s0,-60
-    8000714a:	fd843583          	ld	a1,-40(s0)
-    8000714e:	60c8                	ld	a0,128(s1)
-    80007150:	ffffa097          	auipc	ra,0xffffa
-    80007154:	52a080e7          	jalr	1322(ra) # 8000167a <copyout>
-    80007158:	02054063          	bltz	a0,80007178 <sys_pipe+0x9e>
+    8000603e:	4691                	li	a3,4
+    80006040:	fc440613          	addi	a2,s0,-60
+    80006044:	fd843583          	ld	a1,-40(s0)
+    80006048:	68a8                	ld	a0,80(s1)
+    8000604a:	ffffb097          	auipc	ra,0xffffb
+    8000604e:	628080e7          	jalr	1576(ra) # 80001672 <copyout>
+    80006052:	02054063          	bltz	a0,80006072 <sys_pipe+0x9e>
      copyout(p->pagetable, fdarray+sizeof(fd0), (char *)&fd1, sizeof(fd1)) < 0){
-    8000715c:	4691                	li	a3,4
-    8000715e:	fc040613          	addi	a2,s0,-64
-    80007162:	fd843583          	ld	a1,-40(s0)
-    80007166:	0591                	addi	a1,a1,4
-    80007168:	60c8                	ld	a0,128(s1)
-    8000716a:	ffffa097          	auipc	ra,0xffffa
-    8000716e:	510080e7          	jalr	1296(ra) # 8000167a <copyout>
+    80006056:	4691                	li	a3,4
+    80006058:	fc040613          	addi	a2,s0,-64
+    8000605c:	fd843583          	ld	a1,-40(s0)
+    80006060:	0591                	addi	a1,a1,4
+    80006062:	68a8                	ld	a0,80(s1)
+    80006064:	ffffb097          	auipc	ra,0xffffb
+    80006068:	60e080e7          	jalr	1550(ra) # 80001672 <copyout>
     p->ofile[fd1] = 0;
     fileclose(rf);
     fileclose(wf);
     return -1;
   }
   return 0;
-    80007172:	4781                	li	a5,0
+    8000606c:	4781                	li	a5,0
   if(copyout(p->pagetable, fdarray, (char*)&fd0, sizeof(fd0)) < 0 ||
-    80007174:	06055763          	bgez	a0,800071e2 <sys_pipe+0x108>
+    8000606e:	06055563          	bgez	a0,800060d8 <sys_pipe+0x104>
     p->ofile[fd0] = 0;
-    80007178:	fc442783          	lw	a5,-60(s0)
-    8000717c:	02078793          	addi	a5,a5,32
-    80007180:	078e                	slli	a5,a5,0x3
-    80007182:	97a6                	add	a5,a5,s1
-    80007184:	0007b023          	sd	zero,0(a5)
+    80006072:	fc442783          	lw	a5,-60(s0)
+    80006076:	07e9                	addi	a5,a5,26
+    80006078:	078e                	slli	a5,a5,0x3
+    8000607a:	97a6                	add	a5,a5,s1
+    8000607c:	0007b023          	sd	zero,0(a5)
     p->ofile[fd1] = 0;
-    80007188:	fc042503          	lw	a0,-64(s0)
-    8000718c:	02050513          	addi	a0,a0,32
-    80007190:	050e                	slli	a0,a0,0x3
-    80007192:	9526                	add	a0,a0,s1
-    80007194:	00053023          	sd	zero,0(a0)
+    80006080:	fc042503          	lw	a0,-64(s0)
+    80006084:	0569                	addi	a0,a0,26
+    80006086:	050e                	slli	a0,a0,0x3
+    80006088:	9526                	add	a0,a0,s1
+    8000608a:	00053023          	sd	zero,0(a0)
     fileclose(rf);
-    80007198:	fd043503          	ld	a0,-48(s0)
-    8000719c:	fffff097          	auipc	ra,0xfffff
-    800071a0:	a38080e7          	jalr	-1480(ra) # 80005bd4 <fileclose>
+    8000608e:	fd043503          	ld	a0,-48(s0)
+    80006092:	fffff097          	auipc	ra,0xfffff
+    80006096:	a3e080e7          	jalr	-1474(ra) # 80004ad0 <fileclose>
     fileclose(wf);
-    800071a4:	fc843503          	ld	a0,-56(s0)
-    800071a8:	fffff097          	auipc	ra,0xfffff
-    800071ac:	a2c080e7          	jalr	-1492(ra) # 80005bd4 <fileclose>
+    8000609a:	fc843503          	ld	a0,-56(s0)
+    8000609e:	fffff097          	auipc	ra,0xfffff
+    800060a2:	a32080e7          	jalr	-1486(ra) # 80004ad0 <fileclose>
     return -1;
-    800071b0:	57fd                	li	a5,-1
-    800071b2:	a805                	j	800071e2 <sys_pipe+0x108>
+    800060a6:	57fd                	li	a5,-1
+    800060a8:	a805                	j	800060d8 <sys_pipe+0x104>
     if(fd0 >= 0)
-    800071b4:	fc442783          	lw	a5,-60(s0)
-    800071b8:	0007c863          	bltz	a5,800071c8 <sys_pipe+0xee>
+    800060aa:	fc442783          	lw	a5,-60(s0)
+    800060ae:	0007c863          	bltz	a5,800060be <sys_pipe+0xea>
       p->ofile[fd0] = 0;
-    800071bc:	02078513          	addi	a0,a5,32
-    800071c0:	050e                	slli	a0,a0,0x3
-    800071c2:	9526                	add	a0,a0,s1
-    800071c4:	00053023          	sd	zero,0(a0)
+    800060b2:	01a78513          	addi	a0,a5,26
+    800060b6:	050e                	slli	a0,a0,0x3
+    800060b8:	9526                	add	a0,a0,s1
+    800060ba:	00053023          	sd	zero,0(a0)
     fileclose(rf);
-    800071c8:	fd043503          	ld	a0,-48(s0)
-    800071cc:	fffff097          	auipc	ra,0xfffff
-    800071d0:	a08080e7          	jalr	-1528(ra) # 80005bd4 <fileclose>
+    800060be:	fd043503          	ld	a0,-48(s0)
+    800060c2:	fffff097          	auipc	ra,0xfffff
+    800060c6:	a0e080e7          	jalr	-1522(ra) # 80004ad0 <fileclose>
     fileclose(wf);
-    800071d4:	fc843503          	ld	a0,-56(s0)
-    800071d8:	fffff097          	auipc	ra,0xfffff
-    800071dc:	9fc080e7          	jalr	-1540(ra) # 80005bd4 <fileclose>
+    800060ca:	fc843503          	ld	a0,-56(s0)
+    800060ce:	fffff097          	auipc	ra,0xfffff
+    800060d2:	a02080e7          	jalr	-1534(ra) # 80004ad0 <fileclose>
     return -1;
-    800071e0:	57fd                	li	a5,-1
-}
-    800071e2:	853e                	mv	a0,a5
-    800071e4:	70e2                	ld	ra,56(sp)
-    800071e6:	7442                	ld	s0,48(sp)
-    800071e8:	74a2                	ld	s1,40(sp)
-    800071ea:	6121                	addi	sp,sp,64
-    800071ec:	8082                	ret
+    800060d6:	57fd                	li	a5,-1
+}
+    800060d8:	853e                	mv	a0,a5
+    800060da:	70e2                	ld	ra,56(sp)
+    800060dc:	7442                	ld	s0,48(sp)
+    800060de:	74a2                	ld	s1,40(sp)
+    800060e0:	6121                	addi	sp,sp,64
+    800060e2:	8082                	ret
 	...
 
-00000000800071f0 <kernelvec>:
-    800071f0:	7111                	addi	sp,sp,-256
-    800071f2:	e006                	sd	ra,0(sp)
-    800071f4:	e40a                	sd	sp,8(sp)
-    800071f6:	e80e                	sd	gp,16(sp)
-    800071f8:	ec12                	sd	tp,24(sp)
-    800071fa:	f016                	sd	t0,32(sp)
-    800071fc:	f41a                	sd	t1,40(sp)
-    800071fe:	f81e                	sd	t2,48(sp)
-    80007200:	fc22                	sd	s0,56(sp)
-    80007202:	e0a6                	sd	s1,64(sp)
-    80007204:	e4aa                	sd	a0,72(sp)
-    80007206:	e8ae                	sd	a1,80(sp)
-    80007208:	ecb2                	sd	a2,88(sp)
-    8000720a:	f0b6                	sd	a3,96(sp)
-    8000720c:	f4ba                	sd	a4,104(sp)
-    8000720e:	f8be                	sd	a5,112(sp)
-    80007210:	fcc2                	sd	a6,120(sp)
-    80007212:	e146                	sd	a7,128(sp)
-    80007214:	e54a                	sd	s2,136(sp)
-    80007216:	e94e                	sd	s3,144(sp)
-    80007218:	ed52                	sd	s4,152(sp)
-    8000721a:	f156                	sd	s5,160(sp)
-    8000721c:	f55a                	sd	s6,168(sp)
-    8000721e:	f95e                	sd	s7,176(sp)
-    80007220:	fd62                	sd	s8,184(sp)
-    80007222:	e1e6                	sd	s9,192(sp)
-    80007224:	e5ea                	sd	s10,200(sp)
-    80007226:	e9ee                	sd	s11,208(sp)
-    80007228:	edf2                	sd	t3,216(sp)
-    8000722a:	f1f6                	sd	t4,224(sp)
-    8000722c:	f5fa                	sd	t5,232(sp)
-    8000722e:	f9fe                	sd	t6,240(sp)
-    80007230:	ceffc0ef          	jal	ra,80003f1e <kerneltrap>
-    80007234:	6082                	ld	ra,0(sp)
-    80007236:	6122                	ld	sp,8(sp)
-    80007238:	61c2                	ld	gp,16(sp)
-    8000723a:	7282                	ld	t0,32(sp)
-    8000723c:	7322                	ld	t1,40(sp)
-    8000723e:	73c2                	ld	t2,48(sp)
-    80007240:	7462                	ld	s0,56(sp)
-    80007242:	6486                	ld	s1,64(sp)
-    80007244:	6526                	ld	a0,72(sp)
-    80007246:	65c6                	ld	a1,80(sp)
-    80007248:	6666                	ld	a2,88(sp)
-    8000724a:	7686                	ld	a3,96(sp)
-    8000724c:	7726                	ld	a4,104(sp)
-    8000724e:	77c6                	ld	a5,112(sp)
-    80007250:	7866                	ld	a6,120(sp)
-    80007252:	688a                	ld	a7,128(sp)
-    80007254:	692a                	ld	s2,136(sp)
-    80007256:	69ca                	ld	s3,144(sp)
-    80007258:	6a6a                	ld	s4,152(sp)
-    8000725a:	7a8a                	ld	s5,160(sp)
-    8000725c:	7b2a                	ld	s6,168(sp)
-    8000725e:	7bca                	ld	s7,176(sp)
-    80007260:	7c6a                	ld	s8,184(sp)
-    80007262:	6c8e                	ld	s9,192(sp)
-    80007264:	6d2e                	ld	s10,200(sp)
-    80007266:	6dce                	ld	s11,208(sp)
-    80007268:	6e6e                	ld	t3,216(sp)
-    8000726a:	7e8e                	ld	t4,224(sp)
-    8000726c:	7f2e                	ld	t5,232(sp)
-    8000726e:	7fce                	ld	t6,240(sp)
-    80007270:	6111                	addi	sp,sp,256
-    80007272:	10200073          	sret
-    80007276:	00000013          	nop
-    8000727a:	00000013          	nop
-    8000727e:	0001                	nop
-
-0000000080007280 <timervec>:
-    80007280:	34051573          	csrrw	a0,mscratch,a0
-    80007284:	e10c                	sd	a1,0(a0)
-    80007286:	e510                	sd	a2,8(a0)
-    80007288:	e914                	sd	a3,16(a0)
-    8000728a:	6d0c                	ld	a1,24(a0)
-    8000728c:	7110                	ld	a2,32(a0)
-    8000728e:	6194                	ld	a3,0(a1)
-    80007290:	96b2                	add	a3,a3,a2
-    80007292:	e194                	sd	a3,0(a1)
-    80007294:	4589                	li	a1,2
-    80007296:	14459073          	csrw	sip,a1
-    8000729a:	6914                	ld	a3,16(a0)
-    8000729c:	6510                	ld	a2,8(a0)
-    8000729e:	610c                	ld	a1,0(a0)
-    800072a0:	34051573          	csrrw	a0,mscratch,a0
-    800072a4:	30200073          	mret
+00000000800060f0 <kernelvec>:
+    800060f0:	7111                	addi	sp,sp,-256
+    800060f2:	e006                	sd	ra,0(sp)
+    800060f4:	e40a                	sd	sp,8(sp)
+    800060f6:	e80e                	sd	gp,16(sp)
+    800060f8:	ec12                	sd	tp,24(sp)
+    800060fa:	f016                	sd	t0,32(sp)
+    800060fc:	f41a                	sd	t1,40(sp)
+    800060fe:	f81e                	sd	t2,48(sp)
+    80006100:	fc22                	sd	s0,56(sp)
+    80006102:	e0a6                	sd	s1,64(sp)
+    80006104:	e4aa                	sd	a0,72(sp)
+    80006106:	e8ae                	sd	a1,80(sp)
+    80006108:	ecb2                	sd	a2,88(sp)
+    8000610a:	f0b6                	sd	a3,96(sp)
+    8000610c:	f4ba                	sd	a4,104(sp)
+    8000610e:	f8be                	sd	a5,112(sp)
+    80006110:	fcc2                	sd	a6,120(sp)
+    80006112:	e146                	sd	a7,128(sp)
+    80006114:	e54a                	sd	s2,136(sp)
+    80006116:	e94e                	sd	s3,144(sp)
+    80006118:	ed52                	sd	s4,152(sp)
+    8000611a:	f156                	sd	s5,160(sp)
+    8000611c:	f55a                	sd	s6,168(sp)
+    8000611e:	f95e                	sd	s7,176(sp)
+    80006120:	fd62                	sd	s8,184(sp)
+    80006122:	e1e6                	sd	s9,192(sp)
+    80006124:	e5ea                	sd	s10,200(sp)
+    80006126:	e9ee                	sd	s11,208(sp)
+    80006128:	edf2                	sd	t3,216(sp)
+    8000612a:	f1f6                	sd	t4,224(sp)
+    8000612c:	f5fa                	sd	t5,232(sp)
+    8000612e:	f9fe                	sd	t6,240(sp)
+    80006130:	d79fc0ef          	jal	ra,80002ea8 <kerneltrap>
+    80006134:	6082                	ld	ra,0(sp)
+    80006136:	6122                	ld	sp,8(sp)
+    80006138:	61c2                	ld	gp,16(sp)
+    8000613a:	7282                	ld	t0,32(sp)
+    8000613c:	7322                	ld	t1,40(sp)
+    8000613e:	73c2                	ld	t2,48(sp)
+    80006140:	7462                	ld	s0,56(sp)
+    80006142:	6486                	ld	s1,64(sp)
+    80006144:	6526                	ld	a0,72(sp)
+    80006146:	65c6                	ld	a1,80(sp)
+    80006148:	6666                	ld	a2,88(sp)
+    8000614a:	7686                	ld	a3,96(sp)
+    8000614c:	7726                	ld	a4,104(sp)
+    8000614e:	77c6                	ld	a5,112(sp)
+    80006150:	7866                	ld	a6,120(sp)
+    80006152:	688a                	ld	a7,128(sp)
+    80006154:	692a                	ld	s2,136(sp)
+    80006156:	69ca                	ld	s3,144(sp)
+    80006158:	6a6a                	ld	s4,152(sp)
+    8000615a:	7a8a                	ld	s5,160(sp)
+    8000615c:	7b2a                	ld	s6,168(sp)
+    8000615e:	7bca                	ld	s7,176(sp)
+    80006160:	7c6a                	ld	s8,184(sp)
+    80006162:	6c8e                	ld	s9,192(sp)
+    80006164:	6d2e                	ld	s10,200(sp)
+    80006166:	6dce                	ld	s11,208(sp)
+    80006168:	6e6e                	ld	t3,216(sp)
+    8000616a:	7e8e                	ld	t4,224(sp)
+    8000616c:	7f2e                	ld	t5,232(sp)
+    8000616e:	7fce                	ld	t6,240(sp)
+    80006170:	6111                	addi	sp,sp,256
+    80006172:	10200073          	sret
+    80006176:	00000013          	nop
+    8000617a:	00000013          	nop
+    8000617e:	0001                	nop
+
+0000000080006180 <timervec>:
+    80006180:	34051573          	csrrw	a0,mscratch,a0
+    80006184:	e10c                	sd	a1,0(a0)
+    80006186:	e510                	sd	a2,8(a0)
+    80006188:	e914                	sd	a3,16(a0)
+    8000618a:	6d0c                	ld	a1,24(a0)
+    8000618c:	7110                	ld	a2,32(a0)
+    8000618e:	6194                	ld	a3,0(a1)
+    80006190:	96b2                	add	a3,a3,a2
+    80006192:	e194                	sd	a3,0(a1)
+    80006194:	4589                	li	a1,2
+    80006196:	14459073          	csrw	sip,a1
+    8000619a:	6914                	ld	a3,16(a0)
+    8000619c:	6510                	ld	a2,8(a0)
+    8000619e:	610c                	ld	a1,0(a0)
+    800061a0:	34051573          	csrrw	a0,mscratch,a0
+    800061a4:	30200073          	mret
 	...
 
-00000000800072aa <plicinit>:
+00000000800061aa <plicinit>:
 // the riscv Platform Level Interrupt Controller (PLIC).
 //
 
 void
 plicinit(void)
 {
-    800072aa:	1141                	addi	sp,sp,-16
-    800072ac:	e422                	sd	s0,8(sp)
-    800072ae:	0800                	addi	s0,sp,16
+    800061aa:	1141                	addi	sp,sp,-16
+    800061ac:	e422                	sd	s0,8(sp)
+    800061ae:	0800                	addi	s0,sp,16
   // set desired IRQ priorities non-zero (otherwise disabled).
   *(uint32*)(PLIC + UART0_IRQ*4) = 1;
-    800072b0:	0c0007b7          	lui	a5,0xc000
-    800072b4:	4705                	li	a4,1
-    800072b6:	d798                	sw	a4,40(a5)
+    800061b0:	0c0007b7          	lui	a5,0xc000
+    800061b4:	4705                	li	a4,1
+    800061b6:	d798                	sw	a4,40(a5)
   *(uint32*)(PLIC + VIRTIO0_IRQ*4) = 1;
-    800072b8:	c3d8                	sw	a4,4(a5)
+    800061b8:	c3d8                	sw	a4,4(a5)
 }
-    800072ba:	6422                	ld	s0,8(sp)
-    800072bc:	0141                	addi	sp,sp,16
-    800072be:	8082                	ret
+    800061ba:	6422                	ld	s0,8(sp)
+    800061bc:	0141                	addi	sp,sp,16
+    800061be:	8082                	ret
 
-00000000800072c0 <plicinithart>:
+00000000800061c0 <plicinithart>:
 
 void
 plicinithart(void)
 {
-    800072c0:	1141                	addi	sp,sp,-16
-    800072c2:	e406                	sd	ra,8(sp)
-    800072c4:	e022                	sd	s0,0(sp)
-    800072c6:	0800                	addi	s0,sp,16
+    800061c0:	1141                	addi	sp,sp,-16
+    800061c2:	e406                	sd	ra,8(sp)
+    800061c4:	e022                	sd	s0,0(sp)
+    800061c6:	0800                	addi	s0,sp,16
   int hart = cpuid();
-    800072c8:	ffffb097          	auipc	ra,0xffffb
-    800072cc:	890080e7          	jalr	-1904(ra) # 80001b58 <cpuid>
+    800061c8:	ffffc097          	auipc	ra,0xffffc
+    800061cc:	ad6080e7          	jalr	-1322(ra) # 80001c9e <cpuid>
   
   // set uart's enable bit for this hart's S-mode. 
   *(uint32*)PLIC_SENABLE(hart)= (1 << UART0_IRQ) | (1 << VIRTIO0_IRQ);
-    800072d0:	0085171b          	slliw	a4,a0,0x8
-    800072d4:	0c0027b7          	lui	a5,0xc002
-    800072d8:	97ba                	add	a5,a5,a4
-    800072da:	40200713          	li	a4,1026
-    800072de:	08e7a023          	sw	a4,128(a5) # c002080 <_entry-0x73ffdf80>
+    800061d0:	0085171b          	slliw	a4,a0,0x8
+    800061d4:	0c0027b7          	lui	a5,0xc002
+    800061d8:	97ba                	add	a5,a5,a4
+    800061da:	40200713          	li	a4,1026
+    800061de:	08e7a023          	sw	a4,128(a5) # c002080 <_entry-0x73ffdf80>
 
   // set this hart's S-mode priority threshold to 0.
   *(uint32*)PLIC_SPRIORITY(hart) = 0;
-    800072e2:	00d5151b          	slliw	a0,a0,0xd
-    800072e6:	0c2017b7          	lui	a5,0xc201
-    800072ea:	953e                	add	a0,a0,a5
-    800072ec:	00052023          	sw	zero,0(a0)
+    800061e2:	00d5151b          	slliw	a0,a0,0xd
+    800061e6:	0c2017b7          	lui	a5,0xc201
+    800061ea:	953e                	add	a0,a0,a5
+    800061ec:	00052023          	sw	zero,0(a0)
 }
-    800072f0:	60a2                	ld	ra,8(sp)
-    800072f2:	6402                	ld	s0,0(sp)
-    800072f4:	0141                	addi	sp,sp,16
-    800072f6:	8082                	ret
+    800061f0:	60a2                	ld	ra,8(sp)
+    800061f2:	6402                	ld	s0,0(sp)
+    800061f4:	0141                	addi	sp,sp,16
+    800061f6:	8082                	ret
 
-00000000800072f8 <plic_claim>:
+00000000800061f8 <plic_claim>:
 
 // ask the PLIC what interrupt we should serve.
 int
 plic_claim(void)
 {
-    800072f8:	1141                	addi	sp,sp,-16
-    800072fa:	e406                	sd	ra,8(sp)
-    800072fc:	e022                	sd	s0,0(sp)
-    800072fe:	0800                	addi	s0,sp,16
+    800061f8:	1141                	addi	sp,sp,-16
+    800061fa:	e406                	sd	ra,8(sp)
+    800061fc:	e022                	sd	s0,0(sp)
+    800061fe:	0800                	addi	s0,sp,16
   int hart = cpuid();
-    80007300:	ffffb097          	auipc	ra,0xffffb
-    80007304:	858080e7          	jalr	-1960(ra) # 80001b58 <cpuid>
+    80006200:	ffffc097          	auipc	ra,0xffffc
+    80006204:	a9e080e7          	jalr	-1378(ra) # 80001c9e <cpuid>
   int irq = *(uint32*)PLIC_SCLAIM(hart);
-    80007308:	00d5179b          	slliw	a5,a0,0xd
-    8000730c:	0c201537          	lui	a0,0xc201
-    80007310:	953e                	add	a0,a0,a5
+    80006208:	00d5179b          	slliw	a5,a0,0xd
+    8000620c:	0c201537          	lui	a0,0xc201
+    80006210:	953e                	add	a0,a0,a5
   return irq;
 }
-    80007312:	4148                	lw	a0,4(a0)
-    80007314:	60a2                	ld	ra,8(sp)
-    80007316:	6402                	ld	s0,0(sp)
-    80007318:	0141                	addi	sp,sp,16
-    8000731a:	8082                	ret
+    80006212:	4148                	lw	a0,4(a0)
+    80006214:	60a2                	ld	ra,8(sp)
+    80006216:	6402                	ld	s0,0(sp)
+    80006218:	0141                	addi	sp,sp,16
+    8000621a:	8082                	ret
 
-000000008000731c <plic_complete>:
+000000008000621c <plic_complete>:
 
 // tell the PLIC we've served this IRQ.
 void
 plic_complete(int irq)
 {
-    8000731c:	1101                	addi	sp,sp,-32
-    8000731e:	ec06                	sd	ra,24(sp)
-    80007320:	e822                	sd	s0,16(sp)
-    80007322:	e426                	sd	s1,8(sp)
-    80007324:	1000                	addi	s0,sp,32
-    80007326:	84aa                	mv	s1,a0
+    8000621c:	1101                	addi	sp,sp,-32
+    8000621e:	ec06                	sd	ra,24(sp)
+    80006220:	e822                	sd	s0,16(sp)
+    80006222:	e426                	sd	s1,8(sp)
+    80006224:	1000                	addi	s0,sp,32
+    80006226:	84aa                	mv	s1,a0
   int hart = cpuid();
-    80007328:	ffffb097          	auipc	ra,0xffffb
-    8000732c:	830080e7          	jalr	-2000(ra) # 80001b58 <cpuid>
+    80006228:	ffffc097          	auipc	ra,0xffffc
+    8000622c:	a76080e7          	jalr	-1418(ra) # 80001c9e <cpuid>
   *(uint32*)PLIC_SCLAIM(hart) = irq;
-    80007330:	00d5151b          	slliw	a0,a0,0xd
-    80007334:	0c2017b7          	lui	a5,0xc201
-    80007338:	97aa                	add	a5,a5,a0
-    8000733a:	c3c4                	sw	s1,4(a5)
+    80006230:	00d5151b          	slliw	a0,a0,0xd
+    80006234:	0c2017b7          	lui	a5,0xc201
+    80006238:	97aa                	add	a5,a5,a0
+    8000623a:	c3c4                	sw	s1,4(a5)
 }
-    8000733c:	60e2                	ld	ra,24(sp)
-    8000733e:	6442                	ld	s0,16(sp)
-    80007340:	64a2                	ld	s1,8(sp)
-    80007342:	6105                	addi	sp,sp,32
-    80007344:	8082                	ret
+    8000623c:	60e2                	ld	ra,24(sp)
+    8000623e:	6442                	ld	s0,16(sp)
+    80006240:	64a2                	ld	s1,8(sp)
+    80006242:	6105                	addi	sp,sp,32
+    80006244:	8082                	ret
 
-0000000080007346 <free_desc>:
+0000000080006246 <free_desc>:
 }
 
 // mark a descriptor as free.
 static void
 free_desc(int i)
 {
-    80007346:	1141                	addi	sp,sp,-16
-    80007348:	e406                	sd	ra,8(sp)
-    8000734a:	e022                	sd	s0,0(sp)
-    8000734c:	0800                	addi	s0,sp,16
+    80006246:	1141                	addi	sp,sp,-16
+    80006248:	e406                	sd	ra,8(sp)
+    8000624a:	e022                	sd	s0,0(sp)
+    8000624c:	0800                	addi	s0,sp,16
   if(i >= NUM)
-    8000734e:	479d                	li	a5,7
-    80007350:	06a7c963          	blt	a5,a0,800073c2 <free_desc+0x7c>
+    8000624e:	479d                	li	a5,7
+    80006250:	06a7c963          	blt	a5,a0,800062c2 <free_desc+0x7c>
     panic("free_desc 1");
   if(disk.free[i])
-    80007354:	0001e797          	auipc	a5,0x1e
-    80007358:	cac78793          	addi	a5,a5,-852 # 80025000 <disk>
-    8000735c:	00a78733          	add	a4,a5,a0
-    80007360:	6789                	lui	a5,0x2
-    80007362:	97ba                	add	a5,a5,a4
-    80007364:	0187c783          	lbu	a5,24(a5) # 2018 <_entry-0x7fffdfe8>
-    80007368:	e7ad                	bnez	a5,800073d2 <free_desc+0x8c>
+    80006254:	0001d797          	auipc	a5,0x1d
+    80006258:	dac78793          	addi	a5,a5,-596 # 80023000 <disk>
+    8000625c:	00a78733          	add	a4,a5,a0
+    80006260:	6789                	lui	a5,0x2
+    80006262:	97ba                	add	a5,a5,a4
+    80006264:	0187c783          	lbu	a5,24(a5) # 2018 <_entry-0x7fffdfe8>
+    80006268:	e7ad                	bnez	a5,800062d2 <free_desc+0x8c>
     panic("free_desc 2");
   disk.desc[i].addr = 0;
-    8000736a:	00451793          	slli	a5,a0,0x4
-    8000736e:	00020717          	auipc	a4,0x20
-    80007372:	c9270713          	addi	a4,a4,-878 # 80027000 <disk+0x2000>
-    80007376:	6314                	ld	a3,0(a4)
-    80007378:	96be                	add	a3,a3,a5
-    8000737a:	0006b023          	sd	zero,0(a3)
+    8000626a:	00451793          	slli	a5,a0,0x4
+    8000626e:	0001f717          	auipc	a4,0x1f
+    80006272:	d9270713          	addi	a4,a4,-622 # 80025000 <disk+0x2000>
+    80006276:	6314                	ld	a3,0(a4)
+    80006278:	96be                	add	a3,a3,a5
+    8000627a:	0006b023          	sd	zero,0(a3)
   disk.desc[i].len = 0;
-    8000737e:	6314                	ld	a3,0(a4)
-    80007380:	96be                	add	a3,a3,a5
-    80007382:	0006a423          	sw	zero,8(a3)
+    8000627e:	6314                	ld	a3,0(a4)
+    80006280:	96be                	add	a3,a3,a5
+    80006282:	0006a423          	sw	zero,8(a3)
   disk.desc[i].flags = 0;
-    80007386:	6314                	ld	a3,0(a4)
-    80007388:	96be                	add	a3,a3,a5
-    8000738a:	00069623          	sh	zero,12(a3)
+    80006286:	6314                	ld	a3,0(a4)
+    80006288:	96be                	add	a3,a3,a5
+    8000628a:	00069623          	sh	zero,12(a3)
   disk.desc[i].next = 0;
-    8000738e:	6318                	ld	a4,0(a4)
-    80007390:	97ba                	add	a5,a5,a4
-    80007392:	00079723          	sh	zero,14(a5)
+    8000628e:	6318                	ld	a4,0(a4)
+    80006290:	97ba                	add	a5,a5,a4
+    80006292:	00079723          	sh	zero,14(a5)
   disk.free[i] = 1;
-    80007396:	0001e797          	auipc	a5,0x1e
-    8000739a:	c6a78793          	addi	a5,a5,-918 # 80025000 <disk>
-    8000739e:	97aa                	add	a5,a5,a0
-    800073a0:	6509                	lui	a0,0x2
-    800073a2:	953e                	add	a0,a0,a5
-    800073a4:	4785                	li	a5,1
-    800073a6:	00f50c23          	sb	a5,24(a0) # 2018 <_entry-0x7fffdfe8>
+    80006296:	0001d797          	auipc	a5,0x1d
+    8000629a:	d6a78793          	addi	a5,a5,-662 # 80023000 <disk>
+    8000629e:	97aa                	add	a5,a5,a0
+    800062a0:	6509                	lui	a0,0x2
+    800062a2:	953e                	add	a0,a0,a5
+    800062a4:	4785                	li	a5,1
+    800062a6:	00f50c23          	sb	a5,24(a0) # 2018 <_entry-0x7fffdfe8>
   wakeup(&disk.free[0]);
-    800073aa:	00020517          	auipc	a0,0x20
-    800073ae:	c6e50513          	addi	a0,a0,-914 # 80027018 <disk+0x2018>
-    800073b2:	ffffc097          	auipc	ra,0xffffc
-    800073b6:	ce2080e7          	jalr	-798(ra) # 80003094 <wakeup>
-}
-    800073ba:	60a2                	ld	ra,8(sp)
-    800073bc:	6402                	ld	s0,0(sp)
-    800073be:	0141                	addi	sp,sp,16
-    800073c0:	8082                	ret
+    800062aa:	0001f517          	auipc	a0,0x1f
+    800062ae:	d6e50513          	addi	a0,a0,-658 # 80025018 <disk+0x2018>
+    800062b2:	ffffc097          	auipc	ra,0xffffc
+    800062b6:	42e080e7          	jalr	1070(ra) # 800026e0 <wakeup>
+}
+    800062ba:	60a2                	ld	ra,8(sp)
+    800062bc:	6402                	ld	s0,0(sp)
+    800062be:	0141                	addi	sp,sp,16
+    800062c0:	8082                	ret
     panic("free_desc 1");
-    800073c2:	00002517          	auipc	a0,0x2
-    800073c6:	7ae50513          	addi	a0,a0,1966 # 80009b70 <syscalls+0x348>
-    800073ca:	ffff9097          	auipc	ra,0xffff9
-    800073ce:	174080e7          	jalr	372(ra) # 8000053e <panic>
+    800062c2:	00002517          	auipc	a0,0x2
+    800062c6:	53e50513          	addi	a0,a0,1342 # 80008800 <syscalls+0x330>
+    800062ca:	ffffa097          	auipc	ra,0xffffa
+    800062ce:	274080e7          	jalr	628(ra) # 8000053e <panic>
     panic("free_desc 2");
-    800073d2:	00002517          	auipc	a0,0x2
-    800073d6:	7ae50513          	addi	a0,a0,1966 # 80009b80 <syscalls+0x358>
-    800073da:	ffff9097          	auipc	ra,0xffff9
-    800073de:	164080e7          	jalr	356(ra) # 8000053e <panic>
-
-00000000800073e2 <virtio_disk_init>:
-{
-    800073e2:	1101                	addi	sp,sp,-32
-    800073e4:	ec06                	sd	ra,24(sp)
-    800073e6:	e822                	sd	s0,16(sp)
-    800073e8:	e426                	sd	s1,8(sp)
-    800073ea:	1000                	addi	s0,sp,32
+    800062d2:	00002517          	auipc	a0,0x2
+    800062d6:	53e50513          	addi	a0,a0,1342 # 80008810 <syscalls+0x340>
+    800062da:	ffffa097          	auipc	ra,0xffffa
+    800062de:	264080e7          	jalr	612(ra) # 8000053e <panic>
+
+00000000800062e2 <virtio_disk_init>:
+{
+    800062e2:	1101                	addi	sp,sp,-32
+    800062e4:	ec06                	sd	ra,24(sp)
+    800062e6:	e822                	sd	s0,16(sp)
+    800062e8:	e426                	sd	s1,8(sp)
+    800062ea:	1000                	addi	s0,sp,32
   initlock(&disk.vdisk_lock, "virtio_disk");
-    800073ec:	00002597          	auipc	a1,0x2
-    800073f0:	7a458593          	addi	a1,a1,1956 # 80009b90 <syscalls+0x368>
-    800073f4:	00020517          	auipc	a0,0x20
-    800073f8:	d3450513          	addi	a0,a0,-716 # 80027128 <disk+0x2128>
-    800073fc:	ffff9097          	auipc	ra,0xffff9
-    80007400:	758080e7          	jalr	1880(ra) # 80000b54 <initlock>
+    800062ec:	00002597          	auipc	a1,0x2
+    800062f0:	53458593          	addi	a1,a1,1332 # 80008820 <syscalls+0x350>
+    800062f4:	0001f517          	auipc	a0,0x1f
+    800062f8:	e3450513          	addi	a0,a0,-460 # 80025128 <disk+0x2128>
+    800062fc:	ffffb097          	auipc	ra,0xffffb
+    80006300:	858080e7          	jalr	-1960(ra) # 80000b54 <initlock>
   if(*R(VIRTIO_MMIO_MAGIC_VALUE) != 0x74726976 ||
-    80007404:	100017b7          	lui	a5,0x10001
-    80007408:	4398                	lw	a4,0(a5)
-    8000740a:	2701                	sext.w	a4,a4
-    8000740c:	747277b7          	lui	a5,0x74727
-    80007410:	97678793          	addi	a5,a5,-1674 # 74726976 <_entry-0xb8d968a>
-    80007414:	0ef71163          	bne	a4,a5,800074f6 <virtio_disk_init+0x114>
+    80006304:	100017b7          	lui	a5,0x10001
+    80006308:	4398                	lw	a4,0(a5)
+    8000630a:	2701                	sext.w	a4,a4
+    8000630c:	747277b7          	lui	a5,0x74727
+    80006310:	97678793          	addi	a5,a5,-1674 # 74726976 <_entry-0xb8d968a>
+    80006314:	0ef71163          	bne	a4,a5,800063f6 <virtio_disk_init+0x114>
      *R(VIRTIO_MMIO_VERSION) != 1 ||
-    80007418:	100017b7          	lui	a5,0x10001
-    8000741c:	43dc                	lw	a5,4(a5)
-    8000741e:	2781                	sext.w	a5,a5
+    80006318:	100017b7          	lui	a5,0x10001
+    8000631c:	43dc                	lw	a5,4(a5)
+    8000631e:	2781                	sext.w	a5,a5
   if(*R(VIRTIO_MMIO_MAGIC_VALUE) != 0x74726976 ||
-    80007420:	4705                	li	a4,1
-    80007422:	0ce79a63          	bne	a5,a4,800074f6 <virtio_disk_init+0x114>
+    80006320:	4705                	li	a4,1
+    80006322:	0ce79a63          	bne	a5,a4,800063f6 <virtio_disk_init+0x114>
      *R(VIRTIO_MMIO_DEVICE_ID) != 2 ||
-    80007426:	100017b7          	lui	a5,0x10001
-    8000742a:	479c                	lw	a5,8(a5)
-    8000742c:	2781                	sext.w	a5,a5
+    80006326:	100017b7          	lui	a5,0x10001
+    8000632a:	479c                	lw	a5,8(a5)
+    8000632c:	2781                	sext.w	a5,a5
      *R(VIRTIO_MMIO_VERSION) != 1 ||
-    8000742e:	4709                	li	a4,2
-    80007430:	0ce79363          	bne	a5,a4,800074f6 <virtio_disk_init+0x114>
+    8000632e:	4709                	li	a4,2
+    80006330:	0ce79363          	bne	a5,a4,800063f6 <virtio_disk_init+0x114>
      *R(VIRTIO_MMIO_VENDOR_ID) != 0x554d4551){
-    80007434:	100017b7          	lui	a5,0x10001
-    80007438:	47d8                	lw	a4,12(a5)
-    8000743a:	2701                	sext.w	a4,a4
+    80006334:	100017b7          	lui	a5,0x10001
+    80006338:	47d8                	lw	a4,12(a5)
+    8000633a:	2701                	sext.w	a4,a4
      *R(VIRTIO_MMIO_DEVICE_ID) != 2 ||
-    8000743c:	554d47b7          	lui	a5,0x554d4
-    80007440:	55178793          	addi	a5,a5,1361 # 554d4551 <_entry-0x2ab2baaf>
-    80007444:	0af71963          	bne	a4,a5,800074f6 <virtio_disk_init+0x114>
+    8000633c:	554d47b7          	lui	a5,0x554d4
+    80006340:	55178793          	addi	a5,a5,1361 # 554d4551 <_entry-0x2ab2baaf>
+    80006344:	0af71963          	bne	a4,a5,800063f6 <virtio_disk_init+0x114>
   *R(VIRTIO_MMIO_STATUS) = status;
-    80007448:	100017b7          	lui	a5,0x10001
-    8000744c:	4705                	li	a4,1
-    8000744e:	dbb8                	sw	a4,112(a5)
+    80006348:	100017b7          	lui	a5,0x10001
+    8000634c:	4705                	li	a4,1
+    8000634e:	dbb8                	sw	a4,112(a5)
   *R(VIRTIO_MMIO_STATUS) = status;
-    80007450:	470d                	li	a4,3
-    80007452:	dbb8                	sw	a4,112(a5)
+    80006350:	470d                	li	a4,3
+    80006352:	dbb8                	sw	a4,112(a5)
   uint64 features = *R(VIRTIO_MMIO_DEVICE_FEATURES);
-    80007454:	4b94                	lw	a3,16(a5)
+    80006354:	4b94                	lw	a3,16(a5)
   features &= ~(1 << VIRTIO_RING_F_INDIRECT_DESC);
-    80007456:	c7ffe737          	lui	a4,0xc7ffe
-    8000745a:	75f70713          	addi	a4,a4,1887 # ffffffffc7ffe75f <end+0xffffffff47fd675f>
-    8000745e:	8f75                	and	a4,a4,a3
+    80006356:	c7ffe737          	lui	a4,0xc7ffe
+    8000635a:	75f70713          	addi	a4,a4,1887 # ffffffffc7ffe75f <end+0xffffffff47fd875f>
+    8000635e:	8f75                	and	a4,a4,a3
   *R(VIRTIO_MMIO_DRIVER_FEATURES) = features;
-    80007460:	2701                	sext.w	a4,a4
-    80007462:	d398                	sw	a4,32(a5)
+    80006360:	2701                	sext.w	a4,a4
+    80006362:	d398                	sw	a4,32(a5)
   *R(VIRTIO_MMIO_STATUS) = status;
-    80007464:	472d                	li	a4,11
-    80007466:	dbb8                	sw	a4,112(a5)
+    80006364:	472d                	li	a4,11
+    80006366:	dbb8                	sw	a4,112(a5)
   *R(VIRTIO_MMIO_STATUS) = status;
-    80007468:	473d                	li	a4,15
-    8000746a:	dbb8                	sw	a4,112(a5)
+    80006368:	473d                	li	a4,15
+    8000636a:	dbb8                	sw	a4,112(a5)
   *R(VIRTIO_MMIO_GUEST_PAGE_SIZE) = PGSIZE;
-    8000746c:	6705                	lui	a4,0x1
-    8000746e:	d798                	sw	a4,40(a5)
+    8000636c:	6705                	lui	a4,0x1
+    8000636e:	d798                	sw	a4,40(a5)
   *R(VIRTIO_MMIO_QUEUE_SEL) = 0;
-    80007470:	0207a823          	sw	zero,48(a5) # 10001030 <_entry-0x6fffefd0>
+    80006370:	0207a823          	sw	zero,48(a5) # 10001030 <_entry-0x6fffefd0>
   uint32 max = *R(VIRTIO_MMIO_QUEUE_NUM_MAX);
-    80007474:	5bdc                	lw	a5,52(a5)
-    80007476:	2781                	sext.w	a5,a5
+    80006374:	5bdc                	lw	a5,52(a5)
+    80006376:	2781                	sext.w	a5,a5
   if(max == 0)
-    80007478:	c7d9                	beqz	a5,80007506 <virtio_disk_init+0x124>
+    80006378:	c7d9                	beqz	a5,80006406 <virtio_disk_init+0x124>
   if(max < NUM)
-    8000747a:	471d                	li	a4,7
-    8000747c:	08f77d63          	bgeu	a4,a5,80007516 <virtio_disk_init+0x134>
+    8000637a:	471d                	li	a4,7
+    8000637c:	08f77d63          	bgeu	a4,a5,80006416 <virtio_disk_init+0x134>
   *R(VIRTIO_MMIO_QUEUE_NUM) = NUM;
-    80007480:	100014b7          	lui	s1,0x10001
-    80007484:	47a1                	li	a5,8
-    80007486:	dc9c                	sw	a5,56(s1)
+    80006380:	100014b7          	lui	s1,0x10001
+    80006384:	47a1                	li	a5,8
+    80006386:	dc9c                	sw	a5,56(s1)
   memset(disk.pages, 0, sizeof(disk.pages));
-    80007488:	6609                	lui	a2,0x2
-    8000748a:	4581                	li	a1,0
-    8000748c:	0001e517          	auipc	a0,0x1e
-    80007490:	b7450513          	addi	a0,a0,-1164 # 80025000 <disk>
-    80007494:	ffffa097          	auipc	ra,0xffffa
-    80007498:	84c080e7          	jalr	-1972(ra) # 80000ce0 <memset>
+    80006388:	6609                	lui	a2,0x2
+    8000638a:	4581                	li	a1,0
+    8000638c:	0001d517          	auipc	a0,0x1d
+    80006390:	c7450513          	addi	a0,a0,-908 # 80023000 <disk>
+    80006394:	ffffb097          	auipc	ra,0xffffb
+    80006398:	94c080e7          	jalr	-1716(ra) # 80000ce0 <memset>
   *R(VIRTIO_MMIO_QUEUE_PFN) = ((uint64)disk.pages) >> PGSHIFT;
-    8000749c:	0001e717          	auipc	a4,0x1e
-    800074a0:	b6470713          	addi	a4,a4,-1180 # 80025000 <disk>
-    800074a4:	00c75793          	srli	a5,a4,0xc
-    800074a8:	2781                	sext.w	a5,a5
-    800074aa:	c0bc                	sw	a5,64(s1)
+    8000639c:	0001d717          	auipc	a4,0x1d
+    800063a0:	c6470713          	addi	a4,a4,-924 # 80023000 <disk>
+    800063a4:	00c75793          	srli	a5,a4,0xc
+    800063a8:	2781                	sext.w	a5,a5
+    800063aa:	c0bc                	sw	a5,64(s1)
   disk.desc = (struct virtq_desc *) disk.pages;
-    800074ac:	00020797          	auipc	a5,0x20
-    800074b0:	b5478793          	addi	a5,a5,-1196 # 80027000 <disk+0x2000>
-    800074b4:	e398                	sd	a4,0(a5)
+    800063ac:	0001f797          	auipc	a5,0x1f
+    800063b0:	c5478793          	addi	a5,a5,-940 # 80025000 <disk+0x2000>
+    800063b4:	e398                	sd	a4,0(a5)
   disk.avail = (struct virtq_avail *)(disk.pages + NUM*sizeof(struct virtq_desc));
-    800074b6:	0001e717          	auipc	a4,0x1e
-    800074ba:	bca70713          	addi	a4,a4,-1078 # 80025080 <disk+0x80>
-    800074be:	e798                	sd	a4,8(a5)
+    800063b6:	0001d717          	auipc	a4,0x1d
+    800063ba:	cca70713          	addi	a4,a4,-822 # 80023080 <disk+0x80>
+    800063be:	e798                	sd	a4,8(a5)
   disk.used = (struct virtq_used *) (disk.pages + PGSIZE);
-    800074c0:	0001f717          	auipc	a4,0x1f
-    800074c4:	b4070713          	addi	a4,a4,-1216 # 80026000 <disk+0x1000>
-    800074c8:	eb98                	sd	a4,16(a5)
+    800063c0:	0001e717          	auipc	a4,0x1e
+    800063c4:	c4070713          	addi	a4,a4,-960 # 80024000 <disk+0x1000>
+    800063c8:	eb98                	sd	a4,16(a5)
     disk.free[i] = 1;
-    800074ca:	4705                	li	a4,1
-    800074cc:	00e78c23          	sb	a4,24(a5)
-    800074d0:	00e78ca3          	sb	a4,25(a5)
-    800074d4:	00e78d23          	sb	a4,26(a5)
-    800074d8:	00e78da3          	sb	a4,27(a5)
-    800074dc:	00e78e23          	sb	a4,28(a5)
-    800074e0:	00e78ea3          	sb	a4,29(a5)
-    800074e4:	00e78f23          	sb	a4,30(a5)
-    800074e8:	00e78fa3          	sb	a4,31(a5)
-}
-    800074ec:	60e2                	ld	ra,24(sp)
-    800074ee:	6442                	ld	s0,16(sp)
-    800074f0:	64a2                	ld	s1,8(sp)
-    800074f2:	6105                	addi	sp,sp,32
-    800074f4:	8082                	ret
+    800063ca:	4705                	li	a4,1
+    800063cc:	00e78c23          	sb	a4,24(a5)
+    800063d0:	00e78ca3          	sb	a4,25(a5)
+    800063d4:	00e78d23          	sb	a4,26(a5)
+    800063d8:	00e78da3          	sb	a4,27(a5)
+    800063dc:	00e78e23          	sb	a4,28(a5)
+    800063e0:	00e78ea3          	sb	a4,29(a5)
+    800063e4:	00e78f23          	sb	a4,30(a5)
+    800063e8:	00e78fa3          	sb	a4,31(a5)
+}
+    800063ec:	60e2                	ld	ra,24(sp)
+    800063ee:	6442                	ld	s0,16(sp)
+    800063f0:	64a2                	ld	s1,8(sp)
+    800063f2:	6105                	addi	sp,sp,32
+    800063f4:	8082                	ret
     panic("could not find virtio disk");
-    800074f6:	00002517          	auipc	a0,0x2
-    800074fa:	6aa50513          	addi	a0,a0,1706 # 80009ba0 <syscalls+0x378>
-    800074fe:	ffff9097          	auipc	ra,0xffff9
-    80007502:	040080e7          	jalr	64(ra) # 8000053e <panic>
+    800063f6:	00002517          	auipc	a0,0x2
+    800063fa:	43a50513          	addi	a0,a0,1082 # 80008830 <syscalls+0x360>
+    800063fe:	ffffa097          	auipc	ra,0xffffa
+    80006402:	140080e7          	jalr	320(ra) # 8000053e <panic>
     panic("virtio disk has no queue 0");
-    80007506:	00002517          	auipc	a0,0x2
-    8000750a:	6ba50513          	addi	a0,a0,1722 # 80009bc0 <syscalls+0x398>
-    8000750e:	ffff9097          	auipc	ra,0xffff9
-    80007512:	030080e7          	jalr	48(ra) # 8000053e <panic>
+    80006406:	00002517          	auipc	a0,0x2
+    8000640a:	44a50513          	addi	a0,a0,1098 # 80008850 <syscalls+0x380>
+    8000640e:	ffffa097          	auipc	ra,0xffffa
+    80006412:	130080e7          	jalr	304(ra) # 8000053e <panic>
     panic("virtio disk max queue too short");
-    80007516:	00002517          	auipc	a0,0x2
-    8000751a:	6ca50513          	addi	a0,a0,1738 # 80009be0 <syscalls+0x3b8>
-    8000751e:	ffff9097          	auipc	ra,0xffff9
-    80007522:	020080e7          	jalr	32(ra) # 8000053e <panic>
+    80006416:	00002517          	auipc	a0,0x2
+    8000641a:	45a50513          	addi	a0,a0,1114 # 80008870 <syscalls+0x3a0>
+    8000641e:	ffffa097          	auipc	ra,0xffffa
+    80006422:	120080e7          	jalr	288(ra) # 8000053e <panic>
 
-0000000080007526 <virtio_disk_rw>:
+0000000080006426 <virtio_disk_rw>:
   return 0;
 }
 
 void
 virtio_disk_rw(struct buf *b, int write)
 {
-    80007526:	7159                	addi	sp,sp,-112
-    80007528:	f486                	sd	ra,104(sp)
-    8000752a:	f0a2                	sd	s0,96(sp)
-    8000752c:	eca6                	sd	s1,88(sp)
-    8000752e:	e8ca                	sd	s2,80(sp)
-    80007530:	e4ce                	sd	s3,72(sp)
-    80007532:	e0d2                	sd	s4,64(sp)
-    80007534:	fc56                	sd	s5,56(sp)
-    80007536:	f85a                	sd	s6,48(sp)
-    80007538:	f45e                	sd	s7,40(sp)
-    8000753a:	f062                	sd	s8,32(sp)
-    8000753c:	ec66                	sd	s9,24(sp)
-    8000753e:	e86a                	sd	s10,16(sp)
-    80007540:	1880                	addi	s0,sp,112
-    80007542:	892a                	mv	s2,a0
-    80007544:	8d2e                	mv	s10,a1
+    80006426:	7159                	addi	sp,sp,-112
+    80006428:	f486                	sd	ra,104(sp)
+    8000642a:	f0a2                	sd	s0,96(sp)
+    8000642c:	eca6                	sd	s1,88(sp)
+    8000642e:	e8ca                	sd	s2,80(sp)
+    80006430:	e4ce                	sd	s3,72(sp)
+    80006432:	e0d2                	sd	s4,64(sp)
+    80006434:	fc56                	sd	s5,56(sp)
+    80006436:	f85a                	sd	s6,48(sp)
+    80006438:	f45e                	sd	s7,40(sp)
+    8000643a:	f062                	sd	s8,32(sp)
+    8000643c:	ec66                	sd	s9,24(sp)
+    8000643e:	e86a                	sd	s10,16(sp)
+    80006440:	1880                	addi	s0,sp,112
+    80006442:	892a                	mv	s2,a0
+    80006444:	8d2e                	mv	s10,a1
   uint64 sector = b->blockno * (BSIZE / 512);
-    80007546:	00c52c83          	lw	s9,12(a0)
-    8000754a:	001c9c9b          	slliw	s9,s9,0x1
-    8000754e:	1c82                	slli	s9,s9,0x20
-    80007550:	020cdc93          	srli	s9,s9,0x20
+    80006446:	00c52c83          	lw	s9,12(a0)
+    8000644a:	001c9c9b          	slliw	s9,s9,0x1
+    8000644e:	1c82                	slli	s9,s9,0x20
+    80006450:	020cdc93          	srli	s9,s9,0x20
 
   acquire(&disk.vdisk_lock);
-    80007554:	00020517          	auipc	a0,0x20
-    80007558:	bd450513          	addi	a0,a0,-1068 # 80027128 <disk+0x2128>
-    8000755c:	ffff9097          	auipc	ra,0xffff9
-    80007560:	688080e7          	jalr	1672(ra) # 80000be4 <acquire>
+    80006454:	0001f517          	auipc	a0,0x1f
+    80006458:	cd450513          	addi	a0,a0,-812 # 80025128 <disk+0x2128>
+    8000645c:	ffffa097          	auipc	ra,0xffffa
+    80006460:	788080e7          	jalr	1928(ra) # 80000be4 <acquire>
   for(int i = 0; i < 3; i++){
-    80007564:	4981                	li	s3,0
+    80006464:	4981                	li	s3,0
   for(int i = 0; i < NUM; i++){
-    80007566:	4c21                	li	s8,8
+    80006466:	4c21                	li	s8,8
       disk.free[i] = 0;
-    80007568:	0001eb97          	auipc	s7,0x1e
-    8000756c:	a98b8b93          	addi	s7,s7,-1384 # 80025000 <disk>
-    80007570:	6b09                	lui	s6,0x2
+    80006468:	0001db97          	auipc	s7,0x1d
+    8000646c:	b98b8b93          	addi	s7,s7,-1128 # 80023000 <disk>
+    80006470:	6b09                	lui	s6,0x2
   for(int i = 0; i < 3; i++){
-    80007572:	4a8d                	li	s5,3
+    80006472:	4a8d                	li	s5,3
   for(int i = 0; i < NUM; i++){
-    80007574:	8a4e                	mv	s4,s3
-    80007576:	a051                	j	800075fa <virtio_disk_rw+0xd4>
+    80006474:	8a4e                	mv	s4,s3
+    80006476:	a051                	j	800064fa <virtio_disk_rw+0xd4>
       disk.free[i] = 0;
-    80007578:	00fb86b3          	add	a3,s7,a5
-    8000757c:	96da                	add	a3,a3,s6
-    8000757e:	00068c23          	sb	zero,24(a3)
+    80006478:	00fb86b3          	add	a3,s7,a5
+    8000647c:	96da                	add	a3,a3,s6
+    8000647e:	00068c23          	sb	zero,24(a3)
     idx[i] = alloc_desc();
-    80007582:	c21c                	sw	a5,0(a2)
+    80006482:	c21c                	sw	a5,0(a2)
     if(idx[i] < 0){
-    80007584:	0207c563          	bltz	a5,800075ae <virtio_disk_rw+0x88>
+    80006484:	0207c563          	bltz	a5,800064ae <virtio_disk_rw+0x88>
   for(int i = 0; i < 3; i++){
-    80007588:	2485                	addiw	s1,s1,1
-    8000758a:	0711                	addi	a4,a4,4
-    8000758c:	25548063          	beq	s1,s5,800077cc <virtio_disk_rw+0x2a6>
+    80006488:	2485                	addiw	s1,s1,1
+    8000648a:	0711                	addi	a4,a4,4
+    8000648c:	25548063          	beq	s1,s5,800066cc <virtio_disk_rw+0x2a6>
     idx[i] = alloc_desc();
-    80007590:	863a                	mv	a2,a4
+    80006490:	863a                	mv	a2,a4
   for(int i = 0; i < NUM; i++){
-    80007592:	00020697          	auipc	a3,0x20
-    80007596:	a8668693          	addi	a3,a3,-1402 # 80027018 <disk+0x2018>
-    8000759a:	87d2                	mv	a5,s4
+    80006492:	0001f697          	auipc	a3,0x1f
+    80006496:	b8668693          	addi	a3,a3,-1146 # 80025018 <disk+0x2018>
+    8000649a:	87d2                	mv	a5,s4
     if(disk.free[i]){
-    8000759c:	0006c583          	lbu	a1,0(a3)
-    800075a0:	fde1                	bnez	a1,80007578 <virtio_disk_rw+0x52>
+    8000649c:	0006c583          	lbu	a1,0(a3)
+    800064a0:	fde1                	bnez	a1,80006478 <virtio_disk_rw+0x52>
   for(int i = 0; i < NUM; i++){
-    800075a2:	2785                	addiw	a5,a5,1
-    800075a4:	0685                	addi	a3,a3,1
-    800075a6:	ff879be3          	bne	a5,s8,8000759c <virtio_disk_rw+0x76>
+    800064a2:	2785                	addiw	a5,a5,1
+    800064a4:	0685                	addi	a3,a3,1
+    800064a6:	ff879be3          	bne	a5,s8,8000649c <virtio_disk_rw+0x76>
     idx[i] = alloc_desc();
-    800075aa:	57fd                	li	a5,-1
-    800075ac:	c21c                	sw	a5,0(a2)
+    800064aa:	57fd                	li	a5,-1
+    800064ac:	c21c                	sw	a5,0(a2)
       for(int j = 0; j < i; j++)
-    800075ae:	02905a63          	blez	s1,800075e2 <virtio_disk_rw+0xbc>
+    800064ae:	02905a63          	blez	s1,800064e2 <virtio_disk_rw+0xbc>
         free_desc(idx[j]);
-    800075b2:	f9042503          	lw	a0,-112(s0)
-    800075b6:	00000097          	auipc	ra,0x0
-    800075ba:	d90080e7          	jalr	-624(ra) # 80007346 <free_desc>
+    800064b2:	f9042503          	lw	a0,-112(s0)
+    800064b6:	00000097          	auipc	ra,0x0
+    800064ba:	d90080e7          	jalr	-624(ra) # 80006246 <free_desc>
       for(int j = 0; j < i; j++)
-    800075be:	4785                	li	a5,1
-    800075c0:	0297d163          	bge	a5,s1,800075e2 <virtio_disk_rw+0xbc>
+    800064be:	4785                	li	a5,1
+    800064c0:	0297d163          	bge	a5,s1,800064e2 <virtio_disk_rw+0xbc>
         free_desc(idx[j]);
-    800075c4:	f9442503          	lw	a0,-108(s0)
-    800075c8:	00000097          	auipc	ra,0x0
-    800075cc:	d7e080e7          	jalr	-642(ra) # 80007346 <free_desc>
+    800064c4:	f9442503          	lw	a0,-108(s0)
+    800064c8:	00000097          	auipc	ra,0x0
+    800064cc:	d7e080e7          	jalr	-642(ra) # 80006246 <free_desc>
       for(int j = 0; j < i; j++)
-    800075d0:	4789                	li	a5,2
-    800075d2:	0097d863          	bge	a5,s1,800075e2 <virtio_disk_rw+0xbc>
+    800064d0:	4789                	li	a5,2
+    800064d2:	0097d863          	bge	a5,s1,800064e2 <virtio_disk_rw+0xbc>
         free_desc(idx[j]);
-    800075d6:	f9842503          	lw	a0,-104(s0)
-    800075da:	00000097          	auipc	ra,0x0
-    800075de:	d6c080e7          	jalr	-660(ra) # 80007346 <free_desc>
+    800064d6:	f9842503          	lw	a0,-104(s0)
+    800064da:	00000097          	auipc	ra,0x0
+    800064de:	d6c080e7          	jalr	-660(ra) # 80006246 <free_desc>
   int idx[3];
   while(1){
     if(alloc3_desc(idx) == 0) {
       break;
     }
     sleep(&disk.free[0], &disk.vdisk_lock);
-    800075e2:	00020597          	auipc	a1,0x20
-    800075e6:	b4658593          	addi	a1,a1,-1210 # 80027128 <disk+0x2128>
-    800075ea:	00020517          	auipc	a0,0x20
-    800075ee:	a2e50513          	addi	a0,a0,-1490 # 80027018 <disk+0x2018>
-    800075f2:	ffffb097          	auipc	ra,0xffffb
-    800075f6:	68c080e7          	jalr	1676(ra) # 80002c7e <sleep>
+    800064e2:	0001f597          	auipc	a1,0x1f
+    800064e6:	c4658593          	addi	a1,a1,-954 # 80025128 <disk+0x2128>
+    800064ea:	0001f517          	auipc	a0,0x1f
+    800064ee:	b2e50513          	addi	a0,a0,-1234 # 80025018 <disk+0x2018>
+    800064f2:	ffffc097          	auipc	ra,0xffffc
+    800064f6:	050080e7          	jalr	80(ra) # 80002542 <sleep>
   for(int i = 0; i < 3; i++){
-    800075fa:	f9040713          	addi	a4,s0,-112
-    800075fe:	84ce                	mv	s1,s3
-    80007600:	bf41                	j	80007590 <virtio_disk_rw+0x6a>
+    800064fa:	f9040713          	addi	a4,s0,-112
+    800064fe:	84ce                	mv	s1,s3
+    80006500:	bf41                	j	80006490 <virtio_disk_rw+0x6a>
   // qemu's virtio-blk.c reads them.
 
   struct virtio_blk_req *buf0 = &disk.ops[idx[0]];
 
   if(write)
     buf0->type = VIRTIO_BLK_T_OUT; // write the disk
-    80007602:	20058713          	addi	a4,a1,512
-    80007606:	00471693          	slli	a3,a4,0x4
-    8000760a:	0001e717          	auipc	a4,0x1e
-    8000760e:	9f670713          	addi	a4,a4,-1546 # 80025000 <disk>
-    80007612:	9736                	add	a4,a4,a3
-    80007614:	4685                	li	a3,1
-    80007616:	0ad72423          	sw	a3,168(a4)
+    80006502:	20058713          	addi	a4,a1,512
+    80006506:	00471693          	slli	a3,a4,0x4
+    8000650a:	0001d717          	auipc	a4,0x1d
+    8000650e:	af670713          	addi	a4,a4,-1290 # 80023000 <disk>
+    80006512:	9736                	add	a4,a4,a3
+    80006514:	4685                	li	a3,1
+    80006516:	0ad72423          	sw	a3,168(a4)
   else
     buf0->type = VIRTIO_BLK_T_IN; // read the disk
   buf0->reserved = 0;
-    8000761a:	20058713          	addi	a4,a1,512
-    8000761e:	00471693          	slli	a3,a4,0x4
-    80007622:	0001e717          	auipc	a4,0x1e
-    80007626:	9de70713          	addi	a4,a4,-1570 # 80025000 <disk>
-    8000762a:	9736                	add	a4,a4,a3
-    8000762c:	0a072623          	sw	zero,172(a4)
+    8000651a:	20058713          	addi	a4,a1,512
+    8000651e:	00471693          	slli	a3,a4,0x4
+    80006522:	0001d717          	auipc	a4,0x1d
+    80006526:	ade70713          	addi	a4,a4,-1314 # 80023000 <disk>
+    8000652a:	9736                	add	a4,a4,a3
+    8000652c:	0a072623          	sw	zero,172(a4)
   buf0->sector = sector;
-    80007630:	0b973823          	sd	s9,176(a4)
+    80006530:	0b973823          	sd	s9,176(a4)
 
   disk.desc[idx[0]].addr = (uint64) buf0;
-    80007634:	7679                	lui	a2,0xffffe
-    80007636:	963e                	add	a2,a2,a5
-    80007638:	00020697          	auipc	a3,0x20
-    8000763c:	9c868693          	addi	a3,a3,-1592 # 80027000 <disk+0x2000>
-    80007640:	6298                	ld	a4,0(a3)
-    80007642:	9732                	add	a4,a4,a2
-    80007644:	e308                	sd	a0,0(a4)
+    80006534:	7679                	lui	a2,0xffffe
+    80006536:	963e                	add	a2,a2,a5
+    80006538:	0001f697          	auipc	a3,0x1f
+    8000653c:	ac868693          	addi	a3,a3,-1336 # 80025000 <disk+0x2000>
+    80006540:	6298                	ld	a4,0(a3)
+    80006542:	9732                	add	a4,a4,a2
+    80006544:	e308                	sd	a0,0(a4)
   disk.desc[idx[0]].len = sizeof(struct virtio_blk_req);
-    80007646:	6298                	ld	a4,0(a3)
-    80007648:	9732                	add	a4,a4,a2
-    8000764a:	4541                	li	a0,16
-    8000764c:	c708                	sw	a0,8(a4)
+    80006546:	6298                	ld	a4,0(a3)
+    80006548:	9732                	add	a4,a4,a2
+    8000654a:	4541                	li	a0,16
+    8000654c:	c708                	sw	a0,8(a4)
   disk.desc[idx[0]].flags = VRING_DESC_F_NEXT;
-    8000764e:	6298                	ld	a4,0(a3)
-    80007650:	9732                	add	a4,a4,a2
-    80007652:	4505                	li	a0,1
-    80007654:	00a71623          	sh	a0,12(a4)
+    8000654e:	6298                	ld	a4,0(a3)
+    80006550:	9732                	add	a4,a4,a2
+    80006552:	4505                	li	a0,1
+    80006554:	00a71623          	sh	a0,12(a4)
   disk.desc[idx[0]].next = idx[1];
-    80007658:	f9442703          	lw	a4,-108(s0)
-    8000765c:	6288                	ld	a0,0(a3)
-    8000765e:	962a                	add	a2,a2,a0
-    80007660:	00e61723          	sh	a4,14(a2) # ffffffffffffe00e <end+0xffffffff7ffd600e>
+    80006558:	f9442703          	lw	a4,-108(s0)
+    8000655c:	6288                	ld	a0,0(a3)
+    8000655e:	962a                	add	a2,a2,a0
+    80006560:	00e61723          	sh	a4,14(a2) # ffffffffffffe00e <end+0xffffffff7ffd800e>
 
   disk.desc[idx[1]].addr = (uint64) b->data;
-    80007664:	0712                	slli	a4,a4,0x4
-    80007666:	6290                	ld	a2,0(a3)
-    80007668:	963a                	add	a2,a2,a4
-    8000766a:	05890513          	addi	a0,s2,88
-    8000766e:	e208                	sd	a0,0(a2)
+    80006564:	0712                	slli	a4,a4,0x4
+    80006566:	6290                	ld	a2,0(a3)
+    80006568:	963a                	add	a2,a2,a4
+    8000656a:	05890513          	addi	a0,s2,88
+    8000656e:	e208                	sd	a0,0(a2)
   disk.desc[idx[1]].len = BSIZE;
-    80007670:	6294                	ld	a3,0(a3)
-    80007672:	96ba                	add	a3,a3,a4
-    80007674:	40000613          	li	a2,1024
-    80007678:	c690                	sw	a2,8(a3)
+    80006570:	6294                	ld	a3,0(a3)
+    80006572:	96ba                	add	a3,a3,a4
+    80006574:	40000613          	li	a2,1024
+    80006578:	c690                	sw	a2,8(a3)
   if(write)
-    8000767a:	140d0063          	beqz	s10,800077ba <virtio_disk_rw+0x294>
+    8000657a:	140d0063          	beqz	s10,800066ba <virtio_disk_rw+0x294>
     disk.desc[idx[1]].flags = 0; // device reads b->data
-    8000767e:	00020697          	auipc	a3,0x20
-    80007682:	9826b683          	ld	a3,-1662(a3) # 80027000 <disk+0x2000>
-    80007686:	96ba                	add	a3,a3,a4
-    80007688:	00069623          	sh	zero,12(a3)
+    8000657e:	0001f697          	auipc	a3,0x1f
+    80006582:	a826b683          	ld	a3,-1406(a3) # 80025000 <disk+0x2000>
+    80006586:	96ba                	add	a3,a3,a4
+    80006588:	00069623          	sh	zero,12(a3)
   else
     disk.desc[idx[1]].flags = VRING_DESC_F_WRITE; // device writes b->data
   disk.desc[idx[1]].flags |= VRING_DESC_F_NEXT;
-    8000768c:	0001e817          	auipc	a6,0x1e
-    80007690:	97480813          	addi	a6,a6,-1676 # 80025000 <disk>
-    80007694:	00020517          	auipc	a0,0x20
-    80007698:	96c50513          	addi	a0,a0,-1684 # 80027000 <disk+0x2000>
-    8000769c:	6114                	ld	a3,0(a0)
-    8000769e:	96ba                	add	a3,a3,a4
-    800076a0:	00c6d603          	lhu	a2,12(a3)
-    800076a4:	00166613          	ori	a2,a2,1
-    800076a8:	00c69623          	sh	a2,12(a3)
+    8000658c:	0001d817          	auipc	a6,0x1d
+    80006590:	a7480813          	addi	a6,a6,-1420 # 80023000 <disk>
+    80006594:	0001f517          	auipc	a0,0x1f
+    80006598:	a6c50513          	addi	a0,a0,-1428 # 80025000 <disk+0x2000>
+    8000659c:	6114                	ld	a3,0(a0)
+    8000659e:	96ba                	add	a3,a3,a4
+    800065a0:	00c6d603          	lhu	a2,12(a3)
+    800065a4:	00166613          	ori	a2,a2,1
+    800065a8:	00c69623          	sh	a2,12(a3)
   disk.desc[idx[1]].next = idx[2];
-    800076ac:	f9842683          	lw	a3,-104(s0)
-    800076b0:	6110                	ld	a2,0(a0)
-    800076b2:	9732                	add	a4,a4,a2
-    800076b4:	00d71723          	sh	a3,14(a4)
+    800065ac:	f9842683          	lw	a3,-104(s0)
+    800065b0:	6110                	ld	a2,0(a0)
+    800065b2:	9732                	add	a4,a4,a2
+    800065b4:	00d71723          	sh	a3,14(a4)
 
   disk.info[idx[0]].status = 0xff; // device writes 0 on success
-    800076b8:	20058613          	addi	a2,a1,512
-    800076bc:	0612                	slli	a2,a2,0x4
-    800076be:	9642                	add	a2,a2,a6
-    800076c0:	577d                	li	a4,-1
-    800076c2:	02e60823          	sb	a4,48(a2)
+    800065b8:	20058613          	addi	a2,a1,512
+    800065bc:	0612                	slli	a2,a2,0x4
+    800065be:	9642                	add	a2,a2,a6
+    800065c0:	577d                	li	a4,-1
+    800065c2:	02e60823          	sb	a4,48(a2)
   disk.desc[idx[2]].addr = (uint64) &disk.info[idx[0]].status;
-    800076c6:	00469713          	slli	a4,a3,0x4
-    800076ca:	6114                	ld	a3,0(a0)
-    800076cc:	96ba                	add	a3,a3,a4
-    800076ce:	03078793          	addi	a5,a5,48
-    800076d2:	97c2                	add	a5,a5,a6
-    800076d4:	e29c                	sd	a5,0(a3)
+    800065c6:	00469713          	slli	a4,a3,0x4
+    800065ca:	6114                	ld	a3,0(a0)
+    800065cc:	96ba                	add	a3,a3,a4
+    800065ce:	03078793          	addi	a5,a5,48
+    800065d2:	97c2                	add	a5,a5,a6
+    800065d4:	e29c                	sd	a5,0(a3)
   disk.desc[idx[2]].len = 1;
-    800076d6:	611c                	ld	a5,0(a0)
-    800076d8:	97ba                	add	a5,a5,a4
-    800076da:	4685                	li	a3,1
-    800076dc:	c794                	sw	a3,8(a5)
+    800065d6:	611c                	ld	a5,0(a0)
+    800065d8:	97ba                	add	a5,a5,a4
+    800065da:	4685                	li	a3,1
+    800065dc:	c794                	sw	a3,8(a5)
   disk.desc[idx[2]].flags = VRING_DESC_F_WRITE; // device writes the status
-    800076de:	611c                	ld	a5,0(a0)
-    800076e0:	97ba                	add	a5,a5,a4
-    800076e2:	4809                	li	a6,2
-    800076e4:	01079623          	sh	a6,12(a5)
+    800065de:	611c                	ld	a5,0(a0)
+    800065e0:	97ba                	add	a5,a5,a4
+    800065e2:	4809                	li	a6,2
+    800065e4:	01079623          	sh	a6,12(a5)
   disk.desc[idx[2]].next = 0;
-    800076e8:	611c                	ld	a5,0(a0)
-    800076ea:	973e                	add	a4,a4,a5
-    800076ec:	00071723          	sh	zero,14(a4)
+    800065e8:	611c                	ld	a5,0(a0)
+    800065ea:	973e                	add	a4,a4,a5
+    800065ec:	00071723          	sh	zero,14(a4)
 
   // record struct buf for virtio_disk_intr().
   b->disk = 1;
-    800076f0:	00d92223          	sw	a3,4(s2)
+    800065f0:	00d92223          	sw	a3,4(s2)
   disk.info[idx[0]].b = b;
-    800076f4:	03263423          	sd	s2,40(a2)
+    800065f4:	03263423          	sd	s2,40(a2)
 
   // tell the device the first index in our chain of descriptors.
   disk.avail->ring[disk.avail->idx % NUM] = idx[0];
-    800076f8:	6518                	ld	a4,8(a0)
-    800076fa:	00275783          	lhu	a5,2(a4)
-    800076fe:	8b9d                	andi	a5,a5,7
-    80007700:	0786                	slli	a5,a5,0x1
-    80007702:	97ba                	add	a5,a5,a4
-    80007704:	00b79223          	sh	a1,4(a5)
+    800065f8:	6518                	ld	a4,8(a0)
+    800065fa:	00275783          	lhu	a5,2(a4)
+    800065fe:	8b9d                	andi	a5,a5,7
+    80006600:	0786                	slli	a5,a5,0x1
+    80006602:	97ba                	add	a5,a5,a4
+    80006604:	00b79223          	sh	a1,4(a5)
 
   __sync_synchronize();
-    80007708:	0ff0000f          	fence
+    80006608:	0ff0000f          	fence
 
   // tell the device another avail ring entry is available.
   disk.avail->idx += 1; // not % NUM ...
-    8000770c:	6518                	ld	a4,8(a0)
-    8000770e:	00275783          	lhu	a5,2(a4)
-    80007712:	2785                	addiw	a5,a5,1
-    80007714:	00f71123          	sh	a5,2(a4)
+    8000660c:	6518                	ld	a4,8(a0)
+    8000660e:	00275783          	lhu	a5,2(a4)
+    80006612:	2785                	addiw	a5,a5,1
+    80006614:	00f71123          	sh	a5,2(a4)
 
   __sync_synchronize();
-    80007718:	0ff0000f          	fence
+    80006618:	0ff0000f          	fence
 
   *R(VIRTIO_MMIO_QUEUE_NOTIFY) = 0; // value is queue number
-    8000771c:	100017b7          	lui	a5,0x10001
-    80007720:	0407a823          	sw	zero,80(a5) # 10001050 <_entry-0x6fffefb0>
+    8000661c:	100017b7          	lui	a5,0x10001
+    80006620:	0407a823          	sw	zero,80(a5) # 10001050 <_entry-0x6fffefb0>
 
   // Wait for virtio_disk_intr() to say request has finished.
   while(b->disk == 1) {
-    80007724:	00492703          	lw	a4,4(s2)
-    80007728:	4785                	li	a5,1
-    8000772a:	02f71163          	bne	a4,a5,8000774c <virtio_disk_rw+0x226>
+    80006624:	00492703          	lw	a4,4(s2)
+    80006628:	4785                	li	a5,1
+    8000662a:	02f71163          	bne	a4,a5,8000664c <virtio_disk_rw+0x226>
     sleep(b, &disk.vdisk_lock);
-    8000772e:	00020997          	auipc	s3,0x20
-    80007732:	9fa98993          	addi	s3,s3,-1542 # 80027128 <disk+0x2128>
+    8000662e:	0001f997          	auipc	s3,0x1f
+    80006632:	afa98993          	addi	s3,s3,-1286 # 80025128 <disk+0x2128>
   while(b->disk == 1) {
-    80007736:	4485                	li	s1,1
+    80006636:	4485                	li	s1,1
     sleep(b, &disk.vdisk_lock);
-    80007738:	85ce                	mv	a1,s3
-    8000773a:	854a                	mv	a0,s2
-    8000773c:	ffffb097          	auipc	ra,0xffffb
-    80007740:	542080e7          	jalr	1346(ra) # 80002c7e <sleep>
+    80006638:	85ce                	mv	a1,s3
+    8000663a:	854a                	mv	a0,s2
+    8000663c:	ffffc097          	auipc	ra,0xffffc
+    80006640:	f06080e7          	jalr	-250(ra) # 80002542 <sleep>
   while(b->disk == 1) {
-    80007744:	00492783          	lw	a5,4(s2)
-    80007748:	fe9788e3          	beq	a5,s1,80007738 <virtio_disk_rw+0x212>
+    80006644:	00492783          	lw	a5,4(s2)
+    80006648:	fe9788e3          	beq	a5,s1,80006638 <virtio_disk_rw+0x212>
   }
 
   disk.info[idx[0]].b = 0;
-    8000774c:	f9042903          	lw	s2,-112(s0)
-    80007750:	20090793          	addi	a5,s2,512
-    80007754:	00479713          	slli	a4,a5,0x4
-    80007758:	0001e797          	auipc	a5,0x1e
-    8000775c:	8a878793          	addi	a5,a5,-1880 # 80025000 <disk>
-    80007760:	97ba                	add	a5,a5,a4
-    80007762:	0207b423          	sd	zero,40(a5)
+    8000664c:	f9042903          	lw	s2,-112(s0)
+    80006650:	20090793          	addi	a5,s2,512
+    80006654:	00479713          	slli	a4,a5,0x4
+    80006658:	0001d797          	auipc	a5,0x1d
+    8000665c:	9a878793          	addi	a5,a5,-1624 # 80023000 <disk>
+    80006660:	97ba                	add	a5,a5,a4
+    80006662:	0207b423          	sd	zero,40(a5)
     int flag = disk.desc[i].flags;
-    80007766:	00020997          	auipc	s3,0x20
-    8000776a:	89a98993          	addi	s3,s3,-1894 # 80027000 <disk+0x2000>
-    8000776e:	00491713          	slli	a4,s2,0x4
-    80007772:	0009b783          	ld	a5,0(s3)
-    80007776:	97ba                	add	a5,a5,a4
-    80007778:	00c7d483          	lhu	s1,12(a5)
+    80006666:	0001f997          	auipc	s3,0x1f
+    8000666a:	99a98993          	addi	s3,s3,-1638 # 80025000 <disk+0x2000>
+    8000666e:	00491713          	slli	a4,s2,0x4
+    80006672:	0009b783          	ld	a5,0(s3)
+    80006676:	97ba                	add	a5,a5,a4
+    80006678:	00c7d483          	lhu	s1,12(a5)
     int nxt = disk.desc[i].next;
-    8000777c:	854a                	mv	a0,s2
-    8000777e:	00e7d903          	lhu	s2,14(a5)
+    8000667c:	854a                	mv	a0,s2
+    8000667e:	00e7d903          	lhu	s2,14(a5)
     free_desc(i);
-    80007782:	00000097          	auipc	ra,0x0
-    80007786:	bc4080e7          	jalr	-1084(ra) # 80007346 <free_desc>
+    80006682:	00000097          	auipc	ra,0x0
+    80006686:	bc4080e7          	jalr	-1084(ra) # 80006246 <free_desc>
     if(flag & VRING_DESC_F_NEXT)
-    8000778a:	8885                	andi	s1,s1,1
-    8000778c:	f0ed                	bnez	s1,8000776e <virtio_disk_rw+0x248>
+    8000668a:	8885                	andi	s1,s1,1
+    8000668c:	f0ed                	bnez	s1,8000666e <virtio_disk_rw+0x248>
   free_chain(idx[0]);
 
   release(&disk.vdisk_lock);
-    8000778e:	00020517          	auipc	a0,0x20
-    80007792:	99a50513          	addi	a0,a0,-1638 # 80027128 <disk+0x2128>
-    80007796:	ffff9097          	auipc	ra,0xffff9
-    8000779a:	502080e7          	jalr	1282(ra) # 80000c98 <release>
-}
-    8000779e:	70a6                	ld	ra,104(sp)
-    800077a0:	7406                	ld	s0,96(sp)
-    800077a2:	64e6                	ld	s1,88(sp)
-    800077a4:	6946                	ld	s2,80(sp)
-    800077a6:	69a6                	ld	s3,72(sp)
-    800077a8:	6a06                	ld	s4,64(sp)
-    800077aa:	7ae2                	ld	s5,56(sp)
-    800077ac:	7b42                	ld	s6,48(sp)
-    800077ae:	7ba2                	ld	s7,40(sp)
-    800077b0:	7c02                	ld	s8,32(sp)
-    800077b2:	6ce2                	ld	s9,24(sp)
-    800077b4:	6d42                	ld	s10,16(sp)
-    800077b6:	6165                	addi	sp,sp,112
-    800077b8:	8082                	ret
+    8000668e:	0001f517          	auipc	a0,0x1f
+    80006692:	a9a50513          	addi	a0,a0,-1382 # 80025128 <disk+0x2128>
+    80006696:	ffffa097          	auipc	ra,0xffffa
+    8000669a:	602080e7          	jalr	1538(ra) # 80000c98 <release>
+}
+    8000669e:	70a6                	ld	ra,104(sp)
+    800066a0:	7406                	ld	s0,96(sp)
+    800066a2:	64e6                	ld	s1,88(sp)
+    800066a4:	6946                	ld	s2,80(sp)
+    800066a6:	69a6                	ld	s3,72(sp)
+    800066a8:	6a06                	ld	s4,64(sp)
+    800066aa:	7ae2                	ld	s5,56(sp)
+    800066ac:	7b42                	ld	s6,48(sp)
+    800066ae:	7ba2                	ld	s7,40(sp)
+    800066b0:	7c02                	ld	s8,32(sp)
+    800066b2:	6ce2                	ld	s9,24(sp)
+    800066b4:	6d42                	ld	s10,16(sp)
+    800066b6:	6165                	addi	sp,sp,112
+    800066b8:	8082                	ret
     disk.desc[idx[1]].flags = VRING_DESC_F_WRITE; // device writes b->data
-    800077ba:	00020697          	auipc	a3,0x20
-    800077be:	8466b683          	ld	a3,-1978(a3) # 80027000 <disk+0x2000>
-    800077c2:	96ba                	add	a3,a3,a4
-    800077c4:	4609                	li	a2,2
-    800077c6:	00c69623          	sh	a2,12(a3)
-    800077ca:	b5c9                	j	8000768c <virtio_disk_rw+0x166>
+    800066ba:	0001f697          	auipc	a3,0x1f
+    800066be:	9466b683          	ld	a3,-1722(a3) # 80025000 <disk+0x2000>
+    800066c2:	96ba                	add	a3,a3,a4
+    800066c4:	4609                	li	a2,2
+    800066c6:	00c69623          	sh	a2,12(a3)
+    800066ca:	b5c9                	j	8000658c <virtio_disk_rw+0x166>
   struct virtio_blk_req *buf0 = &disk.ops[idx[0]];
-    800077cc:	f9042583          	lw	a1,-112(s0)
-    800077d0:	20058793          	addi	a5,a1,512
-    800077d4:	0792                	slli	a5,a5,0x4
-    800077d6:	0001e517          	auipc	a0,0x1e
-    800077da:	8d250513          	addi	a0,a0,-1838 # 800250a8 <disk+0xa8>
-    800077de:	953e                	add	a0,a0,a5
+    800066cc:	f9042583          	lw	a1,-112(s0)
+    800066d0:	20058793          	addi	a5,a1,512
+    800066d4:	0792                	slli	a5,a5,0x4
+    800066d6:	0001d517          	auipc	a0,0x1d
+    800066da:	9d250513          	addi	a0,a0,-1582 # 800230a8 <disk+0xa8>
+    800066de:	953e                	add	a0,a0,a5
   if(write)
-    800077e0:	e20d11e3          	bnez	s10,80007602 <virtio_disk_rw+0xdc>
+    800066e0:	e20d11e3          	bnez	s10,80006502 <virtio_disk_rw+0xdc>
     buf0->type = VIRTIO_BLK_T_IN; // read the disk
-    800077e4:	20058713          	addi	a4,a1,512
-    800077e8:	00471693          	slli	a3,a4,0x4
-    800077ec:	0001e717          	auipc	a4,0x1e
-    800077f0:	81470713          	addi	a4,a4,-2028 # 80025000 <disk>
-    800077f4:	9736                	add	a4,a4,a3
-    800077f6:	0a072423          	sw	zero,168(a4)
-    800077fa:	b505                	j	8000761a <virtio_disk_rw+0xf4>
+    800066e4:	20058713          	addi	a4,a1,512
+    800066e8:	00471693          	slli	a3,a4,0x4
+    800066ec:	0001d717          	auipc	a4,0x1d
+    800066f0:	91470713          	addi	a4,a4,-1772 # 80023000 <disk>
+    800066f4:	9736                	add	a4,a4,a3
+    800066f6:	0a072423          	sw	zero,168(a4)
+    800066fa:	b505                	j	8000651a <virtio_disk_rw+0xf4>
 
-00000000800077fc <virtio_disk_intr>:
+00000000800066fc <virtio_disk_intr>:
 
 void
 virtio_disk_intr()
 {
-    800077fc:	1101                	addi	sp,sp,-32
-    800077fe:	ec06                	sd	ra,24(sp)
-    80007800:	e822                	sd	s0,16(sp)
-    80007802:	e426                	sd	s1,8(sp)
-    80007804:	e04a                	sd	s2,0(sp)
-    80007806:	1000                	addi	s0,sp,32
+    800066fc:	1101                	addi	sp,sp,-32
+    800066fe:	ec06                	sd	ra,24(sp)
+    80006700:	e822                	sd	s0,16(sp)
+    80006702:	e426                	sd	s1,8(sp)
+    80006704:	e04a                	sd	s2,0(sp)
+    80006706:	1000                	addi	s0,sp,32
   acquire(&disk.vdisk_lock);
-    80007808:	00020517          	auipc	a0,0x20
-    8000780c:	92050513          	addi	a0,a0,-1760 # 80027128 <disk+0x2128>
-    80007810:	ffff9097          	auipc	ra,0xffff9
-    80007814:	3d4080e7          	jalr	980(ra) # 80000be4 <acquire>
+    80006708:	0001f517          	auipc	a0,0x1f
+    8000670c:	a2050513          	addi	a0,a0,-1504 # 80025128 <disk+0x2128>
+    80006710:	ffffa097          	auipc	ra,0xffffa
+    80006714:	4d4080e7          	jalr	1236(ra) # 80000be4 <acquire>
   // we've seen this interrupt, which the following line does.
   // this may race with the device writing new entries to
   // the "used" ring, in which case we may process the new
   // completion entries in this interrupt, and have nothing to do
   // in the next interrupt, which is harmless.
   *R(VIRTIO_MMIO_INTERRUPT_ACK) = *R(VIRTIO_MMIO_INTERRUPT_STATUS) & 0x3;
-    80007818:	10001737          	lui	a4,0x10001
-    8000781c:	533c                	lw	a5,96(a4)
-    8000781e:	8b8d                	andi	a5,a5,3
-    80007820:	d37c                	sw	a5,100(a4)
+    80006718:	10001737          	lui	a4,0x10001
+    8000671c:	533c                	lw	a5,96(a4)
+    8000671e:	8b8d                	andi	a5,a5,3
+    80006720:	d37c                	sw	a5,100(a4)
 
   __sync_synchronize();
-    80007822:	0ff0000f          	fence
+    80006722:	0ff0000f          	fence
 
   // the device increments disk.used->idx when it
   // adds an entry to the used ring.
 
   while(disk.used_idx != disk.used->idx){
-    80007826:	0001f797          	auipc	a5,0x1f
-    8000782a:	7da78793          	addi	a5,a5,2010 # 80027000 <disk+0x2000>
-    8000782e:	6b94                	ld	a3,16(a5)
-    80007830:	0207d703          	lhu	a4,32(a5)
-    80007834:	0026d783          	lhu	a5,2(a3)
-    80007838:	06f70163          	beq	a4,a5,8000789a <virtio_disk_intr+0x9e>
+    80006726:	0001f797          	auipc	a5,0x1f
+    8000672a:	8da78793          	addi	a5,a5,-1830 # 80025000 <disk+0x2000>
+    8000672e:	6b94                	ld	a3,16(a5)
+    80006730:	0207d703          	lhu	a4,32(a5)
+    80006734:	0026d783          	lhu	a5,2(a3)
+    80006738:	06f70163          	beq	a4,a5,8000679a <virtio_disk_intr+0x9e>
     __sync_synchronize();
     int id = disk.used->ring[disk.used_idx % NUM].id;
-    8000783c:	0001d917          	auipc	s2,0x1d
-    80007840:	7c490913          	addi	s2,s2,1988 # 80025000 <disk>
-    80007844:	0001f497          	auipc	s1,0x1f
-    80007848:	7bc48493          	addi	s1,s1,1980 # 80027000 <disk+0x2000>
+    8000673c:	0001d917          	auipc	s2,0x1d
+    80006740:	8c490913          	addi	s2,s2,-1852 # 80023000 <disk>
+    80006744:	0001f497          	auipc	s1,0x1f
+    80006748:	8bc48493          	addi	s1,s1,-1860 # 80025000 <disk+0x2000>
     __sync_synchronize();
-    8000784c:	0ff0000f          	fence
+    8000674c:	0ff0000f          	fence
     int id = disk.used->ring[disk.used_idx % NUM].id;
-    80007850:	6898                	ld	a4,16(s1)
-    80007852:	0204d783          	lhu	a5,32(s1)
-    80007856:	8b9d                	andi	a5,a5,7
-    80007858:	078e                	slli	a5,a5,0x3
-    8000785a:	97ba                	add	a5,a5,a4
-    8000785c:	43dc                	lw	a5,4(a5)
+    80006750:	6898                	ld	a4,16(s1)
+    80006752:	0204d783          	lhu	a5,32(s1)
+    80006756:	8b9d                	andi	a5,a5,7
+    80006758:	078e                	slli	a5,a5,0x3
+    8000675a:	97ba                	add	a5,a5,a4
+    8000675c:	43dc                	lw	a5,4(a5)
 
     if(disk.info[id].status != 0)
-    8000785e:	20078713          	addi	a4,a5,512
-    80007862:	0712                	slli	a4,a4,0x4
-    80007864:	974a                	add	a4,a4,s2
-    80007866:	03074703          	lbu	a4,48(a4) # 10001030 <_entry-0x6fffefd0>
-    8000786a:	e731                	bnez	a4,800078b6 <virtio_disk_intr+0xba>
+    8000675e:	20078713          	addi	a4,a5,512
+    80006762:	0712                	slli	a4,a4,0x4
+    80006764:	974a                	add	a4,a4,s2
+    80006766:	03074703          	lbu	a4,48(a4) # 10001030 <_entry-0x6fffefd0>
+    8000676a:	e731                	bnez	a4,800067b6 <virtio_disk_intr+0xba>
       panic("virtio_disk_intr status");
 
     struct buf *b = disk.info[id].b;
-    8000786c:	20078793          	addi	a5,a5,512
-    80007870:	0792                	slli	a5,a5,0x4
-    80007872:	97ca                	add	a5,a5,s2
-    80007874:	7788                	ld	a0,40(a5)
+    8000676c:	20078793          	addi	a5,a5,512
+    80006770:	0792                	slli	a5,a5,0x4
+    80006772:	97ca                	add	a5,a5,s2
+    80006774:	7788                	ld	a0,40(a5)
     b->disk = 0;   // disk is done with buf
-    80007876:	00052223          	sw	zero,4(a0)
+    80006776:	00052223          	sw	zero,4(a0)
     wakeup(b);
-    8000787a:	ffffc097          	auipc	ra,0xffffc
-    8000787e:	81a080e7          	jalr	-2022(ra) # 80003094 <wakeup>
+    8000677a:	ffffc097          	auipc	ra,0xffffc
+    8000677e:	f66080e7          	jalr	-154(ra) # 800026e0 <wakeup>
 
     disk.used_idx += 1;
-    80007882:	0204d783          	lhu	a5,32(s1)
-    80007886:	2785                	addiw	a5,a5,1
-    80007888:	17c2                	slli	a5,a5,0x30
-    8000788a:	93c1                	srli	a5,a5,0x30
-    8000788c:	02f49023          	sh	a5,32(s1)
+    80006782:	0204d783          	lhu	a5,32(s1)
+    80006786:	2785                	addiw	a5,a5,1
+    80006788:	17c2                	slli	a5,a5,0x30
+    8000678a:	93c1                	srli	a5,a5,0x30
+    8000678c:	02f49023          	sh	a5,32(s1)
   while(disk.used_idx != disk.used->idx){
-    80007890:	6898                	ld	a4,16(s1)
-    80007892:	00275703          	lhu	a4,2(a4)
-    80007896:	faf71be3          	bne	a4,a5,8000784c <virtio_disk_intr+0x50>
+    80006790:	6898                	ld	a4,16(s1)
+    80006792:	00275703          	lhu	a4,2(a4)
+    80006796:	faf71be3          	bne	a4,a5,8000674c <virtio_disk_intr+0x50>
   }
 
   release(&disk.vdisk_lock);
-    8000789a:	00020517          	auipc	a0,0x20
-    8000789e:	88e50513          	addi	a0,a0,-1906 # 80027128 <disk+0x2128>
-    800078a2:	ffff9097          	auipc	ra,0xffff9
-    800078a6:	3f6080e7          	jalr	1014(ra) # 80000c98 <release>
-}
-    800078aa:	60e2                	ld	ra,24(sp)
-    800078ac:	6442                	ld	s0,16(sp)
-    800078ae:	64a2                	ld	s1,8(sp)
-    800078b0:	6902                	ld	s2,0(sp)
-    800078b2:	6105                	addi	sp,sp,32
-    800078b4:	8082                	ret
+    8000679a:	0001f517          	auipc	a0,0x1f
+    8000679e:	98e50513          	addi	a0,a0,-1650 # 80025128 <disk+0x2128>
+    800067a2:	ffffa097          	auipc	ra,0xffffa
+    800067a6:	4f6080e7          	jalr	1270(ra) # 80000c98 <release>
+}
+    800067aa:	60e2                	ld	ra,24(sp)
+    800067ac:	6442                	ld	s0,16(sp)
+    800067ae:	64a2                	ld	s1,8(sp)
+    800067b0:	6902                	ld	s2,0(sp)
+    800067b2:	6105                	addi	sp,sp,32
+    800067b4:	8082                	ret
       panic("virtio_disk_intr status");
-    800078b6:	00002517          	auipc	a0,0x2
-    800078ba:	34a50513          	addi	a0,a0,842 # 80009c00 <syscalls+0x3d8>
-    800078be:	ffff9097          	auipc	ra,0xffff9
-    800078c2:	c80080e7          	jalr	-896(ra) # 8000053e <panic>
-
-00000000800078c6 <cas>:
-    800078c6:	100522af          	lr.w	t0,(a0)
-    800078ca:	00b29563          	bne	t0,a1,800078d4 <fail>
-    800078ce:	18c5252f          	sc.w	a0,a2,(a0)
-    800078d2:	8082                	ret
-
-00000000800078d4 <fail>:
-    800078d4:	4505                	li	a0,1
-    800078d6:	8082                	ret
+    800067b6:	00002517          	auipc	a0,0x2
+    800067ba:	0da50513          	addi	a0,a0,218 # 80008890 <syscalls+0x3c0>
+    800067be:	ffffa097          	auipc	ra,0xffffa
+    800067c2:	d80080e7          	jalr	-640(ra) # 8000053e <panic>
+
+00000000800067c6 <cas>:
+    800067c6:	100522af          	lr.w	t0,(a0)
+    800067ca:	00b29563          	bne	t0,a1,800067d4 <fail>
+    800067ce:	18c5252f          	sc.w	a0,a2,(a0)
+    800067d2:	8082                	ret
+
+00000000800067d4 <fail>:
+    800067d4:	4505                	li	a0,1
+    800067d6:	8082                	ret
 	...
 
-0000000080008000 <_trampoline>:
-    80008000:	14051573          	csrrw	a0,sscratch,a0
-    80008004:	02153423          	sd	ra,40(a0)
-    80008008:	02253823          	sd	sp,48(a0)
-    8000800c:	02353c23          	sd	gp,56(a0)
-    80008010:	04453023          	sd	tp,64(a0)
-    80008014:	04553423          	sd	t0,72(a0)
-    80008018:	04653823          	sd	t1,80(a0)
-    8000801c:	04753c23          	sd	t2,88(a0)
-    80008020:	f120                	sd	s0,96(a0)
-    80008022:	f524                	sd	s1,104(a0)
-    80008024:	fd2c                	sd	a1,120(a0)
-    80008026:	e150                	sd	a2,128(a0)
-    80008028:	e554                	sd	a3,136(a0)
-    8000802a:	e958                	sd	a4,144(a0)
-    8000802c:	ed5c                	sd	a5,152(a0)
-    8000802e:	0b053023          	sd	a6,160(a0)
-    80008032:	0b153423          	sd	a7,168(a0)
-    80008036:	0b253823          	sd	s2,176(a0)
-    8000803a:	0b353c23          	sd	s3,184(a0)
-    8000803e:	0d453023          	sd	s4,192(a0)
-    80008042:	0d553423          	sd	s5,200(a0)
-    80008046:	0d653823          	sd	s6,208(a0)
-    8000804a:	0d753c23          	sd	s7,216(a0)
-    8000804e:	0f853023          	sd	s8,224(a0)
-    80008052:	0f953423          	sd	s9,232(a0)
-    80008056:	0fa53823          	sd	s10,240(a0)
-    8000805a:	0fb53c23          	sd	s11,248(a0)
-    8000805e:	11c53023          	sd	t3,256(a0)
-    80008062:	11d53423          	sd	t4,264(a0)
-    80008066:	11e53823          	sd	t5,272(a0)
-    8000806a:	11f53c23          	sd	t6,280(a0)
-    8000806e:	140022f3          	csrr	t0,sscratch
-    80008072:	06553823          	sd	t0,112(a0)
-    80008076:	00853103          	ld	sp,8(a0)
-    8000807a:	02053203          	ld	tp,32(a0)
-    8000807e:	01053283          	ld	t0,16(a0)
-    80008082:	00053303          	ld	t1,0(a0)
-    80008086:	18031073          	csrw	satp,t1
-    8000808a:	12000073          	sfence.vma
-    8000808e:	8282                	jr	t0
-
-0000000080008090 <userret>:
-    80008090:	18059073          	csrw	satp,a1
-    80008094:	12000073          	sfence.vma
-    80008098:	07053283          	ld	t0,112(a0)
-    8000809c:	14029073          	csrw	sscratch,t0
-    800080a0:	02853083          	ld	ra,40(a0)
-    800080a4:	03053103          	ld	sp,48(a0)
-    800080a8:	03853183          	ld	gp,56(a0)
-    800080ac:	04053203          	ld	tp,64(a0)
-    800080b0:	04853283          	ld	t0,72(a0)
-    800080b4:	05053303          	ld	t1,80(a0)
-    800080b8:	05853383          	ld	t2,88(a0)
-    800080bc:	7120                	ld	s0,96(a0)
-    800080be:	7524                	ld	s1,104(a0)
-    800080c0:	7d2c                	ld	a1,120(a0)
-    800080c2:	6150                	ld	a2,128(a0)
-    800080c4:	6554                	ld	a3,136(a0)
-    800080c6:	6958                	ld	a4,144(a0)
-    800080c8:	6d5c                	ld	a5,152(a0)
-    800080ca:	0a053803          	ld	a6,160(a0)
-    800080ce:	0a853883          	ld	a7,168(a0)
-    800080d2:	0b053903          	ld	s2,176(a0)
-    800080d6:	0b853983          	ld	s3,184(a0)
-    800080da:	0c053a03          	ld	s4,192(a0)
-    800080de:	0c853a83          	ld	s5,200(a0)
-    800080e2:	0d053b03          	ld	s6,208(a0)
-    800080e6:	0d853b83          	ld	s7,216(a0)
-    800080ea:	0e053c03          	ld	s8,224(a0)
-    800080ee:	0e853c83          	ld	s9,232(a0)
-    800080f2:	0f053d03          	ld	s10,240(a0)
-    800080f6:	0f853d83          	ld	s11,248(a0)
-    800080fa:	10053e03          	ld	t3,256(a0)
-    800080fe:	10853e83          	ld	t4,264(a0)
-    80008102:	11053f03          	ld	t5,272(a0)
-    80008106:	11853f83          	ld	t6,280(a0)
-    8000810a:	14051573          	csrrw	a0,sscratch,a0
-    8000810e:	10200073          	sret
+0000000080007000 <_trampoline>:
+    80007000:	14051573          	csrrw	a0,sscratch,a0
+    80007004:	02153423          	sd	ra,40(a0)
+    80007008:	02253823          	sd	sp,48(a0)
+    8000700c:	02353c23          	sd	gp,56(a0)
+    80007010:	04453023          	sd	tp,64(a0)
+    80007014:	04553423          	sd	t0,72(a0)
+    80007018:	04653823          	sd	t1,80(a0)
+    8000701c:	04753c23          	sd	t2,88(a0)
+    80007020:	f120                	sd	s0,96(a0)
+    80007022:	f524                	sd	s1,104(a0)
+    80007024:	fd2c                	sd	a1,120(a0)
+    80007026:	e150                	sd	a2,128(a0)
+    80007028:	e554                	sd	a3,136(a0)
+    8000702a:	e958                	sd	a4,144(a0)
+    8000702c:	ed5c                	sd	a5,152(a0)
+    8000702e:	0b053023          	sd	a6,160(a0)
+    80007032:	0b153423          	sd	a7,168(a0)
+    80007036:	0b253823          	sd	s2,176(a0)
+    8000703a:	0b353c23          	sd	s3,184(a0)
+    8000703e:	0d453023          	sd	s4,192(a0)
+    80007042:	0d553423          	sd	s5,200(a0)
+    80007046:	0d653823          	sd	s6,208(a0)
+    8000704a:	0d753c23          	sd	s7,216(a0)
+    8000704e:	0f853023          	sd	s8,224(a0)
+    80007052:	0f953423          	sd	s9,232(a0)
+    80007056:	0fa53823          	sd	s10,240(a0)
+    8000705a:	0fb53c23          	sd	s11,248(a0)
+    8000705e:	11c53023          	sd	t3,256(a0)
+    80007062:	11d53423          	sd	t4,264(a0)
+    80007066:	11e53823          	sd	t5,272(a0)
+    8000706a:	11f53c23          	sd	t6,280(a0)
+    8000706e:	140022f3          	csrr	t0,sscratch
+    80007072:	06553823          	sd	t0,112(a0)
+    80007076:	00853103          	ld	sp,8(a0)
+    8000707a:	02053203          	ld	tp,32(a0)
+    8000707e:	01053283          	ld	t0,16(a0)
+    80007082:	00053303          	ld	t1,0(a0)
+    80007086:	18031073          	csrw	satp,t1
+    8000708a:	12000073          	sfence.vma
+    8000708e:	8282                	jr	t0
+
+0000000080007090 <userret>:
+    80007090:	18059073          	csrw	satp,a1
+    80007094:	12000073          	sfence.vma
+    80007098:	07053283          	ld	t0,112(a0)
+    8000709c:	14029073          	csrw	sscratch,t0
+    800070a0:	02853083          	ld	ra,40(a0)
+    800070a4:	03053103          	ld	sp,48(a0)
+    800070a8:	03853183          	ld	gp,56(a0)
+    800070ac:	04053203          	ld	tp,64(a0)
+    800070b0:	04853283          	ld	t0,72(a0)
+    800070b4:	05053303          	ld	t1,80(a0)
+    800070b8:	05853383          	ld	t2,88(a0)
+    800070bc:	7120                	ld	s0,96(a0)
+    800070be:	7524                	ld	s1,104(a0)
+    800070c0:	7d2c                	ld	a1,120(a0)
+    800070c2:	6150                	ld	a2,128(a0)
+    800070c4:	6554                	ld	a3,136(a0)
+    800070c6:	6958                	ld	a4,144(a0)
+    800070c8:	6d5c                	ld	a5,152(a0)
+    800070ca:	0a053803          	ld	a6,160(a0)
+    800070ce:	0a853883          	ld	a7,168(a0)
+    800070d2:	0b053903          	ld	s2,176(a0)
+    800070d6:	0b853983          	ld	s3,184(a0)
+    800070da:	0c053a03          	ld	s4,192(a0)
+    800070de:	0c853a83          	ld	s5,200(a0)
+    800070e2:	0d053b03          	ld	s6,208(a0)
+    800070e6:	0d853b83          	ld	s7,216(a0)
+    800070ea:	0e053c03          	ld	s8,224(a0)
+    800070ee:	0e853c83          	ld	s9,232(a0)
+    800070f2:	0f053d03          	ld	s10,240(a0)
+    800070f6:	0f853d83          	ld	s11,248(a0)
+    800070fa:	10053e03          	ld	t3,256(a0)
+    800070fe:	10853e83          	ld	t4,264(a0)
+    80007102:	11053f03          	ld	t5,272(a0)
+    80007106:	11853f83          	ld	t6,280(a0)
+    8000710a:	14051573          	csrrw	a0,sscratch,a0
+    8000710e:	10200073          	sret
 	...
diff --git a/kernel/kernel.sym b/kernel/kernel.sym
index 3b21d31..43d12f9 100644
--- a/kernel/kernel.sym
+++ b/kernel/kernel.sym
@@ -1,9 +1,9 @@
 0000000080000000 .text
-0000000080009000 .rodata
-0000000080009c18 .data
-0000000080009c88 .got
-0000000080009c98 .got.plt
-000000008000a000 .bss
+0000000080008000 .rodata
+00000000800088a8 .data
+0000000080008958 .got
+0000000080008968 .got.plt
+0000000080009000 .bss
 0000000000000000 .debug_info
 0000000000000000 .debug_abbrev
 0000000000000000 .debug_loc
@@ -19,279 +19,260 @@
 0000000000000000 console.c
 0000000000000000 printf.c
 000000008000049c printint
-0000000080009040 digits
-0000000080012248 pr
+0000000080008040 digits
+0000000080011228 pr
 0000000000000000 uart.c
 0000000000000000 kalloc.c
 0000000000000000 spinlock.c
 0000000000000000 string.c
 0000000000000000 main.c
-000000008000a018 started
+0000000080009018 started
 0000000000000000 vm.c
 0000000000000000 proc.c
-0000000080009c20 first.1783
-0000000080001d4a freeproc
-0000000080001f0a allocproc
-00000000800096a0 states.1850
+00000000800088b0 first.1750
+0000000080001e7c freeproc
+0000000080001ef8 allocproc
+0000000080008348 states.1791
 0000000000000000 trap.c
 0000000000000000 syscall.c
-0000000080004016 argraw
-0000000080009828 syscalls
+0000000080002f74 argraw
+00000000800084d0 syscalls
 0000000000000000 sysproc.c
 0000000000000000 bio.c
 0000000000000000 fs.c
-000000008000477a bfree
-00000000800047f6 balloc
-0000000080004928 bmap
-0000000080004a02 iget
-00000000800052ca namex
+0000000080003676 bfree
+00000000800036f2 balloc
+0000000080003824 bmap
+00000000800038fe iget
+00000000800041c6 namex
 0000000000000000 log.c
-0000000080005526 write_head
-00000000800055a0 install_trans
+0000000080004422 write_head
+000000008000449c install_trans
 0000000000000000 sleeplock.c
 0000000000000000 file.c
 0000000000000000 pipe.c
 0000000000000000 exec.c
 0000000000000000 sysfile.c
-00000000800065be argfd
-0000000080006626 fdalloc
-0000000080006668 create
+00000000800054ba argfd
+0000000080005522 fdalloc
+0000000080005564 create
 0000000000000000 plic.c
 0000000000000000 virtio_disk.c
-0000000080007346 free_desc
-0000000080025000 disk
+0000000080006246 free_desc
+0000000080023000 disk
 0000000000000000 kernel/cas.o
-00000000800078d4 fail
+00000000800067d4 fail
 0000000000000000 
-0000000080009c88 _GLOBAL_OFFSET_TABLE_
-000000008000a04c wake_up_time
-00000000800010b8 mappages
-0000000080001792 copyinstr
+0000000080008958 _GLOBAL_OFFSET_TABLE_
+00000000800010b0 mappages
+000000008000178a copyinstr
 0000000080000164 consoleread
-000000008000a048 sleeping_processes_mean
 0000000080000e32 safestrcpy
-00000000800068ea sys_close
-00000000800018c4 remove_proc_from_list
-0000000080002b4e yield
-0000000080022f10 log
-00000000800122a0 kmem
+00000000800057e6 sys_close
+00000000800024e6 yield
+0000000080021db0 log
+0000000080011280 kmem
 00000000800007a0 uartinit
-0000000080003abe either_copyout
+00000000800029b8 either_copyout
 000000008000001c timerinit
-0000000080012770 proc
-0000000080005d0e fileread
+0000000080011810 proc
+0000000080004c0a fileread
 0000000080000588 printf
-0000000080004290 sys_sbrk
-0000000080009c40 rate
-0000000080008000 trampoline
-000000008000a000 panicked
-00000000800072f8 plic_claim
-0000000080012280 uart_tx_buf
-00000000800072aa plicinit
-000000008000731c plic_complete
-0000000080002a40 sched
+00000000800031ee sys_sbrk
+0000000080007000 trampoline
+0000000080009000 panicked
+00000000800061f8 plic_claim
+0000000080011260 uart_tx_buf
+00000000800061aa plicinit
+000000008000621c plic_complete
+00000000800023fc sched
 0000000080000d40 memmove
-000000008000418c syscall
-0000000080001b58 cpuid
-00000000800050e2 writei
-0000000080004246 sys_fork
-0000000080018d88 bcache
-0000000080006e3c sys_mkdir
-000000008000127e uvmunmap
-0000000080005200 namecmp
-00000000800072c0 plicinithart
-000000008000328a reparent
-000000008000415c argstr
-00000000800013e2 uvmdealloc
-0000000080005b82 filedup
-00000000800054ec namei
-00000000800044a6 binit
-0000000080001648 uvmclear
-00000000800078c6 cas
-000000008000681e sys_read
-0000000080004abe fsinit
+00000000800030ea syscall
+0000000080001c9e cpuid
+0000000080003fde writei
+00000000800031a4 sys_fork
+0000000080017c28 bcache
+0000000080005d36 sys_mkdir
+0000000080001276 uvmunmap
+00000000800040fc namecmp
+00000000800061c0 plicinithart
+0000000080002804 reparent
+00000000800088e0 zombie_list
+00000000800030ba argstr
+00000000800013da uvmdealloc
+0000000080004a7e filedup
+00000000800043e8 namei
+00000000800033a2 binit
+0000000080001640 uvmclear
+00000000800067c6 cas
+000000008000571a sys_read
+00000000800039ba fsinit
 0000000080000da0 memcpy
-0000000080001158 kvmmap
+0000000080001150 kvmmap
 0000000080000840 uartstart
 00000000800009f8 kfree
-0000000080009c38 sleeping_list_tail
-0000000080001b68 mycpu
-0000000080004ef0 iput
-0000000080001188 kvmmake
-0000000080003da6 devintr
-0000000080003722 print_stats
-0000000080009c24 nextpid
-0000000080005af0 fileinit
-0000000080008090 userret
+000000008000215e min_num_procs_cpu
+0000000080001cae mycpu
+0000000080003dec iput
+0000000080001180 kvmmake
+00000000800088c0 sleeping_list
+0000000080002d12 devintr
+00000000800088b4 nextpid
+000000008000194e remove
+00000000800049ec fileinit
+0000000080007090 userret
 0000000080000b54 initlock
-000000008000167a copyout
-0000000080002c7e sleep
-00000000800071f0 kernelvec
-000000008000a038 program_time
-0000000080004fc0 stati
-0000000080012758 wait_lock
-0000000080004386 sys_kill
-0000000080005fde pipeclose
-000000008000693a sys_fstat
+0000000080001672 copyout
+0000000080002542 sleep
+00000000800060f0 kernelvec
+0000000080009028 flag
+0000000080008900 unused_list
+0000000080003ebc stati
+00000000800112b8 wait_lock
+00000000800032e4 sys_kill
+0000000080004eda pipeclose
+0000000080005834 sys_fstat
 0000000080000102 consolewrite
-0000000080005788 end_op
+0000000080004684 end_op
 0000000080000a6e freerange
-0000000080000fac kvminithart
-000000008000142a uvmalloc
-0000000080001370 uvminit
-0000000080001576 uvmcopy
-000000008000a028 initproc
-0000000080001cf8 proc_freepagetable
-0000000080004df8 iunlock
-0000000080001c5c proc_pagetable
-000000008000a1a0 stack0
-00000000800042da sys_sleep
-0000000080006988 sys_link
-0000000080005b18 filealloc
-0000000080003094 wakeup
-0000000080002746 FCFS_scheduler
-0000000080009c2c zombie_list_head
-00000000800073e2 virtio_disk_init
-0000000080001b94 myproc
-0000000080004cf8 idup
-000000008000a008 uart_tx_r
-0000000080000fd0 walk
-0000000080006ca4 sys_open
-000000008000a010 uart_tx_w
-0000000080004fea readi
+0000000080000fa4 kvminithart
+0000000080001422 uvmalloc
+0000000080001368 uvminit
+000000008000156e uvmcopy
+0000000080009030 initproc
+0000000080001e2a proc_freepagetable
+0000000080003cf4 iunlock
+0000000080001d8e proc_pagetable
+0000000080009180 stack0
+0000000080003238 sys_sleep
+0000000080005882 sys_link
+0000000080004a14 filealloc
+00000000800026e0 wakeup
+00000000800062e2 virtio_disk_init
+0000000080001cd0 myproc
+0000000080003bf4 idup
+0000000080009008 uart_tx_r
+0000000080000fc8 walk
+0000000080005b9e sys_open
+0000000080009010 uart_tx_w
+0000000080003ee6 readi
 00000000800002be consoleintr
 000000008000027c consputc
-000000008000369c kill
-0000000080001c20 allocpid
-0000000080004b9e ialloc
+0000000080002946 kill
+0000000080001d54 allocpid
+0000000080003a9a ialloc
+000000008000183e inc_cpu
 00000000800009a8 uartintr
-0000000080001706 copyin
-000000008000a03c p_counter
-0000000080003c82 trapinit
-000000008000153e uvmfree
-0000000080028000 end
-0000000080004e44 itrunc
-0000000080005dd0 filewrite
-0000000080003894 pause_system
-000000008000a040 runnable_processes_mean
-0000000080004118 argint
-000000008000a034 start_time
-000000008000442a sys_set_cpu
-0000000080006234 exec
-0000000080009000 etext
-0000000080006884 sys_write
+00000000800016fe copyin
+0000000080002bee trapinit
+0000000080001536 uvmfree
+0000000080026000 end
+0000000080003d40 itrunc
+0000000080004ccc filewrite
+0000000080003076 argint
+0000000080003370 sys_set_cpu
+0000000080005130 exec
+0000000080008000 etext
+0000000080005780 sys_write
 0000000080000c98 release
-00000000800040d0 fetchstr
-00000000800043fa sys_print_stats
-0000000080002f0a wait
-0000000080003cc2 usertrapret
-0000000080002896 scheduler
-0000000080008000 _trampoline
-000000008000521a dirlookup
-0000000080005708 begin_op
-0000000080005bd4 fileclose
-0000000080003e48 usertrap
+000000008000302e fetchstr
+00000000800025b8 wait
+0000000080002c2e usertrapret
+0000000080002336 scheduler
+0000000080007000 _trampoline
+0000000080004116 dirlookup
+0000000080004604 begin_op
+0000000080004ad0 fileclose
+0000000080002db4 usertrap
 0000000080000db8 strncmp
-0000000080018d70 tickslock
-0000000080009c30 unused_list_tail
-000000008000604e pipewrite
+0000000080017c10 tickslock
+0000000080004f4a pipewrite
 0000000080000df4 strncpy
-0000000080023058 ftable
-00000000800037c4 set_cpu
-00000000800077fc virtio_disk_intr
-00000000800067d0 sys_dup
-0000000080001846 add_proc_to_list
+0000000080021ef8 ftable
+0000000080002b12 set_cpu
+00000000800066fc virtio_disk_intr
+00000000800056cc sys_dup
 000000008000053e panic
-0000000080009c28 zombie_list_tail
-0000000080001bda forkret
+0000000080001d0e forkret
 0000000080000ab8 kinit
-0000000080003884 get_cpu
+0000000080002b68 get_cpu
 0000000080000d06 memcmp
-0000000080003b14 either_copyin
-0000000080002356 fork
-0000000080003d60 clockintr
-00000000800122c0 cpus
-0000000080005a56 releasesleep
+0000000080002a0e either_copyin
+00000000800021a0 fork
+0000000080002ccc clockintr
+00000000800112d0 cpus
+0000000080004952 releasesleep
 0000000080000000 _entry
-0000000080002144 str_compare
-00000000800039f4 kill_system
-000000008000a050 pause_flag
 0000000080000b6a holding
-0000000080021448 sb
+00000000800202e8 sb
 0000000080000be4 acquire
-000000008000550a nameiparent
-0000000080009c50 initcode
-0000000080003caa trapinithart
-0000000080004c6c iupdate
+0000000080004406 nameiparent
+0000000080008920 initcode
+0000000080002c16 trapinithart
+0000000080003b68 iupdate
 0000000080000ce0 memset
 0000000080000e8e main
-000000008000a030 cpu_utilization
-00000000800058e0 log_write
-0000000080005a00 acquiresleep
-0000000080006ad2 sys_unlink
-0000000080008000 uservec
-000000008000125e kvminit
-000000008000473e bunpin
-000000008000413a argaddr
-00000000800043b8 sys_uptime
+00000000800047dc log_write
+00000000800048fc acquiresleep
+00000000800059cc sys_unlink
+0000000080007000 uservec
+0000000080001256 kvminit
+000000008000363a bunpin
+0000000080003098 argaddr
+0000000080003316 sys_uptime
 0000000080000980 uartgetc
 000000008000076e printfinit
-0000000080012268 uart_tx_lock
-0000000080001342 uvmcreate
-00000000800022e2 growproc
-0000000080005a9a holdingsleep
-000000008000216c userinit
-0000000080004534 bread
-0000000080006148 piperead
-000000008000a054 ticks
+0000000080011248 uart_tx_lock
+000000008000133a uvmcreate
+00000000800020ea growproc
+0000000080004996 holdingsleep
+0000000080002056 userinit
+0000000080003430 bread
+0000000080005044 piperead
+0000000080009038 ticks
 0000000080000450 consoleinit
-000000008000445c sys_pause_system
-0000000080001076 walkaddr
-0000000080003b6a procdump
+000000008000106e walkaddr
+0000000080002a64 procdump
 00000000800008ca uartputc
-0000000080004664 brelse
-000000008000a044 running_processes_mean
-0000000080004d36 ilock
-0000000080006fcc sys_exec
-0000000080009c3c sleeping_list_head
-0000000080003c18 swtch
-0000000080004f98 iunlockput
+0000000080003560 brelse
+0000000080003c32 ilock
+0000000080005ec6 sys_exec
+0000000080002b84 swtch
+0000000080003e94 iunlockput
 0000000080000b98 push_off
 0000000080000c38 pop_off
-0000000080004626 bwrite
+0000000080003522 bwrite
 00000000800007f0 uartputc_sync
-00000000800032e4 exit
-00000000800014d4 freewalk
-000000008000425e sys_wait
-00000000800041f8 sys_exit
-000000008000542a dirlink
-00000000800059c6 initsleeplock
+000000008000285e exit
+00000000800014cc freewalk
+00000000800031bc sys_wait
+0000000080003156 sys_exit
+0000000080004326 dirlink
+0000000080001886 append
+00000000800048c2 initsleeplock
 000000008000008e start
-000000008000258a unpause_system
-000000008000a020 kernel_pagetable
-000000008000a060 timer_scratch
-0000000080007526 virtio_disk_rw
-00000000800025e2 SJF_scheduler
+0000000080009020 kernel_pagetable
+0000000080009040 timer_scratch
+0000000080006426 virtio_disk_rw
 0000000080000e64 strlen
-00000000800070da sys_pipe
-0000000080004b3e iinit
-0000000080009c34 unused_list_head
-000000008000448e sys_kill_system
-0000000080005664 initlog
-00000000800121a0 cons
+0000000080001872 isEmpty
+0000000080005fd4 sys_pipe
+0000000080003a3a iinit
+0000000080004560 initlog
+0000000080011180 cons
 0000000080000af4 kalloc
-000000008000407e fetchaddr
-0000000080022fb8 devsw
-000000008000422c sys_getpid
-0000000080005f04 pipealloc
-0000000080006f24 sys_chdir
-000000008000198a proc_mapstacks
-0000000080007280 timervec
-0000000080003f1e kerneltrap
-0000000080004702 bpin
-0000000080001a20 procinit
-0000000080021468 itable
-0000000080004412 sys_get_cpu
-0000000080006e9c sys_mknod
-0000000080005c9c filestat
-0000000080012740 pid_lock
+0000000080002fdc fetchaddr
+0000000080021e58 devsw
+000000008000318a sys_getpid
+0000000080004e00 pipealloc
+0000000080005e1e sys_chdir
+0000000080001a7e proc_mapstacks
+0000000080006180 timervec
+0000000080002ea8 kerneltrap
+00000000800035fe bpin
+0000000080001b14 procinit
+0000000080020308 itable
+0000000080003358 sys_get_cpu
+0000000080005d96 sys_mknod
+0000000080004b98 filestat
+00000000800112a0 pid_lock
diff --git a/kernel/log.o b/kernel/log.o
index e6e9461..5b2a762 100644
Binary files a/kernel/log.o and b/kernel/log.o differ
diff --git a/kernel/main.o b/kernel/main.o
index f34ec51..265e749 100644
Binary files a/kernel/main.o and b/kernel/main.o differ
diff --git a/kernel/pipe.o b/kernel/pipe.o
index ce1c240..db3606e 100644
Binary files a/kernel/pipe.o and b/kernel/pipe.o differ
diff --git a/kernel/plic.o b/kernel/plic.o
index aa154a3..5028414 100644
Binary files a/kernel/plic.o and b/kernel/plic.o differ
diff --git a/kernel/printf.o b/kernel/printf.o
index cc03d98..55a8265 100644
Binary files a/kernel/printf.o and b/kernel/printf.o differ
diff --git a/kernel/proc.c b/kernel/proc.c
index 0fa8208..3e8a74e 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,37 +5,16 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
-#include <limits.h>
-
-
-int rate = 5;
-int pause_flag = 0;
-uint wake_up_time;
-uint sleeping_processes_mean = 0;
-uint running_processes_mean= 0;
-uint runnable_processes_mean = 0;
-int p_counter = 0;
-uint program_time;
-uint start_time;
-int cpu_utilization;
-
-// Ass2
-int sleeping_list_head = -1;
-int sleeping_list_tail = -1;
-int unused_list_head = -1;
-int unused_list_tail = -1;
-int zombie_list_head = -1;
-int zombie_list_tail = -1;
-
+#include <stddef.h>
 
 struct cpu cpus[NCPU];
 
 struct proc proc[NPROC];
 
 struct proc *initproc;
+int flag = 0;
 
 int nextpid = 1;
-// int nextcpuid = 0;
 struct spinlock pid_lock;
 
 extern void forkret(void);
@@ -43,60 +22,88 @@ static void freeproc(struct proc *p);
 
 extern char trampoline[]; // trampoline.S
 
+extern uint cas(volatile void *addr, int expected, int newval);
+
 // helps ensure that wakeups of wait()ing
 // parents are not lost. helps obey the
 // memory model when using p->parent.
 // must be acquired before any p->lock.
 struct spinlock wait_lock;
 
-// Ass2
-extern uint64 cas( volatile void *addr, int expected, int newval);
+// 
+struct linked_list unused_list = {-1};   
+struct linked_list sleeping_list = {-1}; 
+struct linked_list zombie_list = {-1};
 
-// Ass2
-int
-add_proc_to_list(int tail, struct proc *p)
-{
-  acquire(&p->list_lock);
-  acquire(&proc[tail].list_lock);
-  proc[tail].next_proc = p->proc_ind;
-  p->prev_proc = tail;
-  p->next_proc = -1;
-  release(&proc[tail].list_lock);
-  release(&p->list_lock);
-
-  return 0;
+void 
+inc_cpu(struct cpu *c){
+  uint64 procs_num;
+  do
+  {
+    procs_num = c->proc_cnt;
+  }
+  while (cas(&(c->proc_cnt), procs_num, procs_num+1));
 }
 
-// Ass2
-int
-remove_proc_from_list(int ind)
-{
-  struct proc *p = &proc[ind];
-
-  // printf("######### remove cur: %d,    prev: %d, next: %d   \n", ind, p->prev_proc, p->next_proc);
 
-  if (p->prev_proc == -1 && p->next_proc == -1)
-    return 1;  // Need to change head & tail.
-  
-  if (p->prev_proc == -1)
-    return 2;  // Need to change head.
+int
+isEmpty(struct linked_list *lst){
+  int h= 0;
+  h = lst->head == -1;
+  return h;
+}
 
-  if (p->next_proc == -1)
-    return 3;  // Need to change tail.
 
+void 
+append(struct linked_list *lst, struct proc *p){
+  acquire(&lst->head_lock);
+  if(isEmpty(lst)){
+    lst->head = p->proc_ind;
+    release(&lst->head_lock);
+  }
+  else{ 
+    acquire(&proc[lst->tail].list_lock);
+    release(&lst->head_lock);
+    proc[lst->tail].next_proc = p->proc_ind;
+    p->prev_proc = proc[lst->tail].proc_ind; 
+    release(&proc[lst->tail].list_lock);
+  }
+  acquire(&lst->head_lock);
+  lst->tail = p->proc_ind;
+  release(&lst->head_lock);
+}
 
+void 
+remove(struct linked_list *lst, struct proc *p){
+  acquire(&lst->head_lock);
+  if(isEmpty(lst)){
+    release(&lst->head_lock);
+    panic("list is empty\n");
+  }
 
-  struct proc *prev= &proc[p->prev_proc];
-  struct proc *next = &proc[p->next_proc];
-  acquire(&prev->list_lock);
-  acquire(&next->list_lock);
-  // int prev = proc[p->prev_proc].next_proc;
-  proc[p->prev_proc].next_proc = p->next_proc;
-  proc[p->next_proc].prev_proc = p->prev_proc;
-  release(&prev->list_lock);
-  release(&next->list_lock);
+  if(lst->head == p->proc_ind){ // the required proc is the head
+    lst->head = p->next_proc;
+    proc[p->next_proc].prev_proc = -1;
 
-  return 0;
+    if(lst->tail == p->proc_ind){
+      lst->tail = -1;
+    }
+    release(&lst->head_lock);
+  }
+  else{
+    if (lst->tail == p->proc_ind) {
+      lst->tail = p->prev_proc;
+    }
+    release(&lst->head_lock); 
+    acquire(&p->list_lock);
+    acquire(&proc[p->prev_proc].list_lock);
+    proc[p->prev_proc].next_proc = p->next_proc;
+    proc[p->next_proc].prev_proc = p->prev_proc; 
+    release(&proc[p->prev_proc].list_lock);
+    release(&p->list_lock);
+  }
+  p->prev_proc = -1;
+  p->next_proc = -1;
 }
 
 // Allocate a page for each process's kernel stack.
@@ -115,45 +122,52 @@ proc_mapstacks(pagetable_t kpgtbl) {
   }
 }
 
-
 // initialize the proc table at boot time.
-	void
-	procinit(void)
-	{
-	  struct proc *p;
-    int i = 0;
-	  
-	  initlock(&pid_lock, "nextpid");
-	  initlock(&wait_lock, "wait_lock");
-	  for(p = proc; p < &proc[NPROC]; p++) {
-	      initlock(&p->lock, "proc");
-	      p->kstack = KSTACK((int) (p - proc));
-
-        p->proc_ind = i;                               // Set index to process.
-        p->prev_proc = -1;
-        p->next_proc = -1;
-        if (i == 0)
-        {
-          unused_list_head = p->proc_ind;
-          unused_list_tail = p->proc_ind;
-        }
-        else
-        {
-          // printf("unused");
-          add_proc_to_list(unused_list_tail, p);
-          unused_list_tail = p->proc_ind;             // After adding to list, updating tail.
-        }
-        i ++;
-      }
-  
+void
+procinit(void)
+{
+  // Adding all processes to UNUSED list.
+  struct proc *p;
   struct cpu *c;
-  for(c = cpus; c < &cpus[NCPU]; c++)
-  {
-    c->runnable_list_head = -1;
-    c->runnable_list_tail = -1;
+  int i = 0;
+
+  struct spinlock *sleep_lock = &sleeping_list.head_lock;
+  struct spinlock *zombie_lock = &zombie_list.head_lock;
+  struct spinlock *unused_lock = &unused_list.head_lock;
+
+  #ifdef ON
+    flag = 1;
+  #endif
+
+
+  initlock(sleep_lock, "sleeping_list_head_lock");
+  initlock(zombie_lock, "zombie_list_head_lock");
+  initlock(unused_lock, "unused_list_head_lock");
+  initlock(&pid_lock, "nextpid");
+  initlock(&wait_lock, "wait_lock");
+
+  
+  for(p = proc; p < &proc[NPROC]; p++) {
+      initlock(&p->lock, "proc");
+      initlock(&p->list_lock, "list_lock");
+      p->kstack = KSTACK((int) (p - proc));
+      p->proc_ind = i;
+      i=i+1;
+      p->prev_proc = -1;
+      p->next_proc = -1;
+
+      struct linked_list *add_to_unused_list = &unused_list;
+      append(add_to_unused_list, p); 
   }
-}
 
+  for(c = cpus; c < &cpus[NCPU] && c != NULL ; c++){
+    struct linked_list empty_list = (struct linked_list){-1};
+    c->runnable_list = empty_list;
+    c->proc_cnt = 0;
+    struct spinlock *runnable_head = &c->runnable_list.head_lock;
+    initlock(runnable_head, "cpu_runnable_list_head_lock");
+  }
+}
 
 // Must be called with interrupts disabled,
 // to prevent race with process being moved
@@ -171,7 +185,6 @@ struct cpu*
 mycpu(void) {
   int id = cpuid();
   struct cpu *c = &cpus[id];
-  c->cpu_id = id;
   return c;
 }
 
@@ -185,35 +198,18 @@ myproc(void) {
   return p;
 }
 
-
-// Changed !
-
-// int
-// allocpid() {
-//   int pid;
-  
-//   acquire(&pid_lock);
-//   pid = nextpid;
-//   nextpid = nextpid + 1;
-//   release(&pid_lock);
-
-//   return pid;
-// }
-
 int
 allocpid() {
-  int pid;
-  
-  pid = nextpid;
-  // printf("pid: %d, nextpid: %d\n", pid, nextpid);
+  int pid = 0;
 
-  if (cas(&nextpid, pid, (nextpid + 1)) == 0)
+  do 
   {
-    return pid;
-  }
-  return allocpid();
-}
+    pid = nextpid;
+  } 
+  while (cas(&nextpid, pid, nextpid + 1));
 
+  return pid;
+}
 
 // Look in the process table for an UNUSED proc.
 // If found, initialize state required to run in the kernel,
@@ -222,79 +218,29 @@ allocpid() {
 static struct proc*
 allocproc(void)
 {
-  // TODO: choose UNUSED process.
+  // Removing the new process from the UNUSED entry list.
   struct proc *p;
+  int empty = -1;
 
-  // Ass2
-  while (unused_list_head > -1)
-  {
-    // printf("allocproc!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
-    p = &proc[unused_list_head];
+  while(!(unused_list.head == empty)) {
+    p = &proc[unused_list.head];
     acquire(&p->lock);
-    // printf("unused");
-    int res = remove_proc_from_list(unused_list_head); 
-
-    if (res == 1)
-    {
-      unused_list_head = -1;
-      unused_list_tail = -1;
-      // printf("1 no head & tail");
-    }
-    if (res == 2)
-    {
-      unused_list_head = p->next_proc;      // Update head.
-      if (proc[p->next_proc].next_proc == -1)
-        unused_list_tail = p->next_proc;
-
-      acquire(&proc[p->next_proc].list_lock);
-      proc[p->next_proc].prev_proc = -1;    // Remove head's prev.
-      release(&proc[p->next_proc].list_lock);
-      // printf("1 no head");
+    if(p->state == UNUSED) {
+
+      struct linked_list *remove_from_unused_list = &unused_list;
+      remove(remove_from_unused_list, p); 
+      goto found;
     }
-    if (res == 3)
-    {
-      unused_list_tail = p->prev_proc;      // Update tail.
-       if (proc[p->prev_proc].prev_proc == -1)
-        unused_list_head = p->prev_proc;
-      
-      acquire(&proc[p->prev_proc].list_lock);
-      proc[p->prev_proc].next_proc = -1;    // Remove tail's next.
-      release(&proc[p->prev_proc].list_lock);
-      // printf("1 no tail");
+    else {
+      release(&p->lock);
     }
-
-    p->prev_proc = -1;
-    p->next_proc = -1;
-
-    // printf("the new unused_list_head: %d\n", unused_list_head);
-    goto found;
   }
   return 0;
 
-  // for(p = proc; p < &proc[NPROC]; p++) {
-  //   acquire(&p->lock);
-  //   if(p->state == UNUSED) {
-  //     goto found;
-  //   } else {
-  //     release(&p->lock);
-  //   }
-  // }
-  // return 0;
-
 found:
   p->pid = allocpid();
-
   p->state = USED;
-
-  // added
-  p->mean_ticks = 0;
-  p->last_ticks = 0;
-  p->paused = 0;
-
-  p->sleeping_time = 0;
-  p->running_time = 0;
-  p->runnable_time = 0;
-
+  p->last_cpu = -1;
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
@@ -326,7 +272,6 @@ found:
 static void
 freeproc(struct proc *p)
 {
-  // TODO: remove from ZOMBIE list and add to UNUSED.
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
@@ -342,52 +287,11 @@ freeproc(struct proc *p)
   p->xstate = 0;
   p->state = UNUSED;
 
-  // Ass2
-  // printf("zombie");
-  int res = remove_proc_from_list(p->proc_ind); 
-  if (res == 1)
-  {
-    zombie_list_head = -1;
-    zombie_list_tail = -1;
-    // printf("2 no head & tail");
-  }
-  if (res == 2)
-  {
-    zombie_list_head = p->next_proc;
-    if (proc[p->next_proc].next_proc == -1)
-      zombie_list_tail = p->next_proc;
-    
-    acquire(&proc[p->next_proc].list_lock);
-    proc[p->next_proc].prev_proc = -1;
-    release(&proc[p->next_proc].list_lock);
-    // printf("1 no head ");
-  }
-  if (res == 3){
-    zombie_list_tail = p->prev_proc;
-     if (proc[p->prev_proc].prev_proc == -1)
-      zombie_list_head = p->prev_proc;
-    
-    acquire(&proc[p->prev_proc].list_lock);
-    proc[p->prev_proc].next_proc = -1;
-    release(&proc[p->prev_proc].list_lock);
-    // printf("1 no tail");
-  }
+  struct linked_list *remove_from_ZOMBIE_list = &zombie_list;
+  struct linked_list *add_to_UNUSED_list = &unused_list;
 
-  p->next_proc = -1;
-  p->prev_proc = -1;
-
-  if (unused_list_tail != -1){
-    // printf("unused");
-    add_proc_to_list(unused_list_tail, p);
-    if (unused_list_head == -1)
-  {
-    unused_list_head = p->proc_ind;
-  }
-    unused_list_tail = p->proc_ind;
-  }
-  else{
-    unused_list_tail = unused_list_head = p->proc_ind;
-  }
+  remove(remove_from_ZOMBIE_list, p); 
+  append(add_to_UNUSED_list, p); 
 }
 
 // Create a user page table for a given process,
@@ -445,29 +349,10 @@ uchar initcode[] = {
   0x00, 0x00, 0x00, 0x00
 };
 
-
-int
-str_compare(const char *p1, const char *p2)
-{
-  const unsigned char *s1 = (const unsigned char *) p1;
-  const unsigned char *s2 = (const unsigned char *) p2;
-  unsigned char c1, c2;
-  do
-    {
-      c1 = (unsigned char) *s1++;
-      c2 = (unsigned char) *s2++;
-      if (c1 == '\0')
-        return c1 - c2;
-    }
-  while (c1 == c2);
-  return c1 - c2;
-}
-
 // Set up first user process.
 void
 userinit(void)
 {
-  // TODO: add init to 1st cpu list - V
   struct proc *p;
 
   p = allocproc();
@@ -486,22 +371,8 @@ userinit(void)
   p->cwd = namei("/");
 
   p->state = RUNNABLE;
-  // added
-  p->last_runnable_time = ticks;
-  
-  //Ass2
-  if (mycpu()->runnable_list_head == -1)
-  {
-    // printf("init runnable: %d            1\n", p->proc_ind);
-    mycpu()->runnable_list_head = p->proc_ind;
-    mycpu()->runnable_list_tail = p->proc_ind;
-  }
-  else
-  {
-    // printf("runnable1");
-    add_proc_to_list(mycpu()->runnable_list_tail, p);
-    mycpu()->runnable_list_tail = p->proc_ind;
-  }
+  struct linked_list *l = &cpus[0].runnable_list;
+  append(l, p);
 
   release(&p->lock);
 }
@@ -526,19 +397,32 @@ growproc(int n)
   return 0;
 }
 
+int
+min_num_procs_cpu(void){
+  struct cpu *c = 0;
+  struct cpu *min_cpu = cpus;
+  int min_cpu_proc_cnt = min_cpu->proc_cnt;
+
+  for(c = cpus + 1; c < &cpus[NCPU] && c != NULL ; c++){
+    if (c->proc_cnt < min_cpu_proc_cnt) {
+        min_cpu = c;
+        min_cpu_proc_cnt = min_cpu->proc_cnt;
+    }
+  }
+  return min_cpu_proc_cnt;   
+} 
+
 // Create a new process, copying the parent.
 // Sets up child kernel stack to return as if from fork() system call.
 int
 fork(void)
 {
 
-  // TODO: add to RUNNABLE list.
-  int i, pid;
+  int i; 
+  int pid;
   struct proc *np;
   struct proc *p = myproc();
 
-  printf("FORKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK\n");
-
   // Allocate process.
   if((np = allocproc()) == 0){
     return -1;
@@ -568,8 +452,6 @@ fork(void)
 
   pid = np->pid;
 
-  printf("pid: %d\n", pid);
-
   release(&np->lock);
 
   acquire(&wait_lock);
@@ -578,24 +460,17 @@ fork(void)
 
   acquire(&np->lock);
   np->state = RUNNABLE;
-  // added
-  np->last_runnable_time = ticks;
 
-  // Ass2
-  
-  if (mycpu()->runnable_list_head == -1)
-  {
-    printf("init runnable %d                 2\n", np->proc_ind);
-    mycpu()->runnable_list_head = np->proc_ind;
-    mycpu()->runnable_list_tail = np->proc_ind;
-  }
-  else
-  {
-    printf("runnable2             %d\n", mycpu()->runnable_list_tail);
-    add_proc_to_list(mycpu()->runnable_list_tail, np);
-    mycpu()->runnable_list_tail = np->proc_ind;
-  }
+  // if BLNCFLG is off
+  int last_cpu = p->last_cpu; 
+  np->last_cpu = last_cpu;
+  if (flag == 1)
+    np->last_cpu = min_num_procs_cpu();
+
+  inc_cpu(&cpus[np->last_cpu]);
 
+  // Adds the new process to the fatherâ€™s current CPUâ€™s runnable list or the least busy cpu.
+  append(&(cpus[np->last_cpu].runnable_list), np); 
   release(&np->lock);
 
   return pid;
@@ -622,7 +497,6 @@ reparent(struct proc *p)
 void
 exit(int status)
 {
-  // TODO: remove from RUNNABLE list and add to ZOMBIE
   struct proc *p = myproc();
 
   if(p == initproc)
@@ -637,20 +511,6 @@ exit(int status)
     }
   }
 
-  
-
-  if ( str_compare(p->name, "init") != 0 && str_compare(p->name, "sh") != 0 ) 
-  {
-    // Update
-    sleeping_processes_mean = ((sleeping_processes_mean * p_counter)+ p->sleeping_time)/(p_counter+1);
-    running_processes_mean = ((running_processes_mean * p_counter)+ p->running_time)/(p_counter+1);
-    runnable_processes_mean = ((runnable_processes_mean * p_counter)+ p->runnable_time)/(p_counter+1);
-    p_counter += 1;
-    program_time += p->running_time;
-    cpu_utilization = (program_time* 100) / (ticks - start_time) ;
-  }
-  //
-
   begin_op();
   iput(p->cwd);
   end_op();
@@ -669,55 +529,9 @@ exit(int status)
   p->xstate = status;
   p->state = ZOMBIE;
 
-  // added
-  p->running_time += ticks - p->start_running_time;
+  // Add process to the ZOMBIE list.
+  append(&zombie_list, p); 
 
-  //Ass2 
-  // printf("runnable ");
-  int res = remove_proc_from_list(p->proc_ind); 
-  if (res == 1)
-  {
-    mycpu()->runnable_list_head = -1;
-    mycpu()->runnable_list_tail = -1;
-    // printf("3 no head & tail");
-  }
-  if (res == 2)
-  {
-    mycpu()->runnable_list_head = p->next_proc;
-    if (proc[p->next_proc].next_proc == -1)
-      mycpu()->runnable_list_tail = p->next_proc;
-    
-    acquire(&proc[p->next_proc].list_lock);
-    proc[p->next_proc].prev_proc = -1;
-    release(&proc[p->next_proc].list_lock);
-    // printf("3 no head");
-  }
-  if (res == 3){
-    mycpu()->runnable_list_tail = p->prev_proc;
-    if (proc[p->prev_proc].prev_proc == -1)
-      mycpu()->runnable_list_head = p->prev_proc;
-    
-    acquire(&proc[p->prev_proc].list_lock);
-    proc[p->prev_proc].next_proc = -1;
-    release(&proc[p->prev_proc].list_lock);
-    // printf("3 no tail");
-  }
-
-  p->next_proc = -1;
-  p->prev_proc = -1;
-
-  if (zombie_list_tail != -1){
-    // printf("zombie");
-    add_proc_to_list(zombie_list_tail, p);
-     if (zombie_list_head == -1)
-      {
-        zombie_list_head = p->proc_ind;
-      }
-    zombie_list_tail = p->proc_ind;
-  }
-  else{
-    zombie_list_tail = zombie_list_head = p->proc_ind;
-  }
   release(&wait_lock);
 
   // Jump into the scheduler, never to return.
@@ -734,27 +548,20 @@ wait(uint64 addr)
   int havekids, pid;
   struct proc *p = myproc();
 
-
-  // printf("in start wait\n");
   acquire(&wait_lock);
 
   for(;;){
     // Scan through table looking for exited children.
-
-    printf("\nin for\n");
     havekids = 0;
     for(np = proc; np < &proc[NPROC]; np++){
-      // printf("for\n");
       if(np->parent == p){
-        printf("np->parent == p         %d,      %d\n", p->pid, np->state);
         // make sure the child isn't still in exit() or swtch().
         acquire(&np->lock);
-        printf("after lock aquired\n");
+
         havekids = 1;
         if(np->state == ZOMBIE){
           // Found one.
           pid = np->pid;
-          printf("found: %d\n", pid);
           if(addr != 0 && copyout(p->pagetable, addr, (char *)&np->xstate,
                                   sizeof(np->xstate)) < 0) {
             release(&np->lock);
@@ -768,7 +575,6 @@ wait(uint64 addr)
         }
         release(&np->lock);
       }
-      // printf("end of for\n");
     }
 
     // No point waiting if we don't have any children.
@@ -776,161 +582,12 @@ wait(uint64 addr)
       release(&wait_lock);
       return -1;
     }
-
-    printf("havekids || !p->killed\n");
     
     // Wait for a child to exit.
     sleep(p, &wait_lock);  //DOC: wait-sleep
   }
 }
 
-void
-unpause_system(void)
-{
-  struct proc *p;
-  for(p = proc; p < &proc[NPROC]; p++) 
-  {
-      acquire(&p->lock);
-      if(p->paused == 1) 
-      {
-        p->paused = 0;
-      }
-      release(&p->lock);
-  }
-} 
-
-void
-SJF_scheduler(void)
-{
-  struct proc *p;
-  struct cpu *c = mycpu();
- 
-  c->proc = 0;
-
-  for(;;){
-
-    // Avoid deadlock by ensuring that devices can interrupt.
-    intr_on();
-   
-    uint min = INT_MAX;
-    struct proc* p_of_min = proc;
-    int should_switch = 0;
-
-    // for to find the runnable with min mean ticks
-    for(p = proc; p < &proc[NPROC]; p++) {
-         
-       if(p->state == RUNNABLE) {
-         if (p->mean_ticks < min)
-         {
-           p_of_min = p;
-           min = p->mean_ticks;
-           should_switch = 1;
-         }
-       }
-    }
-
-    // Switch to chosen process.  It is the process's job
-    // to release its lock and then reacquire it
-    // before jumping back to us.
-
-    acquire(&p_of_min->lock);
-    if (should_switch == 1 && p_of_min->state == RUNNABLE && p_of_min->paused == 0){
-      should_switch = 0;
-      p_of_min->state = RUNNING;
-      p_of_min->start_running_time = ticks;
-      p_of_min->runnable_time += ticks - p_of_min->last_runnable_time;
-      c->proc = p_of_min;
-      uint before_swtch = ticks;
-      swtch(&c->context, &p_of_min->context);
-      p_of_min->last_ticks= ticks - before_swtch;
-      p_of_min->mean_ticks=((10 - rate) * p->mean_ticks + p->last_ticks * (rate)) / 10 ;
-      
-      // Process is done running for now.
-      // It should have changed its p->state before coming back.
-      c->proc = 0;
-    }
-    release(&p_of_min->lock);
-
-    if (pause_flag == 1) 
-    {
-      if (wake_up_time <= ticks) 
-      {
-        pause_flag = 0;
-        unpause_system();
-      }
-    }
-  }
-}
-
-
-void
-FCFS_scheduler(void)
-{
-  struct proc *p;
-  struct cpu *c = mycpu();
-  
- 
-  int should_switch = 0;
-  
-  c->proc = 0;
-  for(;;)
-  {
-    // Avoiding deadlock by ensuring that devices can interrupt.
-    intr_on();
-
-    uint minlast_runnable = INT_MAX;
-    struct proc *p_of_min = proc;
-
-    // Checking which process has the lowest mean_ticks
-    for(p = proc; p < &proc[NPROC]; p++) 
-    {
-      acquire(&p->lock);
-      if(p->state == RUNNABLE && p->paused == 0) 
-      {
-        if(p->last_runnable_time <= minlast_runnable)
-        {
-          minlast_runnable = p->mean_ticks;
-          p_of_min = p;
-          should_switch = 1;
-        }
-      }
-      release(&p->lock);
-    }
-
-    // Switch to chosen process.  It is the process's job
-    // to release its lock and then reacquire it
-    // before jumping back to us.
-    
-    acquire(&p_of_min->lock);
-    if (p_of_min->paused == 0)
-    {
-      if (should_switch == 1 && p_of_min->pid > -1)
-      {
-        p_of_min->state = RUNNING;
-        p_of_min->start_running_time = ticks;
-        p_of_min->runnable_time += ticks - p_of_min->last_runnable_time;
-        c->proc = p_of_min;
-        swtch(&c->context, &p_of_min->context);
-
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
-        c->proc = 0;
-        should_switch = 0;
-      }
-    }
-    release(&p_of_min->lock);
-
-    if (pause_flag == 1) 
-    {
-      if (wake_up_time <= ticks) 
-      {
-        pause_flag = 0;
-        unpause_system();
-      }
-    }
-  }
-}
-
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
 // Scheduler never returns.  It loops, doing:
@@ -938,94 +595,41 @@ FCFS_scheduler(void)
 //  - swtch to start running that process.
 //  - eventually that process transfers control
 //    via swtch back to the scheduler.
-
-
 void
 scheduler(void)
 {
-  // TODO: pick first process from list.
-  struct proc *p;
   struct cpu *c = mycpu();
-  
   c->proc = 0;
-  for(;;)
-  {
+  struct proc *p;
+
+  for(;;){
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
+    
+    while(!(c->runnable_list.head == -1)) {
+      p = &proc[c->runnable_list.head];
+      if(p->state == RUNNABLE) {
+        acquire(&p->lock);
 
-    // printf("start sched\n");
-    if (c->runnable_list_head != -1)
-    {
-      p = &proc[c->runnable_list_head];
-      // printf("proc ind: %d\n", c->runnable_list_head);
-
-      //Ass2
-      // printf("runnable3");
-      int res = remove_proc_from_list(p->proc_ind); 
-      if (res == 1)
-      {
-        c->runnable_list_head = -1;
-        c->runnable_list_tail = -1;
-        // printf("No head & tail");
-      }
-      if (res == 2)
-      {
-        c->runnable_list_head = p->next_proc;
-        if (proc[p->next_proc].next_proc == -1)
-          c->runnable_list_tail = p->next_proc;
-        
-        acquire(&proc[p->next_proc].list_lock);
-        proc[p->next_proc].prev_proc = -1;
-        release(&proc[p->next_proc].list_lock);
-        // printf("New head: %d\n", c->runnable_list_head);
-      }
-      if (res == 3){
-        c->runnable_list_tail = p->prev_proc;
-        if (proc[p->prev_proc].prev_proc == -1)
-          c->runnable_list_head = p->prev_proc;
-        
-        acquire(&proc[p->prev_proc].list_lock);
-        proc[p->prev_proc].next_proc = -1;
-        release(&proc[p->prev_proc].list_lock);
-        // printf("No tail");
-      }
+        // Switch to chosen process.  It is the process's job
+        // to release its lock and then reacquire it
+        // before jumping back to us.
+        remove(&(c->runnable_list), p);
+        p->state = RUNNING;
+        c->proc = p;
+        p->last_cpu = c->cpu_id;
 
-      acquire(&p->lock);
-      p->prev_proc = -1;
-      p->next_proc = -1;
-      p->state = RUNNING;
-      p->cpu_num = c->cpu_id;
-      c->proc = p;
-      swtch(&c->context, &p->context);
-     
-      // Process is done running for now.
-      // It should have changed its p->state before coming back.
-      c->proc = 0;
-      release(&p->lock);
+        swtch(&c->context, &p->context);
 
-      // printf("end sched\n");
-    }
+        // Process is done running for now.
+        // It should have changed its p->state before coming back.
+        c->proc = 0;
+        release(&p->lock);
+      }
+    } 
   }
 }
 
-void
-translate_state(int s)
-{
-  if (s == 0)
-    printf("UNUSED");
-  if (s == 1)
-    printf("USED");
-  if (s == 2)
-    printf("SLEEPING");
-  if (s == 3)
-    printf("RUNNABLE");
-  if (s == 4)
-    printf("RUNNING");
-  if (s == 5)
-    printf("ZOMBIE");
-}
-
-
 // Switch to scheduler.  Must hold only p->lock
 // and have changed proc->state. Saves and restores
 // intena because intena is a property of this
@@ -1048,41 +652,20 @@ sched(void)
   if(intr_get())
     panic("sched interruptible");
 
-
-  printf("sched1\n");
   intena = mycpu()->intena;
-  printf("swtch to : %d      state:\n", p->pid);
-  translate_state(p->state);
   swtch(&p->context, &mycpu()->context);
-  printf("after swatch\n");
   mycpu()->intena = intena;
-  printf("sched3\n");
 }
 
 // Give up the CPU for one scheduling round.
 void
 yield(void)
 {
-  // TODOL add to RUNNABLE list.
   struct proc *p = myproc();
+
   acquire(&p->lock);
   p->state = RUNNABLE;
-  // added
-  p->last_runnable_time = ticks;
-
-  //Ass2
-  if (mycpu()->runnable_list_head == -1)
-  {
-    // printf("init runnable : %d                   8\n", p->proc_ind);
-    mycpu()->runnable_list_head = p->proc_ind;
-    mycpu()->runnable_list_tail = p->proc_ind;
-  }
-  else
-  {
-    // printf("runnable8");
-    add_proc_to_list(mycpu()->runnable_list_tail, p);
-    mycpu()->runnable_list_tail = p->proc_ind;
-  }
+  append(&(mycpu()->runnable_list), p);
   sched();
   release(&p->lock);
 }
@@ -1113,7 +696,6 @@ forkret(void)
 void
 sleep(void *chan, struct spinlock *lk)
 {
-  // TODO: remove from RUNNABLE and add to SLEEPING
   struct proc *p = myproc();
   
   // Must acquire p->lock in order to
@@ -1123,70 +705,18 @@ sleep(void *chan, struct spinlock *lk)
   // (wakeup locks p->lock),
   // so it's okay to release lk.
 
-  acquire(&p->lock);  //DOC: sleeplock1
+  acquire(&p->lock);
   release(lk);
 
-  //Ass2
-  printf("runnable ");
-  int res = remove_proc_from_list(p->proc_ind); 
-  if (res == 1)
-  {
-    mycpu()->runnable_list_head = -1;
-    mycpu()->runnable_list_tail = -1;
-    // printf("4 no head & tail");
-  }
-  if (res == 2)
-  {
-    mycpu()->runnable_list_head = p->next_proc;
-    if (proc[p->next_proc].next_proc == -1)
-      mycpu()->runnable_list_tail = p->next_proc;
-    
-    acquire(&proc[p->next_proc].list_lock);
-    proc[p->next_proc].prev_proc = -1;
-    release(&proc[p->next_proc].list_lock);
-    // printf("4 no head ");
-  }
-  if (res == 3){
-    mycpu()->runnable_list_tail = p->prev_proc;
-    if (proc[p->prev_proc].prev_proc == -1)
-      mycpu()->runnable_list_head = p->prev_proc;
-    
-    acquire(&proc[p->prev_proc].list_lock);
-    proc[p->prev_proc].next_proc = -1;
-    release(&proc[p->prev_proc].list_lock);
-    // printf("4 no tail");
-  }
-
-  p->next_proc = -1;
-  p->prev_proc = -1;
-
   // Go to sleep.
   p->chan = chan;
   p->state = SLEEPING;
-  p->start_sleeping_time = ticks;
-
-  if (sleeping_list_tail != -1){
-    // printf("sleeping");
-    add_proc_to_list(sleeping_list_tail, p);
-    if (sleeping_list_head == -1)
-      {
-        sleeping_list_head = p->proc_ind;
-      }
-    sleeping_list_tail = p->proc_ind;
-  }
-  else
-  {
-    // printf("head in sleeping\n");
-    sleeping_list_tail =  p->proc_ind;
-    sleeping_list_head = p->proc_ind;
-  }
 
-  printf("before sched\n");
+  struct linked_list *add_to_SLEEPING_list = &sleeping_list;
+  append(add_to_SLEEPING_list, p);
 
   sched();
 
-  printf("after sched\n");
-
   // Tidy up.
   p->chan = 0;
 
@@ -1200,76 +730,28 @@ sleep(void *chan, struct spinlock *lk)
 void
 wakeup(void *chan)
 {
-  // TODO: go threw all SLEEPING and pick one to wake up- remove from SLEEPING and add to RUNNABLE.
   struct proc *p;
+  int empty = -1;
+  int curr = sleeping_list.head;
 
-  printf("wakeup\n");
-  
-  while (sleeping_list_head != -1)
-  {
-    printf("head != -1\n");
-    p = &proc[sleeping_list_head];
-    if(p != myproc())
-    {
-      printf("p != myproc()\n");
+  while(curr != empty) {
+    p = &proc[curr];
+    if(p != myproc()){
       acquire(&p->lock);
-      printf("p->chan == chan          %d\n", (p->chan == chan));
-      if (p->state == SLEEPING && p->chan == chan)
-      {   
-        printf("sleeping");
-        int res = remove_proc_from_list(p->proc_ind); 
-          if (res == 1) // []
-          {
-            sleeping_list_head = -1;
-            sleeping_list_tail = -1;
-            printf("5 no head & tail");
-          }
-          if (res == 2) // If removing last entry in array.
-          {
-            sleeping_list_head = p->next_proc;
-            if (proc[p->next_proc].next_proc == -1)
-              sleeping_list_tail = p->next_proc;
-
-            acquire(&proc[p->next_proc].list_lock);
-            proc[p->next_proc].prev_proc = -1;
-            release(&proc[p->next_proc].list_lock);
-            printf("5 no head ");
-          }
-          if (res == 3){
-            sleeping_list_tail = p->prev_proc;
-            if (proc[p->prev_proc].prev_proc == -1)
-              sleeping_list_head = p->prev_proc;
-
-            acquire(&proc[p->prev_proc].list_lock);
-            proc[p->prev_proc].next_proc = -1;
-            release(&proc[p->prev_proc].list_lock);
-            printf("5 no tail");
-          }
+      if(p->state == SLEEPING && p->chan == chan) {
+        struct linked_list *remove_from_SLEEPING_list = &sleeping_list;
+        remove(remove_from_SLEEPING_list, p);
         p->state = RUNNABLE;
-        p->prev_proc = -1;
-        p->next_proc = -1;
-        
-        if (cpus[p->cpu_num].runnable_list_head == -1)
-        {
-          printf("init runnable %d                  4\n", p->proc_ind);
-          cpus[p->cpu_num].runnable_list_head = p->proc_ind;
-          cpus[p->cpu_num].runnable_list_tail = p->proc_ind;
-        }
-        else
-        {
-          printf("runnable4");
-          add_proc_to_list(cpus[p->cpu_num].runnable_list_tail, p);
-          cpus[p->cpu_num].runnable_list_tail = p->proc_ind;
-        }
-        printf("tail: %d\n", cpus[p->cpu_num].runnable_list_tail);
-        printf("end wakeup\n");
+
+        if (flag == 1)
+          p->last_cpu = min_num_procs_cpu();
+
+        inc_cpu(&cpus[p->last_cpu]);
+        append(&cpus[p->last_cpu].runnable_list, p);
       }
       release(&p->lock);
     }
-    if (p->next_proc != -1)
-      p = &proc[p->next_proc];
-    else
-      return;
+  curr = p->next_proc;
   }
 }
 
@@ -1288,9 +770,6 @@ kill(int pid)
       if(p->state == SLEEPING){
         // Wake process from sleep().
         p->state = RUNNABLE;
-        p->sleeping_time += ticks - p->start_sleeping_time;
-        // added
-        p->last_runnable_time = ticks;
       }
       release(&p->lock);
       return 0;
@@ -1300,121 +779,9 @@ kill(int pid)
   return -1;
 }
 
-int 
-print_stats(void)
-{
-  printf("sleeping_processes_mean: %d\n", sleeping_processes_mean);
-  printf("runnable_processes_mean: %d\n", runnable_processes_mean);
-  printf("running_processes_mean: %d\n", running_processes_mean);
-  printf("program_time: %d\n", program_time);
-  printf("cpu_utilization: %d\n", cpu_utilization);
-  printf("ticks: %d\n", ticks);
-  return 0;
-}
-
-// Ass2
-int
-set_cpu(int cpu_num)
-{
-  // TODO
-  if (cpu_num > NCPU)
-    return -1;
-
-  struct cpu* c;
-  for(c = cpus; c < &cpus[NCPU]; c++)
-  {
-    if (c->cpu_id == cpu_num)
-    {
-      
-      
-      if (c->runnable_list_head == -1)
-      {
-        // printf("init runnable %d                   5\n", proc->proc_ind);
-        c->runnable_list_tail = myproc()->proc_ind;
-        c->runnable_list_head = myproc()->proc_ind;
-      }
-      else
-      {
-        // printf("runnable5");
-        add_proc_to_list(c->runnable_list_tail, myproc());
-        c->runnable_list_tail = myproc()->proc_ind;
-      }
-      
-      return 0;
-    }
-  }
-  return -1;
-}
-
-
-int
-get_cpu()
-{
-  // TODO
-  return cpuid();
-}
-
-
-int
-pause_system(int seconds)
-{
-  struct proc *p;
-  struct proc *myProcess = myproc();
-
-  pause_flag = 1;
-
-  wake_up_time = ticks + (seconds * 10);
-
-  for(p = proc; p < &proc[NPROC]; p++)
-  {
-    acquire(&p->lock);
-    if(p->state == RUNNING)
-    {
-      if ( str_compare(p->name, "init") != 0 && str_compare(p->name, "sh") != 0 ) {
-        if (p != myProcess) {
-          p->paused = 1;
-          p->running_time += ticks - p->start_running_time;
-          yield();
-        }
-      }
-    }
-    release(&p->lock);
-  }
-  if ( str_compare(myProcess->name, "init") != 0 && str_compare(myProcess->name, "sh") != 0 ) 
-  {
-    acquire(&myProcess->lock);
-    myProcess->paused = 1;
-    myProcess->running_time += ticks - myProcess->start_running_time;
-    release(&myProcess->lock);
-    yield();
-  }
-  return 0;
-}
-
-
 // Copy to either a user address, or kernel address,
 // depending on usr_dst.
 // Returns 0 on success, -1 on error.
-
-int
-kill_system(void) 
-{
-  struct proc *p;
-  struct proc *myProcess = myproc();
-
-  for (p = proc; p < &proc[NPROC]; p++) {
-    if ( str_compare(p->name, "init") != 0 && str_compare(p->name, "sh") != 0 ) {
-      if (p != myProcess) {
-        kill(p->pid);      
-      }
-    }
-  }
-  if ( str_compare(myProcess->name, "init") != 0 && str_compare(myProcess->name, "sh") != 0 ) {
-    kill(myProcess->pid);
-  }
-  return 0;
-}
-
 int
 either_copyout(int user_dst, uint64 dst, void *src, uint64 len)
 {
@@ -1444,10 +811,9 @@ either_copyin(void *dst, int user_src, uint64 src, uint64 len)
 
 // Print a process listing to console.  For debugging.
 // Runs when user types ^P on console.
-// No lock to avoid wedging a stuck machine further.
+// No lock to avoid wedging a stuck machine further..
 void
-procdump(void)
-{
+procdump(void){
   static char *states[] = {
   [UNUSED]    "unused",
   [SLEEPING]  "sleep ",
@@ -1465,8 +831,43 @@ procdump(void)
     if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
       state = states[p->state];
     else
-      state = "???";
+      state = "???"; 
     printf("%d %s %s", p->pid, state, p->name);
     printf("\n");
   }
 }
+
+// move process to different CPU. 
+int
+set_cpu(int cpu_num) {
+  int fail = -1;
+  if(cpu_num < NCPU) {
+   if(cpu_num >= 0) {
+     struct cpu *c = &cpus[cpu_num];
+     if(c != NULL) {
+        acquire(&myproc()->lock);
+        myproc()->last_cpu = cpu_num;
+        release(&myproc()->lock);
+
+        // RUNNING -> RUNNABLE
+        yield();
+        return cpu_num;
+      }
+    }
+  }
+  return fail;
+}
+
+
+// returns current CPU.
+int
+get_cpu(void){
+
+  // If process was not chosen by any cpy the value of myproc()->last_cpu is -1.
+  return myproc()->last_cpu;
+}
+
+// int
+// cpu_process_count(int cpu_num) {
+//   return cpus[cpu_num].proc_cnt;
+// }
diff --git a/kernel/proc.d b/kernel/proc.d
index 2ba0cc0..d7d0bdc 100644
--- a/kernel/proc.d
+++ b/kernel/proc.d
@@ -1,17 +1,3 @@
 kernel/proc.o: kernel/proc.c kernel/types.h kernel/param.h \
  kernel/memlayout.h kernel/riscv.h kernel/spinlock.h kernel/proc.h \
- kernel/defs.h /usr/lib/gcc-cross/riscv64-linux-gnu/9/include/limits.h \
- /usr/lib/gcc-cross/riscv64-linux-gnu/9/include/syslimits.h \
- /usr/riscv64-linux-gnu/include/limits.h \
- /usr/riscv64-linux-gnu/include/bits/libc-header-start.h \
- /usr/riscv64-linux-gnu/include/features.h \
- /usr/riscv64-linux-gnu/include/stdc-predef.h \
- /usr/riscv64-linux-gnu/include/sys/cdefs.h \
- /usr/riscv64-linux-gnu/include/bits/wordsize.h \
- /usr/riscv64-linux-gnu/include/bits/long-double.h \
- /usr/riscv64-linux-gnu/include/gnu/stubs.h \
- /usr/riscv64-linux-gnu/include/gnu/stubs-lp64d.h \
- /usr/riscv64-linux-gnu/include/bits/posix1_lim.h \
- /usr/riscv64-linux-gnu/include/bits/local_lim.h \
- /usr/riscv64-linux-gnu/include/linux/limits.h \
- /usr/riscv64-linux-gnu/include/bits/posix2_lim.h
+ kernel/defs.h /usr/lib/gcc-cross/riscv64-linux-gnu/9/include/stddef.h
diff --git a/kernel/proc.h b/kernel/proc.h
index 39935f9..11fd5c7 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -1,4 +1,12 @@
 
+
+struct linked_list {
+  int head;                  
+  int tail;
+  struct spinlock head_lock;
+};
+
+
 // Saved registers for kernel context switches.
 struct context {
   uint64 ra;
@@ -25,11 +33,9 @@ struct cpu {
   struct context context;     // swtch() here to enter scheduler().
   int noff;                   // Depth of push_off() nesting.
   int intena;                 // Were interrupts enabled before push_off()?
-
-  // Ass2
-  int runnable_list_head;     // The head of all ready processes.
-  int runnable_list_tail;     // The tail of all ready processes.
+  int proc_cnt;
   int cpu_id;
+  struct linked_list runnable_list;
 };
 
 extern struct cpu cpus[NCPU];
@@ -99,25 +105,6 @@ struct proc {
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
 
-  // Ass1
-  uint mean_ticks;              // mean_ticks = ((10 - rate) * mean_ticks + last_ticks * (rate)) / 10
-  uint last_ticks;              // Number of ticks in the last CPU burst 
-  uint last_runnable_time;
-  int paused;
-
-  // statistics
-  uint running_time;
-  uint runnable_time;
-  uint sleeping_time; 
-  uint start_running_time;
-  uint start_sleeping_time; 
-
-  // Ass2
-  int cpu_num;                  // CPU's id which the process last ran on.
-  int proc_ind;                 // Process index in proc[].
-  int next_proc;                // The next process in the "linked list".
-  int prev_proc;                // The previous process in the "linked list".
-
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
 
@@ -130,4 +117,10 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  int last_cpu;
+  int next_proc;
+  int prev_proc;
+  int proc_ind;
+  struct spinlock list_lock;
 };
diff --git a/kernel/proc.o b/kernel/proc.o
index 0711a7a..a59160d 100644
Binary files a/kernel/proc.o and b/kernel/proc.o differ
diff --git a/kernel/sjf.txt b/kernel/sjf.txt
deleted file mode 100644
index d975e52..0000000
--- a/kernel/sjf.txt
+++ /dev/null
@@ -1,216 +0,0 @@
-env_large 0/10000000 completed.
-env_large 1000000/10000000 completed.
-env_large 2000000/10000000 completed.
-env_large 3000000/10000000 completed.
-env_large 4000000/10000000 completed.
-env_large 5000000/10000000 completed.
-env_large 6000000/10000000 completed.
-env_large 7000000/10000000 completed.
-env_large 8000000/10000000 completed.
-env_large 9000000/10000000 completed.
-
-   env_freq 0/10000000 completed.
-env_freq 1000000/10000000 completed.
-env_freq 2000000/10000000 completed.
-env_freq 3000000/10000000 completed.
-env_freq 4000000/10000000 completed.
-env_freq 5000000/10000000 completed.
-env_freq 6000000/10000000 completed.
-env_freq 7000000/10000000 completed.
-env_freq 8000000/10000000 completed.
-env_freq 9000000/10000000 completed.
-
-sleeping_processes_mean: 0
-runnable_processes_mean: 0
-running_processes_mean: 0
-program_time: 0
-cpu_utilization: 0
-ticks: 48
-   env_freq 0/10000000 completed.
-env_freq 1000000/10000000 completed.
-env_freq 2000000/10000000 completed.
-env_freq 3000000/10000000 completed.
-env_freq 4000000/10000000 completed.
-env_freq 5000000/10000000 completed.
-env_freq 6000000/10000000 completed.
-env_freq 7000000/10000000 completed.
-env_freq 8000000/10000000 completed.
-env_freq 9000000/10000000 completed.
-
-sleeping_processes_mean: 0
-runnable_processes_mean: 0
-running_processes_mean: 0
-program_time: 0
-cpu_utilization: 0
-ticks: 51
-       
-sleeping_processes_mean: 0
-runnable_processes_mean: 0
-running_processes_mean: 0
-program_time: 0
-cpu_utilization: 0
-ticks: 53
-       
-sleeping_processes_mean: 0
-runnable_processes_mean: 0
-running_processes_mean: 0
-program_time: 0
-cpu_utilization: 0
-ticks: 54
-   env_large 0/10000000 completed.
-env_large 1000000/10000000 completed.
-env_large 2000000/10000000 completed.
-env_large 3000000/10000000 completed.
-env_large 4000000/10000000 completed.
-env_large 5000000/10000000 completed.
-env_large 6000000/10000000 completed.
-env_large 7000000/10000000 completed.
-env_large 8000000/10000000 completed.
-env_large 9000000/10000000 completed.
-
-       env_freq 0/10000000 completed.
-env_freq 1000000/10000000 completed.
-env_freq 2000000/10000000 completed.
-env_freq 3000000/10000000 completed.
-env_freq 4000000/10000000 completed.
-env_freq 5000000/10000000 completed.
-env_freq 6000000/10000000 completed.
-env_freq 7000000/10000000 completed.
-env_freq 8000000/10000000 completed.
-env_freq 9000000/10000000 completed.
-
-sleeping_processes_mean: 0
-runnable_processes_mean: 0
-running_processes_mean: 0
-program_time: 0
-cpu_utilization: 0
-ticks: 61
- env_freq 0/10000000 completed.
-env_freq 1000000/10000000 completed.
-env_freq 2000000/10000000 completed.
-env_freq 3000000/10000000 completed.
-env_freq 4000000/10000000 completed.
-env_freq 5000000/10000000 completed.
-env_freq 6000000/10000000 completed.
-env_freq 7000000/10000000 completed.
-env_freq 8000000/10000000 completed.
-env_freq 9000000/10000000 completed.
-
-sleeping_processes_mean: 0
-runnable_processes_mean: 0
-running_processes_mean: 0
-program_time: 0
-cpu_utilization: 0
-ticks: 64
-         
-sleeping_processes_mean: 0
-runnable_processes_mean: 0
-running_processes_mean: 0
-program_time: 0
-cpu_utilization: 0
-ticks: 65
-   
-sleeping_processes_mean: 0
-runnable_processes_mean: 0
-running_processes_mean: 0
-program_time: 0
-cpu_utilization: 0
-ticks: 66
-       
-        env_freq 0/10000000 completed.
-env_freq 1000000/10000000 completed.
-env_freq 2000000/10000000 completed.
-env_freq 3000000/10000000 completed.
-env_freq 4000000/10000000 completed.
-env_freq 5000000/10000000 completed.
-env_freq 6000000/10000000 completed.
-env_freq 7000000/10000000 completed.
-env_freq 8000000/10000000 completed.
-env_freq 9000000/10000000 completed.
-
-sleeping_processes_mean: 0
-runnable_processes_mean: 0
-running_processes_mean: 0
-program_time: 0
-cpu_utilization: 0
-ticks: 71
-    env_freq 0/10000000 completed.
-env_freq 1000000/10000000 completed.
-env_freq 2000000/10000000 completed.
-env_freq 3000000/10000000 completed.
-env_freq 4000000/10000000 completed.
-env_freq 5000000/10000000 completed.
-env_freq 6000000/10000000 completed.
-env_freq 7000000/10000000 completed.
-env_freq 8000000/10000000 completed.
-env_freq 9000000/10000000 completed.
-
-sleeping_processes_mean: 0
-runnable_processes_mean: 0
-running_processes_mean: 0
-program_time: 0
-cpu_utilization: 0
-ticks: 74
-      
-sleeping_processes_mean: 0
-runnable_processes_mean: 0
-running_processes_mean: 0
-program_time: 0
-cpu_utilization: 0
-ticks: 75
-  
-sleeping_processes_mean: 0
-runnable_processes_mean: 0
-running_processes_mean: 0
-program_time: 0
-cpu_utilization: 0
-ticks: 75
-    
-   env_freq 0/10000000 completed.
-env_freq 1000000/10000000 completed.
-env_freq 2000000/10000000 completed.
-env_freq 3000000/10000000 completed.
-env_freq 4000000/10000000 completed.
-env_freq 5000000/10000000 completed.
-env_freq 6000000/10000000 completed.
-env_freq 7000000/10000000 completed.
-env_freq 8000000/10000000 completed.
-env_freq 9000000/10000000 completed.
-
-sleeping_processes_mean: 0
-runnable_processes_mean: 0
-running_processes_mean: 0
-program_time: 0
-cpu_utilization: 0
-ticks: 79
- env_freq 0/10000000 completed.
-env_freq 1000000/10000000 completed.
-env_freq 2000000/10000000 completed.
-env_freq 3000000/10000000 completed.
-env_freq 4000000/10000000 completed.
-env_freq 5000000/10000000 completed.
-env_freq 6000000/10000000 completed.
-env_freq 7000000/10000000 completed.
-env_freq 8000000/10000000 completed.
-env_freq 9000000/10000000 completed.
-
-sleeping_processes_mean: 0
-runnable_processes_mean: 0
-running_processes_mean: 0
-program_time: 0
-cpu_utilization: 0
-ticks: 82
-         
-sleeping_processes_mean: 0
-runnable_processes_mean: 0
-running_processes_mean: 0
-program_time: 0
-cpu_utilization: 0
-ticks: 84
-       
-sleeping_processes_mean: 0
-runnable_processes_mean: 0
-running_processes_mean: 0
-program_time: 0
-cpu_utilization: 0
-ticks: 85
\ No newline at end of file
diff --git a/kernel/sleeplock.o b/kernel/sleeplock.o
index 4e41be0..386b2ce 100644
Binary files a/kernel/sleeplock.o and b/kernel/sleeplock.o differ
diff --git a/kernel/spinlock.o b/kernel/spinlock.o
index 94a4b53..50b8742 100644
Binary files a/kernel/spinlock.o and b/kernel/spinlock.o differ
diff --git a/kernel/start.o b/kernel/start.o
index 9e1a533..992de76 100644
Binary files a/kernel/start.o and b/kernel/start.o differ
diff --git a/kernel/syscall.c b/kernel/syscall.c
index 9e90e9b..da7dd54 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -104,39 +104,35 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_wait(void);
 extern uint64 sys_write(void);
 extern uint64 sys_uptime(void);
-extern uint64 sys_pause_system(void);
-extern uint64 sys_kill_system(void);
-extern uint64 sys_print_stats(void);
-extern uint64 sys_set_cpu(void);
 extern uint64 sys_get_cpu(void);
+extern uint64 sys_set_cpu(void);
+// extern uint64 sys_cpu_process_count(void);
 
 static uint64 (*syscalls[])(void) = {
-[SYS_fork]          sys_fork,
-[SYS_exit]          sys_exit,
-[SYS_wait]          sys_wait,
-[SYS_pipe]          sys_pipe,
-[SYS_read]          sys_read,
-[SYS_kill]          sys_kill,
-[SYS_exec]          sys_exec,
-[SYS_fstat]         sys_fstat,
-[SYS_chdir]         sys_chdir,
-[SYS_dup]           sys_dup,
-[SYS_getpid]        sys_getpid,
-[SYS_sbrk]          sys_sbrk,
-[SYS_sleep]         sys_sleep,
-[SYS_uptime]        sys_uptime,
-[SYS_open]          sys_open,
-[SYS_write]         sys_write,
-[SYS_mknod]         sys_mknod,
-[SYS_unlink]        sys_unlink,
-[SYS_link]          sys_link,
-[SYS_mkdir]         sys_mkdir,
-[SYS_close]         sys_close,
-[SYS_pause_system]  sys_pause_system,
-[SYS_kill_system]   sys_kill_system,
-[SYS_print_stats]   sys_print_stats,
-[SYS_get_cpu]       sys_get_cpu,
-[SYS_set_cpu]       sys_set_cpu,
+[SYS_fork]    sys_fork,
+[SYS_exit]    sys_exit,
+[SYS_wait]    sys_wait,
+[SYS_pipe]    sys_pipe,
+[SYS_read]    sys_read,
+[SYS_kill]    sys_kill,
+[SYS_exec]    sys_exec,
+[SYS_fstat]   sys_fstat,
+[SYS_chdir]   sys_chdir,
+[SYS_dup]     sys_dup,
+[SYS_getpid]  sys_getpid,
+[SYS_sbrk]    sys_sbrk,
+[SYS_sleep]   sys_sleep,
+[SYS_uptime]  sys_uptime,
+[SYS_open]    sys_open,
+[SYS_write]   sys_write,
+[SYS_mknod]   sys_mknod,
+[SYS_unlink]  sys_unlink,
+[SYS_link]    sys_link,
+[SYS_mkdir]   sys_mkdir,
+[SYS_close]   sys_close,
+[SYS_get_cpu] sys_get_cpu,
+[SYS_set_cpu] sys_set_cpu,
+// [SYS_cpu_process_count] sys_cpu_process_count,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index 20f9683..45f1493 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -1,27 +1,25 @@
 // System call numbers
-#define SYS_fork          1
-#define SYS_exit          2
-#define SYS_wait          3
-#define SYS_pipe          4
-#define SYS_read          5
-#define SYS_kill          6
-#define SYS_exec          7
-#define SYS_fstat         8
-#define SYS_chdir         9
-#define SYS_dup           10
-#define SYS_getpid        11
-#define SYS_sbrk          12
-#define SYS_sleep         13
-#define SYS_uptime        14
-#define SYS_open          15
-#define SYS_write         16
-#define SYS_mknod         17
-#define SYS_unlink        18
-#define SYS_link          19
-#define SYS_mkdir         20
-#define SYS_close         21
-#define SYS_pause_system  22
-#define SYS_kill_system   23
-#define SYS_print_stats   24
-#define SYS_get_cpu       25
-#define SYS_set_cpu       26
+#define SYS_fork    1
+#define SYS_exit    2
+#define SYS_wait    3
+#define SYS_pipe    4
+#define SYS_read    5
+#define SYS_kill    6
+#define SYS_exec    7
+#define SYS_fstat   8
+#define SYS_chdir   9
+#define SYS_dup    10
+#define SYS_getpid 11
+#define SYS_sbrk   12
+#define SYS_sleep  13
+#define SYS_uptime 14
+#define SYS_open   15
+#define SYS_write  16
+#define SYS_mknod  17
+#define SYS_unlink 18
+#define SYS_link   19
+#define SYS_mkdir  20
+#define SYS_close  21
+#define SYS_get_cpu  22
+#define SYS_set_cpu  23
+// #define SYS_cpu_process_count  24
diff --git a/kernel/syscall.o b/kernel/syscall.o
index b24cc40..404f128 100644
Binary files a/kernel/syscall.o and b/kernel/syscall.o differ
diff --git a/kernel/sysfile.o b/kernel/sysfile.o
index d575343..3777ad3 100644
Binary files a/kernel/sysfile.o and b/kernel/sysfile.o differ
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index d3ef07d..cc58160 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -62,7 +62,6 @@ sys_sleep(void)
     return -1;
   acquire(&tickslock);
   ticks0 = ticks;
-  
   while(ticks - ticks0 < n){
     if(myproc()->killed){
       release(&tickslock);
@@ -97,47 +96,28 @@ sys_uptime(void)
   return xticks;
 }
 
-uint64
-sys_print_stats(void)
-{
-  return print_stats();
-}
-
-// Ass2
 uint64
 sys_get_cpu(void)
 {
   return get_cpu();
 }
 
-// Ass2
 uint64
 sys_set_cpu(void)
 {
   int cpu_num;
+
   if(argint(0, &cpu_num) < 0)
     return -1;
-
   return set_cpu(cpu_num);
 }
 
+// uint64
+// sys_cpu_process_count(void)
+// {
+//   int cpu_num;
 
-
-uint64
-sys_pause_system(void)
-{
-  int seconds;
-
-  if(argint(0, &seconds) < 0)
-    return -1;
-
-  return pause_system(seconds);
-}
-
-
-uint64
-sys_kill_system(void)
-{
-  return kill_system(); 
-}
-
+//   if(argint(0, cpu_num) < 0)
+//     return -1;
+//   return cpu_process_count(cpu_num);
+// }
diff --git a/kernel/sysproc.o b/kernel/sysproc.o
index dc72368..ffae93c 100644
Binary files a/kernel/sysproc.o and b/kernel/sysproc.o differ
diff --git a/kernel/trap.c b/kernel/trap.c
index b4b9ad1..a63249e 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -75,16 +75,10 @@ usertrap(void)
 
   if(p->killed)
     exit(-1);
-  
-  #ifdef DEFAULT
+
   // give up the CPU if this is a timer interrupt.
-  if(which_dev == 2){
-    if (myproc()->state == RUNNING){
-      myproc()->running_time += ticks - start_running_time;
-    }
+  if(which_dev == 2)
     yield();
-  }
-  #endif
 
   usertrapret();
 }
@@ -144,9 +138,8 @@ kerneltrap()
   uint64 sstatus = r_sstatus();
   uint64 scause = r_scause();
   
-  if((sstatus & SSTATUS_SPP) == 0){
+  if((sstatus & SSTATUS_SPP) == 0)
     panic("kerneltrap: not from supervisor mode");
-    }
   if(intr_get() != 0)
     panic("kerneltrap: interrupts enabled");
 
@@ -157,10 +150,8 @@ kerneltrap()
   }
 
   // give up the CPU if this is a timer interrupt.
-  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING){
-    myproc()->running_time += ticks - myproc()->start_running_time;
+  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING)
     yield();
-  }
 
   // the yield() may have caused some traps to occur,
   // so restore trap registers for use by kernelvec.S's sepc instruction.
diff --git a/kernel/trap.o b/kernel/trap.o
index 24cd128..3379220 100644
Binary files a/kernel/trap.o and b/kernel/trap.o differ
diff --git a/kernel/uart.o b/kernel/uart.o
index 39edd6c..cc1793c 100644
Binary files a/kernel/uart.o and b/kernel/uart.o differ
diff --git a/kernel/virtio_disk.o b/kernel/virtio_disk.o
index 233b273..49f3212 100644
Binary files a/kernel/virtio_disk.o and b/kernel/virtio_disk.o differ
diff --git a/kernel/vm.o b/kernel/vm.o
index 9eae798..ed0ae00 100644
Binary files a/kernel/vm.o and b/kernel/vm.o differ
diff --git a/syscall.c b/syscall.c
deleted file mode 100644
index 6254e02..0000000
--- a/syscall.c
+++ /dev/null
@@ -1,59 +0,0 @@
-#include "kernel/param.h"
-#include "kernel/types.h"
-#include "kernel/stat.h"
-#include "user/user.h"
-#include "kernel/fs.h"
-#include "kernel/fcntl.h"
-#include "kernel/syscall.h"
-#include "kernel/memlayout.h"
-#include "kernel/riscv.h"
-
-void pause_system_dem(int interval, int pause_seconds, int loop_size) {
-    int pid = getpid();
-    for (int i = 0; i < loop_size; i++) {
-        if (i % interval == 0 && pid == getpid()) {
-            printf("pause system %d/%d completed.\n", i, loop_size);
-        }
-        if (i == loop_size / 2) {
-            pause_system(pause_seconds);
-        }
-    }
-    printf("\n");
-}
-
-void kill_system_dem(int interval, int loop_size) {
-    int pid = getpid();
-    for (int i = 0; i < loop_size; i++) {
-        if (i % interval == 0 && pid == getpid()) {
-            printf("kill system %d/%d completed.\n", i, loop_size);
-        }
-        if (i == loop_size / 2) {
-            kill_system();
-        }
-    }
-    printf("\n");
-}
-
-
-void set_economic_mode_dem(int interval, int loop_size) {
-    int pid = getpid();
-    set_economic_mode(1);
-    for (int i = 0; i < loop_size; i++) {
-        if (i % interval == 0 && pid == getpid()) {
-            printf("set economic mode %d/%d completed.\n", i, loop_size);
-        }
-        if (i == loop_size / 2) {
-            set_economic_mode(0);
-        }
-    }
-    printf("\n");
-}
-
-int
-main(int argc, char *argv[])
-{
-    set_economic_mode_dem(10, 100);
-    pause_system_dem(10, 10, 100);
-    kill_system_dem(10, 100);
-    exit(0);
-}
\ No newline at end of file
diff --git a/user/_cat b/user/_cat
index b688574..e90ecfe 100755
Binary files a/user/_cat and b/user/_cat differ
diff --git a/user/_echo b/user/_echo
index 6992ab0..d697d01 100755
Binary files a/user/_echo and b/user/_echo differ
diff --git a/user/_env b/user/_env
deleted file mode 100755
index 9cf1aa8..0000000
Binary files a/user/_env and /dev/null differ
diff --git a/user/_forktest b/user/_forktest
index 5440898..224f5ad 100755
Binary files a/user/_forktest and b/user/_forktest differ
diff --git a/user/_grep b/user/_grep
index 82bb9d3..f55216a 100755
Binary files a/user/_grep and b/user/_grep differ
diff --git a/user/_grind b/user/_grind
index b76e6d0..183105b 100755
Binary files a/user/_grind and b/user/_grind differ
diff --git a/user/_init b/user/_init
index 1d03ab1..2cc18fb 100755
Binary files a/user/_init and b/user/_init differ
diff --git a/user/_kill b/user/_kill
index 5a6c14a..2708ce8 100755
Binary files a/user/_kill and b/user/_kill differ
diff --git a/user/_ln b/user/_ln
index 711b4a5..92bc140 100755
Binary files a/user/_ln and b/user/_ln differ
diff --git a/user/_ls b/user/_ls
index 6904ea8..d6ad230 100755
Binary files a/user/_ls and b/user/_ls differ
diff --git a/user/_mkdir b/user/_mkdir
index 7fe0de0..06da0eb 100755
Binary files a/user/_mkdir and b/user/_mkdir differ
diff --git a/user/_rm b/user/_rm
index 99cbc27..7549e97 100755
Binary files a/user/_rm and b/user/_rm differ
diff --git a/user/_sh b/user/_sh
index b39255a..8c862ba 100755
Binary files a/user/_sh and b/user/_sh differ
diff --git a/user/_stressfs b/user/_stressfs
index 4d53ab9..695515b 100755
Binary files a/user/_stressfs and b/user/_stressfs differ
diff --git a/user/_syscall b/user/_syscall
deleted file mode 100755
index dd3cc13..0000000
Binary files a/user/_syscall and /dev/null differ
diff --git a/user/_usertests b/user/_usertests
index af729ec..3f5625d 100755
Binary files a/user/_usertests and b/user/_usertests differ
diff --git a/user/_wc b/user/_wc
index d962607..d53e0b7 100755
Binary files a/user/_wc and b/user/_wc differ
diff --git a/user/_zombie b/user/_zombie
index f62b6c3..2d56c59 100755
Binary files a/user/_zombie and b/user/_zombie differ
diff --git a/user/cat.asm b/user/cat.asm
index 9b6fe00..47e7562 100644
--- a/user/cat.asm
+++ b/user/cat.asm
@@ -23,7 +23,7 @@ cat(int fd)
 
   while((n = read(fd, buf, sizeof(buf))) > 0) {
   10:	00001917          	auipc	s2,0x1
-  14:	93890913          	addi	s2,s2,-1736 # 948 <buf>
+  14:	91090913          	addi	s2,s2,-1776 # 920 <buf>
   18:	20000613          	li	a2,512
   1c:	85ca                	mv	a1,s2
   1e:	854e                	mv	a0,s3
@@ -40,10 +40,10 @@ cat(int fd)
   3c:	fc950ee3          	beq	a0,s1,18 <cat+0x18>
       fprintf(2, "cat: write error\n");
   40:	00001597          	auipc	a1,0x1
-  44:	89858593          	addi	a1,a1,-1896 # 8d8 <malloc+0xe6>
+  44:	87058593          	addi	a1,a1,-1936 # 8b0 <malloc+0xe6>
   48:	4509                	li	a0,2
   4a:	00000097          	auipc	ra,0x0
-  4e:	6bc080e7          	jalr	1724(ra) # 706 <fprintf>
+  4e:	694080e7          	jalr	1684(ra) # 6de <fprintf>
       exit(1);
   52:	4505                	li	a0,1
   54:	00000097          	auipc	ra,0x0
@@ -65,10 +65,10 @@ cat(int fd)
   6c:	8082                	ret
     fprintf(2, "cat: read error\n");
   6e:	00001597          	auipc	a1,0x1
-  72:	88258593          	addi	a1,a1,-1918 # 8f0 <malloc+0xfe>
+  72:	85a58593          	addi	a1,a1,-1958 # 8c8 <malloc+0xfe>
   76:	4509                	li	a0,2
   78:	00000097          	auipc	ra,0x0
-  7c:	68e080e7          	jalr	1678(ra) # 706 <fprintf>
+  7c:	666080e7          	jalr	1638(ra) # 6de <fprintf>
     exit(1);
   80:	4505                	li	a0,1
   82:	00000097          	auipc	ra,0x0
@@ -139,11 +139,11 @@ main(int argc, char *argv[])
   fa:	29e080e7          	jalr	670(ra) # 394 <exit>
       fprintf(2, "cat: cannot open %s\n", argv[i]);
   fe:	00093603          	ld	a2,0(s2)
- 102:	00001597          	auipc	a1,0x1
- 106:	80658593          	addi	a1,a1,-2042 # 908 <malloc+0x116>
+ 102:	00000597          	auipc	a1,0x0
+ 106:	7de58593          	addi	a1,a1,2014 # 8e0 <malloc+0x116>
  10a:	4509                	li	a0,2
  10c:	00000097          	auipc	ra,0x0
- 110:	5fa080e7          	jalr	1530(ra) # 706 <fprintf>
+ 110:	5d2080e7          	jalr	1490(ra) # 6de <fprintf>
       exit(1);
  114:	4505                	li	a0,1
  116:	00000097          	auipc	ra,0x0
@@ -786,696 +786,646 @@ uptime:
  ret
  432:	8082                	ret
 
-0000000000000434 <pause_system>:
-.global pause_system
-pause_system:
- li a7, SYS_pause_system
- 434:	48d9                	li	a7,22
- ecall
- 436:	00000073          	ecall
- ret
- 43a:	8082                	ret
-
-000000000000043c <kill_system>:
-.global kill_system
-kill_system:
- li a7, SYS_kill_system
- 43c:	48dd                	li	a7,23
- ecall
- 43e:	00000073          	ecall
- ret
- 442:	8082                	ret
-
-0000000000000444 <print_stats>:
-.global print_stats
-print_stats:
- li a7, SYS_print_stats
- 444:	48e1                	li	a7,24
- ecall
- 446:	00000073          	ecall
- ret
- 44a:	8082                	ret
-
-000000000000044c <get_cpu>:
-.global get_cpu
-get_cpu:
- li a7, SYS_get_cpu
- 44c:	48e5                	li	a7,25
- ecall
- 44e:	00000073          	ecall
- ret
- 452:	8082                	ret
-
-0000000000000454 <set_cpu>:
-.global set_cpu
-set_cpu:
- li a7, SYS_set_cpu
- 454:	48e9                	li	a7,26
- ecall
- 456:	00000073          	ecall
- ret
- 45a:	8082                	ret
-
-000000000000045c <putc>:
+0000000000000434 <putc>:
 
 static char digits[] = "0123456789ABCDEF";
 
 static void
 putc(int fd, char c)
 {
- 45c:	1101                	addi	sp,sp,-32
- 45e:	ec06                	sd	ra,24(sp)
- 460:	e822                	sd	s0,16(sp)
- 462:	1000                	addi	s0,sp,32
- 464:	feb407a3          	sb	a1,-17(s0)
+ 434:	1101                	addi	sp,sp,-32
+ 436:	ec06                	sd	ra,24(sp)
+ 438:	e822                	sd	s0,16(sp)
+ 43a:	1000                	addi	s0,sp,32
+ 43c:	feb407a3          	sb	a1,-17(s0)
   write(fd, &c, 1);
- 468:	4605                	li	a2,1
- 46a:	fef40593          	addi	a1,s0,-17
- 46e:	00000097          	auipc	ra,0x0
- 472:	f46080e7          	jalr	-186(ra) # 3b4 <write>
+ 440:	4605                	li	a2,1
+ 442:	fef40593          	addi	a1,s0,-17
+ 446:	00000097          	auipc	ra,0x0
+ 44a:	f6e080e7          	jalr	-146(ra) # 3b4 <write>
 }
- 476:	60e2                	ld	ra,24(sp)
- 478:	6442                	ld	s0,16(sp)
- 47a:	6105                	addi	sp,sp,32
- 47c:	8082                	ret
+ 44e:	60e2                	ld	ra,24(sp)
+ 450:	6442                	ld	s0,16(sp)
+ 452:	6105                	addi	sp,sp,32
+ 454:	8082                	ret
 
-000000000000047e <printint>:
+0000000000000456 <printint>:
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 47e:	7139                	addi	sp,sp,-64
- 480:	fc06                	sd	ra,56(sp)
- 482:	f822                	sd	s0,48(sp)
- 484:	f426                	sd	s1,40(sp)
- 486:	f04a                	sd	s2,32(sp)
- 488:	ec4e                	sd	s3,24(sp)
- 48a:	0080                	addi	s0,sp,64
- 48c:	84aa                	mv	s1,a0
+ 456:	7139                	addi	sp,sp,-64
+ 458:	fc06                	sd	ra,56(sp)
+ 45a:	f822                	sd	s0,48(sp)
+ 45c:	f426                	sd	s1,40(sp)
+ 45e:	f04a                	sd	s2,32(sp)
+ 460:	ec4e                	sd	s3,24(sp)
+ 462:	0080                	addi	s0,sp,64
+ 464:	84aa                	mv	s1,a0
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 48e:	c299                	beqz	a3,494 <printint+0x16>
- 490:	0805c863          	bltz	a1,520 <printint+0xa2>
+ 466:	c299                	beqz	a3,46c <printint+0x16>
+ 468:	0805c863          	bltz	a1,4f8 <printint+0xa2>
     neg = 1;
     x = -xx;
   } else {
     x = xx;
- 494:	2581                	sext.w	a1,a1
+ 46c:	2581                	sext.w	a1,a1
   neg = 0;
- 496:	4881                	li	a7,0
- 498:	fc040693          	addi	a3,s0,-64
+ 46e:	4881                	li	a7,0
+ 470:	fc040693          	addi	a3,s0,-64
   }
 
   i = 0;
- 49c:	4701                	li	a4,0
+ 474:	4701                	li	a4,0
   do{
     buf[i++] = digits[x % base];
- 49e:	2601                	sext.w	a2,a2
- 4a0:	00000517          	auipc	a0,0x0
- 4a4:	48850513          	addi	a0,a0,1160 # 928 <digits>
- 4a8:	883a                	mv	a6,a4
- 4aa:	2705                	addiw	a4,a4,1
- 4ac:	02c5f7bb          	remuw	a5,a1,a2
- 4b0:	1782                	slli	a5,a5,0x20
- 4b2:	9381                	srli	a5,a5,0x20
- 4b4:	97aa                	add	a5,a5,a0
- 4b6:	0007c783          	lbu	a5,0(a5)
- 4ba:	00f68023          	sb	a5,0(a3)
+ 476:	2601                	sext.w	a2,a2
+ 478:	00000517          	auipc	a0,0x0
+ 47c:	48850513          	addi	a0,a0,1160 # 900 <digits>
+ 480:	883a                	mv	a6,a4
+ 482:	2705                	addiw	a4,a4,1
+ 484:	02c5f7bb          	remuw	a5,a1,a2
+ 488:	1782                	slli	a5,a5,0x20
+ 48a:	9381                	srli	a5,a5,0x20
+ 48c:	97aa                	add	a5,a5,a0
+ 48e:	0007c783          	lbu	a5,0(a5)
+ 492:	00f68023          	sb	a5,0(a3)
   }while((x /= base) != 0);
- 4be:	0005879b          	sext.w	a5,a1
- 4c2:	02c5d5bb          	divuw	a1,a1,a2
- 4c6:	0685                	addi	a3,a3,1
- 4c8:	fec7f0e3          	bgeu	a5,a2,4a8 <printint+0x2a>
+ 496:	0005879b          	sext.w	a5,a1
+ 49a:	02c5d5bb          	divuw	a1,a1,a2
+ 49e:	0685                	addi	a3,a3,1
+ 4a0:	fec7f0e3          	bgeu	a5,a2,480 <printint+0x2a>
   if(neg)
- 4cc:	00088b63          	beqz	a7,4e2 <printint+0x64>
+ 4a4:	00088b63          	beqz	a7,4ba <printint+0x64>
     buf[i++] = '-';
- 4d0:	fd040793          	addi	a5,s0,-48
- 4d4:	973e                	add	a4,a4,a5
- 4d6:	02d00793          	li	a5,45
- 4da:	fef70823          	sb	a5,-16(a4)
- 4de:	0028071b          	addiw	a4,a6,2
+ 4a8:	fd040793          	addi	a5,s0,-48
+ 4ac:	973e                	add	a4,a4,a5
+ 4ae:	02d00793          	li	a5,45
+ 4b2:	fef70823          	sb	a5,-16(a4)
+ 4b6:	0028071b          	addiw	a4,a6,2
 
   while(--i >= 0)
- 4e2:	02e05863          	blez	a4,512 <printint+0x94>
- 4e6:	fc040793          	addi	a5,s0,-64
- 4ea:	00e78933          	add	s2,a5,a4
- 4ee:	fff78993          	addi	s3,a5,-1
- 4f2:	99ba                	add	s3,s3,a4
- 4f4:	377d                	addiw	a4,a4,-1
- 4f6:	1702                	slli	a4,a4,0x20
- 4f8:	9301                	srli	a4,a4,0x20
- 4fa:	40e989b3          	sub	s3,s3,a4
+ 4ba:	02e05863          	blez	a4,4ea <printint+0x94>
+ 4be:	fc040793          	addi	a5,s0,-64
+ 4c2:	00e78933          	add	s2,a5,a4
+ 4c6:	fff78993          	addi	s3,a5,-1
+ 4ca:	99ba                	add	s3,s3,a4
+ 4cc:	377d                	addiw	a4,a4,-1
+ 4ce:	1702                	slli	a4,a4,0x20
+ 4d0:	9301                	srli	a4,a4,0x20
+ 4d2:	40e989b3          	sub	s3,s3,a4
     putc(fd, buf[i]);
- 4fe:	fff94583          	lbu	a1,-1(s2)
- 502:	8526                	mv	a0,s1
- 504:	00000097          	auipc	ra,0x0
- 508:	f58080e7          	jalr	-168(ra) # 45c <putc>
+ 4d6:	fff94583          	lbu	a1,-1(s2)
+ 4da:	8526                	mv	a0,s1
+ 4dc:	00000097          	auipc	ra,0x0
+ 4e0:	f58080e7          	jalr	-168(ra) # 434 <putc>
   while(--i >= 0)
- 50c:	197d                	addi	s2,s2,-1
- 50e:	ff3918e3          	bne	s2,s3,4fe <printint+0x80>
+ 4e4:	197d                	addi	s2,s2,-1
+ 4e6:	ff3918e3          	bne	s2,s3,4d6 <printint+0x80>
 }
- 512:	70e2                	ld	ra,56(sp)
- 514:	7442                	ld	s0,48(sp)
- 516:	74a2                	ld	s1,40(sp)
- 518:	7902                	ld	s2,32(sp)
- 51a:	69e2                	ld	s3,24(sp)
- 51c:	6121                	addi	sp,sp,64
- 51e:	8082                	ret
+ 4ea:	70e2                	ld	ra,56(sp)
+ 4ec:	7442                	ld	s0,48(sp)
+ 4ee:	74a2                	ld	s1,40(sp)
+ 4f0:	7902                	ld	s2,32(sp)
+ 4f2:	69e2                	ld	s3,24(sp)
+ 4f4:	6121                	addi	sp,sp,64
+ 4f6:	8082                	ret
     x = -xx;
- 520:	40b005bb          	negw	a1,a1
+ 4f8:	40b005bb          	negw	a1,a1
     neg = 1;
- 524:	4885                	li	a7,1
+ 4fc:	4885                	li	a7,1
     x = -xx;
- 526:	bf8d                	j	498 <printint+0x1a>
+ 4fe:	bf8d                	j	470 <printint+0x1a>
 
-0000000000000528 <vprintf>:
+0000000000000500 <vprintf>:
 }
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 vprintf(int fd, const char *fmt, va_list ap)
 {
- 528:	7119                	addi	sp,sp,-128
- 52a:	fc86                	sd	ra,120(sp)
- 52c:	f8a2                	sd	s0,112(sp)
- 52e:	f4a6                	sd	s1,104(sp)
- 530:	f0ca                	sd	s2,96(sp)
- 532:	ecce                	sd	s3,88(sp)
- 534:	e8d2                	sd	s4,80(sp)
- 536:	e4d6                	sd	s5,72(sp)
- 538:	e0da                	sd	s6,64(sp)
- 53a:	fc5e                	sd	s7,56(sp)
- 53c:	f862                	sd	s8,48(sp)
- 53e:	f466                	sd	s9,40(sp)
- 540:	f06a                	sd	s10,32(sp)
- 542:	ec6e                	sd	s11,24(sp)
- 544:	0100                	addi	s0,sp,128
+ 500:	7119                	addi	sp,sp,-128
+ 502:	fc86                	sd	ra,120(sp)
+ 504:	f8a2                	sd	s0,112(sp)
+ 506:	f4a6                	sd	s1,104(sp)
+ 508:	f0ca                	sd	s2,96(sp)
+ 50a:	ecce                	sd	s3,88(sp)
+ 50c:	e8d2                	sd	s4,80(sp)
+ 50e:	e4d6                	sd	s5,72(sp)
+ 510:	e0da                	sd	s6,64(sp)
+ 512:	fc5e                	sd	s7,56(sp)
+ 514:	f862                	sd	s8,48(sp)
+ 516:	f466                	sd	s9,40(sp)
+ 518:	f06a                	sd	s10,32(sp)
+ 51a:	ec6e                	sd	s11,24(sp)
+ 51c:	0100                	addi	s0,sp,128
   char *s;
   int c, i, state;
 
   state = 0;
   for(i = 0; fmt[i]; i++){
- 546:	0005c903          	lbu	s2,0(a1)
- 54a:	18090f63          	beqz	s2,6e8 <vprintf+0x1c0>
- 54e:	8aaa                	mv	s5,a0
- 550:	8b32                	mv	s6,a2
- 552:	00158493          	addi	s1,a1,1
+ 51e:	0005c903          	lbu	s2,0(a1)
+ 522:	18090f63          	beqz	s2,6c0 <vprintf+0x1c0>
+ 526:	8aaa                	mv	s5,a0
+ 528:	8b32                	mv	s6,a2
+ 52a:	00158493          	addi	s1,a1,1
   state = 0;
- 556:	4981                	li	s3,0
+ 52e:	4981                	li	s3,0
       if(c == '%'){
         state = '%';
       } else {
         putc(fd, c);
       }
     } else if(state == '%'){
- 558:	02500a13          	li	s4,37
+ 530:	02500a13          	li	s4,37
       if(c == 'd'){
- 55c:	06400c13          	li	s8,100
+ 534:	06400c13          	li	s8,100
         printint(fd, va_arg(ap, int), 10, 1);
       } else if(c == 'l') {
- 560:	06c00c93          	li	s9,108
+ 538:	06c00c93          	li	s9,108
         printint(fd, va_arg(ap, uint64), 10, 0);
       } else if(c == 'x') {
- 564:	07800d13          	li	s10,120
+ 53c:	07800d13          	li	s10,120
         printint(fd, va_arg(ap, int), 16, 0);
       } else if(c == 'p') {
- 568:	07000d93          	li	s11,112
+ 540:	07000d93          	li	s11,112
     putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
- 56c:	00000b97          	auipc	s7,0x0
- 570:	3bcb8b93          	addi	s7,s7,956 # 928 <digits>
- 574:	a839                	j	592 <vprintf+0x6a>
+ 544:	00000b97          	auipc	s7,0x0
+ 548:	3bcb8b93          	addi	s7,s7,956 # 900 <digits>
+ 54c:	a839                	j	56a <vprintf+0x6a>
         putc(fd, c);
- 576:	85ca                	mv	a1,s2
- 578:	8556                	mv	a0,s5
- 57a:	00000097          	auipc	ra,0x0
- 57e:	ee2080e7          	jalr	-286(ra) # 45c <putc>
- 582:	a019                	j	588 <vprintf+0x60>
+ 54e:	85ca                	mv	a1,s2
+ 550:	8556                	mv	a0,s5
+ 552:	00000097          	auipc	ra,0x0
+ 556:	ee2080e7          	jalr	-286(ra) # 434 <putc>
+ 55a:	a019                	j	560 <vprintf+0x60>
     } else if(state == '%'){
- 584:	01498f63          	beq	s3,s4,5a2 <vprintf+0x7a>
+ 55c:	01498f63          	beq	s3,s4,57a <vprintf+0x7a>
   for(i = 0; fmt[i]; i++){
- 588:	0485                	addi	s1,s1,1
- 58a:	fff4c903          	lbu	s2,-1(s1)
- 58e:	14090d63          	beqz	s2,6e8 <vprintf+0x1c0>
+ 560:	0485                	addi	s1,s1,1
+ 562:	fff4c903          	lbu	s2,-1(s1)
+ 566:	14090d63          	beqz	s2,6c0 <vprintf+0x1c0>
     c = fmt[i] & 0xff;
- 592:	0009079b          	sext.w	a5,s2
+ 56a:	0009079b          	sext.w	a5,s2
     if(state == 0){
- 596:	fe0997e3          	bnez	s3,584 <vprintf+0x5c>
+ 56e:	fe0997e3          	bnez	s3,55c <vprintf+0x5c>
       if(c == '%'){
- 59a:	fd479ee3          	bne	a5,s4,576 <vprintf+0x4e>
+ 572:	fd479ee3          	bne	a5,s4,54e <vprintf+0x4e>
         state = '%';
- 59e:	89be                	mv	s3,a5
- 5a0:	b7e5                	j	588 <vprintf+0x60>
+ 576:	89be                	mv	s3,a5
+ 578:	b7e5                	j	560 <vprintf+0x60>
       if(c == 'd'){
- 5a2:	05878063          	beq	a5,s8,5e2 <vprintf+0xba>
+ 57a:	05878063          	beq	a5,s8,5ba <vprintf+0xba>
       } else if(c == 'l') {
- 5a6:	05978c63          	beq	a5,s9,5fe <vprintf+0xd6>
+ 57e:	05978c63          	beq	a5,s9,5d6 <vprintf+0xd6>
       } else if(c == 'x') {
- 5aa:	07a78863          	beq	a5,s10,61a <vprintf+0xf2>
+ 582:	07a78863          	beq	a5,s10,5f2 <vprintf+0xf2>
       } else if(c == 'p') {
- 5ae:	09b78463          	beq	a5,s11,636 <vprintf+0x10e>
+ 586:	09b78463          	beq	a5,s11,60e <vprintf+0x10e>
         printptr(fd, va_arg(ap, uint64));
       } else if(c == 's'){
- 5b2:	07300713          	li	a4,115
- 5b6:	0ce78663          	beq	a5,a4,682 <vprintf+0x15a>
+ 58a:	07300713          	li	a4,115
+ 58e:	0ce78663          	beq	a5,a4,65a <vprintf+0x15a>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 5ba:	06300713          	li	a4,99
- 5be:	0ee78e63          	beq	a5,a4,6ba <vprintf+0x192>
+ 592:	06300713          	li	a4,99
+ 596:	0ee78e63          	beq	a5,a4,692 <vprintf+0x192>
         putc(fd, va_arg(ap, uint));
       } else if(c == '%'){
- 5c2:	11478863          	beq	a5,s4,6d2 <vprintf+0x1aa>
+ 59a:	11478863          	beq	a5,s4,6aa <vprintf+0x1aa>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
- 5c6:	85d2                	mv	a1,s4
- 5c8:	8556                	mv	a0,s5
- 5ca:	00000097          	auipc	ra,0x0
- 5ce:	e92080e7          	jalr	-366(ra) # 45c <putc>
+ 59e:	85d2                	mv	a1,s4
+ 5a0:	8556                	mv	a0,s5
+ 5a2:	00000097          	auipc	ra,0x0
+ 5a6:	e92080e7          	jalr	-366(ra) # 434 <putc>
         putc(fd, c);
- 5d2:	85ca                	mv	a1,s2
- 5d4:	8556                	mv	a0,s5
- 5d6:	00000097          	auipc	ra,0x0
- 5da:	e86080e7          	jalr	-378(ra) # 45c <putc>
+ 5aa:	85ca                	mv	a1,s2
+ 5ac:	8556                	mv	a0,s5
+ 5ae:	00000097          	auipc	ra,0x0
+ 5b2:	e86080e7          	jalr	-378(ra) # 434 <putc>
       }
       state = 0;
- 5de:	4981                	li	s3,0
- 5e0:	b765                	j	588 <vprintf+0x60>
+ 5b6:	4981                	li	s3,0
+ 5b8:	b765                	j	560 <vprintf+0x60>
         printint(fd, va_arg(ap, int), 10, 1);
- 5e2:	008b0913          	addi	s2,s6,8
- 5e6:	4685                	li	a3,1
- 5e8:	4629                	li	a2,10
- 5ea:	000b2583          	lw	a1,0(s6)
- 5ee:	8556                	mv	a0,s5
- 5f0:	00000097          	auipc	ra,0x0
- 5f4:	e8e080e7          	jalr	-370(ra) # 47e <printint>
- 5f8:	8b4a                	mv	s6,s2
+ 5ba:	008b0913          	addi	s2,s6,8
+ 5be:	4685                	li	a3,1
+ 5c0:	4629                	li	a2,10
+ 5c2:	000b2583          	lw	a1,0(s6)
+ 5c6:	8556                	mv	a0,s5
+ 5c8:	00000097          	auipc	ra,0x0
+ 5cc:	e8e080e7          	jalr	-370(ra) # 456 <printint>
+ 5d0:	8b4a                	mv	s6,s2
       state = 0;
- 5fa:	4981                	li	s3,0
- 5fc:	b771                	j	588 <vprintf+0x60>
+ 5d2:	4981                	li	s3,0
+ 5d4:	b771                	j	560 <vprintf+0x60>
         printint(fd, va_arg(ap, uint64), 10, 0);
- 5fe:	008b0913          	addi	s2,s6,8
- 602:	4681                	li	a3,0
- 604:	4629                	li	a2,10
- 606:	000b2583          	lw	a1,0(s6)
- 60a:	8556                	mv	a0,s5
- 60c:	00000097          	auipc	ra,0x0
- 610:	e72080e7          	jalr	-398(ra) # 47e <printint>
- 614:	8b4a                	mv	s6,s2
+ 5d6:	008b0913          	addi	s2,s6,8
+ 5da:	4681                	li	a3,0
+ 5dc:	4629                	li	a2,10
+ 5de:	000b2583          	lw	a1,0(s6)
+ 5e2:	8556                	mv	a0,s5
+ 5e4:	00000097          	auipc	ra,0x0
+ 5e8:	e72080e7          	jalr	-398(ra) # 456 <printint>
+ 5ec:	8b4a                	mv	s6,s2
       state = 0;
- 616:	4981                	li	s3,0
- 618:	bf85                	j	588 <vprintf+0x60>
+ 5ee:	4981                	li	s3,0
+ 5f0:	bf85                	j	560 <vprintf+0x60>
         printint(fd, va_arg(ap, int), 16, 0);
- 61a:	008b0913          	addi	s2,s6,8
- 61e:	4681                	li	a3,0
- 620:	4641                	li	a2,16
- 622:	000b2583          	lw	a1,0(s6)
- 626:	8556                	mv	a0,s5
- 628:	00000097          	auipc	ra,0x0
- 62c:	e56080e7          	jalr	-426(ra) # 47e <printint>
- 630:	8b4a                	mv	s6,s2
+ 5f2:	008b0913          	addi	s2,s6,8
+ 5f6:	4681                	li	a3,0
+ 5f8:	4641                	li	a2,16
+ 5fa:	000b2583          	lw	a1,0(s6)
+ 5fe:	8556                	mv	a0,s5
+ 600:	00000097          	auipc	ra,0x0
+ 604:	e56080e7          	jalr	-426(ra) # 456 <printint>
+ 608:	8b4a                	mv	s6,s2
       state = 0;
- 632:	4981                	li	s3,0
- 634:	bf91                	j	588 <vprintf+0x60>
+ 60a:	4981                	li	s3,0
+ 60c:	bf91                	j	560 <vprintf+0x60>
         printptr(fd, va_arg(ap, uint64));
- 636:	008b0793          	addi	a5,s6,8
- 63a:	f8f43423          	sd	a5,-120(s0)
- 63e:	000b3983          	ld	s3,0(s6)
+ 60e:	008b0793          	addi	a5,s6,8
+ 612:	f8f43423          	sd	a5,-120(s0)
+ 616:	000b3983          	ld	s3,0(s6)
   putc(fd, '0');
- 642:	03000593          	li	a1,48
- 646:	8556                	mv	a0,s5
- 648:	00000097          	auipc	ra,0x0
- 64c:	e14080e7          	jalr	-492(ra) # 45c <putc>
+ 61a:	03000593          	li	a1,48
+ 61e:	8556                	mv	a0,s5
+ 620:	00000097          	auipc	ra,0x0
+ 624:	e14080e7          	jalr	-492(ra) # 434 <putc>
   putc(fd, 'x');
- 650:	85ea                	mv	a1,s10
- 652:	8556                	mv	a0,s5
- 654:	00000097          	auipc	ra,0x0
- 658:	e08080e7          	jalr	-504(ra) # 45c <putc>
- 65c:	4941                	li	s2,16
+ 628:	85ea                	mv	a1,s10
+ 62a:	8556                	mv	a0,s5
+ 62c:	00000097          	auipc	ra,0x0
+ 630:	e08080e7          	jalr	-504(ra) # 434 <putc>
+ 634:	4941                	li	s2,16
     putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
- 65e:	03c9d793          	srli	a5,s3,0x3c
- 662:	97de                	add	a5,a5,s7
- 664:	0007c583          	lbu	a1,0(a5)
- 668:	8556                	mv	a0,s5
- 66a:	00000097          	auipc	ra,0x0
- 66e:	df2080e7          	jalr	-526(ra) # 45c <putc>
+ 636:	03c9d793          	srli	a5,s3,0x3c
+ 63a:	97de                	add	a5,a5,s7
+ 63c:	0007c583          	lbu	a1,0(a5)
+ 640:	8556                	mv	a0,s5
+ 642:	00000097          	auipc	ra,0x0
+ 646:	df2080e7          	jalr	-526(ra) # 434 <putc>
   for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
- 672:	0992                	slli	s3,s3,0x4
- 674:	397d                	addiw	s2,s2,-1
- 676:	fe0914e3          	bnez	s2,65e <vprintf+0x136>
+ 64a:	0992                	slli	s3,s3,0x4
+ 64c:	397d                	addiw	s2,s2,-1
+ 64e:	fe0914e3          	bnez	s2,636 <vprintf+0x136>
         printptr(fd, va_arg(ap, uint64));
- 67a:	f8843b03          	ld	s6,-120(s0)
+ 652:	f8843b03          	ld	s6,-120(s0)
       state = 0;
- 67e:	4981                	li	s3,0
- 680:	b721                	j	588 <vprintf+0x60>
+ 656:	4981                	li	s3,0
+ 658:	b721                	j	560 <vprintf+0x60>
         s = va_arg(ap, char*);
- 682:	008b0993          	addi	s3,s6,8
- 686:	000b3903          	ld	s2,0(s6)
+ 65a:	008b0993          	addi	s3,s6,8
+ 65e:	000b3903          	ld	s2,0(s6)
         if(s == 0)
- 68a:	02090163          	beqz	s2,6ac <vprintf+0x184>
+ 662:	02090163          	beqz	s2,684 <vprintf+0x184>
         while(*s != 0){
- 68e:	00094583          	lbu	a1,0(s2)
- 692:	c9a1                	beqz	a1,6e2 <vprintf+0x1ba>
+ 666:	00094583          	lbu	a1,0(s2)
+ 66a:	c9a1                	beqz	a1,6ba <vprintf+0x1ba>
           putc(fd, *s);
- 694:	8556                	mv	a0,s5
- 696:	00000097          	auipc	ra,0x0
- 69a:	dc6080e7          	jalr	-570(ra) # 45c <putc>
+ 66c:	8556                	mv	a0,s5
+ 66e:	00000097          	auipc	ra,0x0
+ 672:	dc6080e7          	jalr	-570(ra) # 434 <putc>
           s++;
- 69e:	0905                	addi	s2,s2,1
+ 676:	0905                	addi	s2,s2,1
         while(*s != 0){
- 6a0:	00094583          	lbu	a1,0(s2)
- 6a4:	f9e5                	bnez	a1,694 <vprintf+0x16c>
+ 678:	00094583          	lbu	a1,0(s2)
+ 67c:	f9e5                	bnez	a1,66c <vprintf+0x16c>
         s = va_arg(ap, char*);
- 6a6:	8b4e                	mv	s6,s3
+ 67e:	8b4e                	mv	s6,s3
       state = 0;
- 6a8:	4981                	li	s3,0
- 6aa:	bdf9                	j	588 <vprintf+0x60>
+ 680:	4981                	li	s3,0
+ 682:	bdf9                	j	560 <vprintf+0x60>
           s = "(null)";
- 6ac:	00000917          	auipc	s2,0x0
- 6b0:	27490913          	addi	s2,s2,628 # 920 <malloc+0x12e>
+ 684:	00000917          	auipc	s2,0x0
+ 688:	27490913          	addi	s2,s2,628 # 8f8 <malloc+0x12e>
         while(*s != 0){
- 6b4:	02800593          	li	a1,40
- 6b8:	bff1                	j	694 <vprintf+0x16c>
+ 68c:	02800593          	li	a1,40
+ 690:	bff1                	j	66c <vprintf+0x16c>
         putc(fd, va_arg(ap, uint));
- 6ba:	008b0913          	addi	s2,s6,8
- 6be:	000b4583          	lbu	a1,0(s6)
- 6c2:	8556                	mv	a0,s5
- 6c4:	00000097          	auipc	ra,0x0
- 6c8:	d98080e7          	jalr	-616(ra) # 45c <putc>
- 6cc:	8b4a                	mv	s6,s2
+ 692:	008b0913          	addi	s2,s6,8
+ 696:	000b4583          	lbu	a1,0(s6)
+ 69a:	8556                	mv	a0,s5
+ 69c:	00000097          	auipc	ra,0x0
+ 6a0:	d98080e7          	jalr	-616(ra) # 434 <putc>
+ 6a4:	8b4a                	mv	s6,s2
       state = 0;
- 6ce:	4981                	li	s3,0
- 6d0:	bd65                	j	588 <vprintf+0x60>
+ 6a6:	4981                	li	s3,0
+ 6a8:	bd65                	j	560 <vprintf+0x60>
         putc(fd, c);
- 6d2:	85d2                	mv	a1,s4
- 6d4:	8556                	mv	a0,s5
- 6d6:	00000097          	auipc	ra,0x0
- 6da:	d86080e7          	jalr	-634(ra) # 45c <putc>
+ 6aa:	85d2                	mv	a1,s4
+ 6ac:	8556                	mv	a0,s5
+ 6ae:	00000097          	auipc	ra,0x0
+ 6b2:	d86080e7          	jalr	-634(ra) # 434 <putc>
       state = 0;
- 6de:	4981                	li	s3,0
- 6e0:	b565                	j	588 <vprintf+0x60>
+ 6b6:	4981                	li	s3,0
+ 6b8:	b565                	j	560 <vprintf+0x60>
         s = va_arg(ap, char*);
- 6e2:	8b4e                	mv	s6,s3
+ 6ba:	8b4e                	mv	s6,s3
       state = 0;
- 6e4:	4981                	li	s3,0
- 6e6:	b54d                	j	588 <vprintf+0x60>
+ 6bc:	4981                	li	s3,0
+ 6be:	b54d                	j	560 <vprintf+0x60>
     }
   }
 }
- 6e8:	70e6                	ld	ra,120(sp)
- 6ea:	7446                	ld	s0,112(sp)
- 6ec:	74a6                	ld	s1,104(sp)
- 6ee:	7906                	ld	s2,96(sp)
- 6f0:	69e6                	ld	s3,88(sp)
- 6f2:	6a46                	ld	s4,80(sp)
- 6f4:	6aa6                	ld	s5,72(sp)
- 6f6:	6b06                	ld	s6,64(sp)
- 6f8:	7be2                	ld	s7,56(sp)
- 6fa:	7c42                	ld	s8,48(sp)
- 6fc:	7ca2                	ld	s9,40(sp)
- 6fe:	7d02                	ld	s10,32(sp)
- 700:	6de2                	ld	s11,24(sp)
- 702:	6109                	addi	sp,sp,128
- 704:	8082                	ret
-
-0000000000000706 <fprintf>:
+ 6c0:	70e6                	ld	ra,120(sp)
+ 6c2:	7446                	ld	s0,112(sp)
+ 6c4:	74a6                	ld	s1,104(sp)
+ 6c6:	7906                	ld	s2,96(sp)
+ 6c8:	69e6                	ld	s3,88(sp)
+ 6ca:	6a46                	ld	s4,80(sp)
+ 6cc:	6aa6                	ld	s5,72(sp)
+ 6ce:	6b06                	ld	s6,64(sp)
+ 6d0:	7be2                	ld	s7,56(sp)
+ 6d2:	7c42                	ld	s8,48(sp)
+ 6d4:	7ca2                	ld	s9,40(sp)
+ 6d6:	7d02                	ld	s10,32(sp)
+ 6d8:	6de2                	ld	s11,24(sp)
+ 6da:	6109                	addi	sp,sp,128
+ 6dc:	8082                	ret
+
+00000000000006de <fprintf>:
 
 void
 fprintf(int fd, const char *fmt, ...)
 {
- 706:	715d                	addi	sp,sp,-80
- 708:	ec06                	sd	ra,24(sp)
- 70a:	e822                	sd	s0,16(sp)
- 70c:	1000                	addi	s0,sp,32
- 70e:	e010                	sd	a2,0(s0)
- 710:	e414                	sd	a3,8(s0)
- 712:	e818                	sd	a4,16(s0)
- 714:	ec1c                	sd	a5,24(s0)
- 716:	03043023          	sd	a6,32(s0)
- 71a:	03143423          	sd	a7,40(s0)
+ 6de:	715d                	addi	sp,sp,-80
+ 6e0:	ec06                	sd	ra,24(sp)
+ 6e2:	e822                	sd	s0,16(sp)
+ 6e4:	1000                	addi	s0,sp,32
+ 6e6:	e010                	sd	a2,0(s0)
+ 6e8:	e414                	sd	a3,8(s0)
+ 6ea:	e818                	sd	a4,16(s0)
+ 6ec:	ec1c                	sd	a5,24(s0)
+ 6ee:	03043023          	sd	a6,32(s0)
+ 6f2:	03143423          	sd	a7,40(s0)
   va_list ap;
 
   va_start(ap, fmt);
- 71e:	fe843423          	sd	s0,-24(s0)
+ 6f6:	fe843423          	sd	s0,-24(s0)
   vprintf(fd, fmt, ap);
- 722:	8622                	mv	a2,s0
- 724:	00000097          	auipc	ra,0x0
- 728:	e04080e7          	jalr	-508(ra) # 528 <vprintf>
+ 6fa:	8622                	mv	a2,s0
+ 6fc:	00000097          	auipc	ra,0x0
+ 700:	e04080e7          	jalr	-508(ra) # 500 <vprintf>
 }
- 72c:	60e2                	ld	ra,24(sp)
- 72e:	6442                	ld	s0,16(sp)
- 730:	6161                	addi	sp,sp,80
- 732:	8082                	ret
+ 704:	60e2                	ld	ra,24(sp)
+ 706:	6442                	ld	s0,16(sp)
+ 708:	6161                	addi	sp,sp,80
+ 70a:	8082                	ret
 
-0000000000000734 <printf>:
+000000000000070c <printf>:
 
 void
 printf(const char *fmt, ...)
 {
- 734:	711d                	addi	sp,sp,-96
- 736:	ec06                	sd	ra,24(sp)
- 738:	e822                	sd	s0,16(sp)
- 73a:	1000                	addi	s0,sp,32
- 73c:	e40c                	sd	a1,8(s0)
- 73e:	e810                	sd	a2,16(s0)
- 740:	ec14                	sd	a3,24(s0)
- 742:	f018                	sd	a4,32(s0)
- 744:	f41c                	sd	a5,40(s0)
- 746:	03043823          	sd	a6,48(s0)
- 74a:	03143c23          	sd	a7,56(s0)
+ 70c:	711d                	addi	sp,sp,-96
+ 70e:	ec06                	sd	ra,24(sp)
+ 710:	e822                	sd	s0,16(sp)
+ 712:	1000                	addi	s0,sp,32
+ 714:	e40c                	sd	a1,8(s0)
+ 716:	e810                	sd	a2,16(s0)
+ 718:	ec14                	sd	a3,24(s0)
+ 71a:	f018                	sd	a4,32(s0)
+ 71c:	f41c                	sd	a5,40(s0)
+ 71e:	03043823          	sd	a6,48(s0)
+ 722:	03143c23          	sd	a7,56(s0)
   va_list ap;
 
   va_start(ap, fmt);
- 74e:	00840613          	addi	a2,s0,8
- 752:	fec43423          	sd	a2,-24(s0)
+ 726:	00840613          	addi	a2,s0,8
+ 72a:	fec43423          	sd	a2,-24(s0)
   vprintf(1, fmt, ap);
- 756:	85aa                	mv	a1,a0
- 758:	4505                	li	a0,1
- 75a:	00000097          	auipc	ra,0x0
- 75e:	dce080e7          	jalr	-562(ra) # 528 <vprintf>
+ 72e:	85aa                	mv	a1,a0
+ 730:	4505                	li	a0,1
+ 732:	00000097          	auipc	ra,0x0
+ 736:	dce080e7          	jalr	-562(ra) # 500 <vprintf>
 }
- 762:	60e2                	ld	ra,24(sp)
- 764:	6442                	ld	s0,16(sp)
- 766:	6125                	addi	sp,sp,96
- 768:	8082                	ret
+ 73a:	60e2                	ld	ra,24(sp)
+ 73c:	6442                	ld	s0,16(sp)
+ 73e:	6125                	addi	sp,sp,96
+ 740:	8082                	ret
 
-000000000000076a <free>:
+0000000000000742 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 76a:	1141                	addi	sp,sp,-16
- 76c:	e422                	sd	s0,8(sp)
- 76e:	0800                	addi	s0,sp,16
+ 742:	1141                	addi	sp,sp,-16
+ 744:	e422                	sd	s0,8(sp)
+ 746:	0800                	addi	s0,sp,16
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
- 770:	ff050693          	addi	a3,a0,-16
+ 748:	ff050693          	addi	a3,a0,-16
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 774:	00000797          	auipc	a5,0x0
- 778:	1cc7b783          	ld	a5,460(a5) # 940 <freep>
- 77c:	a805                	j	7ac <free+0x42>
+ 74c:	00000797          	auipc	a5,0x0
+ 750:	1cc7b783          	ld	a5,460(a5) # 918 <freep>
+ 754:	a805                	j	784 <free+0x42>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
       break;
   if(bp + bp->s.size == p->s.ptr){
     bp->s.size += p->s.ptr->s.size;
- 77e:	4618                	lw	a4,8(a2)
- 780:	9db9                	addw	a1,a1,a4
- 782:	feb52c23          	sw	a1,-8(a0)
+ 756:	4618                	lw	a4,8(a2)
+ 758:	9db9                	addw	a1,a1,a4
+ 75a:	feb52c23          	sw	a1,-8(a0)
     bp->s.ptr = p->s.ptr->s.ptr;
- 786:	6398                	ld	a4,0(a5)
- 788:	6318                	ld	a4,0(a4)
- 78a:	fee53823          	sd	a4,-16(a0)
- 78e:	a091                	j	7d2 <free+0x68>
+ 75e:	6398                	ld	a4,0(a5)
+ 760:	6318                	ld	a4,0(a4)
+ 762:	fee53823          	sd	a4,-16(a0)
+ 766:	a091                	j	7aa <free+0x68>
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
     p->s.size += bp->s.size;
- 790:	ff852703          	lw	a4,-8(a0)
- 794:	9e39                	addw	a2,a2,a4
- 796:	c790                	sw	a2,8(a5)
+ 768:	ff852703          	lw	a4,-8(a0)
+ 76c:	9e39                	addw	a2,a2,a4
+ 76e:	c790                	sw	a2,8(a5)
     p->s.ptr = bp->s.ptr;
- 798:	ff053703          	ld	a4,-16(a0)
- 79c:	e398                	sd	a4,0(a5)
- 79e:	a099                	j	7e4 <free+0x7a>
+ 770:	ff053703          	ld	a4,-16(a0)
+ 774:	e398                	sd	a4,0(a5)
+ 776:	a099                	j	7bc <free+0x7a>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 7a0:	6398                	ld	a4,0(a5)
- 7a2:	00e7e463          	bltu	a5,a4,7aa <free+0x40>
- 7a6:	00e6ea63          	bltu	a3,a4,7ba <free+0x50>
+ 778:	6398                	ld	a4,0(a5)
+ 77a:	00e7e463          	bltu	a5,a4,782 <free+0x40>
+ 77e:	00e6ea63          	bltu	a3,a4,792 <free+0x50>
 {
- 7aa:	87ba                	mv	a5,a4
+ 782:	87ba                	mv	a5,a4
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 7ac:	fed7fae3          	bgeu	a5,a3,7a0 <free+0x36>
- 7b0:	6398                	ld	a4,0(a5)
- 7b2:	00e6e463          	bltu	a3,a4,7ba <free+0x50>
+ 784:	fed7fae3          	bgeu	a5,a3,778 <free+0x36>
+ 788:	6398                	ld	a4,0(a5)
+ 78a:	00e6e463          	bltu	a3,a4,792 <free+0x50>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 7b6:	fee7eae3          	bltu	a5,a4,7aa <free+0x40>
+ 78e:	fee7eae3          	bltu	a5,a4,782 <free+0x40>
   if(bp + bp->s.size == p->s.ptr){
- 7ba:	ff852583          	lw	a1,-8(a0)
- 7be:	6390                	ld	a2,0(a5)
- 7c0:	02059713          	slli	a4,a1,0x20
- 7c4:	9301                	srli	a4,a4,0x20
- 7c6:	0712                	slli	a4,a4,0x4
- 7c8:	9736                	add	a4,a4,a3
- 7ca:	fae60ae3          	beq	a2,a4,77e <free+0x14>
+ 792:	ff852583          	lw	a1,-8(a0)
+ 796:	6390                	ld	a2,0(a5)
+ 798:	02059713          	slli	a4,a1,0x20
+ 79c:	9301                	srli	a4,a4,0x20
+ 79e:	0712                	slli	a4,a4,0x4
+ 7a0:	9736                	add	a4,a4,a3
+ 7a2:	fae60ae3          	beq	a2,a4,756 <free+0x14>
     bp->s.ptr = p->s.ptr;
- 7ce:	fec53823          	sd	a2,-16(a0)
+ 7a6:	fec53823          	sd	a2,-16(a0)
   if(p + p->s.size == bp){
- 7d2:	4790                	lw	a2,8(a5)
- 7d4:	02061713          	slli	a4,a2,0x20
- 7d8:	9301                	srli	a4,a4,0x20
- 7da:	0712                	slli	a4,a4,0x4
- 7dc:	973e                	add	a4,a4,a5
- 7de:	fae689e3          	beq	a3,a4,790 <free+0x26>
+ 7aa:	4790                	lw	a2,8(a5)
+ 7ac:	02061713          	slli	a4,a2,0x20
+ 7b0:	9301                	srli	a4,a4,0x20
+ 7b2:	0712                	slli	a4,a4,0x4
+ 7b4:	973e                	add	a4,a4,a5
+ 7b6:	fae689e3          	beq	a3,a4,768 <free+0x26>
   } else
     p->s.ptr = bp;
- 7e2:	e394                	sd	a3,0(a5)
+ 7ba:	e394                	sd	a3,0(a5)
   freep = p;
- 7e4:	00000717          	auipc	a4,0x0
- 7e8:	14f73e23          	sd	a5,348(a4) # 940 <freep>
+ 7bc:	00000717          	auipc	a4,0x0
+ 7c0:	14f73e23          	sd	a5,348(a4) # 918 <freep>
 }
- 7ec:	6422                	ld	s0,8(sp)
- 7ee:	0141                	addi	sp,sp,16
- 7f0:	8082                	ret
+ 7c4:	6422                	ld	s0,8(sp)
+ 7c6:	0141                	addi	sp,sp,16
+ 7c8:	8082                	ret
 
-00000000000007f2 <malloc>:
+00000000000007ca <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 7f2:	7139                	addi	sp,sp,-64
- 7f4:	fc06                	sd	ra,56(sp)
- 7f6:	f822                	sd	s0,48(sp)
- 7f8:	f426                	sd	s1,40(sp)
- 7fa:	f04a                	sd	s2,32(sp)
- 7fc:	ec4e                	sd	s3,24(sp)
- 7fe:	e852                	sd	s4,16(sp)
- 800:	e456                	sd	s5,8(sp)
- 802:	e05a                	sd	s6,0(sp)
- 804:	0080                	addi	s0,sp,64
+ 7ca:	7139                	addi	sp,sp,-64
+ 7cc:	fc06                	sd	ra,56(sp)
+ 7ce:	f822                	sd	s0,48(sp)
+ 7d0:	f426                	sd	s1,40(sp)
+ 7d2:	f04a                	sd	s2,32(sp)
+ 7d4:	ec4e                	sd	s3,24(sp)
+ 7d6:	e852                	sd	s4,16(sp)
+ 7d8:	e456                	sd	s5,8(sp)
+ 7da:	e05a                	sd	s6,0(sp)
+ 7dc:	0080                	addi	s0,sp,64
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 806:	02051493          	slli	s1,a0,0x20
- 80a:	9081                	srli	s1,s1,0x20
- 80c:	04bd                	addi	s1,s1,15
- 80e:	8091                	srli	s1,s1,0x4
- 810:	0014899b          	addiw	s3,s1,1
- 814:	0485                	addi	s1,s1,1
+ 7de:	02051493          	slli	s1,a0,0x20
+ 7e2:	9081                	srli	s1,s1,0x20
+ 7e4:	04bd                	addi	s1,s1,15
+ 7e6:	8091                	srli	s1,s1,0x4
+ 7e8:	0014899b          	addiw	s3,s1,1
+ 7ec:	0485                	addi	s1,s1,1
   if((prevp = freep) == 0){
- 816:	00000517          	auipc	a0,0x0
- 81a:	12a53503          	ld	a0,298(a0) # 940 <freep>
- 81e:	c515                	beqz	a0,84a <malloc+0x58>
+ 7ee:	00000517          	auipc	a0,0x0
+ 7f2:	12a53503          	ld	a0,298(a0) # 918 <freep>
+ 7f6:	c515                	beqz	a0,822 <malloc+0x58>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 820:	611c                	ld	a5,0(a0)
+ 7f8:	611c                	ld	a5,0(a0)
     if(p->s.size >= nunits){
- 822:	4798                	lw	a4,8(a5)
- 824:	02977f63          	bgeu	a4,s1,862 <malloc+0x70>
- 828:	8a4e                	mv	s4,s3
- 82a:	0009871b          	sext.w	a4,s3
- 82e:	6685                	lui	a3,0x1
- 830:	00d77363          	bgeu	a4,a3,836 <malloc+0x44>
- 834:	6a05                	lui	s4,0x1
- 836:	000a0b1b          	sext.w	s6,s4
+ 7fa:	4798                	lw	a4,8(a5)
+ 7fc:	02977f63          	bgeu	a4,s1,83a <malloc+0x70>
+ 800:	8a4e                	mv	s4,s3
+ 802:	0009871b          	sext.w	a4,s3
+ 806:	6685                	lui	a3,0x1
+ 808:	00d77363          	bgeu	a4,a3,80e <malloc+0x44>
+ 80c:	6a05                	lui	s4,0x1
+ 80e:	000a0b1b          	sext.w	s6,s4
   p = sbrk(nu * sizeof(Header));
- 83a:	004a1a1b          	slliw	s4,s4,0x4
+ 812:	004a1a1b          	slliw	s4,s4,0x4
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 83e:	00000917          	auipc	s2,0x0
- 842:	10290913          	addi	s2,s2,258 # 940 <freep>
+ 816:	00000917          	auipc	s2,0x0
+ 81a:	10290913          	addi	s2,s2,258 # 918 <freep>
   if(p == (char*)-1)
- 846:	5afd                	li	s5,-1
- 848:	a88d                	j	8ba <malloc+0xc8>
+ 81e:	5afd                	li	s5,-1
+ 820:	a88d                	j	892 <malloc+0xc8>
     base.s.ptr = freep = prevp = &base;
- 84a:	00000797          	auipc	a5,0x0
- 84e:	2fe78793          	addi	a5,a5,766 # b48 <base>
- 852:	00000717          	auipc	a4,0x0
- 856:	0ef73723          	sd	a5,238(a4) # 940 <freep>
- 85a:	e39c                	sd	a5,0(a5)
+ 822:	00000797          	auipc	a5,0x0
+ 826:	2fe78793          	addi	a5,a5,766 # b20 <base>
+ 82a:	00000717          	auipc	a4,0x0
+ 82e:	0ef73723          	sd	a5,238(a4) # 918 <freep>
+ 832:	e39c                	sd	a5,0(a5)
     base.s.size = 0;
- 85c:	0007a423          	sw	zero,8(a5)
+ 834:	0007a423          	sw	zero,8(a5)
     if(p->s.size >= nunits){
- 860:	b7e1                	j	828 <malloc+0x36>
+ 838:	b7e1                	j	800 <malloc+0x36>
       if(p->s.size == nunits)
- 862:	02e48b63          	beq	s1,a4,898 <malloc+0xa6>
+ 83a:	02e48b63          	beq	s1,a4,870 <malloc+0xa6>
         p->s.size -= nunits;
- 866:	4137073b          	subw	a4,a4,s3
- 86a:	c798                	sw	a4,8(a5)
+ 83e:	4137073b          	subw	a4,a4,s3
+ 842:	c798                	sw	a4,8(a5)
         p += p->s.size;
- 86c:	1702                	slli	a4,a4,0x20
- 86e:	9301                	srli	a4,a4,0x20
- 870:	0712                	slli	a4,a4,0x4
- 872:	97ba                	add	a5,a5,a4
+ 844:	1702                	slli	a4,a4,0x20
+ 846:	9301                	srli	a4,a4,0x20
+ 848:	0712                	slli	a4,a4,0x4
+ 84a:	97ba                	add	a5,a5,a4
         p->s.size = nunits;
- 874:	0137a423          	sw	s3,8(a5)
+ 84c:	0137a423          	sw	s3,8(a5)
       freep = prevp;
- 878:	00000717          	auipc	a4,0x0
- 87c:	0ca73423          	sd	a0,200(a4) # 940 <freep>
+ 850:	00000717          	auipc	a4,0x0
+ 854:	0ca73423          	sd	a0,200(a4) # 918 <freep>
       return (void*)(p + 1);
- 880:	01078513          	addi	a0,a5,16
+ 858:	01078513          	addi	a0,a5,16
       if((p = morecore(nunits)) == 0)
         return 0;
   }
 }
- 884:	70e2                	ld	ra,56(sp)
- 886:	7442                	ld	s0,48(sp)
- 888:	74a2                	ld	s1,40(sp)
- 88a:	7902                	ld	s2,32(sp)
- 88c:	69e2                	ld	s3,24(sp)
- 88e:	6a42                	ld	s4,16(sp)
- 890:	6aa2                	ld	s5,8(sp)
- 892:	6b02                	ld	s6,0(sp)
- 894:	6121                	addi	sp,sp,64
- 896:	8082                	ret
+ 85c:	70e2                	ld	ra,56(sp)
+ 85e:	7442                	ld	s0,48(sp)
+ 860:	74a2                	ld	s1,40(sp)
+ 862:	7902                	ld	s2,32(sp)
+ 864:	69e2                	ld	s3,24(sp)
+ 866:	6a42                	ld	s4,16(sp)
+ 868:	6aa2                	ld	s5,8(sp)
+ 86a:	6b02                	ld	s6,0(sp)
+ 86c:	6121                	addi	sp,sp,64
+ 86e:	8082                	ret
         prevp->s.ptr = p->s.ptr;
- 898:	6398                	ld	a4,0(a5)
- 89a:	e118                	sd	a4,0(a0)
- 89c:	bff1                	j	878 <malloc+0x86>
+ 870:	6398                	ld	a4,0(a5)
+ 872:	e118                	sd	a4,0(a0)
+ 874:	bff1                	j	850 <malloc+0x86>
   hp->s.size = nu;
- 89e:	01652423          	sw	s6,8(a0)
+ 876:	01652423          	sw	s6,8(a0)
   free((void*)(hp + 1));
- 8a2:	0541                	addi	a0,a0,16
- 8a4:	00000097          	auipc	ra,0x0
- 8a8:	ec6080e7          	jalr	-314(ra) # 76a <free>
+ 87a:	0541                	addi	a0,a0,16
+ 87c:	00000097          	auipc	ra,0x0
+ 880:	ec6080e7          	jalr	-314(ra) # 742 <free>
   return freep;
- 8ac:	00093503          	ld	a0,0(s2)
+ 884:	00093503          	ld	a0,0(s2)
       if((p = morecore(nunits)) == 0)
- 8b0:	d971                	beqz	a0,884 <malloc+0x92>
+ 888:	d971                	beqz	a0,85c <malloc+0x92>
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 8b2:	611c                	ld	a5,0(a0)
+ 88a:	611c                	ld	a5,0(a0)
     if(p->s.size >= nunits){
- 8b4:	4798                	lw	a4,8(a5)
- 8b6:	fa9776e3          	bgeu	a4,s1,862 <malloc+0x70>
+ 88c:	4798                	lw	a4,8(a5)
+ 88e:	fa9776e3          	bgeu	a4,s1,83a <malloc+0x70>
     if(p == freep)
- 8ba:	00093703          	ld	a4,0(s2)
- 8be:	853e                	mv	a0,a5
- 8c0:	fef719e3          	bne	a4,a5,8b2 <malloc+0xc0>
+ 892:	00093703          	ld	a4,0(s2)
+ 896:	853e                	mv	a0,a5
+ 898:	fef719e3          	bne	a4,a5,88a <malloc+0xc0>
   p = sbrk(nu * sizeof(Header));
- 8c4:	8552                	mv	a0,s4
- 8c6:	00000097          	auipc	ra,0x0
- 8ca:	b56080e7          	jalr	-1194(ra) # 41c <sbrk>
+ 89c:	8552                	mv	a0,s4
+ 89e:	00000097          	auipc	ra,0x0
+ 8a2:	b7e080e7          	jalr	-1154(ra) # 41c <sbrk>
   if(p == (char*)-1)
- 8ce:	fd5518e3          	bne	a0,s5,89e <malloc+0xac>
+ 8a6:	fd5518e3          	bne	a0,s5,876 <malloc+0xac>
         return 0;
- 8d2:	4501                	li	a0,0
- 8d4:	bf45                	j	884 <malloc+0x92>
+ 8aa:	4501                	li	a0,0
+ 8ac:	bf45                	j	85c <malloc+0x92>
diff --git a/user/cat.o b/user/cat.o
index 6df4e1e..35c7a52 100644
Binary files a/user/cat.o and b/user/cat.o differ
diff --git a/user/cat.sym b/user/cat.sym
index 073a78f..55753bd 100644
--- a/user/cat.sym
+++ b/user/cat.sym
@@ -1,7 +1,7 @@
 0000000000000000 .text
-00000000000008d8 .rodata
-0000000000000940 .sbss
-0000000000000948 .bss
+00000000000008b0 .rodata
+0000000000000918 .sbss
+0000000000000920 .bss
 0000000000000000 .comment
 0000000000000000 .debug_aranges
 0000000000000000 .debug_info
@@ -14,55 +14,50 @@
 0000000000000000 cat.c
 0000000000000000 ulib.c
 0000000000000000 printf.c
-000000000000045c putc
-000000000000047e printint
-0000000000000928 digits
+0000000000000434 putc
+0000000000000456 printint
+0000000000000900 digits
 0000000000000000 umalloc.c
-0000000000000940 freep
-0000000000000b48 base
+0000000000000918 freep
+0000000000000b20 base
 000000000000011e strcpy
-0000000000000734 printf
-0000000000001139 __global_pointer$
+000000000000070c printf
+0000000000001111 __global_pointer$
 00000000000002de memmove
 00000000000003dc mknod
 00000000000001da gets
-0000000000000939 __SDATA_BEGIN__
+0000000000000911 __SDATA_BEGIN__
 0000000000000414 getpid
 0000000000000374 memcpy
 0000000000000000 cat
-0000000000000444 print_stats
-00000000000007f2 malloc
+00000000000007ca malloc
 0000000000000424 sleep
 00000000000003a4 pipe
 00000000000003b4 write
 00000000000003ec fstat
-0000000000000706 fprintf
+00000000000006de fprintf
 00000000000003c4 kill
-0000000000000528 vprintf
+0000000000000500 vprintf
 0000000000000404 chdir
-0000000000000434 pause_system
 00000000000003cc exec
 000000000000039c wait
 00000000000003ac read
 00000000000003e4 unlink
-0000000000000454 set_cpu
-000000000000044c get_cpu
 000000000000033a memcmp
 000000000000038c fork
-000000000000043c kill_system
-0000000000000b58 __BSS_END__
+0000000000000b30 __BSS_END__
 000000000000041c sbrk
 000000000000042c uptime
-0000000000000939 __bss_start
+0000000000000911 __bss_start
 0000000000000190 memset
 000000000000008a main
 000000000000013a strcmp
 000000000000040c dup
-0000000000000948 buf
-0000000000000939 __DATA_BEGIN__
+0000000000000920 buf
+0000000000000911 __DATA_BEGIN__
 000000000000024e stat
-0000000000000939 _edata
-0000000000000b58 _end
+0000000000000911 _edata
+0000000000000b30 _end
 00000000000003f4 link
 0000000000000394 exit
 0000000000000294 atoi
@@ -71,4 +66,4 @@
 00000000000001b6 strchr
 00000000000003fc mkdir
 00000000000003bc close
-000000000000076a free
+0000000000000742 free
diff --git a/user/echo.asm b/user/echo.asm
index e4edbcc..050d94b 100644
--- a/user/echo.asm
+++ b/user/echo.asm
@@ -34,8 +34,8 @@ main(int argc, char *argv[])
     write(1, argv[i], strlen(argv[i]));
     if(i + 1 < argc){
       write(1, " ", 1);
-  2a:	00001a17          	auipc	s4,0x1
-  2e:	816a0a13          	addi	s4,s4,-2026 # 840 <malloc+0xe8>
+  2a:	00000a17          	auipc	s4,0x0
+  2e:	7eea0a13          	addi	s4,s4,2030 # 818 <malloc+0xe8>
     write(1, argv[i], strlen(argv[i]));
   32:	0004b903          	ld	s2,0(s1)
   36:	854a                	mv	a0,s2
@@ -61,7 +61,7 @@ main(int argc, char *argv[])
       write(1, "\n", 1);
   66:	4605                	li	a2,1
   68:	00000597          	auipc	a1,0x0
-  6c:	7e058593          	addi	a1,a1,2016 # 848 <malloc+0xf0>
+  6c:	7b858593          	addi	a1,a1,1976 # 820 <malloc+0xf0>
   70:	4505                	li	a0,1
   72:	00000097          	auipc	ra,0x0
   76:	2a8080e7          	jalr	680(ra) # 31a <write>
@@ -709,696 +709,646 @@ uptime:
  ret
  398:	8082                	ret
 
-000000000000039a <pause_system>:
-.global pause_system
-pause_system:
- li a7, SYS_pause_system
- 39a:	48d9                	li	a7,22
- ecall
- 39c:	00000073          	ecall
- ret
- 3a0:	8082                	ret
-
-00000000000003a2 <kill_system>:
-.global kill_system
-kill_system:
- li a7, SYS_kill_system
- 3a2:	48dd                	li	a7,23
- ecall
- 3a4:	00000073          	ecall
- ret
- 3a8:	8082                	ret
-
-00000000000003aa <print_stats>:
-.global print_stats
-print_stats:
- li a7, SYS_print_stats
- 3aa:	48e1                	li	a7,24
- ecall
- 3ac:	00000073          	ecall
- ret
- 3b0:	8082                	ret
-
-00000000000003b2 <get_cpu>:
-.global get_cpu
-get_cpu:
- li a7, SYS_get_cpu
- 3b2:	48e5                	li	a7,25
- ecall
- 3b4:	00000073          	ecall
- ret
- 3b8:	8082                	ret
-
-00000000000003ba <set_cpu>:
-.global set_cpu
-set_cpu:
- li a7, SYS_set_cpu
- 3ba:	48e9                	li	a7,26
- ecall
- 3bc:	00000073          	ecall
- ret
- 3c0:	8082                	ret
-
-00000000000003c2 <putc>:
+000000000000039a <putc>:
 
 static char digits[] = "0123456789ABCDEF";
 
 static void
 putc(int fd, char c)
 {
- 3c2:	1101                	addi	sp,sp,-32
- 3c4:	ec06                	sd	ra,24(sp)
- 3c6:	e822                	sd	s0,16(sp)
- 3c8:	1000                	addi	s0,sp,32
- 3ca:	feb407a3          	sb	a1,-17(s0)
+ 39a:	1101                	addi	sp,sp,-32
+ 39c:	ec06                	sd	ra,24(sp)
+ 39e:	e822                	sd	s0,16(sp)
+ 3a0:	1000                	addi	s0,sp,32
+ 3a2:	feb407a3          	sb	a1,-17(s0)
   write(fd, &c, 1);
- 3ce:	4605                	li	a2,1
- 3d0:	fef40593          	addi	a1,s0,-17
- 3d4:	00000097          	auipc	ra,0x0
- 3d8:	f46080e7          	jalr	-186(ra) # 31a <write>
+ 3a6:	4605                	li	a2,1
+ 3a8:	fef40593          	addi	a1,s0,-17
+ 3ac:	00000097          	auipc	ra,0x0
+ 3b0:	f6e080e7          	jalr	-146(ra) # 31a <write>
 }
- 3dc:	60e2                	ld	ra,24(sp)
- 3de:	6442                	ld	s0,16(sp)
- 3e0:	6105                	addi	sp,sp,32
- 3e2:	8082                	ret
+ 3b4:	60e2                	ld	ra,24(sp)
+ 3b6:	6442                	ld	s0,16(sp)
+ 3b8:	6105                	addi	sp,sp,32
+ 3ba:	8082                	ret
 
-00000000000003e4 <printint>:
+00000000000003bc <printint>:
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 3e4:	7139                	addi	sp,sp,-64
- 3e6:	fc06                	sd	ra,56(sp)
- 3e8:	f822                	sd	s0,48(sp)
- 3ea:	f426                	sd	s1,40(sp)
- 3ec:	f04a                	sd	s2,32(sp)
- 3ee:	ec4e                	sd	s3,24(sp)
- 3f0:	0080                	addi	s0,sp,64
- 3f2:	84aa                	mv	s1,a0
+ 3bc:	7139                	addi	sp,sp,-64
+ 3be:	fc06                	sd	ra,56(sp)
+ 3c0:	f822                	sd	s0,48(sp)
+ 3c2:	f426                	sd	s1,40(sp)
+ 3c4:	f04a                	sd	s2,32(sp)
+ 3c6:	ec4e                	sd	s3,24(sp)
+ 3c8:	0080                	addi	s0,sp,64
+ 3ca:	84aa                	mv	s1,a0
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 3f4:	c299                	beqz	a3,3fa <printint+0x16>
- 3f6:	0805c863          	bltz	a1,486 <printint+0xa2>
+ 3cc:	c299                	beqz	a3,3d2 <printint+0x16>
+ 3ce:	0805c863          	bltz	a1,45e <printint+0xa2>
     neg = 1;
     x = -xx;
   } else {
     x = xx;
- 3fa:	2581                	sext.w	a1,a1
+ 3d2:	2581                	sext.w	a1,a1
   neg = 0;
- 3fc:	4881                	li	a7,0
- 3fe:	fc040693          	addi	a3,s0,-64
+ 3d4:	4881                	li	a7,0
+ 3d6:	fc040693          	addi	a3,s0,-64
   }
 
   i = 0;
- 402:	4701                	li	a4,0
+ 3da:	4701                	li	a4,0
   do{
     buf[i++] = digits[x % base];
- 404:	2601                	sext.w	a2,a2
- 406:	00000517          	auipc	a0,0x0
- 40a:	45250513          	addi	a0,a0,1106 # 858 <digits>
- 40e:	883a                	mv	a6,a4
- 410:	2705                	addiw	a4,a4,1
- 412:	02c5f7bb          	remuw	a5,a1,a2
- 416:	1782                	slli	a5,a5,0x20
- 418:	9381                	srli	a5,a5,0x20
- 41a:	97aa                	add	a5,a5,a0
- 41c:	0007c783          	lbu	a5,0(a5)
- 420:	00f68023          	sb	a5,0(a3)
+ 3dc:	2601                	sext.w	a2,a2
+ 3de:	00000517          	auipc	a0,0x0
+ 3e2:	45250513          	addi	a0,a0,1106 # 830 <digits>
+ 3e6:	883a                	mv	a6,a4
+ 3e8:	2705                	addiw	a4,a4,1
+ 3ea:	02c5f7bb          	remuw	a5,a1,a2
+ 3ee:	1782                	slli	a5,a5,0x20
+ 3f0:	9381                	srli	a5,a5,0x20
+ 3f2:	97aa                	add	a5,a5,a0
+ 3f4:	0007c783          	lbu	a5,0(a5)
+ 3f8:	00f68023          	sb	a5,0(a3)
   }while((x /= base) != 0);
- 424:	0005879b          	sext.w	a5,a1
- 428:	02c5d5bb          	divuw	a1,a1,a2
- 42c:	0685                	addi	a3,a3,1
- 42e:	fec7f0e3          	bgeu	a5,a2,40e <printint+0x2a>
+ 3fc:	0005879b          	sext.w	a5,a1
+ 400:	02c5d5bb          	divuw	a1,a1,a2
+ 404:	0685                	addi	a3,a3,1
+ 406:	fec7f0e3          	bgeu	a5,a2,3e6 <printint+0x2a>
   if(neg)
- 432:	00088b63          	beqz	a7,448 <printint+0x64>
+ 40a:	00088b63          	beqz	a7,420 <printint+0x64>
     buf[i++] = '-';
- 436:	fd040793          	addi	a5,s0,-48
- 43a:	973e                	add	a4,a4,a5
- 43c:	02d00793          	li	a5,45
- 440:	fef70823          	sb	a5,-16(a4)
- 444:	0028071b          	addiw	a4,a6,2
+ 40e:	fd040793          	addi	a5,s0,-48
+ 412:	973e                	add	a4,a4,a5
+ 414:	02d00793          	li	a5,45
+ 418:	fef70823          	sb	a5,-16(a4)
+ 41c:	0028071b          	addiw	a4,a6,2
 
   while(--i >= 0)
- 448:	02e05863          	blez	a4,478 <printint+0x94>
- 44c:	fc040793          	addi	a5,s0,-64
- 450:	00e78933          	add	s2,a5,a4
- 454:	fff78993          	addi	s3,a5,-1
- 458:	99ba                	add	s3,s3,a4
- 45a:	377d                	addiw	a4,a4,-1
- 45c:	1702                	slli	a4,a4,0x20
- 45e:	9301                	srli	a4,a4,0x20
- 460:	40e989b3          	sub	s3,s3,a4
+ 420:	02e05863          	blez	a4,450 <printint+0x94>
+ 424:	fc040793          	addi	a5,s0,-64
+ 428:	00e78933          	add	s2,a5,a4
+ 42c:	fff78993          	addi	s3,a5,-1
+ 430:	99ba                	add	s3,s3,a4
+ 432:	377d                	addiw	a4,a4,-1
+ 434:	1702                	slli	a4,a4,0x20
+ 436:	9301                	srli	a4,a4,0x20
+ 438:	40e989b3          	sub	s3,s3,a4
     putc(fd, buf[i]);
- 464:	fff94583          	lbu	a1,-1(s2)
- 468:	8526                	mv	a0,s1
- 46a:	00000097          	auipc	ra,0x0
- 46e:	f58080e7          	jalr	-168(ra) # 3c2 <putc>
+ 43c:	fff94583          	lbu	a1,-1(s2)
+ 440:	8526                	mv	a0,s1
+ 442:	00000097          	auipc	ra,0x0
+ 446:	f58080e7          	jalr	-168(ra) # 39a <putc>
   while(--i >= 0)
- 472:	197d                	addi	s2,s2,-1
- 474:	ff3918e3          	bne	s2,s3,464 <printint+0x80>
+ 44a:	197d                	addi	s2,s2,-1
+ 44c:	ff3918e3          	bne	s2,s3,43c <printint+0x80>
 }
- 478:	70e2                	ld	ra,56(sp)
- 47a:	7442                	ld	s0,48(sp)
- 47c:	74a2                	ld	s1,40(sp)
- 47e:	7902                	ld	s2,32(sp)
- 480:	69e2                	ld	s3,24(sp)
- 482:	6121                	addi	sp,sp,64
- 484:	8082                	ret
+ 450:	70e2                	ld	ra,56(sp)
+ 452:	7442                	ld	s0,48(sp)
+ 454:	74a2                	ld	s1,40(sp)
+ 456:	7902                	ld	s2,32(sp)
+ 458:	69e2                	ld	s3,24(sp)
+ 45a:	6121                	addi	sp,sp,64
+ 45c:	8082                	ret
     x = -xx;
- 486:	40b005bb          	negw	a1,a1
+ 45e:	40b005bb          	negw	a1,a1
     neg = 1;
- 48a:	4885                	li	a7,1
+ 462:	4885                	li	a7,1
     x = -xx;
- 48c:	bf8d                	j	3fe <printint+0x1a>
+ 464:	bf8d                	j	3d6 <printint+0x1a>
 
-000000000000048e <vprintf>:
+0000000000000466 <vprintf>:
 }
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 vprintf(int fd, const char *fmt, va_list ap)
 {
- 48e:	7119                	addi	sp,sp,-128
- 490:	fc86                	sd	ra,120(sp)
- 492:	f8a2                	sd	s0,112(sp)
- 494:	f4a6                	sd	s1,104(sp)
- 496:	f0ca                	sd	s2,96(sp)
- 498:	ecce                	sd	s3,88(sp)
- 49a:	e8d2                	sd	s4,80(sp)
- 49c:	e4d6                	sd	s5,72(sp)
- 49e:	e0da                	sd	s6,64(sp)
- 4a0:	fc5e                	sd	s7,56(sp)
- 4a2:	f862                	sd	s8,48(sp)
- 4a4:	f466                	sd	s9,40(sp)
- 4a6:	f06a                	sd	s10,32(sp)
- 4a8:	ec6e                	sd	s11,24(sp)
- 4aa:	0100                	addi	s0,sp,128
+ 466:	7119                	addi	sp,sp,-128
+ 468:	fc86                	sd	ra,120(sp)
+ 46a:	f8a2                	sd	s0,112(sp)
+ 46c:	f4a6                	sd	s1,104(sp)
+ 46e:	f0ca                	sd	s2,96(sp)
+ 470:	ecce                	sd	s3,88(sp)
+ 472:	e8d2                	sd	s4,80(sp)
+ 474:	e4d6                	sd	s5,72(sp)
+ 476:	e0da                	sd	s6,64(sp)
+ 478:	fc5e                	sd	s7,56(sp)
+ 47a:	f862                	sd	s8,48(sp)
+ 47c:	f466                	sd	s9,40(sp)
+ 47e:	f06a                	sd	s10,32(sp)
+ 480:	ec6e                	sd	s11,24(sp)
+ 482:	0100                	addi	s0,sp,128
   char *s;
   int c, i, state;
 
   state = 0;
   for(i = 0; fmt[i]; i++){
- 4ac:	0005c903          	lbu	s2,0(a1)
- 4b0:	18090f63          	beqz	s2,64e <vprintf+0x1c0>
- 4b4:	8aaa                	mv	s5,a0
- 4b6:	8b32                	mv	s6,a2
- 4b8:	00158493          	addi	s1,a1,1
+ 484:	0005c903          	lbu	s2,0(a1)
+ 488:	18090f63          	beqz	s2,626 <vprintf+0x1c0>
+ 48c:	8aaa                	mv	s5,a0
+ 48e:	8b32                	mv	s6,a2
+ 490:	00158493          	addi	s1,a1,1
   state = 0;
- 4bc:	4981                	li	s3,0
+ 494:	4981                	li	s3,0
       if(c == '%'){
         state = '%';
       } else {
         putc(fd, c);
       }
     } else if(state == '%'){
- 4be:	02500a13          	li	s4,37
+ 496:	02500a13          	li	s4,37
       if(c == 'd'){
- 4c2:	06400c13          	li	s8,100
+ 49a:	06400c13          	li	s8,100
         printint(fd, va_arg(ap, int), 10, 1);
       } else if(c == 'l') {
- 4c6:	06c00c93          	li	s9,108
+ 49e:	06c00c93          	li	s9,108
         printint(fd, va_arg(ap, uint64), 10, 0);
       } else if(c == 'x') {
- 4ca:	07800d13          	li	s10,120
+ 4a2:	07800d13          	li	s10,120
         printint(fd, va_arg(ap, int), 16, 0);
       } else if(c == 'p') {
- 4ce:	07000d93          	li	s11,112
+ 4a6:	07000d93          	li	s11,112
     putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
- 4d2:	00000b97          	auipc	s7,0x0
- 4d6:	386b8b93          	addi	s7,s7,902 # 858 <digits>
- 4da:	a839                	j	4f8 <vprintf+0x6a>
+ 4aa:	00000b97          	auipc	s7,0x0
+ 4ae:	386b8b93          	addi	s7,s7,902 # 830 <digits>
+ 4b2:	a839                	j	4d0 <vprintf+0x6a>
         putc(fd, c);
- 4dc:	85ca                	mv	a1,s2
- 4de:	8556                	mv	a0,s5
- 4e0:	00000097          	auipc	ra,0x0
- 4e4:	ee2080e7          	jalr	-286(ra) # 3c2 <putc>
- 4e8:	a019                	j	4ee <vprintf+0x60>
+ 4b4:	85ca                	mv	a1,s2
+ 4b6:	8556                	mv	a0,s5
+ 4b8:	00000097          	auipc	ra,0x0
+ 4bc:	ee2080e7          	jalr	-286(ra) # 39a <putc>
+ 4c0:	a019                	j	4c6 <vprintf+0x60>
     } else if(state == '%'){
- 4ea:	01498f63          	beq	s3,s4,508 <vprintf+0x7a>
+ 4c2:	01498f63          	beq	s3,s4,4e0 <vprintf+0x7a>
   for(i = 0; fmt[i]; i++){
- 4ee:	0485                	addi	s1,s1,1
- 4f0:	fff4c903          	lbu	s2,-1(s1)
- 4f4:	14090d63          	beqz	s2,64e <vprintf+0x1c0>
+ 4c6:	0485                	addi	s1,s1,1
+ 4c8:	fff4c903          	lbu	s2,-1(s1)
+ 4cc:	14090d63          	beqz	s2,626 <vprintf+0x1c0>
     c = fmt[i] & 0xff;
- 4f8:	0009079b          	sext.w	a5,s2
+ 4d0:	0009079b          	sext.w	a5,s2
     if(state == 0){
- 4fc:	fe0997e3          	bnez	s3,4ea <vprintf+0x5c>
+ 4d4:	fe0997e3          	bnez	s3,4c2 <vprintf+0x5c>
       if(c == '%'){
- 500:	fd479ee3          	bne	a5,s4,4dc <vprintf+0x4e>
+ 4d8:	fd479ee3          	bne	a5,s4,4b4 <vprintf+0x4e>
         state = '%';
- 504:	89be                	mv	s3,a5
- 506:	b7e5                	j	4ee <vprintf+0x60>
+ 4dc:	89be                	mv	s3,a5
+ 4de:	b7e5                	j	4c6 <vprintf+0x60>
       if(c == 'd'){
- 508:	05878063          	beq	a5,s8,548 <vprintf+0xba>
+ 4e0:	05878063          	beq	a5,s8,520 <vprintf+0xba>
       } else if(c == 'l') {
- 50c:	05978c63          	beq	a5,s9,564 <vprintf+0xd6>
+ 4e4:	05978c63          	beq	a5,s9,53c <vprintf+0xd6>
       } else if(c == 'x') {
- 510:	07a78863          	beq	a5,s10,580 <vprintf+0xf2>
+ 4e8:	07a78863          	beq	a5,s10,558 <vprintf+0xf2>
       } else if(c == 'p') {
- 514:	09b78463          	beq	a5,s11,59c <vprintf+0x10e>
+ 4ec:	09b78463          	beq	a5,s11,574 <vprintf+0x10e>
         printptr(fd, va_arg(ap, uint64));
       } else if(c == 's'){
- 518:	07300713          	li	a4,115
- 51c:	0ce78663          	beq	a5,a4,5e8 <vprintf+0x15a>
+ 4f0:	07300713          	li	a4,115
+ 4f4:	0ce78663          	beq	a5,a4,5c0 <vprintf+0x15a>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 520:	06300713          	li	a4,99
- 524:	0ee78e63          	beq	a5,a4,620 <vprintf+0x192>
+ 4f8:	06300713          	li	a4,99
+ 4fc:	0ee78e63          	beq	a5,a4,5f8 <vprintf+0x192>
         putc(fd, va_arg(ap, uint));
       } else if(c == '%'){
- 528:	11478863          	beq	a5,s4,638 <vprintf+0x1aa>
+ 500:	11478863          	beq	a5,s4,610 <vprintf+0x1aa>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
- 52c:	85d2                	mv	a1,s4
- 52e:	8556                	mv	a0,s5
- 530:	00000097          	auipc	ra,0x0
- 534:	e92080e7          	jalr	-366(ra) # 3c2 <putc>
+ 504:	85d2                	mv	a1,s4
+ 506:	8556                	mv	a0,s5
+ 508:	00000097          	auipc	ra,0x0
+ 50c:	e92080e7          	jalr	-366(ra) # 39a <putc>
         putc(fd, c);
- 538:	85ca                	mv	a1,s2
- 53a:	8556                	mv	a0,s5
- 53c:	00000097          	auipc	ra,0x0
- 540:	e86080e7          	jalr	-378(ra) # 3c2 <putc>
+ 510:	85ca                	mv	a1,s2
+ 512:	8556                	mv	a0,s5
+ 514:	00000097          	auipc	ra,0x0
+ 518:	e86080e7          	jalr	-378(ra) # 39a <putc>
       }
       state = 0;
- 544:	4981                	li	s3,0
- 546:	b765                	j	4ee <vprintf+0x60>
+ 51c:	4981                	li	s3,0
+ 51e:	b765                	j	4c6 <vprintf+0x60>
         printint(fd, va_arg(ap, int), 10, 1);
- 548:	008b0913          	addi	s2,s6,8
- 54c:	4685                	li	a3,1
- 54e:	4629                	li	a2,10
- 550:	000b2583          	lw	a1,0(s6)
- 554:	8556                	mv	a0,s5
- 556:	00000097          	auipc	ra,0x0
- 55a:	e8e080e7          	jalr	-370(ra) # 3e4 <printint>
- 55e:	8b4a                	mv	s6,s2
+ 520:	008b0913          	addi	s2,s6,8
+ 524:	4685                	li	a3,1
+ 526:	4629                	li	a2,10
+ 528:	000b2583          	lw	a1,0(s6)
+ 52c:	8556                	mv	a0,s5
+ 52e:	00000097          	auipc	ra,0x0
+ 532:	e8e080e7          	jalr	-370(ra) # 3bc <printint>
+ 536:	8b4a                	mv	s6,s2
       state = 0;
- 560:	4981                	li	s3,0
- 562:	b771                	j	4ee <vprintf+0x60>
+ 538:	4981                	li	s3,0
+ 53a:	b771                	j	4c6 <vprintf+0x60>
         printint(fd, va_arg(ap, uint64), 10, 0);
- 564:	008b0913          	addi	s2,s6,8
- 568:	4681                	li	a3,0
- 56a:	4629                	li	a2,10
- 56c:	000b2583          	lw	a1,0(s6)
- 570:	8556                	mv	a0,s5
- 572:	00000097          	auipc	ra,0x0
- 576:	e72080e7          	jalr	-398(ra) # 3e4 <printint>
- 57a:	8b4a                	mv	s6,s2
+ 53c:	008b0913          	addi	s2,s6,8
+ 540:	4681                	li	a3,0
+ 542:	4629                	li	a2,10
+ 544:	000b2583          	lw	a1,0(s6)
+ 548:	8556                	mv	a0,s5
+ 54a:	00000097          	auipc	ra,0x0
+ 54e:	e72080e7          	jalr	-398(ra) # 3bc <printint>
+ 552:	8b4a                	mv	s6,s2
       state = 0;
- 57c:	4981                	li	s3,0
- 57e:	bf85                	j	4ee <vprintf+0x60>
+ 554:	4981                	li	s3,0
+ 556:	bf85                	j	4c6 <vprintf+0x60>
         printint(fd, va_arg(ap, int), 16, 0);
- 580:	008b0913          	addi	s2,s6,8
- 584:	4681                	li	a3,0
- 586:	4641                	li	a2,16
- 588:	000b2583          	lw	a1,0(s6)
- 58c:	8556                	mv	a0,s5
- 58e:	00000097          	auipc	ra,0x0
- 592:	e56080e7          	jalr	-426(ra) # 3e4 <printint>
- 596:	8b4a                	mv	s6,s2
+ 558:	008b0913          	addi	s2,s6,8
+ 55c:	4681                	li	a3,0
+ 55e:	4641                	li	a2,16
+ 560:	000b2583          	lw	a1,0(s6)
+ 564:	8556                	mv	a0,s5
+ 566:	00000097          	auipc	ra,0x0
+ 56a:	e56080e7          	jalr	-426(ra) # 3bc <printint>
+ 56e:	8b4a                	mv	s6,s2
       state = 0;
- 598:	4981                	li	s3,0
- 59a:	bf91                	j	4ee <vprintf+0x60>
+ 570:	4981                	li	s3,0
+ 572:	bf91                	j	4c6 <vprintf+0x60>
         printptr(fd, va_arg(ap, uint64));
- 59c:	008b0793          	addi	a5,s6,8
- 5a0:	f8f43423          	sd	a5,-120(s0)
- 5a4:	000b3983          	ld	s3,0(s6)
+ 574:	008b0793          	addi	a5,s6,8
+ 578:	f8f43423          	sd	a5,-120(s0)
+ 57c:	000b3983          	ld	s3,0(s6)
   putc(fd, '0');
- 5a8:	03000593          	li	a1,48
- 5ac:	8556                	mv	a0,s5
- 5ae:	00000097          	auipc	ra,0x0
- 5b2:	e14080e7          	jalr	-492(ra) # 3c2 <putc>
+ 580:	03000593          	li	a1,48
+ 584:	8556                	mv	a0,s5
+ 586:	00000097          	auipc	ra,0x0
+ 58a:	e14080e7          	jalr	-492(ra) # 39a <putc>
   putc(fd, 'x');
- 5b6:	85ea                	mv	a1,s10
- 5b8:	8556                	mv	a0,s5
- 5ba:	00000097          	auipc	ra,0x0
- 5be:	e08080e7          	jalr	-504(ra) # 3c2 <putc>
- 5c2:	4941                	li	s2,16
+ 58e:	85ea                	mv	a1,s10
+ 590:	8556                	mv	a0,s5
+ 592:	00000097          	auipc	ra,0x0
+ 596:	e08080e7          	jalr	-504(ra) # 39a <putc>
+ 59a:	4941                	li	s2,16
     putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
- 5c4:	03c9d793          	srli	a5,s3,0x3c
- 5c8:	97de                	add	a5,a5,s7
- 5ca:	0007c583          	lbu	a1,0(a5)
- 5ce:	8556                	mv	a0,s5
- 5d0:	00000097          	auipc	ra,0x0
- 5d4:	df2080e7          	jalr	-526(ra) # 3c2 <putc>
+ 59c:	03c9d793          	srli	a5,s3,0x3c
+ 5a0:	97de                	add	a5,a5,s7
+ 5a2:	0007c583          	lbu	a1,0(a5)
+ 5a6:	8556                	mv	a0,s5
+ 5a8:	00000097          	auipc	ra,0x0
+ 5ac:	df2080e7          	jalr	-526(ra) # 39a <putc>
   for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
- 5d8:	0992                	slli	s3,s3,0x4
- 5da:	397d                	addiw	s2,s2,-1
- 5dc:	fe0914e3          	bnez	s2,5c4 <vprintf+0x136>
+ 5b0:	0992                	slli	s3,s3,0x4
+ 5b2:	397d                	addiw	s2,s2,-1
+ 5b4:	fe0914e3          	bnez	s2,59c <vprintf+0x136>
         printptr(fd, va_arg(ap, uint64));
- 5e0:	f8843b03          	ld	s6,-120(s0)
+ 5b8:	f8843b03          	ld	s6,-120(s0)
       state = 0;
- 5e4:	4981                	li	s3,0
- 5e6:	b721                	j	4ee <vprintf+0x60>
+ 5bc:	4981                	li	s3,0
+ 5be:	b721                	j	4c6 <vprintf+0x60>
         s = va_arg(ap, char*);
- 5e8:	008b0993          	addi	s3,s6,8
- 5ec:	000b3903          	ld	s2,0(s6)
+ 5c0:	008b0993          	addi	s3,s6,8
+ 5c4:	000b3903          	ld	s2,0(s6)
         if(s == 0)
- 5f0:	02090163          	beqz	s2,612 <vprintf+0x184>
+ 5c8:	02090163          	beqz	s2,5ea <vprintf+0x184>
         while(*s != 0){
- 5f4:	00094583          	lbu	a1,0(s2)
- 5f8:	c9a1                	beqz	a1,648 <vprintf+0x1ba>
+ 5cc:	00094583          	lbu	a1,0(s2)
+ 5d0:	c9a1                	beqz	a1,620 <vprintf+0x1ba>
           putc(fd, *s);
- 5fa:	8556                	mv	a0,s5
- 5fc:	00000097          	auipc	ra,0x0
- 600:	dc6080e7          	jalr	-570(ra) # 3c2 <putc>
+ 5d2:	8556                	mv	a0,s5
+ 5d4:	00000097          	auipc	ra,0x0
+ 5d8:	dc6080e7          	jalr	-570(ra) # 39a <putc>
           s++;
- 604:	0905                	addi	s2,s2,1
+ 5dc:	0905                	addi	s2,s2,1
         while(*s != 0){
- 606:	00094583          	lbu	a1,0(s2)
- 60a:	f9e5                	bnez	a1,5fa <vprintf+0x16c>
+ 5de:	00094583          	lbu	a1,0(s2)
+ 5e2:	f9e5                	bnez	a1,5d2 <vprintf+0x16c>
         s = va_arg(ap, char*);
- 60c:	8b4e                	mv	s6,s3
+ 5e4:	8b4e                	mv	s6,s3
       state = 0;
- 60e:	4981                	li	s3,0
- 610:	bdf9                	j	4ee <vprintf+0x60>
+ 5e6:	4981                	li	s3,0
+ 5e8:	bdf9                	j	4c6 <vprintf+0x60>
           s = "(null)";
- 612:	00000917          	auipc	s2,0x0
- 616:	23e90913          	addi	s2,s2,574 # 850 <malloc+0xf8>
+ 5ea:	00000917          	auipc	s2,0x0
+ 5ee:	23e90913          	addi	s2,s2,574 # 828 <malloc+0xf8>
         while(*s != 0){
- 61a:	02800593          	li	a1,40
- 61e:	bff1                	j	5fa <vprintf+0x16c>
+ 5f2:	02800593          	li	a1,40
+ 5f6:	bff1                	j	5d2 <vprintf+0x16c>
         putc(fd, va_arg(ap, uint));
- 620:	008b0913          	addi	s2,s6,8
- 624:	000b4583          	lbu	a1,0(s6)
- 628:	8556                	mv	a0,s5
- 62a:	00000097          	auipc	ra,0x0
- 62e:	d98080e7          	jalr	-616(ra) # 3c2 <putc>
- 632:	8b4a                	mv	s6,s2
+ 5f8:	008b0913          	addi	s2,s6,8
+ 5fc:	000b4583          	lbu	a1,0(s6)
+ 600:	8556                	mv	a0,s5
+ 602:	00000097          	auipc	ra,0x0
+ 606:	d98080e7          	jalr	-616(ra) # 39a <putc>
+ 60a:	8b4a                	mv	s6,s2
       state = 0;
- 634:	4981                	li	s3,0
- 636:	bd65                	j	4ee <vprintf+0x60>
+ 60c:	4981                	li	s3,0
+ 60e:	bd65                	j	4c6 <vprintf+0x60>
         putc(fd, c);
- 638:	85d2                	mv	a1,s4
- 63a:	8556                	mv	a0,s5
- 63c:	00000097          	auipc	ra,0x0
- 640:	d86080e7          	jalr	-634(ra) # 3c2 <putc>
+ 610:	85d2                	mv	a1,s4
+ 612:	8556                	mv	a0,s5
+ 614:	00000097          	auipc	ra,0x0
+ 618:	d86080e7          	jalr	-634(ra) # 39a <putc>
       state = 0;
- 644:	4981                	li	s3,0
- 646:	b565                	j	4ee <vprintf+0x60>
+ 61c:	4981                	li	s3,0
+ 61e:	b565                	j	4c6 <vprintf+0x60>
         s = va_arg(ap, char*);
- 648:	8b4e                	mv	s6,s3
+ 620:	8b4e                	mv	s6,s3
       state = 0;
- 64a:	4981                	li	s3,0
- 64c:	b54d                	j	4ee <vprintf+0x60>
+ 622:	4981                	li	s3,0
+ 624:	b54d                	j	4c6 <vprintf+0x60>
     }
   }
 }
- 64e:	70e6                	ld	ra,120(sp)
- 650:	7446                	ld	s0,112(sp)
- 652:	74a6                	ld	s1,104(sp)
- 654:	7906                	ld	s2,96(sp)
- 656:	69e6                	ld	s3,88(sp)
- 658:	6a46                	ld	s4,80(sp)
- 65a:	6aa6                	ld	s5,72(sp)
- 65c:	6b06                	ld	s6,64(sp)
- 65e:	7be2                	ld	s7,56(sp)
- 660:	7c42                	ld	s8,48(sp)
- 662:	7ca2                	ld	s9,40(sp)
- 664:	7d02                	ld	s10,32(sp)
- 666:	6de2                	ld	s11,24(sp)
- 668:	6109                	addi	sp,sp,128
- 66a:	8082                	ret
-
-000000000000066c <fprintf>:
+ 626:	70e6                	ld	ra,120(sp)
+ 628:	7446                	ld	s0,112(sp)
+ 62a:	74a6                	ld	s1,104(sp)
+ 62c:	7906                	ld	s2,96(sp)
+ 62e:	69e6                	ld	s3,88(sp)
+ 630:	6a46                	ld	s4,80(sp)
+ 632:	6aa6                	ld	s5,72(sp)
+ 634:	6b06                	ld	s6,64(sp)
+ 636:	7be2                	ld	s7,56(sp)
+ 638:	7c42                	ld	s8,48(sp)
+ 63a:	7ca2                	ld	s9,40(sp)
+ 63c:	7d02                	ld	s10,32(sp)
+ 63e:	6de2                	ld	s11,24(sp)
+ 640:	6109                	addi	sp,sp,128
+ 642:	8082                	ret
+
+0000000000000644 <fprintf>:
 
 void
 fprintf(int fd, const char *fmt, ...)
 {
- 66c:	715d                	addi	sp,sp,-80
- 66e:	ec06                	sd	ra,24(sp)
- 670:	e822                	sd	s0,16(sp)
- 672:	1000                	addi	s0,sp,32
- 674:	e010                	sd	a2,0(s0)
- 676:	e414                	sd	a3,8(s0)
- 678:	e818                	sd	a4,16(s0)
- 67a:	ec1c                	sd	a5,24(s0)
- 67c:	03043023          	sd	a6,32(s0)
- 680:	03143423          	sd	a7,40(s0)
+ 644:	715d                	addi	sp,sp,-80
+ 646:	ec06                	sd	ra,24(sp)
+ 648:	e822                	sd	s0,16(sp)
+ 64a:	1000                	addi	s0,sp,32
+ 64c:	e010                	sd	a2,0(s0)
+ 64e:	e414                	sd	a3,8(s0)
+ 650:	e818                	sd	a4,16(s0)
+ 652:	ec1c                	sd	a5,24(s0)
+ 654:	03043023          	sd	a6,32(s0)
+ 658:	03143423          	sd	a7,40(s0)
   va_list ap;
 
   va_start(ap, fmt);
- 684:	fe843423          	sd	s0,-24(s0)
+ 65c:	fe843423          	sd	s0,-24(s0)
   vprintf(fd, fmt, ap);
- 688:	8622                	mv	a2,s0
- 68a:	00000097          	auipc	ra,0x0
- 68e:	e04080e7          	jalr	-508(ra) # 48e <vprintf>
+ 660:	8622                	mv	a2,s0
+ 662:	00000097          	auipc	ra,0x0
+ 666:	e04080e7          	jalr	-508(ra) # 466 <vprintf>
 }
- 692:	60e2                	ld	ra,24(sp)
- 694:	6442                	ld	s0,16(sp)
- 696:	6161                	addi	sp,sp,80
- 698:	8082                	ret
+ 66a:	60e2                	ld	ra,24(sp)
+ 66c:	6442                	ld	s0,16(sp)
+ 66e:	6161                	addi	sp,sp,80
+ 670:	8082                	ret
 
-000000000000069a <printf>:
+0000000000000672 <printf>:
 
 void
 printf(const char *fmt, ...)
 {
- 69a:	711d                	addi	sp,sp,-96
- 69c:	ec06                	sd	ra,24(sp)
- 69e:	e822                	sd	s0,16(sp)
- 6a0:	1000                	addi	s0,sp,32
- 6a2:	e40c                	sd	a1,8(s0)
- 6a4:	e810                	sd	a2,16(s0)
- 6a6:	ec14                	sd	a3,24(s0)
- 6a8:	f018                	sd	a4,32(s0)
- 6aa:	f41c                	sd	a5,40(s0)
- 6ac:	03043823          	sd	a6,48(s0)
- 6b0:	03143c23          	sd	a7,56(s0)
+ 672:	711d                	addi	sp,sp,-96
+ 674:	ec06                	sd	ra,24(sp)
+ 676:	e822                	sd	s0,16(sp)
+ 678:	1000                	addi	s0,sp,32
+ 67a:	e40c                	sd	a1,8(s0)
+ 67c:	e810                	sd	a2,16(s0)
+ 67e:	ec14                	sd	a3,24(s0)
+ 680:	f018                	sd	a4,32(s0)
+ 682:	f41c                	sd	a5,40(s0)
+ 684:	03043823          	sd	a6,48(s0)
+ 688:	03143c23          	sd	a7,56(s0)
   va_list ap;
 
   va_start(ap, fmt);
- 6b4:	00840613          	addi	a2,s0,8
- 6b8:	fec43423          	sd	a2,-24(s0)
+ 68c:	00840613          	addi	a2,s0,8
+ 690:	fec43423          	sd	a2,-24(s0)
   vprintf(1, fmt, ap);
- 6bc:	85aa                	mv	a1,a0
- 6be:	4505                	li	a0,1
- 6c0:	00000097          	auipc	ra,0x0
- 6c4:	dce080e7          	jalr	-562(ra) # 48e <vprintf>
+ 694:	85aa                	mv	a1,a0
+ 696:	4505                	li	a0,1
+ 698:	00000097          	auipc	ra,0x0
+ 69c:	dce080e7          	jalr	-562(ra) # 466 <vprintf>
 }
- 6c8:	60e2                	ld	ra,24(sp)
- 6ca:	6442                	ld	s0,16(sp)
- 6cc:	6125                	addi	sp,sp,96
- 6ce:	8082                	ret
+ 6a0:	60e2                	ld	ra,24(sp)
+ 6a2:	6442                	ld	s0,16(sp)
+ 6a4:	6125                	addi	sp,sp,96
+ 6a6:	8082                	ret
 
-00000000000006d0 <free>:
+00000000000006a8 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 6d0:	1141                	addi	sp,sp,-16
- 6d2:	e422                	sd	s0,8(sp)
- 6d4:	0800                	addi	s0,sp,16
+ 6a8:	1141                	addi	sp,sp,-16
+ 6aa:	e422                	sd	s0,8(sp)
+ 6ac:	0800                	addi	s0,sp,16
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
- 6d6:	ff050693          	addi	a3,a0,-16
+ 6ae:	ff050693          	addi	a3,a0,-16
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6da:	00000797          	auipc	a5,0x0
- 6de:	1967b783          	ld	a5,406(a5) # 870 <freep>
- 6e2:	a805                	j	712 <free+0x42>
+ 6b2:	00000797          	auipc	a5,0x0
+ 6b6:	1967b783          	ld	a5,406(a5) # 848 <freep>
+ 6ba:	a805                	j	6ea <free+0x42>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
       break;
   if(bp + bp->s.size == p->s.ptr){
     bp->s.size += p->s.ptr->s.size;
- 6e4:	4618                	lw	a4,8(a2)
- 6e6:	9db9                	addw	a1,a1,a4
- 6e8:	feb52c23          	sw	a1,-8(a0)
+ 6bc:	4618                	lw	a4,8(a2)
+ 6be:	9db9                	addw	a1,a1,a4
+ 6c0:	feb52c23          	sw	a1,-8(a0)
     bp->s.ptr = p->s.ptr->s.ptr;
- 6ec:	6398                	ld	a4,0(a5)
- 6ee:	6318                	ld	a4,0(a4)
- 6f0:	fee53823          	sd	a4,-16(a0)
- 6f4:	a091                	j	738 <free+0x68>
+ 6c4:	6398                	ld	a4,0(a5)
+ 6c6:	6318                	ld	a4,0(a4)
+ 6c8:	fee53823          	sd	a4,-16(a0)
+ 6cc:	a091                	j	710 <free+0x68>
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
     p->s.size += bp->s.size;
- 6f6:	ff852703          	lw	a4,-8(a0)
- 6fa:	9e39                	addw	a2,a2,a4
- 6fc:	c790                	sw	a2,8(a5)
+ 6ce:	ff852703          	lw	a4,-8(a0)
+ 6d2:	9e39                	addw	a2,a2,a4
+ 6d4:	c790                	sw	a2,8(a5)
     p->s.ptr = bp->s.ptr;
- 6fe:	ff053703          	ld	a4,-16(a0)
- 702:	e398                	sd	a4,0(a5)
- 704:	a099                	j	74a <free+0x7a>
+ 6d6:	ff053703          	ld	a4,-16(a0)
+ 6da:	e398                	sd	a4,0(a5)
+ 6dc:	a099                	j	722 <free+0x7a>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 706:	6398                	ld	a4,0(a5)
- 708:	00e7e463          	bltu	a5,a4,710 <free+0x40>
- 70c:	00e6ea63          	bltu	a3,a4,720 <free+0x50>
+ 6de:	6398                	ld	a4,0(a5)
+ 6e0:	00e7e463          	bltu	a5,a4,6e8 <free+0x40>
+ 6e4:	00e6ea63          	bltu	a3,a4,6f8 <free+0x50>
 {
- 710:	87ba                	mv	a5,a4
+ 6e8:	87ba                	mv	a5,a4
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 712:	fed7fae3          	bgeu	a5,a3,706 <free+0x36>
- 716:	6398                	ld	a4,0(a5)
- 718:	00e6e463          	bltu	a3,a4,720 <free+0x50>
+ 6ea:	fed7fae3          	bgeu	a5,a3,6de <free+0x36>
+ 6ee:	6398                	ld	a4,0(a5)
+ 6f0:	00e6e463          	bltu	a3,a4,6f8 <free+0x50>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 71c:	fee7eae3          	bltu	a5,a4,710 <free+0x40>
+ 6f4:	fee7eae3          	bltu	a5,a4,6e8 <free+0x40>
   if(bp + bp->s.size == p->s.ptr){
- 720:	ff852583          	lw	a1,-8(a0)
- 724:	6390                	ld	a2,0(a5)
- 726:	02059713          	slli	a4,a1,0x20
- 72a:	9301                	srli	a4,a4,0x20
- 72c:	0712                	slli	a4,a4,0x4
- 72e:	9736                	add	a4,a4,a3
- 730:	fae60ae3          	beq	a2,a4,6e4 <free+0x14>
+ 6f8:	ff852583          	lw	a1,-8(a0)
+ 6fc:	6390                	ld	a2,0(a5)
+ 6fe:	02059713          	slli	a4,a1,0x20
+ 702:	9301                	srli	a4,a4,0x20
+ 704:	0712                	slli	a4,a4,0x4
+ 706:	9736                	add	a4,a4,a3
+ 708:	fae60ae3          	beq	a2,a4,6bc <free+0x14>
     bp->s.ptr = p->s.ptr;
- 734:	fec53823          	sd	a2,-16(a0)
+ 70c:	fec53823          	sd	a2,-16(a0)
   if(p + p->s.size == bp){
- 738:	4790                	lw	a2,8(a5)
- 73a:	02061713          	slli	a4,a2,0x20
- 73e:	9301                	srli	a4,a4,0x20
- 740:	0712                	slli	a4,a4,0x4
- 742:	973e                	add	a4,a4,a5
- 744:	fae689e3          	beq	a3,a4,6f6 <free+0x26>
+ 710:	4790                	lw	a2,8(a5)
+ 712:	02061713          	slli	a4,a2,0x20
+ 716:	9301                	srli	a4,a4,0x20
+ 718:	0712                	slli	a4,a4,0x4
+ 71a:	973e                	add	a4,a4,a5
+ 71c:	fae689e3          	beq	a3,a4,6ce <free+0x26>
   } else
     p->s.ptr = bp;
- 748:	e394                	sd	a3,0(a5)
+ 720:	e394                	sd	a3,0(a5)
   freep = p;
- 74a:	00000717          	auipc	a4,0x0
- 74e:	12f73323          	sd	a5,294(a4) # 870 <freep>
+ 722:	00000717          	auipc	a4,0x0
+ 726:	12f73323          	sd	a5,294(a4) # 848 <freep>
 }
- 752:	6422                	ld	s0,8(sp)
- 754:	0141                	addi	sp,sp,16
- 756:	8082                	ret
+ 72a:	6422                	ld	s0,8(sp)
+ 72c:	0141                	addi	sp,sp,16
+ 72e:	8082                	ret
 
-0000000000000758 <malloc>:
+0000000000000730 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 758:	7139                	addi	sp,sp,-64
- 75a:	fc06                	sd	ra,56(sp)
- 75c:	f822                	sd	s0,48(sp)
- 75e:	f426                	sd	s1,40(sp)
- 760:	f04a                	sd	s2,32(sp)
- 762:	ec4e                	sd	s3,24(sp)
- 764:	e852                	sd	s4,16(sp)
- 766:	e456                	sd	s5,8(sp)
- 768:	e05a                	sd	s6,0(sp)
- 76a:	0080                	addi	s0,sp,64
+ 730:	7139                	addi	sp,sp,-64
+ 732:	fc06                	sd	ra,56(sp)
+ 734:	f822                	sd	s0,48(sp)
+ 736:	f426                	sd	s1,40(sp)
+ 738:	f04a                	sd	s2,32(sp)
+ 73a:	ec4e                	sd	s3,24(sp)
+ 73c:	e852                	sd	s4,16(sp)
+ 73e:	e456                	sd	s5,8(sp)
+ 740:	e05a                	sd	s6,0(sp)
+ 742:	0080                	addi	s0,sp,64
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 76c:	02051493          	slli	s1,a0,0x20
- 770:	9081                	srli	s1,s1,0x20
- 772:	04bd                	addi	s1,s1,15
- 774:	8091                	srli	s1,s1,0x4
- 776:	0014899b          	addiw	s3,s1,1
- 77a:	0485                	addi	s1,s1,1
+ 744:	02051493          	slli	s1,a0,0x20
+ 748:	9081                	srli	s1,s1,0x20
+ 74a:	04bd                	addi	s1,s1,15
+ 74c:	8091                	srli	s1,s1,0x4
+ 74e:	0014899b          	addiw	s3,s1,1
+ 752:	0485                	addi	s1,s1,1
   if((prevp = freep) == 0){
- 77c:	00000517          	auipc	a0,0x0
- 780:	0f453503          	ld	a0,244(a0) # 870 <freep>
- 784:	c515                	beqz	a0,7b0 <malloc+0x58>
+ 754:	00000517          	auipc	a0,0x0
+ 758:	0f453503          	ld	a0,244(a0) # 848 <freep>
+ 75c:	c515                	beqz	a0,788 <malloc+0x58>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 786:	611c                	ld	a5,0(a0)
+ 75e:	611c                	ld	a5,0(a0)
     if(p->s.size >= nunits){
- 788:	4798                	lw	a4,8(a5)
- 78a:	02977f63          	bgeu	a4,s1,7c8 <malloc+0x70>
- 78e:	8a4e                	mv	s4,s3
- 790:	0009871b          	sext.w	a4,s3
- 794:	6685                	lui	a3,0x1
- 796:	00d77363          	bgeu	a4,a3,79c <malloc+0x44>
- 79a:	6a05                	lui	s4,0x1
- 79c:	000a0b1b          	sext.w	s6,s4
+ 760:	4798                	lw	a4,8(a5)
+ 762:	02977f63          	bgeu	a4,s1,7a0 <malloc+0x70>
+ 766:	8a4e                	mv	s4,s3
+ 768:	0009871b          	sext.w	a4,s3
+ 76c:	6685                	lui	a3,0x1
+ 76e:	00d77363          	bgeu	a4,a3,774 <malloc+0x44>
+ 772:	6a05                	lui	s4,0x1
+ 774:	000a0b1b          	sext.w	s6,s4
   p = sbrk(nu * sizeof(Header));
- 7a0:	004a1a1b          	slliw	s4,s4,0x4
+ 778:	004a1a1b          	slliw	s4,s4,0x4
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 7a4:	00000917          	auipc	s2,0x0
- 7a8:	0cc90913          	addi	s2,s2,204 # 870 <freep>
+ 77c:	00000917          	auipc	s2,0x0
+ 780:	0cc90913          	addi	s2,s2,204 # 848 <freep>
   if(p == (char*)-1)
- 7ac:	5afd                	li	s5,-1
- 7ae:	a88d                	j	820 <malloc+0xc8>
+ 784:	5afd                	li	s5,-1
+ 786:	a88d                	j	7f8 <malloc+0xc8>
     base.s.ptr = freep = prevp = &base;
- 7b0:	00000797          	auipc	a5,0x0
- 7b4:	0c878793          	addi	a5,a5,200 # 878 <base>
- 7b8:	00000717          	auipc	a4,0x0
- 7bc:	0af73c23          	sd	a5,184(a4) # 870 <freep>
- 7c0:	e39c                	sd	a5,0(a5)
+ 788:	00000797          	auipc	a5,0x0
+ 78c:	0c878793          	addi	a5,a5,200 # 850 <base>
+ 790:	00000717          	auipc	a4,0x0
+ 794:	0af73c23          	sd	a5,184(a4) # 848 <freep>
+ 798:	e39c                	sd	a5,0(a5)
     base.s.size = 0;
- 7c2:	0007a423          	sw	zero,8(a5)
+ 79a:	0007a423          	sw	zero,8(a5)
     if(p->s.size >= nunits){
- 7c6:	b7e1                	j	78e <malloc+0x36>
+ 79e:	b7e1                	j	766 <malloc+0x36>
       if(p->s.size == nunits)
- 7c8:	02e48b63          	beq	s1,a4,7fe <malloc+0xa6>
+ 7a0:	02e48b63          	beq	s1,a4,7d6 <malloc+0xa6>
         p->s.size -= nunits;
- 7cc:	4137073b          	subw	a4,a4,s3
- 7d0:	c798                	sw	a4,8(a5)
+ 7a4:	4137073b          	subw	a4,a4,s3
+ 7a8:	c798                	sw	a4,8(a5)
         p += p->s.size;
- 7d2:	1702                	slli	a4,a4,0x20
- 7d4:	9301                	srli	a4,a4,0x20
- 7d6:	0712                	slli	a4,a4,0x4
- 7d8:	97ba                	add	a5,a5,a4
+ 7aa:	1702                	slli	a4,a4,0x20
+ 7ac:	9301                	srli	a4,a4,0x20
+ 7ae:	0712                	slli	a4,a4,0x4
+ 7b0:	97ba                	add	a5,a5,a4
         p->s.size = nunits;
- 7da:	0137a423          	sw	s3,8(a5)
+ 7b2:	0137a423          	sw	s3,8(a5)
       freep = prevp;
- 7de:	00000717          	auipc	a4,0x0
- 7e2:	08a73923          	sd	a0,146(a4) # 870 <freep>
+ 7b6:	00000717          	auipc	a4,0x0
+ 7ba:	08a73923          	sd	a0,146(a4) # 848 <freep>
       return (void*)(p + 1);
- 7e6:	01078513          	addi	a0,a5,16
+ 7be:	01078513          	addi	a0,a5,16
       if((p = morecore(nunits)) == 0)
         return 0;
   }
 }
- 7ea:	70e2                	ld	ra,56(sp)
- 7ec:	7442                	ld	s0,48(sp)
- 7ee:	74a2                	ld	s1,40(sp)
- 7f0:	7902                	ld	s2,32(sp)
- 7f2:	69e2                	ld	s3,24(sp)
- 7f4:	6a42                	ld	s4,16(sp)
- 7f6:	6aa2                	ld	s5,8(sp)
- 7f8:	6b02                	ld	s6,0(sp)
- 7fa:	6121                	addi	sp,sp,64
- 7fc:	8082                	ret
+ 7c2:	70e2                	ld	ra,56(sp)
+ 7c4:	7442                	ld	s0,48(sp)
+ 7c6:	74a2                	ld	s1,40(sp)
+ 7c8:	7902                	ld	s2,32(sp)
+ 7ca:	69e2                	ld	s3,24(sp)
+ 7cc:	6a42                	ld	s4,16(sp)
+ 7ce:	6aa2                	ld	s5,8(sp)
+ 7d0:	6b02                	ld	s6,0(sp)
+ 7d2:	6121                	addi	sp,sp,64
+ 7d4:	8082                	ret
         prevp->s.ptr = p->s.ptr;
- 7fe:	6398                	ld	a4,0(a5)
- 800:	e118                	sd	a4,0(a0)
- 802:	bff1                	j	7de <malloc+0x86>
+ 7d6:	6398                	ld	a4,0(a5)
+ 7d8:	e118                	sd	a4,0(a0)
+ 7da:	bff1                	j	7b6 <malloc+0x86>
   hp->s.size = nu;
- 804:	01652423          	sw	s6,8(a0)
+ 7dc:	01652423          	sw	s6,8(a0)
   free((void*)(hp + 1));
- 808:	0541                	addi	a0,a0,16
- 80a:	00000097          	auipc	ra,0x0
- 80e:	ec6080e7          	jalr	-314(ra) # 6d0 <free>
+ 7e0:	0541                	addi	a0,a0,16
+ 7e2:	00000097          	auipc	ra,0x0
+ 7e6:	ec6080e7          	jalr	-314(ra) # 6a8 <free>
   return freep;
- 812:	00093503          	ld	a0,0(s2)
+ 7ea:	00093503          	ld	a0,0(s2)
       if((p = morecore(nunits)) == 0)
- 816:	d971                	beqz	a0,7ea <malloc+0x92>
+ 7ee:	d971                	beqz	a0,7c2 <malloc+0x92>
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 818:	611c                	ld	a5,0(a0)
+ 7f0:	611c                	ld	a5,0(a0)
     if(p->s.size >= nunits){
- 81a:	4798                	lw	a4,8(a5)
- 81c:	fa9776e3          	bgeu	a4,s1,7c8 <malloc+0x70>
+ 7f2:	4798                	lw	a4,8(a5)
+ 7f4:	fa9776e3          	bgeu	a4,s1,7a0 <malloc+0x70>
     if(p == freep)
- 820:	00093703          	ld	a4,0(s2)
- 824:	853e                	mv	a0,a5
- 826:	fef719e3          	bne	a4,a5,818 <malloc+0xc0>
+ 7f8:	00093703          	ld	a4,0(s2)
+ 7fc:	853e                	mv	a0,a5
+ 7fe:	fef719e3          	bne	a4,a5,7f0 <malloc+0xc0>
   p = sbrk(nu * sizeof(Header));
- 82a:	8552                	mv	a0,s4
- 82c:	00000097          	auipc	ra,0x0
- 830:	b56080e7          	jalr	-1194(ra) # 382 <sbrk>
+ 802:	8552                	mv	a0,s4
+ 804:	00000097          	auipc	ra,0x0
+ 808:	b7e080e7          	jalr	-1154(ra) # 382 <sbrk>
   if(p == (char*)-1)
- 834:	fd5518e3          	bne	a0,s5,804 <malloc+0xac>
+ 80c:	fd5518e3          	bne	a0,s5,7dc <malloc+0xac>
         return 0;
- 838:	4501                	li	a0,0
- 83a:	bf45                	j	7ea <malloc+0x92>
+ 810:	4501                	li	a0,0
+ 812:	bf45                	j	7c2 <malloc+0x92>
diff --git a/user/echo.o b/user/echo.o
index 3b3e438..219504b 100644
Binary files a/user/echo.o and b/user/echo.o differ
diff --git a/user/echo.sym b/user/echo.sym
index 1b4c679..893e202 100644
--- a/user/echo.sym
+++ b/user/echo.sym
@@ -1,7 +1,7 @@
 0000000000000000 .text
-0000000000000840 .rodata
-0000000000000870 .sbss
-0000000000000878 .bss
+0000000000000818 .rodata
+0000000000000848 .sbss
+0000000000000850 .bss
 0000000000000000 .comment
 0000000000000000 .debug_aranges
 0000000000000000 .debug_info
@@ -14,53 +14,48 @@
 0000000000000000 echo.c
 0000000000000000 ulib.c
 0000000000000000 printf.c
-00000000000003c2 putc
-00000000000003e4 printint
-0000000000000858 digits
+000000000000039a putc
+00000000000003bc printint
+0000000000000830 digits
 0000000000000000 umalloc.c
-0000000000000870 freep
-0000000000000878 base
+0000000000000848 freep
+0000000000000850 base
 0000000000000084 strcpy
-000000000000069a printf
-0000000000001069 __global_pointer$
+0000000000000672 printf
+0000000000001041 __global_pointer$
 0000000000000244 memmove
 0000000000000342 mknod
 0000000000000140 gets
-0000000000000869 __SDATA_BEGIN__
+0000000000000841 __SDATA_BEGIN__
 000000000000037a getpid
 00000000000002da memcpy
-00000000000003aa print_stats
-0000000000000758 malloc
+0000000000000730 malloc
 000000000000038a sleep
 000000000000030a pipe
 000000000000031a write
 0000000000000352 fstat
-000000000000066c fprintf
+0000000000000644 fprintf
 000000000000032a kill
-000000000000048e vprintf
+0000000000000466 vprintf
 000000000000036a chdir
-000000000000039a pause_system
 0000000000000332 exec
 0000000000000302 wait
 0000000000000312 read
 000000000000034a unlink
-00000000000003ba set_cpu
-00000000000003b2 get_cpu
 00000000000002a0 memcmp
 00000000000002f2 fork
-00000000000003a2 kill_system
-0000000000000888 __BSS_END__
+0000000000000860 __BSS_END__
 0000000000000382 sbrk
 0000000000000392 uptime
-0000000000000869 __bss_start
+0000000000000841 __bss_start
 00000000000000f6 memset
 0000000000000000 main
 00000000000000a0 strcmp
 0000000000000372 dup
-0000000000000869 __DATA_BEGIN__
+0000000000000841 __DATA_BEGIN__
 00000000000001b4 stat
-0000000000000869 _edata
-0000000000000888 _end
+0000000000000841 _edata
+0000000000000860 _end
 000000000000035a link
 00000000000002fa exit
 00000000000001fa atoi
@@ -69,4 +64,4 @@
 000000000000011c strchr
 0000000000000362 mkdir
 0000000000000322 close
-00000000000006d0 free
+00000000000006a8 free
diff --git a/user/env.asm b/user/env.asm
deleted file mode 100644
index f7000de..0000000
--- a/user/env.asm
+++ /dev/null
@@ -1,1470 +0,0 @@
-
-user/_env:     file format elf64-littleriscv
-
-
-Disassembly of section .text:
-
-0000000000000000 <env>:
-//     }
-//     printf("\n");
-  
-// }
-
-void env(int size, int interval, char* env_name) {
-   0:	1141                	addi	sp,sp,-16
-   2:	e406                	sd	ra,8(sp)
-   4:	e022                	sd	s0,0(sp)
-   6:	0800                	addi	s0,sp,16
-    int n_forks = 2;
-    int pid;
-    for (int i = 0; i < n_forks; i++) {
-       pid = fork();
-   8:	00000097          	auipc	ra,0x0
-   c:	356080e7          	jalr	854(ra) # 35e <fork>
-       if (pid != 0)
-  10:	e911                	bnez	a0,24 <env+0x24>
-       pid = fork();
-  12:	00000097          	auipc	ra,0x0
-  16:	34c080e7          	jalr	844(ra) # 35e <fork>
-       if (pid != 0)
-  1a:	ed0d                	bnez	a0,54 <env+0x54>
-           pid = fork();
-           if (pid != 0)
-                printf("PID: %d\n", pid);
-       }
-    }
-}
-  1c:	60a2                	ld	ra,8(sp)
-  1e:	6402                	ld	s0,0(sp)
-  20:	0141                	addi	sp,sp,16
-  22:	8082                	ret
-           printf("PID: %d\n", pid);
-  24:	85aa                	mv	a1,a0
-  26:	00001517          	auipc	a0,0x1
-  2a:	88250513          	addi	a0,a0,-1918 # 8a8 <malloc+0xe4>
-  2e:	00000097          	auipc	ra,0x0
-  32:	6d8080e7          	jalr	1752(ra) # 706 <printf>
-           pid = fork();
-  36:	00000097          	auipc	ra,0x0
-  3a:	328080e7          	jalr	808(ra) # 35e <fork>
-           if (pid != 0)
-  3e:	d971                	beqz	a0,12 <env+0x12>
-                printf("PID: %d\n", pid);
-  40:	85aa                	mv	a1,a0
-  42:	00001517          	auipc	a0,0x1
-  46:	86650513          	addi	a0,a0,-1946 # 8a8 <malloc+0xe4>
-  4a:	00000097          	auipc	ra,0x0
-  4e:	6bc080e7          	jalr	1724(ra) # 706 <printf>
-  52:	b7c1                	j	12 <env+0x12>
-           printf("PID: %d\n", pid);
-  54:	85aa                	mv	a1,a0
-  56:	00001517          	auipc	a0,0x1
-  5a:	85250513          	addi	a0,a0,-1966 # 8a8 <malloc+0xe4>
-  5e:	00000097          	auipc	ra,0x0
-  62:	6a8080e7          	jalr	1704(ra) # 706 <printf>
-           pid = fork();
-  66:	00000097          	auipc	ra,0x0
-  6a:	2f8080e7          	jalr	760(ra) # 35e <fork>
-           if (pid != 0)
-  6e:	d55d                	beqz	a0,1c <env+0x1c>
-                printf("PID: %d\n", pid);
-  70:	85aa                	mv	a1,a0
-  72:	00001517          	auipc	a0,0x1
-  76:	83650513          	addi	a0,a0,-1994 # 8a8 <malloc+0xe4>
-  7a:	00000097          	auipc	ra,0x0
-  7e:	68c080e7          	jalr	1676(ra) # 706 <printf>
-}
-  82:	bf69                	j	1c <env+0x1c>
-
-0000000000000084 <env_large>:
-
-void env_large() {
-  84:	1141                	addi	sp,sp,-16
-  86:	e406                	sd	ra,8(sp)
-  88:	e022                	sd	s0,0(sp)
-  8a:	0800                	addi	s0,sp,16
-    env(10e6, 10e6, "env_large");
-  8c:	00001617          	auipc	a2,0x1
-  90:	82c60613          	addi	a2,a2,-2004 # 8b8 <malloc+0xf4>
-  94:	009895b7          	lui	a1,0x989
-  98:	68058593          	addi	a1,a1,1664 # 989680 <__global_pointer$+0x98858f>
-  9c:	852e                	mv	a0,a1
-  9e:	00000097          	auipc	ra,0x0
-  a2:	f62080e7          	jalr	-158(ra) # 0 <env>
-}
-  a6:	60a2                	ld	ra,8(sp)
-  a8:	6402                	ld	s0,0(sp)
-  aa:	0141                	addi	sp,sp,16
-  ac:	8082                	ret
-
-00000000000000ae <env_freq>:
-
-void env_freq() {
-  ae:	1141                	addi	sp,sp,-16
-  b0:	e406                	sd	ra,8(sp)
-  b2:	e022                	sd	s0,0(sp)
-  b4:	0800                	addi	s0,sp,16
-    env(10e1, 10e1, "env_freq");
-  b6:	00001617          	auipc	a2,0x1
-  ba:	81260613          	addi	a2,a2,-2030 # 8c8 <malloc+0x104>
-  be:	06400593          	li	a1,100
-  c2:	06400513          	li	a0,100
-  c6:	00000097          	auipc	ra,0x0
-  ca:	f3a080e7          	jalr	-198(ra) # 0 <env>
-}
-  ce:	60a2                	ld	ra,8(sp)
-  d0:	6402                	ld	s0,0(sp)
-  d2:	0141                	addi	sp,sp,16
-  d4:	8082                	ret
-
-00000000000000d6 <main>:
-
-
-int
-main(int argc, char *argv[]){
-  d6:	1141                	addi	sp,sp,-16
-  d8:	e406                	sd	ra,8(sp)
-  da:	e022                	sd	s0,0(sp)
-  dc:	0800                	addi	s0,sp,16
-    env_large();
-  de:	00000097          	auipc	ra,0x0
-  e2:	fa6080e7          	jalr	-90(ra) # 84 <env_large>
-    // env_freq();
-    // print_stats();
-   
-    
-    exit(0);
-  e6:	4501                	li	a0,0
-  e8:	00000097          	auipc	ra,0x0
-  ec:	27e080e7          	jalr	638(ra) # 366 <exit>
-
-00000000000000f0 <strcpy>:
-#include "kernel/fcntl.h"
-#include "user/user.h"
-
-char*
-strcpy(char *s, const char *t)
-{
-  f0:	1141                	addi	sp,sp,-16
-  f2:	e422                	sd	s0,8(sp)
-  f4:	0800                	addi	s0,sp,16
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
-  f6:	87aa                	mv	a5,a0
-  f8:	0585                	addi	a1,a1,1
-  fa:	0785                	addi	a5,a5,1
-  fc:	fff5c703          	lbu	a4,-1(a1)
- 100:	fee78fa3          	sb	a4,-1(a5)
- 104:	fb75                	bnez	a4,f8 <strcpy+0x8>
-    ;
-  return os;
-}
- 106:	6422                	ld	s0,8(sp)
- 108:	0141                	addi	sp,sp,16
- 10a:	8082                	ret
-
-000000000000010c <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
- 10c:	1141                	addi	sp,sp,-16
- 10e:	e422                	sd	s0,8(sp)
- 110:	0800                	addi	s0,sp,16
-  while(*p && *p == *q)
- 112:	00054783          	lbu	a5,0(a0)
- 116:	cb91                	beqz	a5,12a <strcmp+0x1e>
- 118:	0005c703          	lbu	a4,0(a1)
- 11c:	00f71763          	bne	a4,a5,12a <strcmp+0x1e>
-    p++, q++;
- 120:	0505                	addi	a0,a0,1
- 122:	0585                	addi	a1,a1,1
-  while(*p && *p == *q)
- 124:	00054783          	lbu	a5,0(a0)
- 128:	fbe5                	bnez	a5,118 <strcmp+0xc>
-  return (uchar)*p - (uchar)*q;
- 12a:	0005c503          	lbu	a0,0(a1)
-}
- 12e:	40a7853b          	subw	a0,a5,a0
- 132:	6422                	ld	s0,8(sp)
- 134:	0141                	addi	sp,sp,16
- 136:	8082                	ret
-
-0000000000000138 <strlen>:
-
-uint
-strlen(const char *s)
-{
- 138:	1141                	addi	sp,sp,-16
- 13a:	e422                	sd	s0,8(sp)
- 13c:	0800                	addi	s0,sp,16
-  int n;
-
-  for(n = 0; s[n]; n++)
- 13e:	00054783          	lbu	a5,0(a0)
- 142:	cf91                	beqz	a5,15e <strlen+0x26>
- 144:	0505                	addi	a0,a0,1
- 146:	87aa                	mv	a5,a0
- 148:	4685                	li	a3,1
- 14a:	9e89                	subw	a3,a3,a0
- 14c:	00f6853b          	addw	a0,a3,a5
- 150:	0785                	addi	a5,a5,1
- 152:	fff7c703          	lbu	a4,-1(a5)
- 156:	fb7d                	bnez	a4,14c <strlen+0x14>
-    ;
-  return n;
-}
- 158:	6422                	ld	s0,8(sp)
- 15a:	0141                	addi	sp,sp,16
- 15c:	8082                	ret
-  for(n = 0; s[n]; n++)
- 15e:	4501                	li	a0,0
- 160:	bfe5                	j	158 <strlen+0x20>
-
-0000000000000162 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 162:	1141                	addi	sp,sp,-16
- 164:	e422                	sd	s0,8(sp)
- 166:	0800                	addi	s0,sp,16
-  char *cdst = (char *) dst;
-  int i;
-  for(i = 0; i < n; i++){
- 168:	ce09                	beqz	a2,182 <memset+0x20>
- 16a:	87aa                	mv	a5,a0
- 16c:	fff6071b          	addiw	a4,a2,-1
- 170:	1702                	slli	a4,a4,0x20
- 172:	9301                	srli	a4,a4,0x20
- 174:	0705                	addi	a4,a4,1
- 176:	972a                	add	a4,a4,a0
-    cdst[i] = c;
- 178:	00b78023          	sb	a1,0(a5)
-  for(i = 0; i < n; i++){
- 17c:	0785                	addi	a5,a5,1
- 17e:	fee79de3          	bne	a5,a4,178 <memset+0x16>
-  }
-  return dst;
-}
- 182:	6422                	ld	s0,8(sp)
- 184:	0141                	addi	sp,sp,16
- 186:	8082                	ret
-
-0000000000000188 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 188:	1141                	addi	sp,sp,-16
- 18a:	e422                	sd	s0,8(sp)
- 18c:	0800                	addi	s0,sp,16
-  for(; *s; s++)
- 18e:	00054783          	lbu	a5,0(a0)
- 192:	cb99                	beqz	a5,1a8 <strchr+0x20>
-    if(*s == c)
- 194:	00f58763          	beq	a1,a5,1a2 <strchr+0x1a>
-  for(; *s; s++)
- 198:	0505                	addi	a0,a0,1
- 19a:	00054783          	lbu	a5,0(a0)
- 19e:	fbfd                	bnez	a5,194 <strchr+0xc>
-      return (char*)s;
-  return 0;
- 1a0:	4501                	li	a0,0
-}
- 1a2:	6422                	ld	s0,8(sp)
- 1a4:	0141                	addi	sp,sp,16
- 1a6:	8082                	ret
-  return 0;
- 1a8:	4501                	li	a0,0
- 1aa:	bfe5                	j	1a2 <strchr+0x1a>
-
-00000000000001ac <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 1ac:	711d                	addi	sp,sp,-96
- 1ae:	ec86                	sd	ra,88(sp)
- 1b0:	e8a2                	sd	s0,80(sp)
- 1b2:	e4a6                	sd	s1,72(sp)
- 1b4:	e0ca                	sd	s2,64(sp)
- 1b6:	fc4e                	sd	s3,56(sp)
- 1b8:	f852                	sd	s4,48(sp)
- 1ba:	f456                	sd	s5,40(sp)
- 1bc:	f05a                	sd	s6,32(sp)
- 1be:	ec5e                	sd	s7,24(sp)
- 1c0:	1080                	addi	s0,sp,96
- 1c2:	8baa                	mv	s7,a0
- 1c4:	8a2e                	mv	s4,a1
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 1c6:	892a                	mv	s2,a0
- 1c8:	4481                	li	s1,0
-    cc = read(0, &c, 1);
-    if(cc < 1)
-      break;
-    buf[i++] = c;
-    if(c == '\n' || c == '\r')
- 1ca:	4aa9                	li	s5,10
- 1cc:	4b35                	li	s6,13
-  for(i=0; i+1 < max; ){
- 1ce:	89a6                	mv	s3,s1
- 1d0:	2485                	addiw	s1,s1,1
- 1d2:	0344d863          	bge	s1,s4,202 <gets+0x56>
-    cc = read(0, &c, 1);
- 1d6:	4605                	li	a2,1
- 1d8:	faf40593          	addi	a1,s0,-81
- 1dc:	4501                	li	a0,0
- 1de:	00000097          	auipc	ra,0x0
- 1e2:	1a0080e7          	jalr	416(ra) # 37e <read>
-    if(cc < 1)
- 1e6:	00a05e63          	blez	a0,202 <gets+0x56>
-    buf[i++] = c;
- 1ea:	faf44783          	lbu	a5,-81(s0)
- 1ee:	00f90023          	sb	a5,0(s2)
-    if(c == '\n' || c == '\r')
- 1f2:	01578763          	beq	a5,s5,200 <gets+0x54>
- 1f6:	0905                	addi	s2,s2,1
- 1f8:	fd679be3          	bne	a5,s6,1ce <gets+0x22>
-  for(i=0; i+1 < max; ){
- 1fc:	89a6                	mv	s3,s1
- 1fe:	a011                	j	202 <gets+0x56>
- 200:	89a6                	mv	s3,s1
-      break;
-  }
-  buf[i] = '\0';
- 202:	99de                	add	s3,s3,s7
- 204:	00098023          	sb	zero,0(s3)
-  return buf;
-}
- 208:	855e                	mv	a0,s7
- 20a:	60e6                	ld	ra,88(sp)
- 20c:	6446                	ld	s0,80(sp)
- 20e:	64a6                	ld	s1,72(sp)
- 210:	6906                	ld	s2,64(sp)
- 212:	79e2                	ld	s3,56(sp)
- 214:	7a42                	ld	s4,48(sp)
- 216:	7aa2                	ld	s5,40(sp)
- 218:	7b02                	ld	s6,32(sp)
- 21a:	6be2                	ld	s7,24(sp)
- 21c:	6125                	addi	sp,sp,96
- 21e:	8082                	ret
-
-0000000000000220 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 220:	1101                	addi	sp,sp,-32
- 222:	ec06                	sd	ra,24(sp)
- 224:	e822                	sd	s0,16(sp)
- 226:	e426                	sd	s1,8(sp)
- 228:	e04a                	sd	s2,0(sp)
- 22a:	1000                	addi	s0,sp,32
- 22c:	892e                	mv	s2,a1
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 22e:	4581                	li	a1,0
- 230:	00000097          	auipc	ra,0x0
- 234:	176080e7          	jalr	374(ra) # 3a6 <open>
-  if(fd < 0)
- 238:	02054563          	bltz	a0,262 <stat+0x42>
- 23c:	84aa                	mv	s1,a0
-    return -1;
-  r = fstat(fd, st);
- 23e:	85ca                	mv	a1,s2
- 240:	00000097          	auipc	ra,0x0
- 244:	17e080e7          	jalr	382(ra) # 3be <fstat>
- 248:	892a                	mv	s2,a0
-  close(fd);
- 24a:	8526                	mv	a0,s1
- 24c:	00000097          	auipc	ra,0x0
- 250:	142080e7          	jalr	322(ra) # 38e <close>
-  return r;
-}
- 254:	854a                	mv	a0,s2
- 256:	60e2                	ld	ra,24(sp)
- 258:	6442                	ld	s0,16(sp)
- 25a:	64a2                	ld	s1,8(sp)
- 25c:	6902                	ld	s2,0(sp)
- 25e:	6105                	addi	sp,sp,32
- 260:	8082                	ret
-    return -1;
- 262:	597d                	li	s2,-1
- 264:	bfc5                	j	254 <stat+0x34>
-
-0000000000000266 <atoi>:
-
-int
-atoi(const char *s)
-{
- 266:	1141                	addi	sp,sp,-16
- 268:	e422                	sd	s0,8(sp)
- 26a:	0800                	addi	s0,sp,16
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 26c:	00054603          	lbu	a2,0(a0)
- 270:	fd06079b          	addiw	a5,a2,-48
- 274:	0ff7f793          	andi	a5,a5,255
- 278:	4725                	li	a4,9
- 27a:	02f76963          	bltu	a4,a5,2ac <atoi+0x46>
- 27e:	86aa                	mv	a3,a0
-  n = 0;
- 280:	4501                	li	a0,0
-  while('0' <= *s && *s <= '9')
- 282:	45a5                	li	a1,9
-    n = n*10 + *s++ - '0';
- 284:	0685                	addi	a3,a3,1
- 286:	0025179b          	slliw	a5,a0,0x2
- 28a:	9fa9                	addw	a5,a5,a0
- 28c:	0017979b          	slliw	a5,a5,0x1
- 290:	9fb1                	addw	a5,a5,a2
- 292:	fd07851b          	addiw	a0,a5,-48
-  while('0' <= *s && *s <= '9')
- 296:	0006c603          	lbu	a2,0(a3)
- 29a:	fd06071b          	addiw	a4,a2,-48
- 29e:	0ff77713          	andi	a4,a4,255
- 2a2:	fee5f1e3          	bgeu	a1,a4,284 <atoi+0x1e>
-  return n;
-}
- 2a6:	6422                	ld	s0,8(sp)
- 2a8:	0141                	addi	sp,sp,16
- 2aa:	8082                	ret
-  n = 0;
- 2ac:	4501                	li	a0,0
- 2ae:	bfe5                	j	2a6 <atoi+0x40>
-
-00000000000002b0 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 2b0:	1141                	addi	sp,sp,-16
- 2b2:	e422                	sd	s0,8(sp)
- 2b4:	0800                	addi	s0,sp,16
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  if (src > dst) {
- 2b6:	02b57663          	bgeu	a0,a1,2e2 <memmove+0x32>
-    while(n-- > 0)
- 2ba:	02c05163          	blez	a2,2dc <memmove+0x2c>
- 2be:	fff6079b          	addiw	a5,a2,-1
- 2c2:	1782                	slli	a5,a5,0x20
- 2c4:	9381                	srli	a5,a5,0x20
- 2c6:	0785                	addi	a5,a5,1
- 2c8:	97aa                	add	a5,a5,a0
-  dst = vdst;
- 2ca:	872a                	mv	a4,a0
-      *dst++ = *src++;
- 2cc:	0585                	addi	a1,a1,1
- 2ce:	0705                	addi	a4,a4,1
- 2d0:	fff5c683          	lbu	a3,-1(a1)
- 2d4:	fed70fa3          	sb	a3,-1(a4)
-    while(n-- > 0)
- 2d8:	fee79ae3          	bne	a5,a4,2cc <memmove+0x1c>
-    src += n;
-    while(n-- > 0)
-      *--dst = *--src;
-  }
-  return vdst;
-}
- 2dc:	6422                	ld	s0,8(sp)
- 2de:	0141                	addi	sp,sp,16
- 2e0:	8082                	ret
-    dst += n;
- 2e2:	00c50733          	add	a4,a0,a2
-    src += n;
- 2e6:	95b2                	add	a1,a1,a2
-    while(n-- > 0)
- 2e8:	fec05ae3          	blez	a2,2dc <memmove+0x2c>
- 2ec:	fff6079b          	addiw	a5,a2,-1
- 2f0:	1782                	slli	a5,a5,0x20
- 2f2:	9381                	srli	a5,a5,0x20
- 2f4:	fff7c793          	not	a5,a5
- 2f8:	97ba                	add	a5,a5,a4
-      *--dst = *--src;
- 2fa:	15fd                	addi	a1,a1,-1
- 2fc:	177d                	addi	a4,a4,-1
- 2fe:	0005c683          	lbu	a3,0(a1)
- 302:	00d70023          	sb	a3,0(a4)
-    while(n-- > 0)
- 306:	fee79ae3          	bne	a5,a4,2fa <memmove+0x4a>
- 30a:	bfc9                	j	2dc <memmove+0x2c>
-
-000000000000030c <memcmp>:
-
-int
-memcmp(const void *s1, const void *s2, uint n)
-{
- 30c:	1141                	addi	sp,sp,-16
- 30e:	e422                	sd	s0,8(sp)
- 310:	0800                	addi	s0,sp,16
-  const char *p1 = s1, *p2 = s2;
-  while (n-- > 0) {
- 312:	ca05                	beqz	a2,342 <memcmp+0x36>
- 314:	fff6069b          	addiw	a3,a2,-1
- 318:	1682                	slli	a3,a3,0x20
- 31a:	9281                	srli	a3,a3,0x20
- 31c:	0685                	addi	a3,a3,1
- 31e:	96aa                	add	a3,a3,a0
-    if (*p1 != *p2) {
- 320:	00054783          	lbu	a5,0(a0)
- 324:	0005c703          	lbu	a4,0(a1)
- 328:	00e79863          	bne	a5,a4,338 <memcmp+0x2c>
-      return *p1 - *p2;
-    }
-    p1++;
- 32c:	0505                	addi	a0,a0,1
-    p2++;
- 32e:	0585                	addi	a1,a1,1
-  while (n-- > 0) {
- 330:	fed518e3          	bne	a0,a3,320 <memcmp+0x14>
-  }
-  return 0;
- 334:	4501                	li	a0,0
- 336:	a019                	j	33c <memcmp+0x30>
-      return *p1 - *p2;
- 338:	40e7853b          	subw	a0,a5,a4
-}
- 33c:	6422                	ld	s0,8(sp)
- 33e:	0141                	addi	sp,sp,16
- 340:	8082                	ret
-  return 0;
- 342:	4501                	li	a0,0
- 344:	bfe5                	j	33c <memcmp+0x30>
-
-0000000000000346 <memcpy>:
-
-void *
-memcpy(void *dst, const void *src, uint n)
-{
- 346:	1141                	addi	sp,sp,-16
- 348:	e406                	sd	ra,8(sp)
- 34a:	e022                	sd	s0,0(sp)
- 34c:	0800                	addi	s0,sp,16
-  return memmove(dst, src, n);
- 34e:	00000097          	auipc	ra,0x0
- 352:	f62080e7          	jalr	-158(ra) # 2b0 <memmove>
-}
- 356:	60a2                	ld	ra,8(sp)
- 358:	6402                	ld	s0,0(sp)
- 35a:	0141                	addi	sp,sp,16
- 35c:	8082                	ret
-
-000000000000035e <fork>:
-# generated by usys.pl - do not edit
-#include "kernel/syscall.h"
-.global fork
-fork:
- li a7, SYS_fork
- 35e:	4885                	li	a7,1
- ecall
- 360:	00000073          	ecall
- ret
- 364:	8082                	ret
-
-0000000000000366 <exit>:
-.global exit
-exit:
- li a7, SYS_exit
- 366:	4889                	li	a7,2
- ecall
- 368:	00000073          	ecall
- ret
- 36c:	8082                	ret
-
-000000000000036e <wait>:
-.global wait
-wait:
- li a7, SYS_wait
- 36e:	488d                	li	a7,3
- ecall
- 370:	00000073          	ecall
- ret
- 374:	8082                	ret
-
-0000000000000376 <pipe>:
-.global pipe
-pipe:
- li a7, SYS_pipe
- 376:	4891                	li	a7,4
- ecall
- 378:	00000073          	ecall
- ret
- 37c:	8082                	ret
-
-000000000000037e <read>:
-.global read
-read:
- li a7, SYS_read
- 37e:	4895                	li	a7,5
- ecall
- 380:	00000073          	ecall
- ret
- 384:	8082                	ret
-
-0000000000000386 <write>:
-.global write
-write:
- li a7, SYS_write
- 386:	48c1                	li	a7,16
- ecall
- 388:	00000073          	ecall
- ret
- 38c:	8082                	ret
-
-000000000000038e <close>:
-.global close
-close:
- li a7, SYS_close
- 38e:	48d5                	li	a7,21
- ecall
- 390:	00000073          	ecall
- ret
- 394:	8082                	ret
-
-0000000000000396 <kill>:
-.global kill
-kill:
- li a7, SYS_kill
- 396:	4899                	li	a7,6
- ecall
- 398:	00000073          	ecall
- ret
- 39c:	8082                	ret
-
-000000000000039e <exec>:
-.global exec
-exec:
- li a7, SYS_exec
- 39e:	489d                	li	a7,7
- ecall
- 3a0:	00000073          	ecall
- ret
- 3a4:	8082                	ret
-
-00000000000003a6 <open>:
-.global open
-open:
- li a7, SYS_open
- 3a6:	48bd                	li	a7,15
- ecall
- 3a8:	00000073          	ecall
- ret
- 3ac:	8082                	ret
-
-00000000000003ae <mknod>:
-.global mknod
-mknod:
- li a7, SYS_mknod
- 3ae:	48c5                	li	a7,17
- ecall
- 3b0:	00000073          	ecall
- ret
- 3b4:	8082                	ret
-
-00000000000003b6 <unlink>:
-.global unlink
-unlink:
- li a7, SYS_unlink
- 3b6:	48c9                	li	a7,18
- ecall
- 3b8:	00000073          	ecall
- ret
- 3bc:	8082                	ret
-
-00000000000003be <fstat>:
-.global fstat
-fstat:
- li a7, SYS_fstat
- 3be:	48a1                	li	a7,8
- ecall
- 3c0:	00000073          	ecall
- ret
- 3c4:	8082                	ret
-
-00000000000003c6 <link>:
-.global link
-link:
- li a7, SYS_link
- 3c6:	48cd                	li	a7,19
- ecall
- 3c8:	00000073          	ecall
- ret
- 3cc:	8082                	ret
-
-00000000000003ce <mkdir>:
-.global mkdir
-mkdir:
- li a7, SYS_mkdir
- 3ce:	48d1                	li	a7,20
- ecall
- 3d0:	00000073          	ecall
- ret
- 3d4:	8082                	ret
-
-00000000000003d6 <chdir>:
-.global chdir
-chdir:
- li a7, SYS_chdir
- 3d6:	48a5                	li	a7,9
- ecall
- 3d8:	00000073          	ecall
- ret
- 3dc:	8082                	ret
-
-00000000000003de <dup>:
-.global dup
-dup:
- li a7, SYS_dup
- 3de:	48a9                	li	a7,10
- ecall
- 3e0:	00000073          	ecall
- ret
- 3e4:	8082                	ret
-
-00000000000003e6 <getpid>:
-.global getpid
-getpid:
- li a7, SYS_getpid
- 3e6:	48ad                	li	a7,11
- ecall
- 3e8:	00000073          	ecall
- ret
- 3ec:	8082                	ret
-
-00000000000003ee <sbrk>:
-.global sbrk
-sbrk:
- li a7, SYS_sbrk
- 3ee:	48b1                	li	a7,12
- ecall
- 3f0:	00000073          	ecall
- ret
- 3f4:	8082                	ret
-
-00000000000003f6 <sleep>:
-.global sleep
-sleep:
- li a7, SYS_sleep
- 3f6:	48b5                	li	a7,13
- ecall
- 3f8:	00000073          	ecall
- ret
- 3fc:	8082                	ret
-
-00000000000003fe <uptime>:
-.global uptime
-uptime:
- li a7, SYS_uptime
- 3fe:	48b9                	li	a7,14
- ecall
- 400:	00000073          	ecall
- ret
- 404:	8082                	ret
-
-0000000000000406 <pause_system>:
-.global pause_system
-pause_system:
- li a7, SYS_pause_system
- 406:	48d9                	li	a7,22
- ecall
- 408:	00000073          	ecall
- ret
- 40c:	8082                	ret
-
-000000000000040e <kill_system>:
-.global kill_system
-kill_system:
- li a7, SYS_kill_system
- 40e:	48dd                	li	a7,23
- ecall
- 410:	00000073          	ecall
- ret
- 414:	8082                	ret
-
-0000000000000416 <print_stats>:
-.global print_stats
-print_stats:
- li a7, SYS_print_stats
- 416:	48e1                	li	a7,24
- ecall
- 418:	00000073          	ecall
- ret
- 41c:	8082                	ret
-
-000000000000041e <get_cpu>:
-.global get_cpu
-get_cpu:
- li a7, SYS_get_cpu
- 41e:	48e5                	li	a7,25
- ecall
- 420:	00000073          	ecall
- ret
- 424:	8082                	ret
-
-0000000000000426 <set_cpu>:
-.global set_cpu
-set_cpu:
- li a7, SYS_set_cpu
- 426:	48e9                	li	a7,26
- ecall
- 428:	00000073          	ecall
- ret
- 42c:	8082                	ret
-
-000000000000042e <putc>:
-
-static char digits[] = "0123456789ABCDEF";
-
-static void
-putc(int fd, char c)
-{
- 42e:	1101                	addi	sp,sp,-32
- 430:	ec06                	sd	ra,24(sp)
- 432:	e822                	sd	s0,16(sp)
- 434:	1000                	addi	s0,sp,32
- 436:	feb407a3          	sb	a1,-17(s0)
-  write(fd, &c, 1);
- 43a:	4605                	li	a2,1
- 43c:	fef40593          	addi	a1,s0,-17
- 440:	00000097          	auipc	ra,0x0
- 444:	f46080e7          	jalr	-186(ra) # 386 <write>
-}
- 448:	60e2                	ld	ra,24(sp)
- 44a:	6442                	ld	s0,16(sp)
- 44c:	6105                	addi	sp,sp,32
- 44e:	8082                	ret
-
-0000000000000450 <printint>:
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 450:	7139                	addi	sp,sp,-64
- 452:	fc06                	sd	ra,56(sp)
- 454:	f822                	sd	s0,48(sp)
- 456:	f426                	sd	s1,40(sp)
- 458:	f04a                	sd	s2,32(sp)
- 45a:	ec4e                	sd	s3,24(sp)
- 45c:	0080                	addi	s0,sp,64
- 45e:	84aa                	mv	s1,a0
-  char buf[16];
-  int i, neg;
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
- 460:	c299                	beqz	a3,466 <printint+0x16>
- 462:	0805c863          	bltz	a1,4f2 <printint+0xa2>
-    neg = 1;
-    x = -xx;
-  } else {
-    x = xx;
- 466:	2581                	sext.w	a1,a1
-  neg = 0;
- 468:	4881                	li	a7,0
- 46a:	fc040693          	addi	a3,s0,-64
-  }
-
-  i = 0;
- 46e:	4701                	li	a4,0
-  do{
-    buf[i++] = digits[x % base];
- 470:	2601                	sext.w	a2,a2
- 472:	00000517          	auipc	a0,0x0
- 476:	46e50513          	addi	a0,a0,1134 # 8e0 <digits>
- 47a:	883a                	mv	a6,a4
- 47c:	2705                	addiw	a4,a4,1
- 47e:	02c5f7bb          	remuw	a5,a1,a2
- 482:	1782                	slli	a5,a5,0x20
- 484:	9381                	srli	a5,a5,0x20
- 486:	97aa                	add	a5,a5,a0
- 488:	0007c783          	lbu	a5,0(a5)
- 48c:	00f68023          	sb	a5,0(a3)
-  }while((x /= base) != 0);
- 490:	0005879b          	sext.w	a5,a1
- 494:	02c5d5bb          	divuw	a1,a1,a2
- 498:	0685                	addi	a3,a3,1
- 49a:	fec7f0e3          	bgeu	a5,a2,47a <printint+0x2a>
-  if(neg)
- 49e:	00088b63          	beqz	a7,4b4 <printint+0x64>
-    buf[i++] = '-';
- 4a2:	fd040793          	addi	a5,s0,-48
- 4a6:	973e                	add	a4,a4,a5
- 4a8:	02d00793          	li	a5,45
- 4ac:	fef70823          	sb	a5,-16(a4)
- 4b0:	0028071b          	addiw	a4,a6,2
-
-  while(--i >= 0)
- 4b4:	02e05863          	blez	a4,4e4 <printint+0x94>
- 4b8:	fc040793          	addi	a5,s0,-64
- 4bc:	00e78933          	add	s2,a5,a4
- 4c0:	fff78993          	addi	s3,a5,-1
- 4c4:	99ba                	add	s3,s3,a4
- 4c6:	377d                	addiw	a4,a4,-1
- 4c8:	1702                	slli	a4,a4,0x20
- 4ca:	9301                	srli	a4,a4,0x20
- 4cc:	40e989b3          	sub	s3,s3,a4
-    putc(fd, buf[i]);
- 4d0:	fff94583          	lbu	a1,-1(s2)
- 4d4:	8526                	mv	a0,s1
- 4d6:	00000097          	auipc	ra,0x0
- 4da:	f58080e7          	jalr	-168(ra) # 42e <putc>
-  while(--i >= 0)
- 4de:	197d                	addi	s2,s2,-1
- 4e0:	ff3918e3          	bne	s2,s3,4d0 <printint+0x80>
-}
- 4e4:	70e2                	ld	ra,56(sp)
- 4e6:	7442                	ld	s0,48(sp)
- 4e8:	74a2                	ld	s1,40(sp)
- 4ea:	7902                	ld	s2,32(sp)
- 4ec:	69e2                	ld	s3,24(sp)
- 4ee:	6121                	addi	sp,sp,64
- 4f0:	8082                	ret
-    x = -xx;
- 4f2:	40b005bb          	negw	a1,a1
-    neg = 1;
- 4f6:	4885                	li	a7,1
-    x = -xx;
- 4f8:	bf8d                	j	46a <printint+0x1a>
-
-00000000000004fa <vprintf>:
-}
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-vprintf(int fd, const char *fmt, va_list ap)
-{
- 4fa:	7119                	addi	sp,sp,-128
- 4fc:	fc86                	sd	ra,120(sp)
- 4fe:	f8a2                	sd	s0,112(sp)
- 500:	f4a6                	sd	s1,104(sp)
- 502:	f0ca                	sd	s2,96(sp)
- 504:	ecce                	sd	s3,88(sp)
- 506:	e8d2                	sd	s4,80(sp)
- 508:	e4d6                	sd	s5,72(sp)
- 50a:	e0da                	sd	s6,64(sp)
- 50c:	fc5e                	sd	s7,56(sp)
- 50e:	f862                	sd	s8,48(sp)
- 510:	f466                	sd	s9,40(sp)
- 512:	f06a                	sd	s10,32(sp)
- 514:	ec6e                	sd	s11,24(sp)
- 516:	0100                	addi	s0,sp,128
-  char *s;
-  int c, i, state;
-
-  state = 0;
-  for(i = 0; fmt[i]; i++){
- 518:	0005c903          	lbu	s2,0(a1)
- 51c:	18090f63          	beqz	s2,6ba <vprintf+0x1c0>
- 520:	8aaa                	mv	s5,a0
- 522:	8b32                	mv	s6,a2
- 524:	00158493          	addi	s1,a1,1
-  state = 0;
- 528:	4981                	li	s3,0
-      if(c == '%'){
-        state = '%';
-      } else {
-        putc(fd, c);
-      }
-    } else if(state == '%'){
- 52a:	02500a13          	li	s4,37
-      if(c == 'd'){
- 52e:	06400c13          	li	s8,100
-        printint(fd, va_arg(ap, int), 10, 1);
-      } else if(c == 'l') {
- 532:	06c00c93          	li	s9,108
-        printint(fd, va_arg(ap, uint64), 10, 0);
-      } else if(c == 'x') {
- 536:	07800d13          	li	s10,120
-        printint(fd, va_arg(ap, int), 16, 0);
-      } else if(c == 'p') {
- 53a:	07000d93          	li	s11,112
-    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
- 53e:	00000b97          	auipc	s7,0x0
- 542:	3a2b8b93          	addi	s7,s7,930 # 8e0 <digits>
- 546:	a839                	j	564 <vprintf+0x6a>
-        putc(fd, c);
- 548:	85ca                	mv	a1,s2
- 54a:	8556                	mv	a0,s5
- 54c:	00000097          	auipc	ra,0x0
- 550:	ee2080e7          	jalr	-286(ra) # 42e <putc>
- 554:	a019                	j	55a <vprintf+0x60>
-    } else if(state == '%'){
- 556:	01498f63          	beq	s3,s4,574 <vprintf+0x7a>
-  for(i = 0; fmt[i]; i++){
- 55a:	0485                	addi	s1,s1,1
- 55c:	fff4c903          	lbu	s2,-1(s1)
- 560:	14090d63          	beqz	s2,6ba <vprintf+0x1c0>
-    c = fmt[i] & 0xff;
- 564:	0009079b          	sext.w	a5,s2
-    if(state == 0){
- 568:	fe0997e3          	bnez	s3,556 <vprintf+0x5c>
-      if(c == '%'){
- 56c:	fd479ee3          	bne	a5,s4,548 <vprintf+0x4e>
-        state = '%';
- 570:	89be                	mv	s3,a5
- 572:	b7e5                	j	55a <vprintf+0x60>
-      if(c == 'd'){
- 574:	05878063          	beq	a5,s8,5b4 <vprintf+0xba>
-      } else if(c == 'l') {
- 578:	05978c63          	beq	a5,s9,5d0 <vprintf+0xd6>
-      } else if(c == 'x') {
- 57c:	07a78863          	beq	a5,s10,5ec <vprintf+0xf2>
-      } else if(c == 'p') {
- 580:	09b78463          	beq	a5,s11,608 <vprintf+0x10e>
-        printptr(fd, va_arg(ap, uint64));
-      } else if(c == 's'){
- 584:	07300713          	li	a4,115
- 588:	0ce78663          	beq	a5,a4,654 <vprintf+0x15a>
-          s = "(null)";
-        while(*s != 0){
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 58c:	06300713          	li	a4,99
- 590:	0ee78e63          	beq	a5,a4,68c <vprintf+0x192>
-        putc(fd, va_arg(ap, uint));
-      } else if(c == '%'){
- 594:	11478863          	beq	a5,s4,6a4 <vprintf+0x1aa>
-        putc(fd, c);
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
- 598:	85d2                	mv	a1,s4
- 59a:	8556                	mv	a0,s5
- 59c:	00000097          	auipc	ra,0x0
- 5a0:	e92080e7          	jalr	-366(ra) # 42e <putc>
-        putc(fd, c);
- 5a4:	85ca                	mv	a1,s2
- 5a6:	8556                	mv	a0,s5
- 5a8:	00000097          	auipc	ra,0x0
- 5ac:	e86080e7          	jalr	-378(ra) # 42e <putc>
-      }
-      state = 0;
- 5b0:	4981                	li	s3,0
- 5b2:	b765                	j	55a <vprintf+0x60>
-        printint(fd, va_arg(ap, int), 10, 1);
- 5b4:	008b0913          	addi	s2,s6,8
- 5b8:	4685                	li	a3,1
- 5ba:	4629                	li	a2,10
- 5bc:	000b2583          	lw	a1,0(s6)
- 5c0:	8556                	mv	a0,s5
- 5c2:	00000097          	auipc	ra,0x0
- 5c6:	e8e080e7          	jalr	-370(ra) # 450 <printint>
- 5ca:	8b4a                	mv	s6,s2
-      state = 0;
- 5cc:	4981                	li	s3,0
- 5ce:	b771                	j	55a <vprintf+0x60>
-        printint(fd, va_arg(ap, uint64), 10, 0);
- 5d0:	008b0913          	addi	s2,s6,8
- 5d4:	4681                	li	a3,0
- 5d6:	4629                	li	a2,10
- 5d8:	000b2583          	lw	a1,0(s6)
- 5dc:	8556                	mv	a0,s5
- 5de:	00000097          	auipc	ra,0x0
- 5e2:	e72080e7          	jalr	-398(ra) # 450 <printint>
- 5e6:	8b4a                	mv	s6,s2
-      state = 0;
- 5e8:	4981                	li	s3,0
- 5ea:	bf85                	j	55a <vprintf+0x60>
-        printint(fd, va_arg(ap, int), 16, 0);
- 5ec:	008b0913          	addi	s2,s6,8
- 5f0:	4681                	li	a3,0
- 5f2:	4641                	li	a2,16
- 5f4:	000b2583          	lw	a1,0(s6)
- 5f8:	8556                	mv	a0,s5
- 5fa:	00000097          	auipc	ra,0x0
- 5fe:	e56080e7          	jalr	-426(ra) # 450 <printint>
- 602:	8b4a                	mv	s6,s2
-      state = 0;
- 604:	4981                	li	s3,0
- 606:	bf91                	j	55a <vprintf+0x60>
-        printptr(fd, va_arg(ap, uint64));
- 608:	008b0793          	addi	a5,s6,8
- 60c:	f8f43423          	sd	a5,-120(s0)
- 610:	000b3983          	ld	s3,0(s6)
-  putc(fd, '0');
- 614:	03000593          	li	a1,48
- 618:	8556                	mv	a0,s5
- 61a:	00000097          	auipc	ra,0x0
- 61e:	e14080e7          	jalr	-492(ra) # 42e <putc>
-  putc(fd, 'x');
- 622:	85ea                	mv	a1,s10
- 624:	8556                	mv	a0,s5
- 626:	00000097          	auipc	ra,0x0
- 62a:	e08080e7          	jalr	-504(ra) # 42e <putc>
- 62e:	4941                	li	s2,16
-    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
- 630:	03c9d793          	srli	a5,s3,0x3c
- 634:	97de                	add	a5,a5,s7
- 636:	0007c583          	lbu	a1,0(a5)
- 63a:	8556                	mv	a0,s5
- 63c:	00000097          	auipc	ra,0x0
- 640:	df2080e7          	jalr	-526(ra) # 42e <putc>
-  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
- 644:	0992                	slli	s3,s3,0x4
- 646:	397d                	addiw	s2,s2,-1
- 648:	fe0914e3          	bnez	s2,630 <vprintf+0x136>
-        printptr(fd, va_arg(ap, uint64));
- 64c:	f8843b03          	ld	s6,-120(s0)
-      state = 0;
- 650:	4981                	li	s3,0
- 652:	b721                	j	55a <vprintf+0x60>
-        s = va_arg(ap, char*);
- 654:	008b0993          	addi	s3,s6,8
- 658:	000b3903          	ld	s2,0(s6)
-        if(s == 0)
- 65c:	02090163          	beqz	s2,67e <vprintf+0x184>
-        while(*s != 0){
- 660:	00094583          	lbu	a1,0(s2)
- 664:	c9a1                	beqz	a1,6b4 <vprintf+0x1ba>
-          putc(fd, *s);
- 666:	8556                	mv	a0,s5
- 668:	00000097          	auipc	ra,0x0
- 66c:	dc6080e7          	jalr	-570(ra) # 42e <putc>
-          s++;
- 670:	0905                	addi	s2,s2,1
-        while(*s != 0){
- 672:	00094583          	lbu	a1,0(s2)
- 676:	f9e5                	bnez	a1,666 <vprintf+0x16c>
-        s = va_arg(ap, char*);
- 678:	8b4e                	mv	s6,s3
-      state = 0;
- 67a:	4981                	li	s3,0
- 67c:	bdf9                	j	55a <vprintf+0x60>
-          s = "(null)";
- 67e:	00000917          	auipc	s2,0x0
- 682:	25a90913          	addi	s2,s2,602 # 8d8 <malloc+0x114>
-        while(*s != 0){
- 686:	02800593          	li	a1,40
- 68a:	bff1                	j	666 <vprintf+0x16c>
-        putc(fd, va_arg(ap, uint));
- 68c:	008b0913          	addi	s2,s6,8
- 690:	000b4583          	lbu	a1,0(s6)
- 694:	8556                	mv	a0,s5
- 696:	00000097          	auipc	ra,0x0
- 69a:	d98080e7          	jalr	-616(ra) # 42e <putc>
- 69e:	8b4a                	mv	s6,s2
-      state = 0;
- 6a0:	4981                	li	s3,0
- 6a2:	bd65                	j	55a <vprintf+0x60>
-        putc(fd, c);
- 6a4:	85d2                	mv	a1,s4
- 6a6:	8556                	mv	a0,s5
- 6a8:	00000097          	auipc	ra,0x0
- 6ac:	d86080e7          	jalr	-634(ra) # 42e <putc>
-      state = 0;
- 6b0:	4981                	li	s3,0
- 6b2:	b565                	j	55a <vprintf+0x60>
-        s = va_arg(ap, char*);
- 6b4:	8b4e                	mv	s6,s3
-      state = 0;
- 6b6:	4981                	li	s3,0
- 6b8:	b54d                	j	55a <vprintf+0x60>
-    }
-  }
-}
- 6ba:	70e6                	ld	ra,120(sp)
- 6bc:	7446                	ld	s0,112(sp)
- 6be:	74a6                	ld	s1,104(sp)
- 6c0:	7906                	ld	s2,96(sp)
- 6c2:	69e6                	ld	s3,88(sp)
- 6c4:	6a46                	ld	s4,80(sp)
- 6c6:	6aa6                	ld	s5,72(sp)
- 6c8:	6b06                	ld	s6,64(sp)
- 6ca:	7be2                	ld	s7,56(sp)
- 6cc:	7c42                	ld	s8,48(sp)
- 6ce:	7ca2                	ld	s9,40(sp)
- 6d0:	7d02                	ld	s10,32(sp)
- 6d2:	6de2                	ld	s11,24(sp)
- 6d4:	6109                	addi	sp,sp,128
- 6d6:	8082                	ret
-
-00000000000006d8 <fprintf>:
-
-void
-fprintf(int fd, const char *fmt, ...)
-{
- 6d8:	715d                	addi	sp,sp,-80
- 6da:	ec06                	sd	ra,24(sp)
- 6dc:	e822                	sd	s0,16(sp)
- 6de:	1000                	addi	s0,sp,32
- 6e0:	e010                	sd	a2,0(s0)
- 6e2:	e414                	sd	a3,8(s0)
- 6e4:	e818                	sd	a4,16(s0)
- 6e6:	ec1c                	sd	a5,24(s0)
- 6e8:	03043023          	sd	a6,32(s0)
- 6ec:	03143423          	sd	a7,40(s0)
-  va_list ap;
-
-  va_start(ap, fmt);
- 6f0:	fe843423          	sd	s0,-24(s0)
-  vprintf(fd, fmt, ap);
- 6f4:	8622                	mv	a2,s0
- 6f6:	00000097          	auipc	ra,0x0
- 6fa:	e04080e7          	jalr	-508(ra) # 4fa <vprintf>
-}
- 6fe:	60e2                	ld	ra,24(sp)
- 700:	6442                	ld	s0,16(sp)
- 702:	6161                	addi	sp,sp,80
- 704:	8082                	ret
-
-0000000000000706 <printf>:
-
-void
-printf(const char *fmt, ...)
-{
- 706:	711d                	addi	sp,sp,-96
- 708:	ec06                	sd	ra,24(sp)
- 70a:	e822                	sd	s0,16(sp)
- 70c:	1000                	addi	s0,sp,32
- 70e:	e40c                	sd	a1,8(s0)
- 710:	e810                	sd	a2,16(s0)
- 712:	ec14                	sd	a3,24(s0)
- 714:	f018                	sd	a4,32(s0)
- 716:	f41c                	sd	a5,40(s0)
- 718:	03043823          	sd	a6,48(s0)
- 71c:	03143c23          	sd	a7,56(s0)
-  va_list ap;
-
-  va_start(ap, fmt);
- 720:	00840613          	addi	a2,s0,8
- 724:	fec43423          	sd	a2,-24(s0)
-  vprintf(1, fmt, ap);
- 728:	85aa                	mv	a1,a0
- 72a:	4505                	li	a0,1
- 72c:	00000097          	auipc	ra,0x0
- 730:	dce080e7          	jalr	-562(ra) # 4fa <vprintf>
-}
- 734:	60e2                	ld	ra,24(sp)
- 736:	6442                	ld	s0,16(sp)
- 738:	6125                	addi	sp,sp,96
- 73a:	8082                	ret
-
-000000000000073c <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 73c:	1141                	addi	sp,sp,-16
- 73e:	e422                	sd	s0,8(sp)
- 740:	0800                	addi	s0,sp,16
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
- 742:	ff050693          	addi	a3,a0,-16
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 746:	00000797          	auipc	a5,0x0
- 74a:	1b27b783          	ld	a5,434(a5) # 8f8 <freep>
- 74e:	a805                	j	77e <free+0x42>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-      break;
-  if(bp + bp->s.size == p->s.ptr){
-    bp->s.size += p->s.ptr->s.size;
- 750:	4618                	lw	a4,8(a2)
- 752:	9db9                	addw	a1,a1,a4
- 754:	feb52c23          	sw	a1,-8(a0)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 758:	6398                	ld	a4,0(a5)
- 75a:	6318                	ld	a4,0(a4)
- 75c:	fee53823          	sd	a4,-16(a0)
- 760:	a091                	j	7a4 <free+0x68>
-  } else
-    bp->s.ptr = p->s.ptr;
-  if(p + p->s.size == bp){
-    p->s.size += bp->s.size;
- 762:	ff852703          	lw	a4,-8(a0)
- 766:	9e39                	addw	a2,a2,a4
- 768:	c790                	sw	a2,8(a5)
-    p->s.ptr = bp->s.ptr;
- 76a:	ff053703          	ld	a4,-16(a0)
- 76e:	e398                	sd	a4,0(a5)
- 770:	a099                	j	7b6 <free+0x7a>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 772:	6398                	ld	a4,0(a5)
- 774:	00e7e463          	bltu	a5,a4,77c <free+0x40>
- 778:	00e6ea63          	bltu	a3,a4,78c <free+0x50>
-{
- 77c:	87ba                	mv	a5,a4
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 77e:	fed7fae3          	bgeu	a5,a3,772 <free+0x36>
- 782:	6398                	ld	a4,0(a5)
- 784:	00e6e463          	bltu	a3,a4,78c <free+0x50>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 788:	fee7eae3          	bltu	a5,a4,77c <free+0x40>
-  if(bp + bp->s.size == p->s.ptr){
- 78c:	ff852583          	lw	a1,-8(a0)
- 790:	6390                	ld	a2,0(a5)
- 792:	02059713          	slli	a4,a1,0x20
- 796:	9301                	srli	a4,a4,0x20
- 798:	0712                	slli	a4,a4,0x4
- 79a:	9736                	add	a4,a4,a3
- 79c:	fae60ae3          	beq	a2,a4,750 <free+0x14>
-    bp->s.ptr = p->s.ptr;
- 7a0:	fec53823          	sd	a2,-16(a0)
-  if(p + p->s.size == bp){
- 7a4:	4790                	lw	a2,8(a5)
- 7a6:	02061713          	slli	a4,a2,0x20
- 7aa:	9301                	srli	a4,a4,0x20
- 7ac:	0712                	slli	a4,a4,0x4
- 7ae:	973e                	add	a4,a4,a5
- 7b0:	fae689e3          	beq	a3,a4,762 <free+0x26>
-  } else
-    p->s.ptr = bp;
- 7b4:	e394                	sd	a3,0(a5)
-  freep = p;
- 7b6:	00000717          	auipc	a4,0x0
- 7ba:	14f73123          	sd	a5,322(a4) # 8f8 <freep>
-}
- 7be:	6422                	ld	s0,8(sp)
- 7c0:	0141                	addi	sp,sp,16
- 7c2:	8082                	ret
-
-00000000000007c4 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
- 7c4:	7139                	addi	sp,sp,-64
- 7c6:	fc06                	sd	ra,56(sp)
- 7c8:	f822                	sd	s0,48(sp)
- 7ca:	f426                	sd	s1,40(sp)
- 7cc:	f04a                	sd	s2,32(sp)
- 7ce:	ec4e                	sd	s3,24(sp)
- 7d0:	e852                	sd	s4,16(sp)
- 7d2:	e456                	sd	s5,8(sp)
- 7d4:	e05a                	sd	s6,0(sp)
- 7d6:	0080                	addi	s0,sp,64
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 7d8:	02051493          	slli	s1,a0,0x20
- 7dc:	9081                	srli	s1,s1,0x20
- 7de:	04bd                	addi	s1,s1,15
- 7e0:	8091                	srli	s1,s1,0x4
- 7e2:	0014899b          	addiw	s3,s1,1
- 7e6:	0485                	addi	s1,s1,1
-  if((prevp = freep) == 0){
- 7e8:	00000517          	auipc	a0,0x0
- 7ec:	11053503          	ld	a0,272(a0) # 8f8 <freep>
- 7f0:	c515                	beqz	a0,81c <malloc+0x58>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7f2:	611c                	ld	a5,0(a0)
-    if(p->s.size >= nunits){
- 7f4:	4798                	lw	a4,8(a5)
- 7f6:	02977f63          	bgeu	a4,s1,834 <malloc+0x70>
- 7fa:	8a4e                	mv	s4,s3
- 7fc:	0009871b          	sext.w	a4,s3
- 800:	6685                	lui	a3,0x1
- 802:	00d77363          	bgeu	a4,a3,808 <malloc+0x44>
- 806:	6a05                	lui	s4,0x1
- 808:	000a0b1b          	sext.w	s6,s4
-  p = sbrk(nu * sizeof(Header));
- 80c:	004a1a1b          	slliw	s4,s4,0x4
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
- 810:	00000917          	auipc	s2,0x0
- 814:	0e890913          	addi	s2,s2,232 # 8f8 <freep>
-  if(p == (char*)-1)
- 818:	5afd                	li	s5,-1
- 81a:	a88d                	j	88c <malloc+0xc8>
-    base.s.ptr = freep = prevp = &base;
- 81c:	00000797          	auipc	a5,0x0
- 820:	0e478793          	addi	a5,a5,228 # 900 <base>
- 824:	00000717          	auipc	a4,0x0
- 828:	0cf73a23          	sd	a5,212(a4) # 8f8 <freep>
- 82c:	e39c                	sd	a5,0(a5)
-    base.s.size = 0;
- 82e:	0007a423          	sw	zero,8(a5)
-    if(p->s.size >= nunits){
- 832:	b7e1                	j	7fa <malloc+0x36>
-      if(p->s.size == nunits)
- 834:	02e48b63          	beq	s1,a4,86a <malloc+0xa6>
-        p->s.size -= nunits;
- 838:	4137073b          	subw	a4,a4,s3
- 83c:	c798                	sw	a4,8(a5)
-        p += p->s.size;
- 83e:	1702                	slli	a4,a4,0x20
- 840:	9301                	srli	a4,a4,0x20
- 842:	0712                	slli	a4,a4,0x4
- 844:	97ba                	add	a5,a5,a4
-        p->s.size = nunits;
- 846:	0137a423          	sw	s3,8(a5)
-      freep = prevp;
- 84a:	00000717          	auipc	a4,0x0
- 84e:	0aa73723          	sd	a0,174(a4) # 8f8 <freep>
-      return (void*)(p + 1);
- 852:	01078513          	addi	a0,a5,16
-      if((p = morecore(nunits)) == 0)
-        return 0;
-  }
-}
- 856:	70e2                	ld	ra,56(sp)
- 858:	7442                	ld	s0,48(sp)
- 85a:	74a2                	ld	s1,40(sp)
- 85c:	7902                	ld	s2,32(sp)
- 85e:	69e2                	ld	s3,24(sp)
- 860:	6a42                	ld	s4,16(sp)
- 862:	6aa2                	ld	s5,8(sp)
- 864:	6b02                	ld	s6,0(sp)
- 866:	6121                	addi	sp,sp,64
- 868:	8082                	ret
-        prevp->s.ptr = p->s.ptr;
- 86a:	6398                	ld	a4,0(a5)
- 86c:	e118                	sd	a4,0(a0)
- 86e:	bff1                	j	84a <malloc+0x86>
-  hp->s.size = nu;
- 870:	01652423          	sw	s6,8(a0)
-  free((void*)(hp + 1));
- 874:	0541                	addi	a0,a0,16
- 876:	00000097          	auipc	ra,0x0
- 87a:	ec6080e7          	jalr	-314(ra) # 73c <free>
-  return freep;
- 87e:	00093503          	ld	a0,0(s2)
-      if((p = morecore(nunits)) == 0)
- 882:	d971                	beqz	a0,856 <malloc+0x92>
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 884:	611c                	ld	a5,0(a0)
-    if(p->s.size >= nunits){
- 886:	4798                	lw	a4,8(a5)
- 888:	fa9776e3          	bgeu	a4,s1,834 <malloc+0x70>
-    if(p == freep)
- 88c:	00093703          	ld	a4,0(s2)
- 890:	853e                	mv	a0,a5
- 892:	fef719e3          	bne	a4,a5,884 <malloc+0xc0>
-  p = sbrk(nu * sizeof(Header));
- 896:	8552                	mv	a0,s4
- 898:	00000097          	auipc	ra,0x0
- 89c:	b56080e7          	jalr	-1194(ra) # 3ee <sbrk>
-  if(p == (char*)-1)
- 8a0:	fd5518e3          	bne	a0,s5,870 <malloc+0xac>
-        return 0;
- 8a4:	4501                	li	a0,0
- 8a6:	bf45                	j	856 <malloc+0x92>
diff --git a/user/env.c b/user/env.c
deleted file mode 100644
index 4f58aa8..0000000
--- a/user/env.c
+++ /dev/null
@@ -1,71 +0,0 @@
-#include "kernel/param.h"
-#include "kernel/types.h"
-#include "kernel/stat.h"
-#include "user/user.h"
-#include "kernel/fs.h"
-#include "kernel/fcntl.h"
-#include "kernel/syscall.h"
-#include "kernel/memlayout.h"
-#include "kernel/riscv.h"
-
-
-
-
-// void env(int size, int interval, char* env_name) {
-//     int result = 1;
-//     int loop_size = 10e6;
-//     int n_forks = 2;
-//     int pid;
-//     for (int i = 0; i < n_forks; i++) {
-//        pid = fork();
-//     }
-//     for (int i = 0; i < loop_size; i++) {
-//         if (i % (loop_size / (int) 10e0) == 0) {
-//         	if (pid == 0) {
-//         		printf("%s %d/%d completed.\n", env_name, i, loop_size);
-//         	} else {
-//         		printf(" ");
-//         	}
-//         }
-//         if (i % interval == 0) {
-//             result = result * size;
-//         }
-//     }
-//     printf("\n");
-  
-// }
-
-void env(int size, int interval, char* env_name) {
-    int n_forks = 2;
-    int pid;
-    for (int i = 0; i < n_forks; i++) {
-       pid = fork();
-       if (pid != 0)
-       {
-           printf("PID: %d\n", pid);
-           pid = fork();
-           if (pid != 0)
-                printf("PID: %d\n", pid);
-       }
-    }
-}
-
-void env_large() {
-    env(10e6, 10e6, "env_large");
-}
-
-void env_freq() {
-    env(10e1, 10e1, "env_freq");
-}
-
-
-int
-main(int argc, char *argv[]){
-    env_large();
-    // env_freq();
-    // print_stats();
-   
-    
-    exit(0);
-
-}
\ No newline at end of file
diff --git a/user/env.d b/user/env.d
deleted file mode 100644
index 9b831ba..0000000
--- a/user/env.d
+++ /dev/null
@@ -1,3 +0,0 @@
-user/env.o: user/env.c kernel/param.h kernel/types.h kernel/stat.h \
- user/user.h kernel/fs.h kernel/fcntl.h kernel/syscall.h \
- kernel/memlayout.h kernel/riscv.h
diff --git a/user/env.o b/user/env.o
deleted file mode 100644
index 76df8b1..0000000
Binary files a/user/env.o and /dev/null differ
diff --git a/user/env.sym b/user/env.sym
deleted file mode 100644
index 0a74a68..0000000
--- a/user/env.sym
+++ /dev/null
@@ -1,75 +0,0 @@
-0000000000000000 .text
-00000000000008a8 .rodata
-00000000000008f8 .sbss
-0000000000000900 .bss
-0000000000000000 .comment
-0000000000000000 .debug_aranges
-0000000000000000 .debug_info
-0000000000000000 .debug_abbrev
-0000000000000000 .debug_line
-0000000000000000 .debug_frame
-0000000000000000 .debug_str
-0000000000000000 .debug_loc
-0000000000000000 .debug_ranges
-0000000000000000 env.c
-0000000000000000 ulib.c
-0000000000000000 printf.c
-000000000000042e putc
-0000000000000450 printint
-00000000000008e0 digits
-0000000000000000 umalloc.c
-00000000000008f8 freep
-0000000000000900 base
-00000000000000f0 strcpy
-0000000000000706 printf
-00000000000010f1 __global_pointer$
-00000000000002b0 memmove
-00000000000003ae mknod
-00000000000001ac gets
-00000000000008f1 __SDATA_BEGIN__
-00000000000003e6 getpid
-0000000000000346 memcpy
-0000000000000416 print_stats
-00000000000007c4 malloc
-00000000000003f6 sleep
-0000000000000376 pipe
-0000000000000386 write
-00000000000003be fstat
-00000000000006d8 fprintf
-0000000000000396 kill
-00000000000004fa vprintf
-00000000000003d6 chdir
-0000000000000406 pause_system
-000000000000039e exec
-000000000000036e wait
-000000000000037e read
-00000000000003b6 unlink
-0000000000000426 set_cpu
-000000000000041e get_cpu
-000000000000030c memcmp
-000000000000035e fork
-000000000000040e kill_system
-0000000000000910 __BSS_END__
-00000000000003ee sbrk
-00000000000003fe uptime
-00000000000008f1 __bss_start
-0000000000000162 memset
-00000000000000d6 main
-000000000000010c strcmp
-00000000000003de dup
-0000000000000000 env
-00000000000008f1 __DATA_BEGIN__
-0000000000000220 stat
-00000000000008f1 _edata
-0000000000000910 _end
-00000000000003c6 link
-0000000000000366 exit
-0000000000000084 env_large
-0000000000000266 atoi
-0000000000000138 strlen
-00000000000003a6 open
-0000000000000188 strchr
-00000000000000ae env_freq
-00000000000003ce mkdir
-000000000000038e close
-000000000000073c free
diff --git a/user/forktest.asm b/user/forktest.asm
index 4adfa85..fef8732 100644
--- a/user/forktest.asm
+++ b/user/forktest.asm
@@ -47,7 +47,7 @@ forktest(void)
 
   print("fork test\n");
   3a:	00000517          	auipc	a0,0x0
-  3e:	42650513          	addi	a0,a0,1062 # 460 <set_cpu+0xc>
+  3e:	3fe50513          	addi	a0,a0,1022 # 438 <uptime+0xc>
   42:	00000097          	auipc	ra,0x0
   46:	fbe080e7          	jalr	-66(ra) # 0 <print>
 
@@ -71,7 +71,7 @@ forktest(void)
   if(n == N){
     print("fork claimed to work N times!\n");
   64:	00000517          	auipc	a0,0x0
-  68:	40c50513          	addi	a0,a0,1036 # 470 <set_cpu+0x1c>
+  68:	3e450513          	addi	a0,a0,996 # 448 <uptime+0x1c>
   6c:	00000097          	auipc	ra,0x0
   70:	f94080e7          	jalr	-108(ra) # 0 <print>
     exit(1);
@@ -113,7 +113,7 @@ forktest(void)
 
   print("fork test OK\n");
   b4:	00000517          	auipc	a0,0x0
-  b8:	40c50513          	addi	a0,a0,1036 # 4c0 <set_cpu+0x6c>
+  b8:	3e450513          	addi	a0,a0,996 # 498 <uptime+0x6c>
   bc:	00000097          	auipc	ra,0x0
   c0:	f44080e7          	jalr	-188(ra) # 0 <print>
 }
@@ -125,7 +125,7 @@ forktest(void)
   ce:	8082                	ret
       print("wait stopped early\n");
   d0:	00000517          	auipc	a0,0x0
-  d4:	3c050513          	addi	a0,a0,960 # 490 <set_cpu+0x3c>
+  d4:	39850513          	addi	a0,a0,920 # 468 <uptime+0x3c>
   d8:	00000097          	auipc	ra,0x0
   dc:	f28080e7          	jalr	-216(ra) # 0 <print>
       exit(1);
@@ -134,7 +134,7 @@ forktest(void)
   e6:	2b2080e7          	jalr	690(ra) # 394 <exit>
     print("wait got too many\n");
   ea:	00000517          	auipc	a0,0x0
-  ee:	3be50513          	addi	a0,a0,958 # 4a8 <set_cpu+0x54>
+  ee:	39650513          	addi	a0,a0,918 # 480 <uptime+0x54>
   f2:	00000097          	auipc	ra,0x0
   f6:	f0e080e7          	jalr	-242(ra) # 0 <print>
     exit(1);
@@ -795,53 +795,3 @@ uptime:
  42e:	00000073          	ecall
  ret
  432:	8082                	ret
-
-0000000000000434 <pause_system>:
-.global pause_system
-pause_system:
- li a7, SYS_pause_system
- 434:	48d9                	li	a7,22
- ecall
- 436:	00000073          	ecall
- ret
- 43a:	8082                	ret
-
-000000000000043c <kill_system>:
-.global kill_system
-kill_system:
- li a7, SYS_kill_system
- 43c:	48dd                	li	a7,23
- ecall
- 43e:	00000073          	ecall
- ret
- 442:	8082                	ret
-
-0000000000000444 <print_stats>:
-.global print_stats
-print_stats:
- li a7, SYS_print_stats
- 444:	48e1                	li	a7,24
- ecall
- 446:	00000073          	ecall
- ret
- 44a:	8082                	ret
-
-000000000000044c <get_cpu>:
-.global get_cpu
-get_cpu:
- li a7, SYS_get_cpu
- 44c:	48e5                	li	a7,25
- ecall
- 44e:	00000073          	ecall
- ret
- 452:	8082                	ret
-
-0000000000000454 <set_cpu>:
-.global set_cpu
-set_cpu:
- li a7, SYS_set_cpu
- 454:	48e9                	li	a7,26
- ecall
- 456:	00000073          	ecall
- ret
- 45a:	8082                	ret
diff --git a/user/forktest.o b/user/forktest.o
index 674beb5..ba5da69 100644
Binary files a/user/forktest.o and b/user/forktest.o differ
diff --git a/user/grep.asm b/user/grep.asm
index 1121ada..11088d4 100644
--- a/user/grep.asm
+++ b/user/grep.asm
@@ -181,7 +181,7 @@ int matchstar(int c, char *re, char *text)
   while((n = read(fd, buf+m, sizeof(buf)-m-1)) > 0){
  13c:	3ff00c13          	li	s8,1023
  140:	00001b17          	auipc	s6,0x1
- 144:	988b0b13          	addi	s6,s6,-1656 # ac8 <buf>
+ 144:	960b0b13          	addi	s6,s6,-1696 # aa0 <buf>
     p = buf;
  148:	8d5a                	mv	s10,s6
         *q = '\n';
@@ -311,11 +311,11 @@ int matchstar(int c, char *re, char *text)
  256:	00000097          	auipc	ra,0x0
  25a:	2ce080e7          	jalr	718(ra) # 524 <exit>
     fprintf(2, "usage: grep pattern [file ...]\n");
- 25e:	00001597          	auipc	a1,0x1
- 262:	80a58593          	addi	a1,a1,-2038 # a68 <malloc+0xe6>
+ 25e:	00000597          	auipc	a1,0x0
+ 262:	7e258593          	addi	a1,a1,2018 # a40 <malloc+0xe6>
  266:	4509                	li	a0,2
  268:	00000097          	auipc	ra,0x0
- 26c:	62e080e7          	jalr	1582(ra) # 896 <fprintf>
+ 26c:	606080e7          	jalr	1542(ra) # 86e <fprintf>
     exit(1);
  270:	4505                	li	a0,1
  272:	00000097          	auipc	ra,0x0
@@ -332,9 +332,9 @@ int matchstar(int c, char *re, char *text)
       printf("grep: cannot open %s\n", argv[i]);
  290:	00093583          	ld	a1,0(s2)
  294:	00000517          	auipc	a0,0x0
- 298:	7f450513          	addi	a0,a0,2036 # a88 <malloc+0x106>
+ 298:	7cc50513          	addi	a0,a0,1996 # a60 <malloc+0x106>
  29c:	00000097          	auipc	ra,0x0
- 2a0:	628080e7          	jalr	1576(ra) # 8c4 <printf>
+ 2a0:	600080e7          	jalr	1536(ra) # 89c <printf>
       exit(1);
  2a4:	4505                	li	a0,1
  2a6:	00000097          	auipc	ra,0x0
@@ -977,696 +977,646 @@ uptime:
  ret
  5c2:	8082                	ret
 
-00000000000005c4 <pause_system>:
-.global pause_system
-pause_system:
- li a7, SYS_pause_system
- 5c4:	48d9                	li	a7,22
- ecall
- 5c6:	00000073          	ecall
- ret
- 5ca:	8082                	ret
-
-00000000000005cc <kill_system>:
-.global kill_system
-kill_system:
- li a7, SYS_kill_system
- 5cc:	48dd                	li	a7,23
- ecall
- 5ce:	00000073          	ecall
- ret
- 5d2:	8082                	ret
-
-00000000000005d4 <print_stats>:
-.global print_stats
-print_stats:
- li a7, SYS_print_stats
- 5d4:	48e1                	li	a7,24
- ecall
- 5d6:	00000073          	ecall
- ret
- 5da:	8082                	ret
-
-00000000000005dc <get_cpu>:
-.global get_cpu
-get_cpu:
- li a7, SYS_get_cpu
- 5dc:	48e5                	li	a7,25
- ecall
- 5de:	00000073          	ecall
- ret
- 5e2:	8082                	ret
-
-00000000000005e4 <set_cpu>:
-.global set_cpu
-set_cpu:
- li a7, SYS_set_cpu
- 5e4:	48e9                	li	a7,26
- ecall
- 5e6:	00000073          	ecall
- ret
- 5ea:	8082                	ret
-
-00000000000005ec <putc>:
+00000000000005c4 <putc>:
 
 static char digits[] = "0123456789ABCDEF";
 
 static void
 putc(int fd, char c)
 {
- 5ec:	1101                	addi	sp,sp,-32
- 5ee:	ec06                	sd	ra,24(sp)
- 5f0:	e822                	sd	s0,16(sp)
- 5f2:	1000                	addi	s0,sp,32
- 5f4:	feb407a3          	sb	a1,-17(s0)
+ 5c4:	1101                	addi	sp,sp,-32
+ 5c6:	ec06                	sd	ra,24(sp)
+ 5c8:	e822                	sd	s0,16(sp)
+ 5ca:	1000                	addi	s0,sp,32
+ 5cc:	feb407a3          	sb	a1,-17(s0)
   write(fd, &c, 1);
- 5f8:	4605                	li	a2,1
- 5fa:	fef40593          	addi	a1,s0,-17
- 5fe:	00000097          	auipc	ra,0x0
- 602:	f46080e7          	jalr	-186(ra) # 544 <write>
+ 5d0:	4605                	li	a2,1
+ 5d2:	fef40593          	addi	a1,s0,-17
+ 5d6:	00000097          	auipc	ra,0x0
+ 5da:	f6e080e7          	jalr	-146(ra) # 544 <write>
 }
- 606:	60e2                	ld	ra,24(sp)
- 608:	6442                	ld	s0,16(sp)
- 60a:	6105                	addi	sp,sp,32
- 60c:	8082                	ret
+ 5de:	60e2                	ld	ra,24(sp)
+ 5e0:	6442                	ld	s0,16(sp)
+ 5e2:	6105                	addi	sp,sp,32
+ 5e4:	8082                	ret
 
-000000000000060e <printint>:
+00000000000005e6 <printint>:
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 60e:	7139                	addi	sp,sp,-64
- 610:	fc06                	sd	ra,56(sp)
- 612:	f822                	sd	s0,48(sp)
- 614:	f426                	sd	s1,40(sp)
- 616:	f04a                	sd	s2,32(sp)
- 618:	ec4e                	sd	s3,24(sp)
- 61a:	0080                	addi	s0,sp,64
- 61c:	84aa                	mv	s1,a0
+ 5e6:	7139                	addi	sp,sp,-64
+ 5e8:	fc06                	sd	ra,56(sp)
+ 5ea:	f822                	sd	s0,48(sp)
+ 5ec:	f426                	sd	s1,40(sp)
+ 5ee:	f04a                	sd	s2,32(sp)
+ 5f0:	ec4e                	sd	s3,24(sp)
+ 5f2:	0080                	addi	s0,sp,64
+ 5f4:	84aa                	mv	s1,a0
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 61e:	c299                	beqz	a3,624 <printint+0x16>
- 620:	0805c863          	bltz	a1,6b0 <printint+0xa2>
+ 5f6:	c299                	beqz	a3,5fc <printint+0x16>
+ 5f8:	0805c863          	bltz	a1,688 <printint+0xa2>
     neg = 1;
     x = -xx;
   } else {
     x = xx;
- 624:	2581                	sext.w	a1,a1
+ 5fc:	2581                	sext.w	a1,a1
   neg = 0;
- 626:	4881                	li	a7,0
- 628:	fc040693          	addi	a3,s0,-64
+ 5fe:	4881                	li	a7,0
+ 600:	fc040693          	addi	a3,s0,-64
   }
 
   i = 0;
- 62c:	4701                	li	a4,0
+ 604:	4701                	li	a4,0
   do{
     buf[i++] = digits[x % base];
- 62e:	2601                	sext.w	a2,a2
- 630:	00000517          	auipc	a0,0x0
- 634:	47850513          	addi	a0,a0,1144 # aa8 <digits>
- 638:	883a                	mv	a6,a4
- 63a:	2705                	addiw	a4,a4,1
- 63c:	02c5f7bb          	remuw	a5,a1,a2
- 640:	1782                	slli	a5,a5,0x20
- 642:	9381                	srli	a5,a5,0x20
- 644:	97aa                	add	a5,a5,a0
- 646:	0007c783          	lbu	a5,0(a5)
- 64a:	00f68023          	sb	a5,0(a3)
+ 606:	2601                	sext.w	a2,a2
+ 608:	00000517          	auipc	a0,0x0
+ 60c:	47850513          	addi	a0,a0,1144 # a80 <digits>
+ 610:	883a                	mv	a6,a4
+ 612:	2705                	addiw	a4,a4,1
+ 614:	02c5f7bb          	remuw	a5,a1,a2
+ 618:	1782                	slli	a5,a5,0x20
+ 61a:	9381                	srli	a5,a5,0x20
+ 61c:	97aa                	add	a5,a5,a0
+ 61e:	0007c783          	lbu	a5,0(a5)
+ 622:	00f68023          	sb	a5,0(a3)
   }while((x /= base) != 0);
- 64e:	0005879b          	sext.w	a5,a1
- 652:	02c5d5bb          	divuw	a1,a1,a2
- 656:	0685                	addi	a3,a3,1
- 658:	fec7f0e3          	bgeu	a5,a2,638 <printint+0x2a>
+ 626:	0005879b          	sext.w	a5,a1
+ 62a:	02c5d5bb          	divuw	a1,a1,a2
+ 62e:	0685                	addi	a3,a3,1
+ 630:	fec7f0e3          	bgeu	a5,a2,610 <printint+0x2a>
   if(neg)
- 65c:	00088b63          	beqz	a7,672 <printint+0x64>
+ 634:	00088b63          	beqz	a7,64a <printint+0x64>
     buf[i++] = '-';
- 660:	fd040793          	addi	a5,s0,-48
- 664:	973e                	add	a4,a4,a5
- 666:	02d00793          	li	a5,45
- 66a:	fef70823          	sb	a5,-16(a4)
- 66e:	0028071b          	addiw	a4,a6,2
+ 638:	fd040793          	addi	a5,s0,-48
+ 63c:	973e                	add	a4,a4,a5
+ 63e:	02d00793          	li	a5,45
+ 642:	fef70823          	sb	a5,-16(a4)
+ 646:	0028071b          	addiw	a4,a6,2
 
   while(--i >= 0)
- 672:	02e05863          	blez	a4,6a2 <printint+0x94>
- 676:	fc040793          	addi	a5,s0,-64
- 67a:	00e78933          	add	s2,a5,a4
- 67e:	fff78993          	addi	s3,a5,-1
- 682:	99ba                	add	s3,s3,a4
- 684:	377d                	addiw	a4,a4,-1
- 686:	1702                	slli	a4,a4,0x20
- 688:	9301                	srli	a4,a4,0x20
- 68a:	40e989b3          	sub	s3,s3,a4
+ 64a:	02e05863          	blez	a4,67a <printint+0x94>
+ 64e:	fc040793          	addi	a5,s0,-64
+ 652:	00e78933          	add	s2,a5,a4
+ 656:	fff78993          	addi	s3,a5,-1
+ 65a:	99ba                	add	s3,s3,a4
+ 65c:	377d                	addiw	a4,a4,-1
+ 65e:	1702                	slli	a4,a4,0x20
+ 660:	9301                	srli	a4,a4,0x20
+ 662:	40e989b3          	sub	s3,s3,a4
     putc(fd, buf[i]);
- 68e:	fff94583          	lbu	a1,-1(s2)
- 692:	8526                	mv	a0,s1
- 694:	00000097          	auipc	ra,0x0
- 698:	f58080e7          	jalr	-168(ra) # 5ec <putc>
+ 666:	fff94583          	lbu	a1,-1(s2)
+ 66a:	8526                	mv	a0,s1
+ 66c:	00000097          	auipc	ra,0x0
+ 670:	f58080e7          	jalr	-168(ra) # 5c4 <putc>
   while(--i >= 0)
- 69c:	197d                	addi	s2,s2,-1
- 69e:	ff3918e3          	bne	s2,s3,68e <printint+0x80>
+ 674:	197d                	addi	s2,s2,-1
+ 676:	ff3918e3          	bne	s2,s3,666 <printint+0x80>
 }
- 6a2:	70e2                	ld	ra,56(sp)
- 6a4:	7442                	ld	s0,48(sp)
- 6a6:	74a2                	ld	s1,40(sp)
- 6a8:	7902                	ld	s2,32(sp)
- 6aa:	69e2                	ld	s3,24(sp)
- 6ac:	6121                	addi	sp,sp,64
- 6ae:	8082                	ret
+ 67a:	70e2                	ld	ra,56(sp)
+ 67c:	7442                	ld	s0,48(sp)
+ 67e:	74a2                	ld	s1,40(sp)
+ 680:	7902                	ld	s2,32(sp)
+ 682:	69e2                	ld	s3,24(sp)
+ 684:	6121                	addi	sp,sp,64
+ 686:	8082                	ret
     x = -xx;
- 6b0:	40b005bb          	negw	a1,a1
+ 688:	40b005bb          	negw	a1,a1
     neg = 1;
- 6b4:	4885                	li	a7,1
+ 68c:	4885                	li	a7,1
     x = -xx;
- 6b6:	bf8d                	j	628 <printint+0x1a>
+ 68e:	bf8d                	j	600 <printint+0x1a>
 
-00000000000006b8 <vprintf>:
+0000000000000690 <vprintf>:
 }
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 vprintf(int fd, const char *fmt, va_list ap)
 {
- 6b8:	7119                	addi	sp,sp,-128
- 6ba:	fc86                	sd	ra,120(sp)
- 6bc:	f8a2                	sd	s0,112(sp)
- 6be:	f4a6                	sd	s1,104(sp)
- 6c0:	f0ca                	sd	s2,96(sp)
- 6c2:	ecce                	sd	s3,88(sp)
- 6c4:	e8d2                	sd	s4,80(sp)
- 6c6:	e4d6                	sd	s5,72(sp)
- 6c8:	e0da                	sd	s6,64(sp)
- 6ca:	fc5e                	sd	s7,56(sp)
- 6cc:	f862                	sd	s8,48(sp)
- 6ce:	f466                	sd	s9,40(sp)
- 6d0:	f06a                	sd	s10,32(sp)
- 6d2:	ec6e                	sd	s11,24(sp)
- 6d4:	0100                	addi	s0,sp,128
+ 690:	7119                	addi	sp,sp,-128
+ 692:	fc86                	sd	ra,120(sp)
+ 694:	f8a2                	sd	s0,112(sp)
+ 696:	f4a6                	sd	s1,104(sp)
+ 698:	f0ca                	sd	s2,96(sp)
+ 69a:	ecce                	sd	s3,88(sp)
+ 69c:	e8d2                	sd	s4,80(sp)
+ 69e:	e4d6                	sd	s5,72(sp)
+ 6a0:	e0da                	sd	s6,64(sp)
+ 6a2:	fc5e                	sd	s7,56(sp)
+ 6a4:	f862                	sd	s8,48(sp)
+ 6a6:	f466                	sd	s9,40(sp)
+ 6a8:	f06a                	sd	s10,32(sp)
+ 6aa:	ec6e                	sd	s11,24(sp)
+ 6ac:	0100                	addi	s0,sp,128
   char *s;
   int c, i, state;
 
   state = 0;
   for(i = 0; fmt[i]; i++){
- 6d6:	0005c903          	lbu	s2,0(a1)
- 6da:	18090f63          	beqz	s2,878 <vprintf+0x1c0>
- 6de:	8aaa                	mv	s5,a0
- 6e0:	8b32                	mv	s6,a2
- 6e2:	00158493          	addi	s1,a1,1
+ 6ae:	0005c903          	lbu	s2,0(a1)
+ 6b2:	18090f63          	beqz	s2,850 <vprintf+0x1c0>
+ 6b6:	8aaa                	mv	s5,a0
+ 6b8:	8b32                	mv	s6,a2
+ 6ba:	00158493          	addi	s1,a1,1
   state = 0;
- 6e6:	4981                	li	s3,0
+ 6be:	4981                	li	s3,0
       if(c == '%'){
         state = '%';
       } else {
         putc(fd, c);
       }
     } else if(state == '%'){
- 6e8:	02500a13          	li	s4,37
+ 6c0:	02500a13          	li	s4,37
       if(c == 'd'){
- 6ec:	06400c13          	li	s8,100
+ 6c4:	06400c13          	li	s8,100
         printint(fd, va_arg(ap, int), 10, 1);
       } else if(c == 'l') {
- 6f0:	06c00c93          	li	s9,108
+ 6c8:	06c00c93          	li	s9,108
         printint(fd, va_arg(ap, uint64), 10, 0);
       } else if(c == 'x') {
- 6f4:	07800d13          	li	s10,120
+ 6cc:	07800d13          	li	s10,120
         printint(fd, va_arg(ap, int), 16, 0);
       } else if(c == 'p') {
- 6f8:	07000d93          	li	s11,112
+ 6d0:	07000d93          	li	s11,112
     putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
- 6fc:	00000b97          	auipc	s7,0x0
- 700:	3acb8b93          	addi	s7,s7,940 # aa8 <digits>
- 704:	a839                	j	722 <vprintf+0x6a>
+ 6d4:	00000b97          	auipc	s7,0x0
+ 6d8:	3acb8b93          	addi	s7,s7,940 # a80 <digits>
+ 6dc:	a839                	j	6fa <vprintf+0x6a>
         putc(fd, c);
- 706:	85ca                	mv	a1,s2
- 708:	8556                	mv	a0,s5
- 70a:	00000097          	auipc	ra,0x0
- 70e:	ee2080e7          	jalr	-286(ra) # 5ec <putc>
- 712:	a019                	j	718 <vprintf+0x60>
+ 6de:	85ca                	mv	a1,s2
+ 6e0:	8556                	mv	a0,s5
+ 6e2:	00000097          	auipc	ra,0x0
+ 6e6:	ee2080e7          	jalr	-286(ra) # 5c4 <putc>
+ 6ea:	a019                	j	6f0 <vprintf+0x60>
     } else if(state == '%'){
- 714:	01498f63          	beq	s3,s4,732 <vprintf+0x7a>
+ 6ec:	01498f63          	beq	s3,s4,70a <vprintf+0x7a>
   for(i = 0; fmt[i]; i++){
- 718:	0485                	addi	s1,s1,1
- 71a:	fff4c903          	lbu	s2,-1(s1)
- 71e:	14090d63          	beqz	s2,878 <vprintf+0x1c0>
+ 6f0:	0485                	addi	s1,s1,1
+ 6f2:	fff4c903          	lbu	s2,-1(s1)
+ 6f6:	14090d63          	beqz	s2,850 <vprintf+0x1c0>
     c = fmt[i] & 0xff;
- 722:	0009079b          	sext.w	a5,s2
+ 6fa:	0009079b          	sext.w	a5,s2
     if(state == 0){
- 726:	fe0997e3          	bnez	s3,714 <vprintf+0x5c>
+ 6fe:	fe0997e3          	bnez	s3,6ec <vprintf+0x5c>
       if(c == '%'){
- 72a:	fd479ee3          	bne	a5,s4,706 <vprintf+0x4e>
+ 702:	fd479ee3          	bne	a5,s4,6de <vprintf+0x4e>
         state = '%';
- 72e:	89be                	mv	s3,a5
- 730:	b7e5                	j	718 <vprintf+0x60>
+ 706:	89be                	mv	s3,a5
+ 708:	b7e5                	j	6f0 <vprintf+0x60>
       if(c == 'd'){
- 732:	05878063          	beq	a5,s8,772 <vprintf+0xba>
+ 70a:	05878063          	beq	a5,s8,74a <vprintf+0xba>
       } else if(c == 'l') {
- 736:	05978c63          	beq	a5,s9,78e <vprintf+0xd6>
+ 70e:	05978c63          	beq	a5,s9,766 <vprintf+0xd6>
       } else if(c == 'x') {
- 73a:	07a78863          	beq	a5,s10,7aa <vprintf+0xf2>
+ 712:	07a78863          	beq	a5,s10,782 <vprintf+0xf2>
       } else if(c == 'p') {
- 73e:	09b78463          	beq	a5,s11,7c6 <vprintf+0x10e>
+ 716:	09b78463          	beq	a5,s11,79e <vprintf+0x10e>
         printptr(fd, va_arg(ap, uint64));
       } else if(c == 's'){
- 742:	07300713          	li	a4,115
- 746:	0ce78663          	beq	a5,a4,812 <vprintf+0x15a>
+ 71a:	07300713          	li	a4,115
+ 71e:	0ce78663          	beq	a5,a4,7ea <vprintf+0x15a>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 74a:	06300713          	li	a4,99
- 74e:	0ee78e63          	beq	a5,a4,84a <vprintf+0x192>
+ 722:	06300713          	li	a4,99
+ 726:	0ee78e63          	beq	a5,a4,822 <vprintf+0x192>
         putc(fd, va_arg(ap, uint));
       } else if(c == '%'){
- 752:	11478863          	beq	a5,s4,862 <vprintf+0x1aa>
+ 72a:	11478863          	beq	a5,s4,83a <vprintf+0x1aa>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
- 756:	85d2                	mv	a1,s4
- 758:	8556                	mv	a0,s5
- 75a:	00000097          	auipc	ra,0x0
- 75e:	e92080e7          	jalr	-366(ra) # 5ec <putc>
+ 72e:	85d2                	mv	a1,s4
+ 730:	8556                	mv	a0,s5
+ 732:	00000097          	auipc	ra,0x0
+ 736:	e92080e7          	jalr	-366(ra) # 5c4 <putc>
         putc(fd, c);
- 762:	85ca                	mv	a1,s2
- 764:	8556                	mv	a0,s5
- 766:	00000097          	auipc	ra,0x0
- 76a:	e86080e7          	jalr	-378(ra) # 5ec <putc>
+ 73a:	85ca                	mv	a1,s2
+ 73c:	8556                	mv	a0,s5
+ 73e:	00000097          	auipc	ra,0x0
+ 742:	e86080e7          	jalr	-378(ra) # 5c4 <putc>
       }
       state = 0;
- 76e:	4981                	li	s3,0
- 770:	b765                	j	718 <vprintf+0x60>
+ 746:	4981                	li	s3,0
+ 748:	b765                	j	6f0 <vprintf+0x60>
         printint(fd, va_arg(ap, int), 10, 1);
- 772:	008b0913          	addi	s2,s6,8
- 776:	4685                	li	a3,1
- 778:	4629                	li	a2,10
- 77a:	000b2583          	lw	a1,0(s6)
- 77e:	8556                	mv	a0,s5
- 780:	00000097          	auipc	ra,0x0
- 784:	e8e080e7          	jalr	-370(ra) # 60e <printint>
- 788:	8b4a                	mv	s6,s2
+ 74a:	008b0913          	addi	s2,s6,8
+ 74e:	4685                	li	a3,1
+ 750:	4629                	li	a2,10
+ 752:	000b2583          	lw	a1,0(s6)
+ 756:	8556                	mv	a0,s5
+ 758:	00000097          	auipc	ra,0x0
+ 75c:	e8e080e7          	jalr	-370(ra) # 5e6 <printint>
+ 760:	8b4a                	mv	s6,s2
       state = 0;
- 78a:	4981                	li	s3,0
- 78c:	b771                	j	718 <vprintf+0x60>
+ 762:	4981                	li	s3,0
+ 764:	b771                	j	6f0 <vprintf+0x60>
         printint(fd, va_arg(ap, uint64), 10, 0);
- 78e:	008b0913          	addi	s2,s6,8
- 792:	4681                	li	a3,0
- 794:	4629                	li	a2,10
- 796:	000b2583          	lw	a1,0(s6)
- 79a:	8556                	mv	a0,s5
- 79c:	00000097          	auipc	ra,0x0
- 7a0:	e72080e7          	jalr	-398(ra) # 60e <printint>
- 7a4:	8b4a                	mv	s6,s2
+ 766:	008b0913          	addi	s2,s6,8
+ 76a:	4681                	li	a3,0
+ 76c:	4629                	li	a2,10
+ 76e:	000b2583          	lw	a1,0(s6)
+ 772:	8556                	mv	a0,s5
+ 774:	00000097          	auipc	ra,0x0
+ 778:	e72080e7          	jalr	-398(ra) # 5e6 <printint>
+ 77c:	8b4a                	mv	s6,s2
       state = 0;
- 7a6:	4981                	li	s3,0
- 7a8:	bf85                	j	718 <vprintf+0x60>
+ 77e:	4981                	li	s3,0
+ 780:	bf85                	j	6f0 <vprintf+0x60>
         printint(fd, va_arg(ap, int), 16, 0);
- 7aa:	008b0913          	addi	s2,s6,8
- 7ae:	4681                	li	a3,0
- 7b0:	4641                	li	a2,16
- 7b2:	000b2583          	lw	a1,0(s6)
- 7b6:	8556                	mv	a0,s5
- 7b8:	00000097          	auipc	ra,0x0
- 7bc:	e56080e7          	jalr	-426(ra) # 60e <printint>
- 7c0:	8b4a                	mv	s6,s2
+ 782:	008b0913          	addi	s2,s6,8
+ 786:	4681                	li	a3,0
+ 788:	4641                	li	a2,16
+ 78a:	000b2583          	lw	a1,0(s6)
+ 78e:	8556                	mv	a0,s5
+ 790:	00000097          	auipc	ra,0x0
+ 794:	e56080e7          	jalr	-426(ra) # 5e6 <printint>
+ 798:	8b4a                	mv	s6,s2
       state = 0;
- 7c2:	4981                	li	s3,0
- 7c4:	bf91                	j	718 <vprintf+0x60>
+ 79a:	4981                	li	s3,0
+ 79c:	bf91                	j	6f0 <vprintf+0x60>
         printptr(fd, va_arg(ap, uint64));
- 7c6:	008b0793          	addi	a5,s6,8
- 7ca:	f8f43423          	sd	a5,-120(s0)
- 7ce:	000b3983          	ld	s3,0(s6)
+ 79e:	008b0793          	addi	a5,s6,8
+ 7a2:	f8f43423          	sd	a5,-120(s0)
+ 7a6:	000b3983          	ld	s3,0(s6)
   putc(fd, '0');
- 7d2:	03000593          	li	a1,48
- 7d6:	8556                	mv	a0,s5
- 7d8:	00000097          	auipc	ra,0x0
- 7dc:	e14080e7          	jalr	-492(ra) # 5ec <putc>
+ 7aa:	03000593          	li	a1,48
+ 7ae:	8556                	mv	a0,s5
+ 7b0:	00000097          	auipc	ra,0x0
+ 7b4:	e14080e7          	jalr	-492(ra) # 5c4 <putc>
   putc(fd, 'x');
- 7e0:	85ea                	mv	a1,s10
- 7e2:	8556                	mv	a0,s5
- 7e4:	00000097          	auipc	ra,0x0
- 7e8:	e08080e7          	jalr	-504(ra) # 5ec <putc>
- 7ec:	4941                	li	s2,16
+ 7b8:	85ea                	mv	a1,s10
+ 7ba:	8556                	mv	a0,s5
+ 7bc:	00000097          	auipc	ra,0x0
+ 7c0:	e08080e7          	jalr	-504(ra) # 5c4 <putc>
+ 7c4:	4941                	li	s2,16
     putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
- 7ee:	03c9d793          	srli	a5,s3,0x3c
- 7f2:	97de                	add	a5,a5,s7
- 7f4:	0007c583          	lbu	a1,0(a5)
- 7f8:	8556                	mv	a0,s5
- 7fa:	00000097          	auipc	ra,0x0
- 7fe:	df2080e7          	jalr	-526(ra) # 5ec <putc>
+ 7c6:	03c9d793          	srli	a5,s3,0x3c
+ 7ca:	97de                	add	a5,a5,s7
+ 7cc:	0007c583          	lbu	a1,0(a5)
+ 7d0:	8556                	mv	a0,s5
+ 7d2:	00000097          	auipc	ra,0x0
+ 7d6:	df2080e7          	jalr	-526(ra) # 5c4 <putc>
   for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
- 802:	0992                	slli	s3,s3,0x4
- 804:	397d                	addiw	s2,s2,-1
- 806:	fe0914e3          	bnez	s2,7ee <vprintf+0x136>
+ 7da:	0992                	slli	s3,s3,0x4
+ 7dc:	397d                	addiw	s2,s2,-1
+ 7de:	fe0914e3          	bnez	s2,7c6 <vprintf+0x136>
         printptr(fd, va_arg(ap, uint64));
- 80a:	f8843b03          	ld	s6,-120(s0)
+ 7e2:	f8843b03          	ld	s6,-120(s0)
       state = 0;
- 80e:	4981                	li	s3,0
- 810:	b721                	j	718 <vprintf+0x60>
+ 7e6:	4981                	li	s3,0
+ 7e8:	b721                	j	6f0 <vprintf+0x60>
         s = va_arg(ap, char*);
- 812:	008b0993          	addi	s3,s6,8
- 816:	000b3903          	ld	s2,0(s6)
+ 7ea:	008b0993          	addi	s3,s6,8
+ 7ee:	000b3903          	ld	s2,0(s6)
         if(s == 0)
- 81a:	02090163          	beqz	s2,83c <vprintf+0x184>
+ 7f2:	02090163          	beqz	s2,814 <vprintf+0x184>
         while(*s != 0){
- 81e:	00094583          	lbu	a1,0(s2)
- 822:	c9a1                	beqz	a1,872 <vprintf+0x1ba>
+ 7f6:	00094583          	lbu	a1,0(s2)
+ 7fa:	c9a1                	beqz	a1,84a <vprintf+0x1ba>
           putc(fd, *s);
- 824:	8556                	mv	a0,s5
- 826:	00000097          	auipc	ra,0x0
- 82a:	dc6080e7          	jalr	-570(ra) # 5ec <putc>
+ 7fc:	8556                	mv	a0,s5
+ 7fe:	00000097          	auipc	ra,0x0
+ 802:	dc6080e7          	jalr	-570(ra) # 5c4 <putc>
           s++;
- 82e:	0905                	addi	s2,s2,1
+ 806:	0905                	addi	s2,s2,1
         while(*s != 0){
- 830:	00094583          	lbu	a1,0(s2)
- 834:	f9e5                	bnez	a1,824 <vprintf+0x16c>
+ 808:	00094583          	lbu	a1,0(s2)
+ 80c:	f9e5                	bnez	a1,7fc <vprintf+0x16c>
         s = va_arg(ap, char*);
- 836:	8b4e                	mv	s6,s3
+ 80e:	8b4e                	mv	s6,s3
       state = 0;
- 838:	4981                	li	s3,0
- 83a:	bdf9                	j	718 <vprintf+0x60>
+ 810:	4981                	li	s3,0
+ 812:	bdf9                	j	6f0 <vprintf+0x60>
           s = "(null)";
- 83c:	00000917          	auipc	s2,0x0
- 840:	26490913          	addi	s2,s2,612 # aa0 <malloc+0x11e>
+ 814:	00000917          	auipc	s2,0x0
+ 818:	26490913          	addi	s2,s2,612 # a78 <malloc+0x11e>
         while(*s != 0){
- 844:	02800593          	li	a1,40
- 848:	bff1                	j	824 <vprintf+0x16c>
+ 81c:	02800593          	li	a1,40
+ 820:	bff1                	j	7fc <vprintf+0x16c>
         putc(fd, va_arg(ap, uint));
- 84a:	008b0913          	addi	s2,s6,8
- 84e:	000b4583          	lbu	a1,0(s6)
- 852:	8556                	mv	a0,s5
- 854:	00000097          	auipc	ra,0x0
- 858:	d98080e7          	jalr	-616(ra) # 5ec <putc>
- 85c:	8b4a                	mv	s6,s2
+ 822:	008b0913          	addi	s2,s6,8
+ 826:	000b4583          	lbu	a1,0(s6)
+ 82a:	8556                	mv	a0,s5
+ 82c:	00000097          	auipc	ra,0x0
+ 830:	d98080e7          	jalr	-616(ra) # 5c4 <putc>
+ 834:	8b4a                	mv	s6,s2
       state = 0;
- 85e:	4981                	li	s3,0
- 860:	bd65                	j	718 <vprintf+0x60>
+ 836:	4981                	li	s3,0
+ 838:	bd65                	j	6f0 <vprintf+0x60>
         putc(fd, c);
- 862:	85d2                	mv	a1,s4
- 864:	8556                	mv	a0,s5
- 866:	00000097          	auipc	ra,0x0
- 86a:	d86080e7          	jalr	-634(ra) # 5ec <putc>
+ 83a:	85d2                	mv	a1,s4
+ 83c:	8556                	mv	a0,s5
+ 83e:	00000097          	auipc	ra,0x0
+ 842:	d86080e7          	jalr	-634(ra) # 5c4 <putc>
       state = 0;
- 86e:	4981                	li	s3,0
- 870:	b565                	j	718 <vprintf+0x60>
+ 846:	4981                	li	s3,0
+ 848:	b565                	j	6f0 <vprintf+0x60>
         s = va_arg(ap, char*);
- 872:	8b4e                	mv	s6,s3
+ 84a:	8b4e                	mv	s6,s3
       state = 0;
- 874:	4981                	li	s3,0
- 876:	b54d                	j	718 <vprintf+0x60>
+ 84c:	4981                	li	s3,0
+ 84e:	b54d                	j	6f0 <vprintf+0x60>
     }
   }
 }
- 878:	70e6                	ld	ra,120(sp)
- 87a:	7446                	ld	s0,112(sp)
- 87c:	74a6                	ld	s1,104(sp)
- 87e:	7906                	ld	s2,96(sp)
- 880:	69e6                	ld	s3,88(sp)
- 882:	6a46                	ld	s4,80(sp)
- 884:	6aa6                	ld	s5,72(sp)
- 886:	6b06                	ld	s6,64(sp)
- 888:	7be2                	ld	s7,56(sp)
- 88a:	7c42                	ld	s8,48(sp)
- 88c:	7ca2                	ld	s9,40(sp)
- 88e:	7d02                	ld	s10,32(sp)
- 890:	6de2                	ld	s11,24(sp)
- 892:	6109                	addi	sp,sp,128
- 894:	8082                	ret
-
-0000000000000896 <fprintf>:
+ 850:	70e6                	ld	ra,120(sp)
+ 852:	7446                	ld	s0,112(sp)
+ 854:	74a6                	ld	s1,104(sp)
+ 856:	7906                	ld	s2,96(sp)
+ 858:	69e6                	ld	s3,88(sp)
+ 85a:	6a46                	ld	s4,80(sp)
+ 85c:	6aa6                	ld	s5,72(sp)
+ 85e:	6b06                	ld	s6,64(sp)
+ 860:	7be2                	ld	s7,56(sp)
+ 862:	7c42                	ld	s8,48(sp)
+ 864:	7ca2                	ld	s9,40(sp)
+ 866:	7d02                	ld	s10,32(sp)
+ 868:	6de2                	ld	s11,24(sp)
+ 86a:	6109                	addi	sp,sp,128
+ 86c:	8082                	ret
+
+000000000000086e <fprintf>:
 
 void
 fprintf(int fd, const char *fmt, ...)
 {
- 896:	715d                	addi	sp,sp,-80
- 898:	ec06                	sd	ra,24(sp)
- 89a:	e822                	sd	s0,16(sp)
- 89c:	1000                	addi	s0,sp,32
- 89e:	e010                	sd	a2,0(s0)
- 8a0:	e414                	sd	a3,8(s0)
- 8a2:	e818                	sd	a4,16(s0)
- 8a4:	ec1c                	sd	a5,24(s0)
- 8a6:	03043023          	sd	a6,32(s0)
- 8aa:	03143423          	sd	a7,40(s0)
+ 86e:	715d                	addi	sp,sp,-80
+ 870:	ec06                	sd	ra,24(sp)
+ 872:	e822                	sd	s0,16(sp)
+ 874:	1000                	addi	s0,sp,32
+ 876:	e010                	sd	a2,0(s0)
+ 878:	e414                	sd	a3,8(s0)
+ 87a:	e818                	sd	a4,16(s0)
+ 87c:	ec1c                	sd	a5,24(s0)
+ 87e:	03043023          	sd	a6,32(s0)
+ 882:	03143423          	sd	a7,40(s0)
   va_list ap;
 
   va_start(ap, fmt);
- 8ae:	fe843423          	sd	s0,-24(s0)
+ 886:	fe843423          	sd	s0,-24(s0)
   vprintf(fd, fmt, ap);
- 8b2:	8622                	mv	a2,s0
- 8b4:	00000097          	auipc	ra,0x0
- 8b8:	e04080e7          	jalr	-508(ra) # 6b8 <vprintf>
+ 88a:	8622                	mv	a2,s0
+ 88c:	00000097          	auipc	ra,0x0
+ 890:	e04080e7          	jalr	-508(ra) # 690 <vprintf>
 }
- 8bc:	60e2                	ld	ra,24(sp)
- 8be:	6442                	ld	s0,16(sp)
- 8c0:	6161                	addi	sp,sp,80
- 8c2:	8082                	ret
+ 894:	60e2                	ld	ra,24(sp)
+ 896:	6442                	ld	s0,16(sp)
+ 898:	6161                	addi	sp,sp,80
+ 89a:	8082                	ret
 
-00000000000008c4 <printf>:
+000000000000089c <printf>:
 
 void
 printf(const char *fmt, ...)
 {
- 8c4:	711d                	addi	sp,sp,-96
- 8c6:	ec06                	sd	ra,24(sp)
- 8c8:	e822                	sd	s0,16(sp)
- 8ca:	1000                	addi	s0,sp,32
- 8cc:	e40c                	sd	a1,8(s0)
- 8ce:	e810                	sd	a2,16(s0)
- 8d0:	ec14                	sd	a3,24(s0)
- 8d2:	f018                	sd	a4,32(s0)
- 8d4:	f41c                	sd	a5,40(s0)
- 8d6:	03043823          	sd	a6,48(s0)
- 8da:	03143c23          	sd	a7,56(s0)
+ 89c:	711d                	addi	sp,sp,-96
+ 89e:	ec06                	sd	ra,24(sp)
+ 8a0:	e822                	sd	s0,16(sp)
+ 8a2:	1000                	addi	s0,sp,32
+ 8a4:	e40c                	sd	a1,8(s0)
+ 8a6:	e810                	sd	a2,16(s0)
+ 8a8:	ec14                	sd	a3,24(s0)
+ 8aa:	f018                	sd	a4,32(s0)
+ 8ac:	f41c                	sd	a5,40(s0)
+ 8ae:	03043823          	sd	a6,48(s0)
+ 8b2:	03143c23          	sd	a7,56(s0)
   va_list ap;
 
   va_start(ap, fmt);
- 8de:	00840613          	addi	a2,s0,8
- 8e2:	fec43423          	sd	a2,-24(s0)
+ 8b6:	00840613          	addi	a2,s0,8
+ 8ba:	fec43423          	sd	a2,-24(s0)
   vprintf(1, fmt, ap);
- 8e6:	85aa                	mv	a1,a0
- 8e8:	4505                	li	a0,1
- 8ea:	00000097          	auipc	ra,0x0
- 8ee:	dce080e7          	jalr	-562(ra) # 6b8 <vprintf>
+ 8be:	85aa                	mv	a1,a0
+ 8c0:	4505                	li	a0,1
+ 8c2:	00000097          	auipc	ra,0x0
+ 8c6:	dce080e7          	jalr	-562(ra) # 690 <vprintf>
 }
- 8f2:	60e2                	ld	ra,24(sp)
- 8f4:	6442                	ld	s0,16(sp)
- 8f6:	6125                	addi	sp,sp,96
- 8f8:	8082                	ret
+ 8ca:	60e2                	ld	ra,24(sp)
+ 8cc:	6442                	ld	s0,16(sp)
+ 8ce:	6125                	addi	sp,sp,96
+ 8d0:	8082                	ret
 
-00000000000008fa <free>:
+00000000000008d2 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 8fa:	1141                	addi	sp,sp,-16
- 8fc:	e422                	sd	s0,8(sp)
- 8fe:	0800                	addi	s0,sp,16
+ 8d2:	1141                	addi	sp,sp,-16
+ 8d4:	e422                	sd	s0,8(sp)
+ 8d6:	0800                	addi	s0,sp,16
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
- 900:	ff050693          	addi	a3,a0,-16
+ 8d8:	ff050693          	addi	a3,a0,-16
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 904:	00000797          	auipc	a5,0x0
- 908:	1bc7b783          	ld	a5,444(a5) # ac0 <freep>
- 90c:	a805                	j	93c <free+0x42>
+ 8dc:	00000797          	auipc	a5,0x0
+ 8e0:	1bc7b783          	ld	a5,444(a5) # a98 <freep>
+ 8e4:	a805                	j	914 <free+0x42>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
       break;
   if(bp + bp->s.size == p->s.ptr){
     bp->s.size += p->s.ptr->s.size;
- 90e:	4618                	lw	a4,8(a2)
- 910:	9db9                	addw	a1,a1,a4
- 912:	feb52c23          	sw	a1,-8(a0)
+ 8e6:	4618                	lw	a4,8(a2)
+ 8e8:	9db9                	addw	a1,a1,a4
+ 8ea:	feb52c23          	sw	a1,-8(a0)
     bp->s.ptr = p->s.ptr->s.ptr;
- 916:	6398                	ld	a4,0(a5)
- 918:	6318                	ld	a4,0(a4)
- 91a:	fee53823          	sd	a4,-16(a0)
- 91e:	a091                	j	962 <free+0x68>
+ 8ee:	6398                	ld	a4,0(a5)
+ 8f0:	6318                	ld	a4,0(a4)
+ 8f2:	fee53823          	sd	a4,-16(a0)
+ 8f6:	a091                	j	93a <free+0x68>
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
     p->s.size += bp->s.size;
- 920:	ff852703          	lw	a4,-8(a0)
- 924:	9e39                	addw	a2,a2,a4
- 926:	c790                	sw	a2,8(a5)
+ 8f8:	ff852703          	lw	a4,-8(a0)
+ 8fc:	9e39                	addw	a2,a2,a4
+ 8fe:	c790                	sw	a2,8(a5)
     p->s.ptr = bp->s.ptr;
- 928:	ff053703          	ld	a4,-16(a0)
- 92c:	e398                	sd	a4,0(a5)
- 92e:	a099                	j	974 <free+0x7a>
+ 900:	ff053703          	ld	a4,-16(a0)
+ 904:	e398                	sd	a4,0(a5)
+ 906:	a099                	j	94c <free+0x7a>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 930:	6398                	ld	a4,0(a5)
- 932:	00e7e463          	bltu	a5,a4,93a <free+0x40>
- 936:	00e6ea63          	bltu	a3,a4,94a <free+0x50>
+ 908:	6398                	ld	a4,0(a5)
+ 90a:	00e7e463          	bltu	a5,a4,912 <free+0x40>
+ 90e:	00e6ea63          	bltu	a3,a4,922 <free+0x50>
 {
- 93a:	87ba                	mv	a5,a4
+ 912:	87ba                	mv	a5,a4
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 93c:	fed7fae3          	bgeu	a5,a3,930 <free+0x36>
- 940:	6398                	ld	a4,0(a5)
- 942:	00e6e463          	bltu	a3,a4,94a <free+0x50>
+ 914:	fed7fae3          	bgeu	a5,a3,908 <free+0x36>
+ 918:	6398                	ld	a4,0(a5)
+ 91a:	00e6e463          	bltu	a3,a4,922 <free+0x50>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 946:	fee7eae3          	bltu	a5,a4,93a <free+0x40>
+ 91e:	fee7eae3          	bltu	a5,a4,912 <free+0x40>
   if(bp + bp->s.size == p->s.ptr){
- 94a:	ff852583          	lw	a1,-8(a0)
- 94e:	6390                	ld	a2,0(a5)
- 950:	02059713          	slli	a4,a1,0x20
- 954:	9301                	srli	a4,a4,0x20
- 956:	0712                	slli	a4,a4,0x4
- 958:	9736                	add	a4,a4,a3
- 95a:	fae60ae3          	beq	a2,a4,90e <free+0x14>
+ 922:	ff852583          	lw	a1,-8(a0)
+ 926:	6390                	ld	a2,0(a5)
+ 928:	02059713          	slli	a4,a1,0x20
+ 92c:	9301                	srli	a4,a4,0x20
+ 92e:	0712                	slli	a4,a4,0x4
+ 930:	9736                	add	a4,a4,a3
+ 932:	fae60ae3          	beq	a2,a4,8e6 <free+0x14>
     bp->s.ptr = p->s.ptr;
- 95e:	fec53823          	sd	a2,-16(a0)
+ 936:	fec53823          	sd	a2,-16(a0)
   if(p + p->s.size == bp){
- 962:	4790                	lw	a2,8(a5)
- 964:	02061713          	slli	a4,a2,0x20
- 968:	9301                	srli	a4,a4,0x20
- 96a:	0712                	slli	a4,a4,0x4
- 96c:	973e                	add	a4,a4,a5
- 96e:	fae689e3          	beq	a3,a4,920 <free+0x26>
+ 93a:	4790                	lw	a2,8(a5)
+ 93c:	02061713          	slli	a4,a2,0x20
+ 940:	9301                	srli	a4,a4,0x20
+ 942:	0712                	slli	a4,a4,0x4
+ 944:	973e                	add	a4,a4,a5
+ 946:	fae689e3          	beq	a3,a4,8f8 <free+0x26>
   } else
     p->s.ptr = bp;
- 972:	e394                	sd	a3,0(a5)
+ 94a:	e394                	sd	a3,0(a5)
   freep = p;
- 974:	00000717          	auipc	a4,0x0
- 978:	14f73623          	sd	a5,332(a4) # ac0 <freep>
+ 94c:	00000717          	auipc	a4,0x0
+ 950:	14f73623          	sd	a5,332(a4) # a98 <freep>
 }
- 97c:	6422                	ld	s0,8(sp)
- 97e:	0141                	addi	sp,sp,16
- 980:	8082                	ret
+ 954:	6422                	ld	s0,8(sp)
+ 956:	0141                	addi	sp,sp,16
+ 958:	8082                	ret
 
-0000000000000982 <malloc>:
+000000000000095a <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 982:	7139                	addi	sp,sp,-64
- 984:	fc06                	sd	ra,56(sp)
- 986:	f822                	sd	s0,48(sp)
- 988:	f426                	sd	s1,40(sp)
- 98a:	f04a                	sd	s2,32(sp)
- 98c:	ec4e                	sd	s3,24(sp)
- 98e:	e852                	sd	s4,16(sp)
- 990:	e456                	sd	s5,8(sp)
- 992:	e05a                	sd	s6,0(sp)
- 994:	0080                	addi	s0,sp,64
+ 95a:	7139                	addi	sp,sp,-64
+ 95c:	fc06                	sd	ra,56(sp)
+ 95e:	f822                	sd	s0,48(sp)
+ 960:	f426                	sd	s1,40(sp)
+ 962:	f04a                	sd	s2,32(sp)
+ 964:	ec4e                	sd	s3,24(sp)
+ 966:	e852                	sd	s4,16(sp)
+ 968:	e456                	sd	s5,8(sp)
+ 96a:	e05a                	sd	s6,0(sp)
+ 96c:	0080                	addi	s0,sp,64
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 996:	02051493          	slli	s1,a0,0x20
- 99a:	9081                	srli	s1,s1,0x20
- 99c:	04bd                	addi	s1,s1,15
- 99e:	8091                	srli	s1,s1,0x4
- 9a0:	0014899b          	addiw	s3,s1,1
- 9a4:	0485                	addi	s1,s1,1
+ 96e:	02051493          	slli	s1,a0,0x20
+ 972:	9081                	srli	s1,s1,0x20
+ 974:	04bd                	addi	s1,s1,15
+ 976:	8091                	srli	s1,s1,0x4
+ 978:	0014899b          	addiw	s3,s1,1
+ 97c:	0485                	addi	s1,s1,1
   if((prevp = freep) == 0){
- 9a6:	00000517          	auipc	a0,0x0
- 9aa:	11a53503          	ld	a0,282(a0) # ac0 <freep>
- 9ae:	c515                	beqz	a0,9da <malloc+0x58>
+ 97e:	00000517          	auipc	a0,0x0
+ 982:	11a53503          	ld	a0,282(a0) # a98 <freep>
+ 986:	c515                	beqz	a0,9b2 <malloc+0x58>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 9b0:	611c                	ld	a5,0(a0)
+ 988:	611c                	ld	a5,0(a0)
     if(p->s.size >= nunits){
- 9b2:	4798                	lw	a4,8(a5)
- 9b4:	02977f63          	bgeu	a4,s1,9f2 <malloc+0x70>
- 9b8:	8a4e                	mv	s4,s3
- 9ba:	0009871b          	sext.w	a4,s3
- 9be:	6685                	lui	a3,0x1
- 9c0:	00d77363          	bgeu	a4,a3,9c6 <malloc+0x44>
- 9c4:	6a05                	lui	s4,0x1
- 9c6:	000a0b1b          	sext.w	s6,s4
+ 98a:	4798                	lw	a4,8(a5)
+ 98c:	02977f63          	bgeu	a4,s1,9ca <malloc+0x70>
+ 990:	8a4e                	mv	s4,s3
+ 992:	0009871b          	sext.w	a4,s3
+ 996:	6685                	lui	a3,0x1
+ 998:	00d77363          	bgeu	a4,a3,99e <malloc+0x44>
+ 99c:	6a05                	lui	s4,0x1
+ 99e:	000a0b1b          	sext.w	s6,s4
   p = sbrk(nu * sizeof(Header));
- 9ca:	004a1a1b          	slliw	s4,s4,0x4
+ 9a2:	004a1a1b          	slliw	s4,s4,0x4
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 9ce:	00000917          	auipc	s2,0x0
- 9d2:	0f290913          	addi	s2,s2,242 # ac0 <freep>
+ 9a6:	00000917          	auipc	s2,0x0
+ 9aa:	0f290913          	addi	s2,s2,242 # a98 <freep>
   if(p == (char*)-1)
- 9d6:	5afd                	li	s5,-1
- 9d8:	a88d                	j	a4a <malloc+0xc8>
+ 9ae:	5afd                	li	s5,-1
+ 9b0:	a88d                	j	a22 <malloc+0xc8>
     base.s.ptr = freep = prevp = &base;
- 9da:	00000797          	auipc	a5,0x0
- 9de:	4ee78793          	addi	a5,a5,1262 # ec8 <base>
- 9e2:	00000717          	auipc	a4,0x0
- 9e6:	0cf73f23          	sd	a5,222(a4) # ac0 <freep>
- 9ea:	e39c                	sd	a5,0(a5)
+ 9b2:	00000797          	auipc	a5,0x0
+ 9b6:	4ee78793          	addi	a5,a5,1262 # ea0 <base>
+ 9ba:	00000717          	auipc	a4,0x0
+ 9be:	0cf73f23          	sd	a5,222(a4) # a98 <freep>
+ 9c2:	e39c                	sd	a5,0(a5)
     base.s.size = 0;
- 9ec:	0007a423          	sw	zero,8(a5)
+ 9c4:	0007a423          	sw	zero,8(a5)
     if(p->s.size >= nunits){
- 9f0:	b7e1                	j	9b8 <malloc+0x36>
+ 9c8:	b7e1                	j	990 <malloc+0x36>
       if(p->s.size == nunits)
- 9f2:	02e48b63          	beq	s1,a4,a28 <malloc+0xa6>
+ 9ca:	02e48b63          	beq	s1,a4,a00 <malloc+0xa6>
         p->s.size -= nunits;
- 9f6:	4137073b          	subw	a4,a4,s3
- 9fa:	c798                	sw	a4,8(a5)
+ 9ce:	4137073b          	subw	a4,a4,s3
+ 9d2:	c798                	sw	a4,8(a5)
         p += p->s.size;
- 9fc:	1702                	slli	a4,a4,0x20
- 9fe:	9301                	srli	a4,a4,0x20
- a00:	0712                	slli	a4,a4,0x4
- a02:	97ba                	add	a5,a5,a4
+ 9d4:	1702                	slli	a4,a4,0x20
+ 9d6:	9301                	srli	a4,a4,0x20
+ 9d8:	0712                	slli	a4,a4,0x4
+ 9da:	97ba                	add	a5,a5,a4
         p->s.size = nunits;
- a04:	0137a423          	sw	s3,8(a5)
+ 9dc:	0137a423          	sw	s3,8(a5)
       freep = prevp;
- a08:	00000717          	auipc	a4,0x0
- a0c:	0aa73c23          	sd	a0,184(a4) # ac0 <freep>
+ 9e0:	00000717          	auipc	a4,0x0
+ 9e4:	0aa73c23          	sd	a0,184(a4) # a98 <freep>
       return (void*)(p + 1);
- a10:	01078513          	addi	a0,a5,16
+ 9e8:	01078513          	addi	a0,a5,16
       if((p = morecore(nunits)) == 0)
         return 0;
   }
 }
- a14:	70e2                	ld	ra,56(sp)
- a16:	7442                	ld	s0,48(sp)
- a18:	74a2                	ld	s1,40(sp)
- a1a:	7902                	ld	s2,32(sp)
- a1c:	69e2                	ld	s3,24(sp)
- a1e:	6a42                	ld	s4,16(sp)
- a20:	6aa2                	ld	s5,8(sp)
- a22:	6b02                	ld	s6,0(sp)
- a24:	6121                	addi	sp,sp,64
- a26:	8082                	ret
+ 9ec:	70e2                	ld	ra,56(sp)
+ 9ee:	7442                	ld	s0,48(sp)
+ 9f0:	74a2                	ld	s1,40(sp)
+ 9f2:	7902                	ld	s2,32(sp)
+ 9f4:	69e2                	ld	s3,24(sp)
+ 9f6:	6a42                	ld	s4,16(sp)
+ 9f8:	6aa2                	ld	s5,8(sp)
+ 9fa:	6b02                	ld	s6,0(sp)
+ 9fc:	6121                	addi	sp,sp,64
+ 9fe:	8082                	ret
         prevp->s.ptr = p->s.ptr;
- a28:	6398                	ld	a4,0(a5)
- a2a:	e118                	sd	a4,0(a0)
- a2c:	bff1                	j	a08 <malloc+0x86>
+ a00:	6398                	ld	a4,0(a5)
+ a02:	e118                	sd	a4,0(a0)
+ a04:	bff1                	j	9e0 <malloc+0x86>
   hp->s.size = nu;
- a2e:	01652423          	sw	s6,8(a0)
+ a06:	01652423          	sw	s6,8(a0)
   free((void*)(hp + 1));
- a32:	0541                	addi	a0,a0,16
- a34:	00000097          	auipc	ra,0x0
- a38:	ec6080e7          	jalr	-314(ra) # 8fa <free>
+ a0a:	0541                	addi	a0,a0,16
+ a0c:	00000097          	auipc	ra,0x0
+ a10:	ec6080e7          	jalr	-314(ra) # 8d2 <free>
   return freep;
- a3c:	00093503          	ld	a0,0(s2)
+ a14:	00093503          	ld	a0,0(s2)
       if((p = morecore(nunits)) == 0)
- a40:	d971                	beqz	a0,a14 <malloc+0x92>
+ a18:	d971                	beqz	a0,9ec <malloc+0x92>
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- a42:	611c                	ld	a5,0(a0)
+ a1a:	611c                	ld	a5,0(a0)
     if(p->s.size >= nunits){
- a44:	4798                	lw	a4,8(a5)
- a46:	fa9776e3          	bgeu	a4,s1,9f2 <malloc+0x70>
+ a1c:	4798                	lw	a4,8(a5)
+ a1e:	fa9776e3          	bgeu	a4,s1,9ca <malloc+0x70>
     if(p == freep)
- a4a:	00093703          	ld	a4,0(s2)
- a4e:	853e                	mv	a0,a5
- a50:	fef719e3          	bne	a4,a5,a42 <malloc+0xc0>
+ a22:	00093703          	ld	a4,0(s2)
+ a26:	853e                	mv	a0,a5
+ a28:	fef719e3          	bne	a4,a5,a1a <malloc+0xc0>
   p = sbrk(nu * sizeof(Header));
- a54:	8552                	mv	a0,s4
- a56:	00000097          	auipc	ra,0x0
- a5a:	b56080e7          	jalr	-1194(ra) # 5ac <sbrk>
+ a2c:	8552                	mv	a0,s4
+ a2e:	00000097          	auipc	ra,0x0
+ a32:	b7e080e7          	jalr	-1154(ra) # 5ac <sbrk>
   if(p == (char*)-1)
- a5e:	fd5518e3          	bne	a0,s5,a2e <malloc+0xac>
+ a36:	fd5518e3          	bne	a0,s5,a06 <malloc+0xac>
         return 0;
- a62:	4501                	li	a0,0
- a64:	bf45                	j	a14 <malloc+0x92>
+ a3a:	4501                	li	a0,0
+ a3c:	bf45                	j	9ec <malloc+0x92>
diff --git a/user/grep.o b/user/grep.o
index 861c84c..f6a8dfa 100644
Binary files a/user/grep.o and b/user/grep.o differ
diff --git a/user/grep.sym b/user/grep.sym
index 1c6ef2a..89e5dbb 100644
--- a/user/grep.sym
+++ b/user/grep.sym
@@ -1,7 +1,7 @@
 0000000000000000 .text
-0000000000000a68 .rodata
-0000000000000ac0 .sbss
-0000000000000ac8 .bss
+0000000000000a40 .rodata
+0000000000000a98 .sbss
+0000000000000aa0 .bss
 0000000000000000 .comment
 0000000000000000 .debug_aranges
 0000000000000000 .debug_info
@@ -14,57 +14,52 @@
 0000000000000000 grep.c
 0000000000000000 ulib.c
 0000000000000000 printf.c
-00000000000005ec putc
-000000000000060e printint
-0000000000000aa8 digits
+00000000000005c4 putc
+00000000000005e6 printint
+0000000000000a80 digits
 0000000000000000 umalloc.c
-0000000000000ac0 freep
-0000000000000ec8 base
+0000000000000a98 freep
+0000000000000ea0 base
 00000000000002ae strcpy
-00000000000008c4 printf
-00000000000012b9 __global_pointer$
+000000000000089c printf
+0000000000001291 __global_pointer$
 000000000000046e memmove
 000000000000004e matchhere
 000000000000056c mknod
 000000000000036a gets
-0000000000000ab9 __SDATA_BEGIN__
+0000000000000a91 __SDATA_BEGIN__
 00000000000005a4 getpid
 0000000000000504 memcpy
-00000000000005d4 print_stats
 000000000000011a grep
-0000000000000982 malloc
+000000000000095a malloc
 00000000000005b4 sleep
 0000000000000534 pipe
 0000000000000544 write
 000000000000057c fstat
-0000000000000896 fprintf
+000000000000086e fprintf
 0000000000000554 kill
-00000000000006b8 vprintf
+0000000000000690 vprintf
 0000000000000594 chdir
-00000000000005c4 pause_system
 000000000000055c exec
 000000000000052c wait
 000000000000053c read
 0000000000000574 unlink
-00000000000005e4 set_cpu
-00000000000005dc get_cpu
 00000000000004ca memcmp
 000000000000051c fork
-00000000000005cc kill_system
-0000000000000ed8 __BSS_END__
+0000000000000eb0 __BSS_END__
 00000000000005ac sbrk
 00000000000005bc uptime
-0000000000000ab9 __bss_start
+0000000000000a91 __bss_start
 0000000000000320 memset
 00000000000001ee main
 0000000000000000 matchstar
 00000000000002ca strcmp
 000000000000059c dup
-0000000000000ac8 buf
-0000000000000ab9 __DATA_BEGIN__
+0000000000000aa0 buf
+0000000000000a91 __DATA_BEGIN__
 00000000000003de stat
-0000000000000ab9 _edata
-0000000000000ed8 _end
+0000000000000a91 _edata
+0000000000000eb0 _end
 00000000000000cc match
 0000000000000584 link
 0000000000000524 exit
@@ -74,4 +69,4 @@
 0000000000000346 strchr
 000000000000058c mkdir
 000000000000054c close
-00000000000008fa free
+00000000000008d2 free
diff --git a/user/grind.asm b/user/grind.asm
index f478186..23f1952 100644
--- a/user/grind.asm
+++ b/user/grind.asm
@@ -28,17 +28,17 @@ do_rand(unsigned long *ctx)
     hi = x / 127773;
     lo = x % 127773;
       16:	66fd                	lui	a3,0x1f
-      18:	31d68693          	addi	a3,a3,797 # 1f31d <__global_pointer$+0x1d474>
+      18:	31d68693          	addi	a3,a3,797 # 1f31d <__global_pointer$+0x1d49c>
       1c:	02d7e733          	rem	a4,a5,a3
     x = 16807 * lo - 2836 * hi;
       20:	6611                	lui	a2,0x4
-      22:	1a760613          	addi	a2,a2,423 # 41a7 <__global_pointer$+0x22fe>
+      22:	1a760613          	addi	a2,a2,423 # 41a7 <__global_pointer$+0x2326>
       26:	02c70733          	mul	a4,a4,a2
     hi = x / 127773;
       2a:	02d7c7b3          	div	a5,a5,a3
     x = 16807 * lo - 2836 * hi;
       2e:	76fd                	lui	a3,0xfffff
-      30:	4ec68693          	addi	a3,a3,1260 # fffffffffffff4ec <__global_pointer$+0xffffffffffffd643>
+      30:	4ec68693          	addi	a3,a3,1260 # fffffffffffff4ec <__global_pointer$+0xffffffffffffd66b>
       34:	02d787b3          	mul	a5,a5,a3
       38:	97ba                	add	a5,a5,a4
     if (x < 0)
@@ -74,7 +74,7 @@ rand(void)
       5e:	0800                	addi	s0,sp,16
     return (do_rand(&rand_next));
       60:	00001517          	auipc	a0,0x1
-      64:	65050513          	addi	a0,a0,1616 # 16b0 <rand_next>
+      64:	62850513          	addi	a0,a0,1576 # 1688 <rand_next>
       68:	00000097          	auipc	ra,0x0
       6c:	f98080e7          	jalr	-104(ra) # 0 <do_rand>
 }
@@ -110,20 +110,20 @@ go(int which_child)
 
   mkdir("grindir");
       9a:	00001517          	auipc	a0,0x1
-      9e:	30e50513          	addi	a0,a0,782 # 13a8 <malloc+0xe4>
+      9e:	2e650513          	addi	a0,a0,742 # 1380 <malloc+0xe4>
       a2:	00001097          	auipc	ra,0x1
       a6:	e2c080e7          	jalr	-468(ra) # ece <mkdir>
   if(chdir("grindir") != 0){
       aa:	00001517          	auipc	a0,0x1
-      ae:	2fe50513          	addi	a0,a0,766 # 13a8 <malloc+0xe4>
+      ae:	2d650513          	addi	a0,a0,726 # 1380 <malloc+0xe4>
       b2:	00001097          	auipc	ra,0x1
       b6:	e24080e7          	jalr	-476(ra) # ed6 <chdir>
       ba:	cd11                	beqz	a0,d6 <go+0x5e>
     printf("grind: chdir grindir failed\n");
       bc:	00001517          	auipc	a0,0x1
-      c0:	2f450513          	addi	a0,a0,756 # 13b0 <malloc+0xec>
+      c0:	2cc50513          	addi	a0,a0,716 # 1388 <malloc+0xec>
       c4:	00001097          	auipc	ra,0x1
-      c8:	142080e7          	jalr	322(ra) # 1206 <printf>
+      c8:	11a080e7          	jalr	282(ra) # 11de <printf>
     exit(1);
       cc:	4505                	li	a0,1
       ce:	00001097          	auipc	ra,0x1
@@ -131,7 +131,7 @@ go(int which_child)
   }
   chdir("/");
       d6:	00001517          	auipc	a0,0x1
-      da:	2fa50513          	addi	a0,a0,762 # 13d0 <malloc+0x10c>
+      da:	2d250513          	addi	a0,a0,722 # 13a8 <malloc+0x10c>
       de:	00001097          	auipc	ra,0x1
       e2:	df8080e7          	jalr	-520(ra) # ed6 <chdir>
   
@@ -139,10 +139,10 @@ go(int which_child)
     iters++;
     if((iters % 500) == 0)
       e6:	00001997          	auipc	s3,0x1
-      ea:	2fa98993          	addi	s3,s3,762 # 13e0 <malloc+0x11c>
+      ea:	2d298993          	addi	s3,s3,722 # 13b8 <malloc+0x11c>
       ee:	c489                	beqz	s1,f8 <go+0x80>
       f0:	00001997          	auipc	s3,0x1
-      f4:	2e898993          	addi	s3,s3,744 # 13d8 <malloc+0x114>
+      f4:	2c098993          	addi	s3,s3,704 # 13b0 <malloc+0x114>
     iters++;
       f8:	4485                	li	s1,1
   int fd = -1;
@@ -154,12 +154,12 @@ go(int which_child)
     } else if(what == 8){
       read(fd, buf, sizeof(buf));
       fc:	00001a17          	auipc	s4,0x1
-     100:	5c4a0a13          	addi	s4,s4,1476 # 16c0 <buf.1247>
+     100:	59ca0a13          	addi	s4,s4,1436 # 1698 <buf.1237>
      104:	a825                	j	13c <go+0xc4>
       close(open("grindir/../a", O_CREATE|O_RDWR));
      106:	20200593          	li	a1,514
      10a:	00001517          	auipc	a0,0x1
-     10e:	2de50513          	addi	a0,a0,734 # 13e8 <malloc+0x124>
+     10e:	2b650513          	addi	a0,a0,694 # 13c0 <malloc+0x124>
      112:	00001097          	auipc	ra,0x1
      116:	d94080e7          	jalr	-620(ra) # ea6 <open>
      11a:	00001097          	auipc	ra,0x1
@@ -395,7 +395,7 @@ go(int which_child)
      29a:	2781                	sext.w	a5,a5
      29c:	ef89                	bnez	a5,2b6 <go+0x23e>
      29e:	00001597          	auipc	a1,0x1
-     2a2:	3c258593          	addi	a1,a1,962 # 1660 <malloc+0x39c>
+     2a2:	39a58593          	addi	a1,a1,922 # 1638 <malloc+0x39c>
      2a6:	f9040513          	addi	a0,s0,-112
      2aa:	00001097          	auipc	ra,0x1
      2ae:	962080e7          	jalr	-1694(ra) # c0c <strcmp>
@@ -405,9 +405,9 @@ go(int which_child)
      2ba:	fa842603          	lw	a2,-88(s0)
      2be:	f9442583          	lw	a1,-108(s0)
      2c2:	00001517          	auipc	a0,0x1
-     2c6:	3a650513          	addi	a0,a0,934 # 1668 <malloc+0x3a4>
+     2c6:	37e50513          	addi	a0,a0,894 # 1640 <malloc+0x3a4>
      2ca:	00001097          	auipc	ra,0x1
-     2ce:	f3c080e7          	jalr	-196(ra) # 1206 <printf>
+     2ce:	f14080e7          	jalr	-236(ra) # 11de <printf>
         exit(1);
      2d2:	4505                	li	a0,1
      2d4:	00001097          	auipc	ra,0x1
@@ -415,7 +415,7 @@ go(int which_child)
       close(open("grindir/../grindir/../b", O_CREATE|O_RDWR));
      2dc:	20200593          	li	a1,514
      2e0:	00001517          	auipc	a0,0x1
-     2e4:	11850513          	addi	a0,a0,280 # 13f8 <malloc+0x134>
+     2e4:	0f050513          	addi	a0,a0,240 # 13d0 <malloc+0x134>
      2e8:	00001097          	auipc	ra,0x1
      2ec:	bbe080e7          	jalr	-1090(ra) # ea6 <open>
      2f0:	00001097          	auipc	ra,0x1
@@ -423,32 +423,32 @@ go(int which_child)
      2f8:	b52d                	j	122 <go+0xaa>
       unlink("grindir/../a");
      2fa:	00001517          	auipc	a0,0x1
-     2fe:	0ee50513          	addi	a0,a0,238 # 13e8 <malloc+0x124>
+     2fe:	0c650513          	addi	a0,a0,198 # 13c0 <malloc+0x124>
      302:	00001097          	auipc	ra,0x1
      306:	bb4080e7          	jalr	-1100(ra) # eb6 <unlink>
      30a:	bd21                	j	122 <go+0xaa>
       if(chdir("grindir") != 0){
      30c:	00001517          	auipc	a0,0x1
-     310:	09c50513          	addi	a0,a0,156 # 13a8 <malloc+0xe4>
+     310:	07450513          	addi	a0,a0,116 # 1380 <malloc+0xe4>
      314:	00001097          	auipc	ra,0x1
      318:	bc2080e7          	jalr	-1086(ra) # ed6 <chdir>
      31c:	e115                	bnez	a0,340 <go+0x2c8>
       unlink("../b");
      31e:	00001517          	auipc	a0,0x1
-     322:	0f250513          	addi	a0,a0,242 # 1410 <malloc+0x14c>
+     322:	0ca50513          	addi	a0,a0,202 # 13e8 <malloc+0x14c>
      326:	00001097          	auipc	ra,0x1
      32a:	b90080e7          	jalr	-1136(ra) # eb6 <unlink>
       chdir("/");
      32e:	00001517          	auipc	a0,0x1
-     332:	0a250513          	addi	a0,a0,162 # 13d0 <malloc+0x10c>
+     332:	07a50513          	addi	a0,a0,122 # 13a8 <malloc+0x10c>
      336:	00001097          	auipc	ra,0x1
      33a:	ba0080e7          	jalr	-1120(ra) # ed6 <chdir>
      33e:	b3d5                	j	122 <go+0xaa>
         printf("grind: chdir grindir failed\n");
      340:	00001517          	auipc	a0,0x1
-     344:	07050513          	addi	a0,a0,112 # 13b0 <malloc+0xec>
+     344:	04850513          	addi	a0,a0,72 # 1388 <malloc+0xec>
      348:	00001097          	auipc	ra,0x1
-     34c:	ebe080e7          	jalr	-322(ra) # 1206 <printf>
+     34c:	e96080e7          	jalr	-362(ra) # 11de <printf>
         exit(1);
      350:	4505                	li	a0,1
      352:	00001097          	auipc	ra,0x1
@@ -460,7 +460,7 @@ go(int which_child)
       fd = open("/grindir/../a", O_CREATE|O_RDWR);
      364:	20200593          	li	a1,514
      368:	00001517          	auipc	a0,0x1
-     36c:	0b050513          	addi	a0,a0,176 # 1418 <malloc+0x154>
+     36c:	08850513          	addi	a0,a0,136 # 13f0 <malloc+0x154>
      370:	00001097          	auipc	ra,0x1
      374:	b36080e7          	jalr	-1226(ra) # ea6 <open>
      378:	892a                	mv	s2,a0
@@ -472,7 +472,7 @@ go(int which_child)
       fd = open("/./grindir/./../b", O_CREATE|O_RDWR);
      386:	20200593          	li	a1,514
      38a:	00001517          	auipc	a0,0x1
-     38e:	09e50513          	addi	a0,a0,158 # 1428 <malloc+0x164>
+     38e:	07650513          	addi	a0,a0,118 # 1400 <malloc+0x164>
      392:	00001097          	auipc	ra,0x1
      396:	b14080e7          	jalr	-1260(ra) # ea6 <open>
      39a:	892a                	mv	s2,a0
@@ -493,65 +493,65 @@ go(int which_child)
      3c0:	b38d                	j	122 <go+0xaa>
       mkdir("grindir/../a");
      3c2:	00001517          	auipc	a0,0x1
-     3c6:	02650513          	addi	a0,a0,38 # 13e8 <malloc+0x124>
+     3c6:	ffe50513          	addi	a0,a0,-2 # 13c0 <malloc+0x124>
      3ca:	00001097          	auipc	ra,0x1
      3ce:	b04080e7          	jalr	-1276(ra) # ece <mkdir>
       close(open("a/../a/./a", O_CREATE|O_RDWR));
      3d2:	20200593          	li	a1,514
      3d6:	00001517          	auipc	a0,0x1
-     3da:	06a50513          	addi	a0,a0,106 # 1440 <malloc+0x17c>
+     3da:	04250513          	addi	a0,a0,66 # 1418 <malloc+0x17c>
      3de:	00001097          	auipc	ra,0x1
      3e2:	ac8080e7          	jalr	-1336(ra) # ea6 <open>
      3e6:	00001097          	auipc	ra,0x1
      3ea:	aa8080e7          	jalr	-1368(ra) # e8e <close>
       unlink("a/a");
      3ee:	00001517          	auipc	a0,0x1
-     3f2:	06250513          	addi	a0,a0,98 # 1450 <malloc+0x18c>
+     3f2:	03a50513          	addi	a0,a0,58 # 1428 <malloc+0x18c>
      3f6:	00001097          	auipc	ra,0x1
      3fa:	ac0080e7          	jalr	-1344(ra) # eb6 <unlink>
      3fe:	b315                	j	122 <go+0xaa>
       mkdir("/../b");
      400:	00001517          	auipc	a0,0x1
-     404:	05850513          	addi	a0,a0,88 # 1458 <malloc+0x194>
+     404:	03050513          	addi	a0,a0,48 # 1430 <malloc+0x194>
      408:	00001097          	auipc	ra,0x1
      40c:	ac6080e7          	jalr	-1338(ra) # ece <mkdir>
       close(open("grindir/../b/b", O_CREATE|O_RDWR));
      410:	20200593          	li	a1,514
      414:	00001517          	auipc	a0,0x1
-     418:	04c50513          	addi	a0,a0,76 # 1460 <malloc+0x19c>
+     418:	02450513          	addi	a0,a0,36 # 1438 <malloc+0x19c>
      41c:	00001097          	auipc	ra,0x1
      420:	a8a080e7          	jalr	-1398(ra) # ea6 <open>
      424:	00001097          	auipc	ra,0x1
      428:	a6a080e7          	jalr	-1430(ra) # e8e <close>
       unlink("b/b");
      42c:	00001517          	auipc	a0,0x1
-     430:	04450513          	addi	a0,a0,68 # 1470 <malloc+0x1ac>
+     430:	01c50513          	addi	a0,a0,28 # 1448 <malloc+0x1ac>
      434:	00001097          	auipc	ra,0x1
      438:	a82080e7          	jalr	-1406(ra) # eb6 <unlink>
      43c:	b1dd                	j	122 <go+0xaa>
       unlink("b");
      43e:	00001517          	auipc	a0,0x1
-     442:	ffa50513          	addi	a0,a0,-6 # 1438 <malloc+0x174>
+     442:	fd250513          	addi	a0,a0,-46 # 1410 <malloc+0x174>
      446:	00001097          	auipc	ra,0x1
      44a:	a70080e7          	jalr	-1424(ra) # eb6 <unlink>
       link("../grindir/./../a", "../b");
      44e:	00001597          	auipc	a1,0x1
-     452:	fc258593          	addi	a1,a1,-62 # 1410 <malloc+0x14c>
+     452:	f9a58593          	addi	a1,a1,-102 # 13e8 <malloc+0x14c>
      456:	00001517          	auipc	a0,0x1
-     45a:	02250513          	addi	a0,a0,34 # 1478 <malloc+0x1b4>
+     45a:	ffa50513          	addi	a0,a0,-6 # 1450 <malloc+0x1b4>
      45e:	00001097          	auipc	ra,0x1
      462:	a68080e7          	jalr	-1432(ra) # ec6 <link>
      466:	b975                	j	122 <go+0xaa>
       unlink("../grindir/../a");
      468:	00001517          	auipc	a0,0x1
-     46c:	02850513          	addi	a0,a0,40 # 1490 <malloc+0x1cc>
+     46c:	00050513          	mv	a0,a0
      470:	00001097          	auipc	ra,0x1
      474:	a46080e7          	jalr	-1466(ra) # eb6 <unlink>
       link(".././b", "/grindir/../a");
      478:	00001597          	auipc	a1,0x1
-     47c:	fa058593          	addi	a1,a1,-96 # 1418 <malloc+0x154>
+     47c:	f7858593          	addi	a1,a1,-136 # 13f0 <malloc+0x154>
      480:	00001517          	auipc	a0,0x1
-     484:	02050513          	addi	a0,a0,32 # 14a0 <malloc+0x1dc>
+     484:	ff850513          	addi	a0,a0,-8 # 1478 <malloc+0x1dc>
      488:	00001097          	auipc	ra,0x1
      48c:	a3e080e7          	jalr	-1474(ra) # ec6 <link>
      490:	b949                	j	122 <go+0xaa>
@@ -572,9 +572,9 @@ go(int which_child)
      4b0:	9ba080e7          	jalr	-1606(ra) # e66 <exit>
         printf("grind: fork failed\n");
      4b4:	00001517          	auipc	a0,0x1
-     4b8:	ff450513          	addi	a0,a0,-12 # 14a8 <malloc+0x1e4>
+     4b8:	fcc50513          	addi	a0,a0,-52 # 1480 <malloc+0x1e4>
      4bc:	00001097          	auipc	ra,0x1
-     4c0:	d4a080e7          	jalr	-694(ra) # 1206 <printf>
+     4c0:	d22080e7          	jalr	-734(ra) # 11de <printf>
         exit(1);
      4c4:	4505                	li	a0,1
      4c6:	00001097          	auipc	ra,0x1
@@ -603,16 +603,16 @@ go(int which_child)
      4fe:	96c080e7          	jalr	-1684(ra) # e66 <exit>
         printf("grind: fork failed\n");
      502:	00001517          	auipc	a0,0x1
-     506:	fa650513          	addi	a0,a0,-90 # 14a8 <malloc+0x1e4>
+     506:	f7e50513          	addi	a0,a0,-130 # 1480 <malloc+0x1e4>
      50a:	00001097          	auipc	ra,0x1
-     50e:	cfc080e7          	jalr	-772(ra) # 1206 <printf>
+     50e:	cd4080e7          	jalr	-812(ra) # 11de <printf>
         exit(1);
      512:	4505                	li	a0,1
      514:	00001097          	auipc	ra,0x1
      518:	952080e7          	jalr	-1710(ra) # e66 <exit>
       sbrk(6011);
      51c:	6505                	lui	a0,0x1
-     51e:	77b50513          	addi	a0,a0,1915 # 177b <buf.1247+0xbb>
+     51e:	77b50513          	addi	a0,a0,1915 # 177b <buf.1237+0xe3>
      522:	00001097          	auipc	ra,0x1
      526:	9cc080e7          	jalr	-1588(ra) # eee <sbrk>
      52a:	bee5                	j	122 <go+0xaa>
@@ -639,7 +639,7 @@ go(int which_child)
      55e:	04054963          	bltz	a0,5b0 <go+0x538>
       if(chdir("../grindir/..") != 0){
      562:	00001517          	auipc	a0,0x1
-     566:	f5e50513          	addi	a0,a0,-162 # 14c0 <malloc+0x1fc>
+     566:	f3650513          	addi	a0,a0,-202 # 1498 <malloc+0x1fc>
      56a:	00001097          	auipc	ra,0x1
      56e:	96c080e7          	jalr	-1684(ra) # ed6 <chdir>
      572:	ed21                	bnez	a0,5ca <go+0x552>
@@ -655,7 +655,7 @@ go(int which_child)
         close(open("a", O_CREATE|O_RDWR));
      58a:	20200593          	li	a1,514
      58e:	00001517          	auipc	a0,0x1
-     592:	efa50513          	addi	a0,a0,-262 # 1488 <malloc+0x1c4>
+     592:	ed250513          	addi	a0,a0,-302 # 1460 <malloc+0x1c4>
      596:	00001097          	auipc	ra,0x1
      59a:	910080e7          	jalr	-1776(ra) # ea6 <open>
      59e:	00001097          	auipc	ra,0x1
@@ -666,18 +666,18 @@ go(int which_child)
      5ac:	8be080e7          	jalr	-1858(ra) # e66 <exit>
         printf("grind: fork failed\n");
      5b0:	00001517          	auipc	a0,0x1
-     5b4:	ef850513          	addi	a0,a0,-264 # 14a8 <malloc+0x1e4>
+     5b4:	ed050513          	addi	a0,a0,-304 # 1480 <malloc+0x1e4>
      5b8:	00001097          	auipc	ra,0x1
-     5bc:	c4e080e7          	jalr	-946(ra) # 1206 <printf>
+     5bc:	c26080e7          	jalr	-986(ra) # 11de <printf>
         exit(1);
      5c0:	4505                	li	a0,1
      5c2:	00001097          	auipc	ra,0x1
      5c6:	8a4080e7          	jalr	-1884(ra) # e66 <exit>
         printf("grind: chdir failed\n");
      5ca:	00001517          	auipc	a0,0x1
-     5ce:	f0650513          	addi	a0,a0,-250 # 14d0 <malloc+0x20c>
+     5ce:	ede50513          	addi	a0,a0,-290 # 14a8 <malloc+0x20c>
      5d2:	00001097          	auipc	ra,0x1
-     5d6:	c34080e7          	jalr	-972(ra) # 1206 <printf>
+     5d6:	c0c080e7          	jalr	-1012(ra) # 11de <printf>
         exit(1);
      5da:	4505                	li	a0,1
      5dc:	00001097          	auipc	ra,0x1
@@ -705,9 +705,9 @@ go(int which_child)
      614:	856080e7          	jalr	-1962(ra) # e66 <exit>
         printf("grind: fork failed\n");
      618:	00001517          	auipc	a0,0x1
-     61c:	e9050513          	addi	a0,a0,-368 # 14a8 <malloc+0x1e4>
+     61c:	e6850513          	addi	a0,a0,-408 # 1480 <malloc+0x1e4>
      620:	00001097          	auipc	ra,0x1
-     624:	be6080e7          	jalr	-1050(ra) # 1206 <printf>
+     624:	bbe080e7          	jalr	-1090(ra) # 11de <printf>
         exit(1);
      628:	4505                	li	a0,1
      62a:	00001097          	auipc	ra,0x1
@@ -739,9 +739,9 @@ go(int which_child)
      672:	bc45                	j	122 <go+0xaa>
         printf("grind: pipe failed\n");
      674:	00001517          	auipc	a0,0x1
-     678:	e7450513          	addi	a0,a0,-396 # 14e8 <malloc+0x224>
+     678:	e4c50513          	addi	a0,a0,-436 # 14c0 <malloc+0x224>
      67c:	00001097          	auipc	ra,0x1
-     680:	b8a080e7          	jalr	-1142(ra) # 1206 <printf>
+     680:	b62080e7          	jalr	-1182(ra) # 11de <printf>
         exit(1);
      684:	4505                	li	a0,1
      686:	00000097          	auipc	ra,0x0
@@ -755,7 +755,7 @@ go(int which_child)
         if(write(fds[1], "x", 1) != 1)
      69e:	4605                	li	a2,1
      6a0:	00001597          	auipc	a1,0x1
-     6a4:	e6058593          	addi	a1,a1,-416 # 1500 <malloc+0x23c>
+     6a4:	e3858593          	addi	a1,a1,-456 # 14d8 <malloc+0x23c>
      6a8:	fac42503          	lw	a0,-84(s0)
      6ac:	00000097          	auipc	ra,0x0
      6b0:	7da080e7          	jalr	2010(ra) # e86 <write>
@@ -775,21 +775,21 @@ go(int which_child)
      6d8:	792080e7          	jalr	1938(ra) # e66 <exit>
           printf("grind: pipe write failed\n");
      6dc:	00001517          	auipc	a0,0x1
-     6e0:	e2c50513          	addi	a0,a0,-468 # 1508 <malloc+0x244>
+     6e0:	e0450513          	addi	a0,a0,-508 # 14e0 <malloc+0x244>
      6e4:	00001097          	auipc	ra,0x1
-     6e8:	b22080e7          	jalr	-1246(ra) # 1206 <printf>
+     6e8:	afa080e7          	jalr	-1286(ra) # 11de <printf>
      6ec:	b7f9                	j	6ba <go+0x642>
           printf("grind: pipe read failed\n");
      6ee:	00001517          	auipc	a0,0x1
-     6f2:	e3a50513          	addi	a0,a0,-454 # 1528 <malloc+0x264>
+     6f2:	e1250513          	addi	a0,a0,-494 # 1500 <malloc+0x264>
      6f6:	00001097          	auipc	ra,0x1
-     6fa:	b10080e7          	jalr	-1264(ra) # 1206 <printf>
+     6fa:	ae8080e7          	jalr	-1304(ra) # 11de <printf>
      6fe:	bfd1                	j	6d2 <go+0x65a>
         printf("grind: fork failed\n");
      700:	00001517          	auipc	a0,0x1
-     704:	da850513          	addi	a0,a0,-600 # 14a8 <malloc+0x1e4>
+     704:	d8050513          	addi	a0,a0,-640 # 1480 <malloc+0x1e4>
      708:	00001097          	auipc	ra,0x1
-     70c:	afe080e7          	jalr	-1282(ra) # 1206 <printf>
+     70c:	ad6080e7          	jalr	-1322(ra) # 11de <printf>
         exit(1);
      710:	4505                	li	a0,1
      712:	00000097          	auipc	ra,0x0
@@ -808,33 +808,33 @@ go(int which_child)
      732:	bac5                	j	122 <go+0xaa>
         unlink("a");
      734:	00001517          	auipc	a0,0x1
-     738:	d5450513          	addi	a0,a0,-684 # 1488 <malloc+0x1c4>
+     738:	d2c50513          	addi	a0,a0,-724 # 1460 <malloc+0x1c4>
      73c:	00000097          	auipc	ra,0x0
      740:	77a080e7          	jalr	1914(ra) # eb6 <unlink>
         mkdir("a");
      744:	00001517          	auipc	a0,0x1
-     748:	d4450513          	addi	a0,a0,-700 # 1488 <malloc+0x1c4>
+     748:	d1c50513          	addi	a0,a0,-740 # 1460 <malloc+0x1c4>
      74c:	00000097          	auipc	ra,0x0
      750:	782080e7          	jalr	1922(ra) # ece <mkdir>
         chdir("a");
      754:	00001517          	auipc	a0,0x1
-     758:	d3450513          	addi	a0,a0,-716 # 1488 <malloc+0x1c4>
+     758:	d0c50513          	addi	a0,a0,-756 # 1460 <malloc+0x1c4>
      75c:	00000097          	auipc	ra,0x0
      760:	77a080e7          	jalr	1914(ra) # ed6 <chdir>
         unlink("../a");
      764:	00001517          	auipc	a0,0x1
-     768:	c8c50513          	addi	a0,a0,-884 # 13f0 <malloc+0x12c>
+     768:	c6450513          	addi	a0,a0,-924 # 13c8 <malloc+0x12c>
      76c:	00000097          	auipc	ra,0x0
      770:	74a080e7          	jalr	1866(ra) # eb6 <unlink>
         fd = open("x", O_CREATE|O_RDWR);
      774:	20200593          	li	a1,514
      778:	00001517          	auipc	a0,0x1
-     77c:	d8850513          	addi	a0,a0,-632 # 1500 <malloc+0x23c>
+     77c:	d6050513          	addi	a0,a0,-672 # 14d8 <malloc+0x23c>
      780:	00000097          	auipc	ra,0x0
      784:	726080e7          	jalr	1830(ra) # ea6 <open>
         unlink("x");
      788:	00001517          	auipc	a0,0x1
-     78c:	d7850513          	addi	a0,a0,-648 # 1500 <malloc+0x23c>
+     78c:	d5050513          	addi	a0,a0,-688 # 14d8 <malloc+0x23c>
      790:	00000097          	auipc	ra,0x0
      794:	726080e7          	jalr	1830(ra) # eb6 <unlink>
         exit(0);
@@ -843,22 +843,22 @@ go(int which_child)
      79e:	6cc080e7          	jalr	1740(ra) # e66 <exit>
         printf("grind: fork failed\n");
      7a2:	00001517          	auipc	a0,0x1
-     7a6:	d0650513          	addi	a0,a0,-762 # 14a8 <malloc+0x1e4>
+     7a6:	cde50513          	addi	a0,a0,-802 # 1480 <malloc+0x1e4>
      7aa:	00001097          	auipc	ra,0x1
-     7ae:	a5c080e7          	jalr	-1444(ra) # 1206 <printf>
+     7ae:	a34080e7          	jalr	-1484(ra) # 11de <printf>
         exit(1);
      7b2:	4505                	li	a0,1
      7b4:	00000097          	auipc	ra,0x0
      7b8:	6b2080e7          	jalr	1714(ra) # e66 <exit>
       unlink("c");
      7bc:	00001517          	auipc	a0,0x1
-     7c0:	d8c50513          	addi	a0,a0,-628 # 1548 <malloc+0x284>
+     7c0:	d6450513          	addi	a0,a0,-668 # 1520 <malloc+0x284>
      7c4:	00000097          	auipc	ra,0x0
      7c8:	6f2080e7          	jalr	1778(ra) # eb6 <unlink>
       int fd1 = open("c", O_CREATE|O_RDWR);
      7cc:	20200593          	li	a1,514
      7d0:	00001517          	auipc	a0,0x1
-     7d4:	d7850513          	addi	a0,a0,-648 # 1548 <malloc+0x284>
+     7d4:	d5050513          	addi	a0,a0,-688 # 1520 <malloc+0x284>
      7d8:	00000097          	auipc	ra,0x0
      7dc:	6ce080e7          	jalr	1742(ra) # ea6 <open>
      7e0:	8b2a                	mv	s6,a0
@@ -867,7 +867,7 @@ go(int which_child)
       if(write(fd1, "x", 1) != 1){
      7e6:	4605                	li	a2,1
      7e8:	00001597          	auipc	a1,0x1
-     7ec:	d1858593          	addi	a1,a1,-744 # 1500 <malloc+0x23c>
+     7ec:	cf058593          	addi	a1,a1,-784 # 14d8 <malloc+0x23c>
      7f0:	00000097          	auipc	ra,0x0
      7f4:	696080e7          	jalr	1686(ra) # e86 <write>
      7f8:	4785                	li	a5,1
@@ -892,33 +892,33 @@ go(int which_child)
      82a:	668080e7          	jalr	1640(ra) # e8e <close>
       unlink("c");
      82e:	00001517          	auipc	a0,0x1
-     832:	d1a50513          	addi	a0,a0,-742 # 1548 <malloc+0x284>
+     832:	cf250513          	addi	a0,a0,-782 # 1520 <malloc+0x284>
      836:	00000097          	auipc	ra,0x0
      83a:	680080e7          	jalr	1664(ra) # eb6 <unlink>
      83e:	b0d5                	j	122 <go+0xaa>
         printf("grind: create c failed\n");
      840:	00001517          	auipc	a0,0x1
-     844:	d1050513          	addi	a0,a0,-752 # 1550 <malloc+0x28c>
+     844:	ce850513          	addi	a0,a0,-792 # 1528 <malloc+0x28c>
      848:	00001097          	auipc	ra,0x1
-     84c:	9be080e7          	jalr	-1602(ra) # 1206 <printf>
+     84c:	996080e7          	jalr	-1642(ra) # 11de <printf>
         exit(1);
      850:	4505                	li	a0,1
      852:	00000097          	auipc	ra,0x0
      856:	614080e7          	jalr	1556(ra) # e66 <exit>
         printf("grind: write c failed\n");
      85a:	00001517          	auipc	a0,0x1
-     85e:	d0e50513          	addi	a0,a0,-754 # 1568 <malloc+0x2a4>
+     85e:	ce650513          	addi	a0,a0,-794 # 1540 <malloc+0x2a4>
      862:	00001097          	auipc	ra,0x1
-     866:	9a4080e7          	jalr	-1628(ra) # 1206 <printf>
+     866:	97c080e7          	jalr	-1668(ra) # 11de <printf>
         exit(1);
      86a:	4505                	li	a0,1
      86c:	00000097          	auipc	ra,0x0
      870:	5fa080e7          	jalr	1530(ra) # e66 <exit>
         printf("grind: fstat failed\n");
      874:	00001517          	auipc	a0,0x1
-     878:	d0c50513          	addi	a0,a0,-756 # 1580 <malloc+0x2bc>
+     878:	ce450513          	addi	a0,a0,-796 # 1558 <malloc+0x2bc>
      87c:	00001097          	auipc	ra,0x1
-     880:	98a080e7          	jalr	-1654(ra) # 1206 <printf>
+     880:	962080e7          	jalr	-1694(ra) # 11de <printf>
         exit(1);
      884:	4505                	li	a0,1
      886:	00000097          	auipc	ra,0x0
@@ -926,38 +926,38 @@ go(int which_child)
         printf("grind: fstat reports wrong size %d\n", (int)st.size);
      88e:	2581                	sext.w	a1,a1
      890:	00001517          	auipc	a0,0x1
-     894:	d0850513          	addi	a0,a0,-760 # 1598 <malloc+0x2d4>
+     894:	ce050513          	addi	a0,a0,-800 # 1570 <malloc+0x2d4>
      898:	00001097          	auipc	ra,0x1
-     89c:	96e080e7          	jalr	-1682(ra) # 1206 <printf>
+     89c:	946080e7          	jalr	-1722(ra) # 11de <printf>
         exit(1);
      8a0:	4505                	li	a0,1
      8a2:	00000097          	auipc	ra,0x0
      8a6:	5c4080e7          	jalr	1476(ra) # e66 <exit>
         printf("grind: fstat reports crazy i-number %d\n", st.ino);
      8aa:	00001517          	auipc	a0,0x1
-     8ae:	d1650513          	addi	a0,a0,-746 # 15c0 <malloc+0x2fc>
+     8ae:	cee50513          	addi	a0,a0,-786 # 1598 <malloc+0x2fc>
      8b2:	00001097          	auipc	ra,0x1
-     8b6:	954080e7          	jalr	-1708(ra) # 1206 <printf>
+     8b6:	92c080e7          	jalr	-1748(ra) # 11de <printf>
         exit(1);
      8ba:	4505                	li	a0,1
      8bc:	00000097          	auipc	ra,0x0
      8c0:	5aa080e7          	jalr	1450(ra) # e66 <exit>
         fprintf(2, "grind: pipe failed\n");
      8c4:	00001597          	auipc	a1,0x1
-     8c8:	c2458593          	addi	a1,a1,-988 # 14e8 <malloc+0x224>
+     8c8:	bfc58593          	addi	a1,a1,-1028 # 14c0 <malloc+0x224>
      8cc:	4509                	li	a0,2
      8ce:	00001097          	auipc	ra,0x1
-     8d2:	90a080e7          	jalr	-1782(ra) # 11d8 <fprintf>
+     8d2:	8e2080e7          	jalr	-1822(ra) # 11b0 <fprintf>
         exit(1);
      8d6:	4505                	li	a0,1
      8d8:	00000097          	auipc	ra,0x0
      8dc:	58e080e7          	jalr	1422(ra) # e66 <exit>
         fprintf(2, "grind: pipe failed\n");
      8e0:	00001597          	auipc	a1,0x1
-     8e4:	c0858593          	addi	a1,a1,-1016 # 14e8 <malloc+0x224>
+     8e4:	be058593          	addi	a1,a1,-1056 # 14c0 <malloc+0x224>
      8e8:	4509                	li	a0,2
      8ea:	00001097          	auipc	ra,0x1
-     8ee:	8ee080e7          	jalr	-1810(ra) # 11d8 <fprintf>
+     8ee:	8c6080e7          	jalr	-1850(ra) # 11b0 <fprintf>
         exit(1);
      8f2:	4505                	li	a0,1
      8f4:	00000097          	auipc	ra,0x0
@@ -986,10 +986,10 @@ go(int which_child)
      938:	02f50063          	beq	a0,a5,958 <go+0x8e0>
           fprintf(2, "grind: dup failed\n");
      93c:	00001597          	auipc	a1,0x1
-     940:	cac58593          	addi	a1,a1,-852 # 15e8 <malloc+0x324>
+     940:	c8458593          	addi	a1,a1,-892 # 15c0 <malloc+0x324>
      944:	4509                	li	a0,2
      946:	00001097          	auipc	ra,0x1
-     94a:	892080e7          	jalr	-1902(ra) # 11d8 <fprintf>
+     94a:	86a080e7          	jalr	-1942(ra) # 11b0 <fprintf>
           exit(1);
      94e:	4505                	li	a0,1
      950:	00000097          	auipc	ra,0x0
@@ -1000,34 +1000,34 @@ go(int which_child)
      960:	532080e7          	jalr	1330(ra) # e8e <close>
         char *args[3] = { "echo", "hi", 0 };
      964:	00001797          	auipc	a5,0x1
-     968:	c9c78793          	addi	a5,a5,-868 # 1600 <malloc+0x33c>
+     968:	c7478793          	addi	a5,a5,-908 # 15d8 <malloc+0x33c>
      96c:	faf43423          	sd	a5,-88(s0)
      970:	00001797          	auipc	a5,0x1
-     974:	c9878793          	addi	a5,a5,-872 # 1608 <malloc+0x344>
+     974:	c7078793          	addi	a5,a5,-912 # 15e0 <malloc+0x344>
      978:	faf43823          	sd	a5,-80(s0)
      97c:	fa043c23          	sd	zero,-72(s0)
         exec("grindir/../echo", args);
      980:	fa840593          	addi	a1,s0,-88
      984:	00001517          	auipc	a0,0x1
-     988:	c8c50513          	addi	a0,a0,-884 # 1610 <malloc+0x34c>
+     988:	c6450513          	addi	a0,a0,-924 # 15e8 <malloc+0x34c>
      98c:	00000097          	auipc	ra,0x0
      990:	512080e7          	jalr	1298(ra) # e9e <exec>
         fprintf(2, "grind: echo: not found\n");
      994:	00001597          	auipc	a1,0x1
-     998:	c8c58593          	addi	a1,a1,-884 # 1620 <malloc+0x35c>
+     998:	c6458593          	addi	a1,a1,-924 # 15f8 <malloc+0x35c>
      99c:	4509                	li	a0,2
      99e:	00001097          	auipc	ra,0x1
-     9a2:	83a080e7          	jalr	-1990(ra) # 11d8 <fprintf>
+     9a2:	812080e7          	jalr	-2030(ra) # 11b0 <fprintf>
         exit(2);
      9a6:	4509                	li	a0,2
      9a8:	00000097          	auipc	ra,0x0
      9ac:	4be080e7          	jalr	1214(ra) # e66 <exit>
         fprintf(2, "grind: fork failed\n");
      9b0:	00001597          	auipc	a1,0x1
-     9b4:	af858593          	addi	a1,a1,-1288 # 14a8 <malloc+0x1e4>
+     9b4:	ad058593          	addi	a1,a1,-1328 # 1480 <malloc+0x1e4>
      9b8:	4509                	li	a0,2
-     9ba:	00001097          	auipc	ra,0x1
-     9be:	81e080e7          	jalr	-2018(ra) # 11d8 <fprintf>
+     9ba:	00000097          	auipc	ra,0x0
+     9be:	7f6080e7          	jalr	2038(ra) # 11b0 <fprintf>
         exit(3);
      9c2:	450d                	li	a0,3
      9c4:	00000097          	auipc	ra,0x0
@@ -1051,10 +1051,10 @@ go(int which_child)
      9fa:	cd19                	beqz	a0,a18 <go+0x9a0>
           fprintf(2, "grind: dup failed\n");
      9fc:	00001597          	auipc	a1,0x1
-     a00:	bec58593          	addi	a1,a1,-1044 # 15e8 <malloc+0x324>
+     a00:	bc458593          	addi	a1,a1,-1084 # 15c0 <malloc+0x324>
      a04:	4509                	li	a0,2
      a06:	00000097          	auipc	ra,0x0
-     a0a:	7d2080e7          	jalr	2002(ra) # 11d8 <fprintf>
+     a0a:	7aa080e7          	jalr	1962(ra) # 11b0 <fprintf>
           exit(4);
      a0e:	4511                	li	a0,4
      a10:	00000097          	auipc	ra,0x0
@@ -1075,10 +1075,10 @@ go(int which_child)
      a3c:	02f50063          	beq	a0,a5,a5c <go+0x9e4>
           fprintf(2, "grind: dup failed\n");
      a40:	00001597          	auipc	a1,0x1
-     a44:	ba858593          	addi	a1,a1,-1112 # 15e8 <malloc+0x324>
+     a44:	b8058593          	addi	a1,a1,-1152 # 15c0 <malloc+0x324>
      a48:	4509                	li	a0,2
      a4a:	00000097          	auipc	ra,0x0
-     a4e:	78e080e7          	jalr	1934(ra) # 11d8 <fprintf>
+     a4e:	766080e7          	jalr	1894(ra) # 11b0 <fprintf>
           exit(5);
      a52:	4515                	li	a0,5
      a54:	00000097          	auipc	ra,0x0
@@ -1089,31 +1089,31 @@ go(int which_child)
      a64:	42e080e7          	jalr	1070(ra) # e8e <close>
         char *args[2] = { "cat", 0 };
      a68:	00001797          	auipc	a5,0x1
-     a6c:	bd078793          	addi	a5,a5,-1072 # 1638 <malloc+0x374>
+     a6c:	ba878793          	addi	a5,a5,-1112 # 1610 <malloc+0x374>
      a70:	faf43423          	sd	a5,-88(s0)
      a74:	fa043823          	sd	zero,-80(s0)
         exec("/cat", args);
      a78:	fa840593          	addi	a1,s0,-88
      a7c:	00001517          	auipc	a0,0x1
-     a80:	bc450513          	addi	a0,a0,-1084 # 1640 <malloc+0x37c>
+     a80:	b9c50513          	addi	a0,a0,-1124 # 1618 <malloc+0x37c>
      a84:	00000097          	auipc	ra,0x0
      a88:	41a080e7          	jalr	1050(ra) # e9e <exec>
         fprintf(2, "grind: cat: not found\n");
      a8c:	00001597          	auipc	a1,0x1
-     a90:	bbc58593          	addi	a1,a1,-1092 # 1648 <malloc+0x384>
+     a90:	b9458593          	addi	a1,a1,-1132 # 1620 <malloc+0x384>
      a94:	4509                	li	a0,2
      a96:	00000097          	auipc	ra,0x0
-     a9a:	742080e7          	jalr	1858(ra) # 11d8 <fprintf>
+     a9a:	71a080e7          	jalr	1818(ra) # 11b0 <fprintf>
         exit(6);
      a9e:	4519                	li	a0,6
      aa0:	00000097          	auipc	ra,0x0
      aa4:	3c6080e7          	jalr	966(ra) # e66 <exit>
         fprintf(2, "grind: fork failed\n");
      aa8:	00001597          	auipc	a1,0x1
-     aac:	a0058593          	addi	a1,a1,-1536 # 14a8 <malloc+0x1e4>
+     aac:	9d858593          	addi	a1,a1,-1576 # 1480 <malloc+0x1e4>
      ab0:	4509                	li	a0,2
      ab2:	00000097          	auipc	ra,0x0
-     ab6:	726080e7          	jalr	1830(ra) # 11d8 <fprintf>
+     ab6:	6fe080e7          	jalr	1790(ra) # 11b0 <fprintf>
         exit(7);
      aba:	451d                	li	a0,7
      abc:	00000097          	auipc	ra,0x0
@@ -1134,12 +1134,12 @@ iter()
      ace:	1800                	addi	s0,sp,48
   unlink("a");
      ad0:	00001517          	auipc	a0,0x1
-     ad4:	9b850513          	addi	a0,a0,-1608 # 1488 <malloc+0x1c4>
+     ad4:	99050513          	addi	a0,a0,-1648 # 1460 <malloc+0x1c4>
      ad8:	00000097          	auipc	ra,0x0
      adc:	3de080e7          	jalr	990(ra) # eb6 <unlink>
   unlink("b");
      ae0:	00001517          	auipc	a0,0x1
-     ae4:	95850513          	addi	a0,a0,-1704 # 1438 <malloc+0x174>
+     ae4:	93050513          	addi	a0,a0,-1744 # 1410 <malloc+0x174>
      ae8:	00000097          	auipc	ra,0x0
      aec:	3ce080e7          	jalr	974(ra) # eb6 <unlink>
   
@@ -1157,16 +1157,16 @@ iter()
     rand_next = 31;
      b00:	47fd                	li	a5,31
      b02:	00001717          	auipc	a4,0x1
-     b06:	baf73723          	sd	a5,-1106(a4) # 16b0 <rand_next>
+     b06:	b8f73323          	sd	a5,-1146(a4) # 1688 <rand_next>
     go(0);
      b0a:	4501                	li	a0,0
      b0c:	fffff097          	auipc	ra,0xfffff
      b10:	56c080e7          	jalr	1388(ra) # 78 <go>
     printf("grind: fork failed\n");
      b14:	00001517          	auipc	a0,0x1
-     b18:	99450513          	addi	a0,a0,-1644 # 14a8 <malloc+0x1e4>
+     b18:	96c50513          	addi	a0,a0,-1684 # 1480 <malloc+0x1e4>
      b1c:	00000097          	auipc	ra,0x0
-     b20:	6ea080e7          	jalr	1770(ra) # 1206 <printf>
+     b20:	6c2080e7          	jalr	1730(ra) # 11de <printf>
     exit(1);
      b24:	4505                	li	a0,1
      b26:	00000097          	auipc	ra,0x0
@@ -1187,18 +1187,18 @@ iter()
      b3c:	e915                	bnez	a0,b70 <iter+0xac>
     rand_next = 7177;
      b3e:	6789                	lui	a5,0x2
-     b40:	c0978793          	addi	a5,a5,-1015 # 1c09 <__BSS_END__+0x151>
+     b40:	c0978793          	addi	a5,a5,-1015 # 1c09 <__BSS_END__+0x179>
      b44:	00001717          	auipc	a4,0x1
-     b48:	b6f73623          	sd	a5,-1172(a4) # 16b0 <rand_next>
+     b48:	b4f73223          	sd	a5,-1212(a4) # 1688 <rand_next>
     go(1);
      b4c:	4505                	li	a0,1
      b4e:	fffff097          	auipc	ra,0xfffff
      b52:	52a080e7          	jalr	1322(ra) # 78 <go>
     printf("grind: fork failed\n");
      b56:	00001517          	auipc	a0,0x1
-     b5a:	95250513          	addi	a0,a0,-1710 # 14a8 <malloc+0x1e4>
+     b5a:	92a50513          	addi	a0,a0,-1750 # 1480 <malloc+0x1e4>
      b5e:	00000097          	auipc	ra,0x0
-     b62:	6a8080e7          	jalr	1704(ra) # 1206 <printf>
+     b62:	680080e7          	jalr	1664(ra) # 11de <printf>
     exit(1);
      b66:	4505                	li	a0,1
      b68:	00000097          	auipc	ra,0x0
@@ -1917,696 +1917,646 @@ uptime:
  ret
      f04:	8082                	ret
 
-0000000000000f06 <pause_system>:
-.global pause_system
-pause_system:
- li a7, SYS_pause_system
-     f06:	48d9                	li	a7,22
- ecall
-     f08:	00000073          	ecall
- ret
-     f0c:	8082                	ret
-
-0000000000000f0e <kill_system>:
-.global kill_system
-kill_system:
- li a7, SYS_kill_system
-     f0e:	48dd                	li	a7,23
- ecall
-     f10:	00000073          	ecall
- ret
-     f14:	8082                	ret
-
-0000000000000f16 <print_stats>:
-.global print_stats
-print_stats:
- li a7, SYS_print_stats
-     f16:	48e1                	li	a7,24
- ecall
-     f18:	00000073          	ecall
- ret
-     f1c:	8082                	ret
-
-0000000000000f1e <get_cpu>:
-.global get_cpu
-get_cpu:
- li a7, SYS_get_cpu
-     f1e:	48e5                	li	a7,25
- ecall
-     f20:	00000073          	ecall
- ret
-     f24:	8082                	ret
-
-0000000000000f26 <set_cpu>:
-.global set_cpu
-set_cpu:
- li a7, SYS_set_cpu
-     f26:	48e9                	li	a7,26
- ecall
-     f28:	00000073          	ecall
- ret
-     f2c:	8082                	ret
-
-0000000000000f2e <putc>:
+0000000000000f06 <putc>:
 
 static char digits[] = "0123456789ABCDEF";
 
 static void
 putc(int fd, char c)
 {
-     f2e:	1101                	addi	sp,sp,-32
-     f30:	ec06                	sd	ra,24(sp)
-     f32:	e822                	sd	s0,16(sp)
-     f34:	1000                	addi	s0,sp,32
-     f36:	feb407a3          	sb	a1,-17(s0)
+     f06:	1101                	addi	sp,sp,-32
+     f08:	ec06                	sd	ra,24(sp)
+     f0a:	e822                	sd	s0,16(sp)
+     f0c:	1000                	addi	s0,sp,32
+     f0e:	feb407a3          	sb	a1,-17(s0)
   write(fd, &c, 1);
-     f3a:	4605                	li	a2,1
-     f3c:	fef40593          	addi	a1,s0,-17
-     f40:	00000097          	auipc	ra,0x0
-     f44:	f46080e7          	jalr	-186(ra) # e86 <write>
+     f12:	4605                	li	a2,1
+     f14:	fef40593          	addi	a1,s0,-17
+     f18:	00000097          	auipc	ra,0x0
+     f1c:	f6e080e7          	jalr	-146(ra) # e86 <write>
 }
-     f48:	60e2                	ld	ra,24(sp)
-     f4a:	6442                	ld	s0,16(sp)
-     f4c:	6105                	addi	sp,sp,32
-     f4e:	8082                	ret
+     f20:	60e2                	ld	ra,24(sp)
+     f22:	6442                	ld	s0,16(sp)
+     f24:	6105                	addi	sp,sp,32
+     f26:	8082                	ret
 
-0000000000000f50 <printint>:
+0000000000000f28 <printint>:
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
-     f50:	7139                	addi	sp,sp,-64
-     f52:	fc06                	sd	ra,56(sp)
-     f54:	f822                	sd	s0,48(sp)
-     f56:	f426                	sd	s1,40(sp)
-     f58:	f04a                	sd	s2,32(sp)
-     f5a:	ec4e                	sd	s3,24(sp)
-     f5c:	0080                	addi	s0,sp,64
-     f5e:	84aa                	mv	s1,a0
+     f28:	7139                	addi	sp,sp,-64
+     f2a:	fc06                	sd	ra,56(sp)
+     f2c:	f822                	sd	s0,48(sp)
+     f2e:	f426                	sd	s1,40(sp)
+     f30:	f04a                	sd	s2,32(sp)
+     f32:	ec4e                	sd	s3,24(sp)
+     f34:	0080                	addi	s0,sp,64
+     f36:	84aa                	mv	s1,a0
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
-     f60:	c299                	beqz	a3,f66 <printint+0x16>
-     f62:	0805c863          	bltz	a1,ff2 <printint+0xa2>
+     f38:	c299                	beqz	a3,f3e <printint+0x16>
+     f3a:	0805c863          	bltz	a1,fca <printint+0xa2>
     neg = 1;
     x = -xx;
   } else {
     x = xx;
-     f66:	2581                	sext.w	a1,a1
+     f3e:	2581                	sext.w	a1,a1
   neg = 0;
-     f68:	4881                	li	a7,0
-     f6a:	fc040693          	addi	a3,s0,-64
+     f40:	4881                	li	a7,0
+     f42:	fc040693          	addi	a3,s0,-64
   }
 
   i = 0;
-     f6e:	4701                	li	a4,0
+     f46:	4701                	li	a4,0
   do{
     buf[i++] = digits[x % base];
-     f70:	2601                	sext.w	a2,a2
-     f72:	00000517          	auipc	a0,0x0
-     f76:	72650513          	addi	a0,a0,1830 # 1698 <digits>
-     f7a:	883a                	mv	a6,a4
-     f7c:	2705                	addiw	a4,a4,1
-     f7e:	02c5f7bb          	remuw	a5,a1,a2
-     f82:	1782                	slli	a5,a5,0x20
-     f84:	9381                	srli	a5,a5,0x20
-     f86:	97aa                	add	a5,a5,a0
-     f88:	0007c783          	lbu	a5,0(a5)
-     f8c:	00f68023          	sb	a5,0(a3)
+     f48:	2601                	sext.w	a2,a2
+     f4a:	00000517          	auipc	a0,0x0
+     f4e:	72650513          	addi	a0,a0,1830 # 1670 <digits>
+     f52:	883a                	mv	a6,a4
+     f54:	2705                	addiw	a4,a4,1
+     f56:	02c5f7bb          	remuw	a5,a1,a2
+     f5a:	1782                	slli	a5,a5,0x20
+     f5c:	9381                	srli	a5,a5,0x20
+     f5e:	97aa                	add	a5,a5,a0
+     f60:	0007c783          	lbu	a5,0(a5)
+     f64:	00f68023          	sb	a5,0(a3)
   }while((x /= base) != 0);
-     f90:	0005879b          	sext.w	a5,a1
-     f94:	02c5d5bb          	divuw	a1,a1,a2
-     f98:	0685                	addi	a3,a3,1
-     f9a:	fec7f0e3          	bgeu	a5,a2,f7a <printint+0x2a>
+     f68:	0005879b          	sext.w	a5,a1
+     f6c:	02c5d5bb          	divuw	a1,a1,a2
+     f70:	0685                	addi	a3,a3,1
+     f72:	fec7f0e3          	bgeu	a5,a2,f52 <printint+0x2a>
   if(neg)
-     f9e:	00088b63          	beqz	a7,fb4 <printint+0x64>
+     f76:	00088b63          	beqz	a7,f8c <printint+0x64>
     buf[i++] = '-';
-     fa2:	fd040793          	addi	a5,s0,-48
-     fa6:	973e                	add	a4,a4,a5
-     fa8:	02d00793          	li	a5,45
-     fac:	fef70823          	sb	a5,-16(a4)
-     fb0:	0028071b          	addiw	a4,a6,2
+     f7a:	fd040793          	addi	a5,s0,-48
+     f7e:	973e                	add	a4,a4,a5
+     f80:	02d00793          	li	a5,45
+     f84:	fef70823          	sb	a5,-16(a4)
+     f88:	0028071b          	addiw	a4,a6,2
 
   while(--i >= 0)
-     fb4:	02e05863          	blez	a4,fe4 <printint+0x94>
-     fb8:	fc040793          	addi	a5,s0,-64
-     fbc:	00e78933          	add	s2,a5,a4
-     fc0:	fff78993          	addi	s3,a5,-1
-     fc4:	99ba                	add	s3,s3,a4
-     fc6:	377d                	addiw	a4,a4,-1
-     fc8:	1702                	slli	a4,a4,0x20
-     fca:	9301                	srli	a4,a4,0x20
-     fcc:	40e989b3          	sub	s3,s3,a4
+     f8c:	02e05863          	blez	a4,fbc <printint+0x94>
+     f90:	fc040793          	addi	a5,s0,-64
+     f94:	00e78933          	add	s2,a5,a4
+     f98:	fff78993          	addi	s3,a5,-1
+     f9c:	99ba                	add	s3,s3,a4
+     f9e:	377d                	addiw	a4,a4,-1
+     fa0:	1702                	slli	a4,a4,0x20
+     fa2:	9301                	srli	a4,a4,0x20
+     fa4:	40e989b3          	sub	s3,s3,a4
     putc(fd, buf[i]);
-     fd0:	fff94583          	lbu	a1,-1(s2)
-     fd4:	8526                	mv	a0,s1
-     fd6:	00000097          	auipc	ra,0x0
-     fda:	f58080e7          	jalr	-168(ra) # f2e <putc>
+     fa8:	fff94583          	lbu	a1,-1(s2)
+     fac:	8526                	mv	a0,s1
+     fae:	00000097          	auipc	ra,0x0
+     fb2:	f58080e7          	jalr	-168(ra) # f06 <putc>
   while(--i >= 0)
-     fde:	197d                	addi	s2,s2,-1
-     fe0:	ff3918e3          	bne	s2,s3,fd0 <printint+0x80>
+     fb6:	197d                	addi	s2,s2,-1
+     fb8:	ff3918e3          	bne	s2,s3,fa8 <printint+0x80>
 }
-     fe4:	70e2                	ld	ra,56(sp)
-     fe6:	7442                	ld	s0,48(sp)
-     fe8:	74a2                	ld	s1,40(sp)
-     fea:	7902                	ld	s2,32(sp)
-     fec:	69e2                	ld	s3,24(sp)
-     fee:	6121                	addi	sp,sp,64
-     ff0:	8082                	ret
+     fbc:	70e2                	ld	ra,56(sp)
+     fbe:	7442                	ld	s0,48(sp)
+     fc0:	74a2                	ld	s1,40(sp)
+     fc2:	7902                	ld	s2,32(sp)
+     fc4:	69e2                	ld	s3,24(sp)
+     fc6:	6121                	addi	sp,sp,64
+     fc8:	8082                	ret
     x = -xx;
-     ff2:	40b005bb          	negw	a1,a1
+     fca:	40b005bb          	negw	a1,a1
     neg = 1;
-     ff6:	4885                	li	a7,1
+     fce:	4885                	li	a7,1
     x = -xx;
-     ff8:	bf8d                	j	f6a <printint+0x1a>
+     fd0:	bf8d                	j	f42 <printint+0x1a>
 
-0000000000000ffa <vprintf>:
+0000000000000fd2 <vprintf>:
 }
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 vprintf(int fd, const char *fmt, va_list ap)
 {
-     ffa:	7119                	addi	sp,sp,-128
-     ffc:	fc86                	sd	ra,120(sp)
-     ffe:	f8a2                	sd	s0,112(sp)
-    1000:	f4a6                	sd	s1,104(sp)
-    1002:	f0ca                	sd	s2,96(sp)
-    1004:	ecce                	sd	s3,88(sp)
-    1006:	e8d2                	sd	s4,80(sp)
-    1008:	e4d6                	sd	s5,72(sp)
-    100a:	e0da                	sd	s6,64(sp)
-    100c:	fc5e                	sd	s7,56(sp)
-    100e:	f862                	sd	s8,48(sp)
-    1010:	f466                	sd	s9,40(sp)
-    1012:	f06a                	sd	s10,32(sp)
-    1014:	ec6e                	sd	s11,24(sp)
-    1016:	0100                	addi	s0,sp,128
+     fd2:	7119                	addi	sp,sp,-128
+     fd4:	fc86                	sd	ra,120(sp)
+     fd6:	f8a2                	sd	s0,112(sp)
+     fd8:	f4a6                	sd	s1,104(sp)
+     fda:	f0ca                	sd	s2,96(sp)
+     fdc:	ecce                	sd	s3,88(sp)
+     fde:	e8d2                	sd	s4,80(sp)
+     fe0:	e4d6                	sd	s5,72(sp)
+     fe2:	e0da                	sd	s6,64(sp)
+     fe4:	fc5e                	sd	s7,56(sp)
+     fe6:	f862                	sd	s8,48(sp)
+     fe8:	f466                	sd	s9,40(sp)
+     fea:	f06a                	sd	s10,32(sp)
+     fec:	ec6e                	sd	s11,24(sp)
+     fee:	0100                	addi	s0,sp,128
   char *s;
   int c, i, state;
 
   state = 0;
   for(i = 0; fmt[i]; i++){
-    1018:	0005c903          	lbu	s2,0(a1)
-    101c:	18090f63          	beqz	s2,11ba <vprintf+0x1c0>
-    1020:	8aaa                	mv	s5,a0
-    1022:	8b32                	mv	s6,a2
-    1024:	00158493          	addi	s1,a1,1
+     ff0:	0005c903          	lbu	s2,0(a1)
+     ff4:	18090f63          	beqz	s2,1192 <vprintf+0x1c0>
+     ff8:	8aaa                	mv	s5,a0
+     ffa:	8b32                	mv	s6,a2
+     ffc:	00158493          	addi	s1,a1,1
   state = 0;
-    1028:	4981                	li	s3,0
+    1000:	4981                	li	s3,0
       if(c == '%'){
         state = '%';
       } else {
         putc(fd, c);
       }
     } else if(state == '%'){
-    102a:	02500a13          	li	s4,37
+    1002:	02500a13          	li	s4,37
       if(c == 'd'){
-    102e:	06400c13          	li	s8,100
+    1006:	06400c13          	li	s8,100
         printint(fd, va_arg(ap, int), 10, 1);
       } else if(c == 'l') {
-    1032:	06c00c93          	li	s9,108
+    100a:	06c00c93          	li	s9,108
         printint(fd, va_arg(ap, uint64), 10, 0);
       } else if(c == 'x') {
-    1036:	07800d13          	li	s10,120
+    100e:	07800d13          	li	s10,120
         printint(fd, va_arg(ap, int), 16, 0);
       } else if(c == 'p') {
-    103a:	07000d93          	li	s11,112
+    1012:	07000d93          	li	s11,112
     putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
-    103e:	00000b97          	auipc	s7,0x0
-    1042:	65ab8b93          	addi	s7,s7,1626 # 1698 <digits>
-    1046:	a839                	j	1064 <vprintf+0x6a>
+    1016:	00000b97          	auipc	s7,0x0
+    101a:	65ab8b93          	addi	s7,s7,1626 # 1670 <digits>
+    101e:	a839                	j	103c <vprintf+0x6a>
         putc(fd, c);
-    1048:	85ca                	mv	a1,s2
-    104a:	8556                	mv	a0,s5
-    104c:	00000097          	auipc	ra,0x0
-    1050:	ee2080e7          	jalr	-286(ra) # f2e <putc>
-    1054:	a019                	j	105a <vprintf+0x60>
+    1020:	85ca                	mv	a1,s2
+    1022:	8556                	mv	a0,s5
+    1024:	00000097          	auipc	ra,0x0
+    1028:	ee2080e7          	jalr	-286(ra) # f06 <putc>
+    102c:	a019                	j	1032 <vprintf+0x60>
     } else if(state == '%'){
-    1056:	01498f63          	beq	s3,s4,1074 <vprintf+0x7a>
+    102e:	01498f63          	beq	s3,s4,104c <vprintf+0x7a>
   for(i = 0; fmt[i]; i++){
-    105a:	0485                	addi	s1,s1,1
-    105c:	fff4c903          	lbu	s2,-1(s1)
-    1060:	14090d63          	beqz	s2,11ba <vprintf+0x1c0>
+    1032:	0485                	addi	s1,s1,1
+    1034:	fff4c903          	lbu	s2,-1(s1)
+    1038:	14090d63          	beqz	s2,1192 <vprintf+0x1c0>
     c = fmt[i] & 0xff;
-    1064:	0009079b          	sext.w	a5,s2
+    103c:	0009079b          	sext.w	a5,s2
     if(state == 0){
-    1068:	fe0997e3          	bnez	s3,1056 <vprintf+0x5c>
+    1040:	fe0997e3          	bnez	s3,102e <vprintf+0x5c>
       if(c == '%'){
-    106c:	fd479ee3          	bne	a5,s4,1048 <vprintf+0x4e>
+    1044:	fd479ee3          	bne	a5,s4,1020 <vprintf+0x4e>
         state = '%';
-    1070:	89be                	mv	s3,a5
-    1072:	b7e5                	j	105a <vprintf+0x60>
+    1048:	89be                	mv	s3,a5
+    104a:	b7e5                	j	1032 <vprintf+0x60>
       if(c == 'd'){
-    1074:	05878063          	beq	a5,s8,10b4 <vprintf+0xba>
+    104c:	05878063          	beq	a5,s8,108c <vprintf+0xba>
       } else if(c == 'l') {
-    1078:	05978c63          	beq	a5,s9,10d0 <vprintf+0xd6>
+    1050:	05978c63          	beq	a5,s9,10a8 <vprintf+0xd6>
       } else if(c == 'x') {
-    107c:	07a78863          	beq	a5,s10,10ec <vprintf+0xf2>
+    1054:	07a78863          	beq	a5,s10,10c4 <vprintf+0xf2>
       } else if(c == 'p') {
-    1080:	09b78463          	beq	a5,s11,1108 <vprintf+0x10e>
+    1058:	09b78463          	beq	a5,s11,10e0 <vprintf+0x10e>
         printptr(fd, va_arg(ap, uint64));
       } else if(c == 's'){
-    1084:	07300713          	li	a4,115
-    1088:	0ce78663          	beq	a5,a4,1154 <vprintf+0x15a>
+    105c:	07300713          	li	a4,115
+    1060:	0ce78663          	beq	a5,a4,112c <vprintf+0x15a>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
-    108c:	06300713          	li	a4,99
-    1090:	0ee78e63          	beq	a5,a4,118c <vprintf+0x192>
+    1064:	06300713          	li	a4,99
+    1068:	0ee78e63          	beq	a5,a4,1164 <vprintf+0x192>
         putc(fd, va_arg(ap, uint));
       } else if(c == '%'){
-    1094:	11478863          	beq	a5,s4,11a4 <vprintf+0x1aa>
+    106c:	11478863          	beq	a5,s4,117c <vprintf+0x1aa>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
-    1098:	85d2                	mv	a1,s4
-    109a:	8556                	mv	a0,s5
-    109c:	00000097          	auipc	ra,0x0
-    10a0:	e92080e7          	jalr	-366(ra) # f2e <putc>
+    1070:	85d2                	mv	a1,s4
+    1072:	8556                	mv	a0,s5
+    1074:	00000097          	auipc	ra,0x0
+    1078:	e92080e7          	jalr	-366(ra) # f06 <putc>
         putc(fd, c);
-    10a4:	85ca                	mv	a1,s2
-    10a6:	8556                	mv	a0,s5
-    10a8:	00000097          	auipc	ra,0x0
-    10ac:	e86080e7          	jalr	-378(ra) # f2e <putc>
+    107c:	85ca                	mv	a1,s2
+    107e:	8556                	mv	a0,s5
+    1080:	00000097          	auipc	ra,0x0
+    1084:	e86080e7          	jalr	-378(ra) # f06 <putc>
       }
       state = 0;
-    10b0:	4981                	li	s3,0
-    10b2:	b765                	j	105a <vprintf+0x60>
+    1088:	4981                	li	s3,0
+    108a:	b765                	j	1032 <vprintf+0x60>
         printint(fd, va_arg(ap, int), 10, 1);
-    10b4:	008b0913          	addi	s2,s6,8
-    10b8:	4685                	li	a3,1
-    10ba:	4629                	li	a2,10
-    10bc:	000b2583          	lw	a1,0(s6)
-    10c0:	8556                	mv	a0,s5
-    10c2:	00000097          	auipc	ra,0x0
-    10c6:	e8e080e7          	jalr	-370(ra) # f50 <printint>
-    10ca:	8b4a                	mv	s6,s2
+    108c:	008b0913          	addi	s2,s6,8
+    1090:	4685                	li	a3,1
+    1092:	4629                	li	a2,10
+    1094:	000b2583          	lw	a1,0(s6)
+    1098:	8556                	mv	a0,s5
+    109a:	00000097          	auipc	ra,0x0
+    109e:	e8e080e7          	jalr	-370(ra) # f28 <printint>
+    10a2:	8b4a                	mv	s6,s2
       state = 0;
-    10cc:	4981                	li	s3,0
-    10ce:	b771                	j	105a <vprintf+0x60>
+    10a4:	4981                	li	s3,0
+    10a6:	b771                	j	1032 <vprintf+0x60>
         printint(fd, va_arg(ap, uint64), 10, 0);
-    10d0:	008b0913          	addi	s2,s6,8
-    10d4:	4681                	li	a3,0
-    10d6:	4629                	li	a2,10
-    10d8:	000b2583          	lw	a1,0(s6)
-    10dc:	8556                	mv	a0,s5
-    10de:	00000097          	auipc	ra,0x0
-    10e2:	e72080e7          	jalr	-398(ra) # f50 <printint>
-    10e6:	8b4a                	mv	s6,s2
+    10a8:	008b0913          	addi	s2,s6,8
+    10ac:	4681                	li	a3,0
+    10ae:	4629                	li	a2,10
+    10b0:	000b2583          	lw	a1,0(s6)
+    10b4:	8556                	mv	a0,s5
+    10b6:	00000097          	auipc	ra,0x0
+    10ba:	e72080e7          	jalr	-398(ra) # f28 <printint>
+    10be:	8b4a                	mv	s6,s2
       state = 0;
-    10e8:	4981                	li	s3,0
-    10ea:	bf85                	j	105a <vprintf+0x60>
+    10c0:	4981                	li	s3,0
+    10c2:	bf85                	j	1032 <vprintf+0x60>
         printint(fd, va_arg(ap, int), 16, 0);
-    10ec:	008b0913          	addi	s2,s6,8
-    10f0:	4681                	li	a3,0
-    10f2:	4641                	li	a2,16
-    10f4:	000b2583          	lw	a1,0(s6)
-    10f8:	8556                	mv	a0,s5
-    10fa:	00000097          	auipc	ra,0x0
-    10fe:	e56080e7          	jalr	-426(ra) # f50 <printint>
-    1102:	8b4a                	mv	s6,s2
+    10c4:	008b0913          	addi	s2,s6,8
+    10c8:	4681                	li	a3,0
+    10ca:	4641                	li	a2,16
+    10cc:	000b2583          	lw	a1,0(s6)
+    10d0:	8556                	mv	a0,s5
+    10d2:	00000097          	auipc	ra,0x0
+    10d6:	e56080e7          	jalr	-426(ra) # f28 <printint>
+    10da:	8b4a                	mv	s6,s2
       state = 0;
-    1104:	4981                	li	s3,0
-    1106:	bf91                	j	105a <vprintf+0x60>
+    10dc:	4981                	li	s3,0
+    10de:	bf91                	j	1032 <vprintf+0x60>
         printptr(fd, va_arg(ap, uint64));
-    1108:	008b0793          	addi	a5,s6,8
-    110c:	f8f43423          	sd	a5,-120(s0)
-    1110:	000b3983          	ld	s3,0(s6)
+    10e0:	008b0793          	addi	a5,s6,8
+    10e4:	f8f43423          	sd	a5,-120(s0)
+    10e8:	000b3983          	ld	s3,0(s6)
   putc(fd, '0');
-    1114:	03000593          	li	a1,48
-    1118:	8556                	mv	a0,s5
-    111a:	00000097          	auipc	ra,0x0
-    111e:	e14080e7          	jalr	-492(ra) # f2e <putc>
+    10ec:	03000593          	li	a1,48
+    10f0:	8556                	mv	a0,s5
+    10f2:	00000097          	auipc	ra,0x0
+    10f6:	e14080e7          	jalr	-492(ra) # f06 <putc>
   putc(fd, 'x');
-    1122:	85ea                	mv	a1,s10
-    1124:	8556                	mv	a0,s5
-    1126:	00000097          	auipc	ra,0x0
-    112a:	e08080e7          	jalr	-504(ra) # f2e <putc>
-    112e:	4941                	li	s2,16
+    10fa:	85ea                	mv	a1,s10
+    10fc:	8556                	mv	a0,s5
+    10fe:	00000097          	auipc	ra,0x0
+    1102:	e08080e7          	jalr	-504(ra) # f06 <putc>
+    1106:	4941                	li	s2,16
     putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
-    1130:	03c9d793          	srli	a5,s3,0x3c
-    1134:	97de                	add	a5,a5,s7
-    1136:	0007c583          	lbu	a1,0(a5)
-    113a:	8556                	mv	a0,s5
-    113c:	00000097          	auipc	ra,0x0
-    1140:	df2080e7          	jalr	-526(ra) # f2e <putc>
+    1108:	03c9d793          	srli	a5,s3,0x3c
+    110c:	97de                	add	a5,a5,s7
+    110e:	0007c583          	lbu	a1,0(a5)
+    1112:	8556                	mv	a0,s5
+    1114:	00000097          	auipc	ra,0x0
+    1118:	df2080e7          	jalr	-526(ra) # f06 <putc>
   for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
-    1144:	0992                	slli	s3,s3,0x4
-    1146:	397d                	addiw	s2,s2,-1
-    1148:	fe0914e3          	bnez	s2,1130 <vprintf+0x136>
+    111c:	0992                	slli	s3,s3,0x4
+    111e:	397d                	addiw	s2,s2,-1
+    1120:	fe0914e3          	bnez	s2,1108 <vprintf+0x136>
         printptr(fd, va_arg(ap, uint64));
-    114c:	f8843b03          	ld	s6,-120(s0)
+    1124:	f8843b03          	ld	s6,-120(s0)
       state = 0;
-    1150:	4981                	li	s3,0
-    1152:	b721                	j	105a <vprintf+0x60>
+    1128:	4981                	li	s3,0
+    112a:	b721                	j	1032 <vprintf+0x60>
         s = va_arg(ap, char*);
-    1154:	008b0993          	addi	s3,s6,8
-    1158:	000b3903          	ld	s2,0(s6)
+    112c:	008b0993          	addi	s3,s6,8
+    1130:	000b3903          	ld	s2,0(s6)
         if(s == 0)
-    115c:	02090163          	beqz	s2,117e <vprintf+0x184>
+    1134:	02090163          	beqz	s2,1156 <vprintf+0x184>
         while(*s != 0){
-    1160:	00094583          	lbu	a1,0(s2)
-    1164:	c9a1                	beqz	a1,11b4 <vprintf+0x1ba>
+    1138:	00094583          	lbu	a1,0(s2)
+    113c:	c9a1                	beqz	a1,118c <vprintf+0x1ba>
           putc(fd, *s);
-    1166:	8556                	mv	a0,s5
-    1168:	00000097          	auipc	ra,0x0
-    116c:	dc6080e7          	jalr	-570(ra) # f2e <putc>
+    113e:	8556                	mv	a0,s5
+    1140:	00000097          	auipc	ra,0x0
+    1144:	dc6080e7          	jalr	-570(ra) # f06 <putc>
           s++;
-    1170:	0905                	addi	s2,s2,1
+    1148:	0905                	addi	s2,s2,1
         while(*s != 0){
-    1172:	00094583          	lbu	a1,0(s2)
-    1176:	f9e5                	bnez	a1,1166 <vprintf+0x16c>
+    114a:	00094583          	lbu	a1,0(s2)
+    114e:	f9e5                	bnez	a1,113e <vprintf+0x16c>
         s = va_arg(ap, char*);
-    1178:	8b4e                	mv	s6,s3
+    1150:	8b4e                	mv	s6,s3
       state = 0;
-    117a:	4981                	li	s3,0
-    117c:	bdf9                	j	105a <vprintf+0x60>
+    1152:	4981                	li	s3,0
+    1154:	bdf9                	j	1032 <vprintf+0x60>
           s = "(null)";
-    117e:	00000917          	auipc	s2,0x0
-    1182:	51290913          	addi	s2,s2,1298 # 1690 <malloc+0x3cc>
+    1156:	00000917          	auipc	s2,0x0
+    115a:	51290913          	addi	s2,s2,1298 # 1668 <malloc+0x3cc>
         while(*s != 0){
-    1186:	02800593          	li	a1,40
-    118a:	bff1                	j	1166 <vprintf+0x16c>
+    115e:	02800593          	li	a1,40
+    1162:	bff1                	j	113e <vprintf+0x16c>
         putc(fd, va_arg(ap, uint));
-    118c:	008b0913          	addi	s2,s6,8
-    1190:	000b4583          	lbu	a1,0(s6)
-    1194:	8556                	mv	a0,s5
-    1196:	00000097          	auipc	ra,0x0
-    119a:	d98080e7          	jalr	-616(ra) # f2e <putc>
-    119e:	8b4a                	mv	s6,s2
+    1164:	008b0913          	addi	s2,s6,8
+    1168:	000b4583          	lbu	a1,0(s6)
+    116c:	8556                	mv	a0,s5
+    116e:	00000097          	auipc	ra,0x0
+    1172:	d98080e7          	jalr	-616(ra) # f06 <putc>
+    1176:	8b4a                	mv	s6,s2
       state = 0;
-    11a0:	4981                	li	s3,0
-    11a2:	bd65                	j	105a <vprintf+0x60>
+    1178:	4981                	li	s3,0
+    117a:	bd65                	j	1032 <vprintf+0x60>
         putc(fd, c);
-    11a4:	85d2                	mv	a1,s4
-    11a6:	8556                	mv	a0,s5
-    11a8:	00000097          	auipc	ra,0x0
-    11ac:	d86080e7          	jalr	-634(ra) # f2e <putc>
+    117c:	85d2                	mv	a1,s4
+    117e:	8556                	mv	a0,s5
+    1180:	00000097          	auipc	ra,0x0
+    1184:	d86080e7          	jalr	-634(ra) # f06 <putc>
       state = 0;
-    11b0:	4981                	li	s3,0
-    11b2:	b565                	j	105a <vprintf+0x60>
+    1188:	4981                	li	s3,0
+    118a:	b565                	j	1032 <vprintf+0x60>
         s = va_arg(ap, char*);
-    11b4:	8b4e                	mv	s6,s3
+    118c:	8b4e                	mv	s6,s3
       state = 0;
-    11b6:	4981                	li	s3,0
-    11b8:	b54d                	j	105a <vprintf+0x60>
+    118e:	4981                	li	s3,0
+    1190:	b54d                	j	1032 <vprintf+0x60>
     }
   }
 }
-    11ba:	70e6                	ld	ra,120(sp)
-    11bc:	7446                	ld	s0,112(sp)
-    11be:	74a6                	ld	s1,104(sp)
-    11c0:	7906                	ld	s2,96(sp)
-    11c2:	69e6                	ld	s3,88(sp)
-    11c4:	6a46                	ld	s4,80(sp)
-    11c6:	6aa6                	ld	s5,72(sp)
-    11c8:	6b06                	ld	s6,64(sp)
-    11ca:	7be2                	ld	s7,56(sp)
-    11cc:	7c42                	ld	s8,48(sp)
-    11ce:	7ca2                	ld	s9,40(sp)
-    11d0:	7d02                	ld	s10,32(sp)
-    11d2:	6de2                	ld	s11,24(sp)
-    11d4:	6109                	addi	sp,sp,128
-    11d6:	8082                	ret
-
-00000000000011d8 <fprintf>:
+    1192:	70e6                	ld	ra,120(sp)
+    1194:	7446                	ld	s0,112(sp)
+    1196:	74a6                	ld	s1,104(sp)
+    1198:	7906                	ld	s2,96(sp)
+    119a:	69e6                	ld	s3,88(sp)
+    119c:	6a46                	ld	s4,80(sp)
+    119e:	6aa6                	ld	s5,72(sp)
+    11a0:	6b06                	ld	s6,64(sp)
+    11a2:	7be2                	ld	s7,56(sp)
+    11a4:	7c42                	ld	s8,48(sp)
+    11a6:	7ca2                	ld	s9,40(sp)
+    11a8:	7d02                	ld	s10,32(sp)
+    11aa:	6de2                	ld	s11,24(sp)
+    11ac:	6109                	addi	sp,sp,128
+    11ae:	8082                	ret
+
+00000000000011b0 <fprintf>:
 
 void
 fprintf(int fd, const char *fmt, ...)
 {
-    11d8:	715d                	addi	sp,sp,-80
-    11da:	ec06                	sd	ra,24(sp)
-    11dc:	e822                	sd	s0,16(sp)
-    11de:	1000                	addi	s0,sp,32
-    11e0:	e010                	sd	a2,0(s0)
-    11e2:	e414                	sd	a3,8(s0)
-    11e4:	e818                	sd	a4,16(s0)
-    11e6:	ec1c                	sd	a5,24(s0)
-    11e8:	03043023          	sd	a6,32(s0)
-    11ec:	03143423          	sd	a7,40(s0)
+    11b0:	715d                	addi	sp,sp,-80
+    11b2:	ec06                	sd	ra,24(sp)
+    11b4:	e822                	sd	s0,16(sp)
+    11b6:	1000                	addi	s0,sp,32
+    11b8:	e010                	sd	a2,0(s0)
+    11ba:	e414                	sd	a3,8(s0)
+    11bc:	e818                	sd	a4,16(s0)
+    11be:	ec1c                	sd	a5,24(s0)
+    11c0:	03043023          	sd	a6,32(s0)
+    11c4:	03143423          	sd	a7,40(s0)
   va_list ap;
 
   va_start(ap, fmt);
-    11f0:	fe843423          	sd	s0,-24(s0)
+    11c8:	fe843423          	sd	s0,-24(s0)
   vprintf(fd, fmt, ap);
-    11f4:	8622                	mv	a2,s0
-    11f6:	00000097          	auipc	ra,0x0
-    11fa:	e04080e7          	jalr	-508(ra) # ffa <vprintf>
+    11cc:	8622                	mv	a2,s0
+    11ce:	00000097          	auipc	ra,0x0
+    11d2:	e04080e7          	jalr	-508(ra) # fd2 <vprintf>
 }
-    11fe:	60e2                	ld	ra,24(sp)
-    1200:	6442                	ld	s0,16(sp)
-    1202:	6161                	addi	sp,sp,80
-    1204:	8082                	ret
+    11d6:	60e2                	ld	ra,24(sp)
+    11d8:	6442                	ld	s0,16(sp)
+    11da:	6161                	addi	sp,sp,80
+    11dc:	8082                	ret
 
-0000000000001206 <printf>:
+00000000000011de <printf>:
 
 void
 printf(const char *fmt, ...)
 {
-    1206:	711d                	addi	sp,sp,-96
-    1208:	ec06                	sd	ra,24(sp)
-    120a:	e822                	sd	s0,16(sp)
-    120c:	1000                	addi	s0,sp,32
-    120e:	e40c                	sd	a1,8(s0)
-    1210:	e810                	sd	a2,16(s0)
-    1212:	ec14                	sd	a3,24(s0)
-    1214:	f018                	sd	a4,32(s0)
-    1216:	f41c                	sd	a5,40(s0)
-    1218:	03043823          	sd	a6,48(s0)
-    121c:	03143c23          	sd	a7,56(s0)
+    11de:	711d                	addi	sp,sp,-96
+    11e0:	ec06                	sd	ra,24(sp)
+    11e2:	e822                	sd	s0,16(sp)
+    11e4:	1000                	addi	s0,sp,32
+    11e6:	e40c                	sd	a1,8(s0)
+    11e8:	e810                	sd	a2,16(s0)
+    11ea:	ec14                	sd	a3,24(s0)
+    11ec:	f018                	sd	a4,32(s0)
+    11ee:	f41c                	sd	a5,40(s0)
+    11f0:	03043823          	sd	a6,48(s0)
+    11f4:	03143c23          	sd	a7,56(s0)
   va_list ap;
 
   va_start(ap, fmt);
-    1220:	00840613          	addi	a2,s0,8
-    1224:	fec43423          	sd	a2,-24(s0)
+    11f8:	00840613          	addi	a2,s0,8
+    11fc:	fec43423          	sd	a2,-24(s0)
   vprintf(1, fmt, ap);
-    1228:	85aa                	mv	a1,a0
-    122a:	4505                	li	a0,1
-    122c:	00000097          	auipc	ra,0x0
-    1230:	dce080e7          	jalr	-562(ra) # ffa <vprintf>
+    1200:	85aa                	mv	a1,a0
+    1202:	4505                	li	a0,1
+    1204:	00000097          	auipc	ra,0x0
+    1208:	dce080e7          	jalr	-562(ra) # fd2 <vprintf>
 }
-    1234:	60e2                	ld	ra,24(sp)
-    1236:	6442                	ld	s0,16(sp)
-    1238:	6125                	addi	sp,sp,96
-    123a:	8082                	ret
+    120c:	60e2                	ld	ra,24(sp)
+    120e:	6442                	ld	s0,16(sp)
+    1210:	6125                	addi	sp,sp,96
+    1212:	8082                	ret
 
-000000000000123c <free>:
+0000000000001214 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
-    123c:	1141                	addi	sp,sp,-16
-    123e:	e422                	sd	s0,8(sp)
-    1240:	0800                	addi	s0,sp,16
+    1214:	1141                	addi	sp,sp,-16
+    1216:	e422                	sd	s0,8(sp)
+    1218:	0800                	addi	s0,sp,16
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
-    1242:	ff050693          	addi	a3,a0,-16
+    121a:	ff050693          	addi	a3,a0,-16
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    1246:	00000797          	auipc	a5,0x0
-    124a:	4727b783          	ld	a5,1138(a5) # 16b8 <freep>
-    124e:	a805                	j	127e <free+0x42>
+    121e:	00000797          	auipc	a5,0x0
+    1222:	4727b783          	ld	a5,1138(a5) # 1690 <freep>
+    1226:	a805                	j	1256 <free+0x42>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
       break;
   if(bp + bp->s.size == p->s.ptr){
     bp->s.size += p->s.ptr->s.size;
-    1250:	4618                	lw	a4,8(a2)
-    1252:	9db9                	addw	a1,a1,a4
-    1254:	feb52c23          	sw	a1,-8(a0)
+    1228:	4618                	lw	a4,8(a2)
+    122a:	9db9                	addw	a1,a1,a4
+    122c:	feb52c23          	sw	a1,-8(a0)
     bp->s.ptr = p->s.ptr->s.ptr;
-    1258:	6398                	ld	a4,0(a5)
-    125a:	6318                	ld	a4,0(a4)
-    125c:	fee53823          	sd	a4,-16(a0)
-    1260:	a091                	j	12a4 <free+0x68>
+    1230:	6398                	ld	a4,0(a5)
+    1232:	6318                	ld	a4,0(a4)
+    1234:	fee53823          	sd	a4,-16(a0)
+    1238:	a091                	j	127c <free+0x68>
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
     p->s.size += bp->s.size;
-    1262:	ff852703          	lw	a4,-8(a0)
-    1266:	9e39                	addw	a2,a2,a4
-    1268:	c790                	sw	a2,8(a5)
+    123a:	ff852703          	lw	a4,-8(a0)
+    123e:	9e39                	addw	a2,a2,a4
+    1240:	c790                	sw	a2,8(a5)
     p->s.ptr = bp->s.ptr;
-    126a:	ff053703          	ld	a4,-16(a0)
-    126e:	e398                	sd	a4,0(a5)
-    1270:	a099                	j	12b6 <free+0x7a>
+    1242:	ff053703          	ld	a4,-16(a0)
+    1246:	e398                	sd	a4,0(a5)
+    1248:	a099                	j	128e <free+0x7a>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    1272:	6398                	ld	a4,0(a5)
-    1274:	00e7e463          	bltu	a5,a4,127c <free+0x40>
-    1278:	00e6ea63          	bltu	a3,a4,128c <free+0x50>
+    124a:	6398                	ld	a4,0(a5)
+    124c:	00e7e463          	bltu	a5,a4,1254 <free+0x40>
+    1250:	00e6ea63          	bltu	a3,a4,1264 <free+0x50>
 {
-    127c:	87ba                	mv	a5,a4
+    1254:	87ba                	mv	a5,a4
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    127e:	fed7fae3          	bgeu	a5,a3,1272 <free+0x36>
-    1282:	6398                	ld	a4,0(a5)
-    1284:	00e6e463          	bltu	a3,a4,128c <free+0x50>
+    1256:	fed7fae3          	bgeu	a5,a3,124a <free+0x36>
+    125a:	6398                	ld	a4,0(a5)
+    125c:	00e6e463          	bltu	a3,a4,1264 <free+0x50>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    1288:	fee7eae3          	bltu	a5,a4,127c <free+0x40>
+    1260:	fee7eae3          	bltu	a5,a4,1254 <free+0x40>
   if(bp + bp->s.size == p->s.ptr){
-    128c:	ff852583          	lw	a1,-8(a0)
-    1290:	6390                	ld	a2,0(a5)
-    1292:	02059713          	slli	a4,a1,0x20
-    1296:	9301                	srli	a4,a4,0x20
-    1298:	0712                	slli	a4,a4,0x4
-    129a:	9736                	add	a4,a4,a3
-    129c:	fae60ae3          	beq	a2,a4,1250 <free+0x14>
+    1264:	ff852583          	lw	a1,-8(a0)
+    1268:	6390                	ld	a2,0(a5)
+    126a:	02059713          	slli	a4,a1,0x20
+    126e:	9301                	srli	a4,a4,0x20
+    1270:	0712                	slli	a4,a4,0x4
+    1272:	9736                	add	a4,a4,a3
+    1274:	fae60ae3          	beq	a2,a4,1228 <free+0x14>
     bp->s.ptr = p->s.ptr;
-    12a0:	fec53823          	sd	a2,-16(a0)
+    1278:	fec53823          	sd	a2,-16(a0)
   if(p + p->s.size == bp){
-    12a4:	4790                	lw	a2,8(a5)
-    12a6:	02061713          	slli	a4,a2,0x20
-    12aa:	9301                	srli	a4,a4,0x20
-    12ac:	0712                	slli	a4,a4,0x4
-    12ae:	973e                	add	a4,a4,a5
-    12b0:	fae689e3          	beq	a3,a4,1262 <free+0x26>
+    127c:	4790                	lw	a2,8(a5)
+    127e:	02061713          	slli	a4,a2,0x20
+    1282:	9301                	srli	a4,a4,0x20
+    1284:	0712                	slli	a4,a4,0x4
+    1286:	973e                	add	a4,a4,a5
+    1288:	fae689e3          	beq	a3,a4,123a <free+0x26>
   } else
     p->s.ptr = bp;
-    12b4:	e394                	sd	a3,0(a5)
+    128c:	e394                	sd	a3,0(a5)
   freep = p;
-    12b6:	00000717          	auipc	a4,0x0
-    12ba:	40f73123          	sd	a5,1026(a4) # 16b8 <freep>
+    128e:	00000717          	auipc	a4,0x0
+    1292:	40f73123          	sd	a5,1026(a4) # 1690 <freep>
 }
-    12be:	6422                	ld	s0,8(sp)
-    12c0:	0141                	addi	sp,sp,16
-    12c2:	8082                	ret
+    1296:	6422                	ld	s0,8(sp)
+    1298:	0141                	addi	sp,sp,16
+    129a:	8082                	ret
 
-00000000000012c4 <malloc>:
+000000000000129c <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
-    12c4:	7139                	addi	sp,sp,-64
-    12c6:	fc06                	sd	ra,56(sp)
-    12c8:	f822                	sd	s0,48(sp)
-    12ca:	f426                	sd	s1,40(sp)
-    12cc:	f04a                	sd	s2,32(sp)
-    12ce:	ec4e                	sd	s3,24(sp)
-    12d0:	e852                	sd	s4,16(sp)
-    12d2:	e456                	sd	s5,8(sp)
-    12d4:	e05a                	sd	s6,0(sp)
-    12d6:	0080                	addi	s0,sp,64
+    129c:	7139                	addi	sp,sp,-64
+    129e:	fc06                	sd	ra,56(sp)
+    12a0:	f822                	sd	s0,48(sp)
+    12a2:	f426                	sd	s1,40(sp)
+    12a4:	f04a                	sd	s2,32(sp)
+    12a6:	ec4e                	sd	s3,24(sp)
+    12a8:	e852                	sd	s4,16(sp)
+    12aa:	e456                	sd	s5,8(sp)
+    12ac:	e05a                	sd	s6,0(sp)
+    12ae:	0080                	addi	s0,sp,64
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    12d8:	02051493          	slli	s1,a0,0x20
-    12dc:	9081                	srli	s1,s1,0x20
-    12de:	04bd                	addi	s1,s1,15
-    12e0:	8091                	srli	s1,s1,0x4
-    12e2:	0014899b          	addiw	s3,s1,1
-    12e6:	0485                	addi	s1,s1,1
+    12b0:	02051493          	slli	s1,a0,0x20
+    12b4:	9081                	srli	s1,s1,0x20
+    12b6:	04bd                	addi	s1,s1,15
+    12b8:	8091                	srli	s1,s1,0x4
+    12ba:	0014899b          	addiw	s3,s1,1
+    12be:	0485                	addi	s1,s1,1
   if((prevp = freep) == 0){
-    12e8:	00000517          	auipc	a0,0x0
-    12ec:	3d053503          	ld	a0,976(a0) # 16b8 <freep>
-    12f0:	c515                	beqz	a0,131c <malloc+0x58>
+    12c0:	00000517          	auipc	a0,0x0
+    12c4:	3d053503          	ld	a0,976(a0) # 1690 <freep>
+    12c8:	c515                	beqz	a0,12f4 <malloc+0x58>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    12f2:	611c                	ld	a5,0(a0)
+    12ca:	611c                	ld	a5,0(a0)
     if(p->s.size >= nunits){
-    12f4:	4798                	lw	a4,8(a5)
-    12f6:	02977f63          	bgeu	a4,s1,1334 <malloc+0x70>
-    12fa:	8a4e                	mv	s4,s3
-    12fc:	0009871b          	sext.w	a4,s3
-    1300:	6685                	lui	a3,0x1
-    1302:	00d77363          	bgeu	a4,a3,1308 <malloc+0x44>
-    1306:	6a05                	lui	s4,0x1
-    1308:	000a0b1b          	sext.w	s6,s4
+    12cc:	4798                	lw	a4,8(a5)
+    12ce:	02977f63          	bgeu	a4,s1,130c <malloc+0x70>
+    12d2:	8a4e                	mv	s4,s3
+    12d4:	0009871b          	sext.w	a4,s3
+    12d8:	6685                	lui	a3,0x1
+    12da:	00d77363          	bgeu	a4,a3,12e0 <malloc+0x44>
+    12de:	6a05                	lui	s4,0x1
+    12e0:	000a0b1b          	sext.w	s6,s4
   p = sbrk(nu * sizeof(Header));
-    130c:	004a1a1b          	slliw	s4,s4,0x4
+    12e4:	004a1a1b          	slliw	s4,s4,0x4
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
-    1310:	00000917          	auipc	s2,0x0
-    1314:	3a890913          	addi	s2,s2,936 # 16b8 <freep>
+    12e8:	00000917          	auipc	s2,0x0
+    12ec:	3a890913          	addi	s2,s2,936 # 1690 <freep>
   if(p == (char*)-1)
-    1318:	5afd                	li	s5,-1
-    131a:	a88d                	j	138c <malloc+0xc8>
+    12f0:	5afd                	li	s5,-1
+    12f2:	a88d                	j	1364 <malloc+0xc8>
     base.s.ptr = freep = prevp = &base;
-    131c:	00000797          	auipc	a5,0x0
-    1320:	78c78793          	addi	a5,a5,1932 # 1aa8 <base>
-    1324:	00000717          	auipc	a4,0x0
-    1328:	38f73a23          	sd	a5,916(a4) # 16b8 <freep>
-    132c:	e39c                	sd	a5,0(a5)
+    12f4:	00000797          	auipc	a5,0x0
+    12f8:	78c78793          	addi	a5,a5,1932 # 1a80 <base>
+    12fc:	00000717          	auipc	a4,0x0
+    1300:	38f73a23          	sd	a5,916(a4) # 1690 <freep>
+    1304:	e39c                	sd	a5,0(a5)
     base.s.size = 0;
-    132e:	0007a423          	sw	zero,8(a5)
+    1306:	0007a423          	sw	zero,8(a5)
     if(p->s.size >= nunits){
-    1332:	b7e1                	j	12fa <malloc+0x36>
+    130a:	b7e1                	j	12d2 <malloc+0x36>
       if(p->s.size == nunits)
-    1334:	02e48b63          	beq	s1,a4,136a <malloc+0xa6>
+    130c:	02e48b63          	beq	s1,a4,1342 <malloc+0xa6>
         p->s.size -= nunits;
-    1338:	4137073b          	subw	a4,a4,s3
-    133c:	c798                	sw	a4,8(a5)
+    1310:	4137073b          	subw	a4,a4,s3
+    1314:	c798                	sw	a4,8(a5)
         p += p->s.size;
-    133e:	1702                	slli	a4,a4,0x20
-    1340:	9301                	srli	a4,a4,0x20
-    1342:	0712                	slli	a4,a4,0x4
-    1344:	97ba                	add	a5,a5,a4
+    1316:	1702                	slli	a4,a4,0x20
+    1318:	9301                	srli	a4,a4,0x20
+    131a:	0712                	slli	a4,a4,0x4
+    131c:	97ba                	add	a5,a5,a4
         p->s.size = nunits;
-    1346:	0137a423          	sw	s3,8(a5)
+    131e:	0137a423          	sw	s3,8(a5)
       freep = prevp;
-    134a:	00000717          	auipc	a4,0x0
-    134e:	36a73723          	sd	a0,878(a4) # 16b8 <freep>
+    1322:	00000717          	auipc	a4,0x0
+    1326:	36a73723          	sd	a0,878(a4) # 1690 <freep>
       return (void*)(p + 1);
-    1352:	01078513          	addi	a0,a5,16
+    132a:	01078513          	addi	a0,a5,16
       if((p = morecore(nunits)) == 0)
         return 0;
   }
 }
-    1356:	70e2                	ld	ra,56(sp)
-    1358:	7442                	ld	s0,48(sp)
-    135a:	74a2                	ld	s1,40(sp)
-    135c:	7902                	ld	s2,32(sp)
-    135e:	69e2                	ld	s3,24(sp)
-    1360:	6a42                	ld	s4,16(sp)
-    1362:	6aa2                	ld	s5,8(sp)
-    1364:	6b02                	ld	s6,0(sp)
-    1366:	6121                	addi	sp,sp,64
-    1368:	8082                	ret
+    132e:	70e2                	ld	ra,56(sp)
+    1330:	7442                	ld	s0,48(sp)
+    1332:	74a2                	ld	s1,40(sp)
+    1334:	7902                	ld	s2,32(sp)
+    1336:	69e2                	ld	s3,24(sp)
+    1338:	6a42                	ld	s4,16(sp)
+    133a:	6aa2                	ld	s5,8(sp)
+    133c:	6b02                	ld	s6,0(sp)
+    133e:	6121                	addi	sp,sp,64
+    1340:	8082                	ret
         prevp->s.ptr = p->s.ptr;
-    136a:	6398                	ld	a4,0(a5)
-    136c:	e118                	sd	a4,0(a0)
-    136e:	bff1                	j	134a <malloc+0x86>
+    1342:	6398                	ld	a4,0(a5)
+    1344:	e118                	sd	a4,0(a0)
+    1346:	bff1                	j	1322 <malloc+0x86>
   hp->s.size = nu;
-    1370:	01652423          	sw	s6,8(a0)
+    1348:	01652423          	sw	s6,8(a0)
   free((void*)(hp + 1));
-    1374:	0541                	addi	a0,a0,16
-    1376:	00000097          	auipc	ra,0x0
-    137a:	ec6080e7          	jalr	-314(ra) # 123c <free>
+    134c:	0541                	addi	a0,a0,16
+    134e:	00000097          	auipc	ra,0x0
+    1352:	ec6080e7          	jalr	-314(ra) # 1214 <free>
   return freep;
-    137e:	00093503          	ld	a0,0(s2)
+    1356:	00093503          	ld	a0,0(s2)
       if((p = morecore(nunits)) == 0)
-    1382:	d971                	beqz	a0,1356 <malloc+0x92>
+    135a:	d971                	beqz	a0,132e <malloc+0x92>
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    1384:	611c                	ld	a5,0(a0)
+    135c:	611c                	ld	a5,0(a0)
     if(p->s.size >= nunits){
-    1386:	4798                	lw	a4,8(a5)
-    1388:	fa9776e3          	bgeu	a4,s1,1334 <malloc+0x70>
+    135e:	4798                	lw	a4,8(a5)
+    1360:	fa9776e3          	bgeu	a4,s1,130c <malloc+0x70>
     if(p == freep)
-    138c:	00093703          	ld	a4,0(s2)
-    1390:	853e                	mv	a0,a5
-    1392:	fef719e3          	bne	a4,a5,1384 <malloc+0xc0>
+    1364:	00093703          	ld	a4,0(s2)
+    1368:	853e                	mv	a0,a5
+    136a:	fef719e3          	bne	a4,a5,135c <malloc+0xc0>
   p = sbrk(nu * sizeof(Header));
-    1396:	8552                	mv	a0,s4
-    1398:	00000097          	auipc	ra,0x0
-    139c:	b56080e7          	jalr	-1194(ra) # eee <sbrk>
+    136e:	8552                	mv	a0,s4
+    1370:	00000097          	auipc	ra,0x0
+    1374:	b7e080e7          	jalr	-1154(ra) # eee <sbrk>
   if(p == (char*)-1)
-    13a0:	fd5518e3          	bne	a0,s5,1370 <malloc+0xac>
+    1378:	fd5518e3          	bne	a0,s5,1348 <malloc+0xac>
         return 0;
-    13a4:	4501                	li	a0,0
-    13a6:	bf45                	j	1356 <malloc+0x92>
+    137c:	4501                	li	a0,0
+    137e:	bf45                	j	132e <malloc+0x92>
diff --git a/user/grind.o b/user/grind.o
index 9ec3c30..2742658 100644
Binary files a/user/grind.o and b/user/grind.o differ
diff --git a/user/grind.sym b/user/grind.sym
index f745d0e..9203584 100644
--- a/user/grind.sym
+++ b/user/grind.sym
@@ -1,8 +1,8 @@
 0000000000000000 .text
-00000000000013a8 .rodata
-00000000000016b0 .sdata
-00000000000016b8 .sbss
-00000000000016c0 .bss
+0000000000001380 .rodata
+0000000000001688 .sdata
+0000000000001690 .sbss
+0000000000001698 .bss
 0000000000000000 .comment
 0000000000000000 .debug_aranges
 0000000000000000 .debug_info
@@ -13,61 +13,56 @@
 0000000000000000 .debug_loc
 0000000000000000 .debug_ranges
 0000000000000000 grind.c
-00000000000016c0 buf.1247
+0000000000001698 buf.1237
 0000000000000000 ulib.c
 0000000000000000 printf.c
-0000000000000f2e putc
-0000000000000f50 printint
-0000000000001698 digits
+0000000000000f06 putc
+0000000000000f28 printint
+0000000000001670 digits
 0000000000000000 umalloc.c
-00000000000016b8 freep
-0000000000001aa8 base
+0000000000001690 freep
+0000000000001a80 base
 0000000000000bf0 strcpy
-0000000000001206 printf
-0000000000001ea9 __global_pointer$
+00000000000011de printf
+0000000000001e81 __global_pointer$
 0000000000000000 do_rand
 0000000000000db0 memmove
 0000000000000eae mknod
 0000000000000cac gets
-00000000000016b0 __SDATA_BEGIN__
+0000000000001688 __SDATA_BEGIN__
 0000000000000ee6 getpid
 0000000000000e46 memcpy
-0000000000000f16 print_stats
-00000000000012c4 malloc
+000000000000129c malloc
 0000000000000ef6 sleep
 0000000000000e76 pipe
 0000000000000078 go
 0000000000000ac4 iter
 0000000000000e86 write
 0000000000000ebe fstat
-00000000000011d8 fprintf
+00000000000011b0 fprintf
 0000000000000e96 kill
-0000000000000ffa vprintf
+0000000000000fd2 vprintf
 0000000000000ed6 chdir
-0000000000000f06 pause_system
 0000000000000e9e exec
 0000000000000e6e wait
 0000000000000058 rand
 0000000000000e7e read
 0000000000000eb6 unlink
-0000000000000f26 set_cpu
-0000000000000f1e get_cpu
 0000000000000e0c memcmp
 0000000000000e5e fork
-00000000000016b0 rand_next
-0000000000000f0e kill_system
-0000000000001ab8 __BSS_END__
+0000000000001688 rand_next
+0000000000001a90 __BSS_END__
 0000000000000eee sbrk
 0000000000000efe uptime
-00000000000016b8 __bss_start
+0000000000001690 __bss_start
 0000000000000c62 memset
 0000000000000bba main
 0000000000000c0c strcmp
 0000000000000ede dup
-00000000000016a9 __DATA_BEGIN__
+0000000000001681 __DATA_BEGIN__
 0000000000000d20 stat
-00000000000016b8 _edata
-0000000000001ab8 _end
+0000000000001690 _edata
+0000000000001a90 _end
 0000000000000ec6 link
 0000000000000e66 exit
 0000000000000d66 atoi
@@ -76,4 +71,4 @@
 0000000000000c88 strchr
 0000000000000ece mkdir
 0000000000000e8e close
-000000000000123c free
+0000000000001214 free
diff --git a/user/init.asm b/user/init.asm
index 413e9d8..d796ee6 100644
--- a/user/init.asm
+++ b/user/init.asm
@@ -22,7 +22,7 @@ main(void)
   if(open("console", O_RDWR) < 0){
    c:	4589                	li	a1,2
    e:	00001517          	auipc	a0,0x1
-  12:	8a250513          	addi	a0,a0,-1886 # 8b0 <malloc+0xe4>
+  12:	87a50513          	addi	a0,a0,-1926 # 888 <malloc+0xe4>
   16:	00000097          	auipc	ra,0x0
   1a:	398080e7          	jalr	920(ra) # 3ae <open>
   1e:	06054363          	bltz	a0,84 <main+0x84>
@@ -41,10 +41,10 @@ main(void)
   for(;;){
     printf("init: starting sh\n");
   36:	00001917          	auipc	s2,0x1
-  3a:	88290913          	addi	s2,s2,-1918 # 8b8 <malloc+0xec>
+  3a:	85a90913          	addi	s2,s2,-1958 # 890 <malloc+0xec>
   3e:	854a                	mv	a0,s2
   40:	00000097          	auipc	ra,0x0
-  44:	6ce080e7          	jalr	1742(ra) # 70e <printf>
+  44:	6a6080e7          	jalr	1702(ra) # 6e6 <printf>
     pid = fork();
   48:	00000097          	auipc	ra,0x0
   4c:	31e080e7          	jalr	798(ra) # 366 <fork>
@@ -73,9 +73,9 @@ main(void)
   66:	fe0559e3          	bgez	a0,58 <main+0x58>
         printf("init: wait returned an error\n");
   6a:	00001517          	auipc	a0,0x1
-  6e:	89e50513          	addi	a0,a0,-1890 # 908 <malloc+0x13c>
+  6e:	87650513          	addi	a0,a0,-1930 # 8e0 <malloc+0x13c>
   72:	00000097          	auipc	ra,0x0
-  76:	69c080e7          	jalr	1692(ra) # 70e <printf>
+  76:	674080e7          	jalr	1652(ra) # 6e6 <printf>
         exit(1);
   7a:	4505                	li	a0,1
   7c:	00000097          	auipc	ra,0x0
@@ -84,37 +84,37 @@ main(void)
   84:	4601                	li	a2,0
   86:	4585                	li	a1,1
   88:	00001517          	auipc	a0,0x1
-  8c:	82850513          	addi	a0,a0,-2008 # 8b0 <malloc+0xe4>
+  8c:	80050513          	addi	a0,a0,-2048 # 888 <malloc+0xe4>
   90:	00000097          	auipc	ra,0x0
   94:	326080e7          	jalr	806(ra) # 3b6 <mknod>
     open("console", O_RDWR);
   98:	4589                	li	a1,2
-  9a:	00001517          	auipc	a0,0x1
-  9e:	81650513          	addi	a0,a0,-2026 # 8b0 <malloc+0xe4>
+  9a:	00000517          	auipc	a0,0x0
+  9e:	7ee50513          	addi	a0,a0,2030 # 888 <malloc+0xe4>
   a2:	00000097          	auipc	ra,0x0
   a6:	30c080e7          	jalr	780(ra) # 3ae <open>
   aa:	bfa5                	j	22 <main+0x22>
       printf("init: fork failed\n");
-  ac:	00001517          	auipc	a0,0x1
-  b0:	82450513          	addi	a0,a0,-2012 # 8d0 <malloc+0x104>
+  ac:	00000517          	auipc	a0,0x0
+  b0:	7fc50513          	addi	a0,a0,2044 # 8a8 <malloc+0x104>
   b4:	00000097          	auipc	ra,0x0
-  b8:	65a080e7          	jalr	1626(ra) # 70e <printf>
+  b8:	632080e7          	jalr	1586(ra) # 6e6 <printf>
       exit(1);
   bc:	4505                	li	a0,1
   be:	00000097          	auipc	ra,0x0
   c2:	2b0080e7          	jalr	688(ra) # 36e <exit>
       exec("sh", argv);
   c6:	00001597          	auipc	a1,0x1
-  ca:	88258593          	addi	a1,a1,-1918 # 948 <argv>
-  ce:	00001517          	auipc	a0,0x1
-  d2:	81a50513          	addi	a0,a0,-2022 # 8e8 <malloc+0x11c>
+  ca:	85a58593          	addi	a1,a1,-1958 # 920 <argv>
+  ce:	00000517          	auipc	a0,0x0
+  d2:	7f250513          	addi	a0,a0,2034 # 8c0 <malloc+0x11c>
   d6:	00000097          	auipc	ra,0x0
   da:	2d0080e7          	jalr	720(ra) # 3a6 <exec>
       printf("init: exec sh failed\n");
-  de:	00001517          	auipc	a0,0x1
-  e2:	81250513          	addi	a0,a0,-2030 # 8f0 <malloc+0x124>
+  de:	00000517          	auipc	a0,0x0
+  e2:	7ea50513          	addi	a0,a0,2026 # 8c8 <malloc+0x124>
   e6:	00000097          	auipc	ra,0x0
-  ea:	628080e7          	jalr	1576(ra) # 70e <printf>
+  ea:	600080e7          	jalr	1536(ra) # 6e6 <printf>
       exit(1);
   ee:	4505                	li	a0,1
   f0:	00000097          	auipc	ra,0x0
@@ -757,696 +757,646 @@ uptime:
  ret
  40c:	8082                	ret
 
-000000000000040e <pause_system>:
-.global pause_system
-pause_system:
- li a7, SYS_pause_system
- 40e:	48d9                	li	a7,22
- ecall
- 410:	00000073          	ecall
- ret
- 414:	8082                	ret
-
-0000000000000416 <kill_system>:
-.global kill_system
-kill_system:
- li a7, SYS_kill_system
- 416:	48dd                	li	a7,23
- ecall
- 418:	00000073          	ecall
- ret
- 41c:	8082                	ret
-
-000000000000041e <print_stats>:
-.global print_stats
-print_stats:
- li a7, SYS_print_stats
- 41e:	48e1                	li	a7,24
- ecall
- 420:	00000073          	ecall
- ret
- 424:	8082                	ret
-
-0000000000000426 <get_cpu>:
-.global get_cpu
-get_cpu:
- li a7, SYS_get_cpu
- 426:	48e5                	li	a7,25
- ecall
- 428:	00000073          	ecall
- ret
- 42c:	8082                	ret
-
-000000000000042e <set_cpu>:
-.global set_cpu
-set_cpu:
- li a7, SYS_set_cpu
- 42e:	48e9                	li	a7,26
- ecall
- 430:	00000073          	ecall
- ret
- 434:	8082                	ret
-
-0000000000000436 <putc>:
+000000000000040e <putc>:
 
 static char digits[] = "0123456789ABCDEF";
 
 static void
 putc(int fd, char c)
 {
- 436:	1101                	addi	sp,sp,-32
- 438:	ec06                	sd	ra,24(sp)
- 43a:	e822                	sd	s0,16(sp)
- 43c:	1000                	addi	s0,sp,32
- 43e:	feb407a3          	sb	a1,-17(s0)
+ 40e:	1101                	addi	sp,sp,-32
+ 410:	ec06                	sd	ra,24(sp)
+ 412:	e822                	sd	s0,16(sp)
+ 414:	1000                	addi	s0,sp,32
+ 416:	feb407a3          	sb	a1,-17(s0)
   write(fd, &c, 1);
- 442:	4605                	li	a2,1
- 444:	fef40593          	addi	a1,s0,-17
- 448:	00000097          	auipc	ra,0x0
- 44c:	f46080e7          	jalr	-186(ra) # 38e <write>
+ 41a:	4605                	li	a2,1
+ 41c:	fef40593          	addi	a1,s0,-17
+ 420:	00000097          	auipc	ra,0x0
+ 424:	f6e080e7          	jalr	-146(ra) # 38e <write>
 }
- 450:	60e2                	ld	ra,24(sp)
- 452:	6442                	ld	s0,16(sp)
- 454:	6105                	addi	sp,sp,32
- 456:	8082                	ret
+ 428:	60e2                	ld	ra,24(sp)
+ 42a:	6442                	ld	s0,16(sp)
+ 42c:	6105                	addi	sp,sp,32
+ 42e:	8082                	ret
 
-0000000000000458 <printint>:
+0000000000000430 <printint>:
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 458:	7139                	addi	sp,sp,-64
- 45a:	fc06                	sd	ra,56(sp)
- 45c:	f822                	sd	s0,48(sp)
- 45e:	f426                	sd	s1,40(sp)
- 460:	f04a                	sd	s2,32(sp)
- 462:	ec4e                	sd	s3,24(sp)
- 464:	0080                	addi	s0,sp,64
- 466:	84aa                	mv	s1,a0
+ 430:	7139                	addi	sp,sp,-64
+ 432:	fc06                	sd	ra,56(sp)
+ 434:	f822                	sd	s0,48(sp)
+ 436:	f426                	sd	s1,40(sp)
+ 438:	f04a                	sd	s2,32(sp)
+ 43a:	ec4e                	sd	s3,24(sp)
+ 43c:	0080                	addi	s0,sp,64
+ 43e:	84aa                	mv	s1,a0
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 468:	c299                	beqz	a3,46e <printint+0x16>
- 46a:	0805c863          	bltz	a1,4fa <printint+0xa2>
+ 440:	c299                	beqz	a3,446 <printint+0x16>
+ 442:	0805c863          	bltz	a1,4d2 <printint+0xa2>
     neg = 1;
     x = -xx;
   } else {
     x = xx;
- 46e:	2581                	sext.w	a1,a1
+ 446:	2581                	sext.w	a1,a1
   neg = 0;
- 470:	4881                	li	a7,0
- 472:	fc040693          	addi	a3,s0,-64
+ 448:	4881                	li	a7,0
+ 44a:	fc040693          	addi	a3,s0,-64
   }
 
   i = 0;
- 476:	4701                	li	a4,0
+ 44e:	4701                	li	a4,0
   do{
     buf[i++] = digits[x % base];
- 478:	2601                	sext.w	a2,a2
- 47a:	00000517          	auipc	a0,0x0
- 47e:	4b650513          	addi	a0,a0,1206 # 930 <digits>
- 482:	883a                	mv	a6,a4
- 484:	2705                	addiw	a4,a4,1
- 486:	02c5f7bb          	remuw	a5,a1,a2
- 48a:	1782                	slli	a5,a5,0x20
- 48c:	9381                	srli	a5,a5,0x20
- 48e:	97aa                	add	a5,a5,a0
- 490:	0007c783          	lbu	a5,0(a5)
- 494:	00f68023          	sb	a5,0(a3)
+ 450:	2601                	sext.w	a2,a2
+ 452:	00000517          	auipc	a0,0x0
+ 456:	4b650513          	addi	a0,a0,1206 # 908 <digits>
+ 45a:	883a                	mv	a6,a4
+ 45c:	2705                	addiw	a4,a4,1
+ 45e:	02c5f7bb          	remuw	a5,a1,a2
+ 462:	1782                	slli	a5,a5,0x20
+ 464:	9381                	srli	a5,a5,0x20
+ 466:	97aa                	add	a5,a5,a0
+ 468:	0007c783          	lbu	a5,0(a5)
+ 46c:	00f68023          	sb	a5,0(a3)
   }while((x /= base) != 0);
- 498:	0005879b          	sext.w	a5,a1
- 49c:	02c5d5bb          	divuw	a1,a1,a2
- 4a0:	0685                	addi	a3,a3,1
- 4a2:	fec7f0e3          	bgeu	a5,a2,482 <printint+0x2a>
+ 470:	0005879b          	sext.w	a5,a1
+ 474:	02c5d5bb          	divuw	a1,a1,a2
+ 478:	0685                	addi	a3,a3,1
+ 47a:	fec7f0e3          	bgeu	a5,a2,45a <printint+0x2a>
   if(neg)
- 4a6:	00088b63          	beqz	a7,4bc <printint+0x64>
+ 47e:	00088b63          	beqz	a7,494 <printint+0x64>
     buf[i++] = '-';
- 4aa:	fd040793          	addi	a5,s0,-48
- 4ae:	973e                	add	a4,a4,a5
- 4b0:	02d00793          	li	a5,45
- 4b4:	fef70823          	sb	a5,-16(a4)
- 4b8:	0028071b          	addiw	a4,a6,2
+ 482:	fd040793          	addi	a5,s0,-48
+ 486:	973e                	add	a4,a4,a5
+ 488:	02d00793          	li	a5,45
+ 48c:	fef70823          	sb	a5,-16(a4)
+ 490:	0028071b          	addiw	a4,a6,2
 
   while(--i >= 0)
- 4bc:	02e05863          	blez	a4,4ec <printint+0x94>
- 4c0:	fc040793          	addi	a5,s0,-64
- 4c4:	00e78933          	add	s2,a5,a4
- 4c8:	fff78993          	addi	s3,a5,-1
- 4cc:	99ba                	add	s3,s3,a4
- 4ce:	377d                	addiw	a4,a4,-1
- 4d0:	1702                	slli	a4,a4,0x20
- 4d2:	9301                	srli	a4,a4,0x20
- 4d4:	40e989b3          	sub	s3,s3,a4
+ 494:	02e05863          	blez	a4,4c4 <printint+0x94>
+ 498:	fc040793          	addi	a5,s0,-64
+ 49c:	00e78933          	add	s2,a5,a4
+ 4a0:	fff78993          	addi	s3,a5,-1
+ 4a4:	99ba                	add	s3,s3,a4
+ 4a6:	377d                	addiw	a4,a4,-1
+ 4a8:	1702                	slli	a4,a4,0x20
+ 4aa:	9301                	srli	a4,a4,0x20
+ 4ac:	40e989b3          	sub	s3,s3,a4
     putc(fd, buf[i]);
- 4d8:	fff94583          	lbu	a1,-1(s2)
- 4dc:	8526                	mv	a0,s1
- 4de:	00000097          	auipc	ra,0x0
- 4e2:	f58080e7          	jalr	-168(ra) # 436 <putc>
+ 4b0:	fff94583          	lbu	a1,-1(s2)
+ 4b4:	8526                	mv	a0,s1
+ 4b6:	00000097          	auipc	ra,0x0
+ 4ba:	f58080e7          	jalr	-168(ra) # 40e <putc>
   while(--i >= 0)
- 4e6:	197d                	addi	s2,s2,-1
- 4e8:	ff3918e3          	bne	s2,s3,4d8 <printint+0x80>
+ 4be:	197d                	addi	s2,s2,-1
+ 4c0:	ff3918e3          	bne	s2,s3,4b0 <printint+0x80>
 }
- 4ec:	70e2                	ld	ra,56(sp)
- 4ee:	7442                	ld	s0,48(sp)
- 4f0:	74a2                	ld	s1,40(sp)
- 4f2:	7902                	ld	s2,32(sp)
- 4f4:	69e2                	ld	s3,24(sp)
- 4f6:	6121                	addi	sp,sp,64
- 4f8:	8082                	ret
+ 4c4:	70e2                	ld	ra,56(sp)
+ 4c6:	7442                	ld	s0,48(sp)
+ 4c8:	74a2                	ld	s1,40(sp)
+ 4ca:	7902                	ld	s2,32(sp)
+ 4cc:	69e2                	ld	s3,24(sp)
+ 4ce:	6121                	addi	sp,sp,64
+ 4d0:	8082                	ret
     x = -xx;
- 4fa:	40b005bb          	negw	a1,a1
+ 4d2:	40b005bb          	negw	a1,a1
     neg = 1;
- 4fe:	4885                	li	a7,1
+ 4d6:	4885                	li	a7,1
     x = -xx;
- 500:	bf8d                	j	472 <printint+0x1a>
+ 4d8:	bf8d                	j	44a <printint+0x1a>
 
-0000000000000502 <vprintf>:
+00000000000004da <vprintf>:
 }
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 vprintf(int fd, const char *fmt, va_list ap)
 {
- 502:	7119                	addi	sp,sp,-128
- 504:	fc86                	sd	ra,120(sp)
- 506:	f8a2                	sd	s0,112(sp)
- 508:	f4a6                	sd	s1,104(sp)
- 50a:	f0ca                	sd	s2,96(sp)
- 50c:	ecce                	sd	s3,88(sp)
- 50e:	e8d2                	sd	s4,80(sp)
- 510:	e4d6                	sd	s5,72(sp)
- 512:	e0da                	sd	s6,64(sp)
- 514:	fc5e                	sd	s7,56(sp)
- 516:	f862                	sd	s8,48(sp)
- 518:	f466                	sd	s9,40(sp)
- 51a:	f06a                	sd	s10,32(sp)
- 51c:	ec6e                	sd	s11,24(sp)
- 51e:	0100                	addi	s0,sp,128
+ 4da:	7119                	addi	sp,sp,-128
+ 4dc:	fc86                	sd	ra,120(sp)
+ 4de:	f8a2                	sd	s0,112(sp)
+ 4e0:	f4a6                	sd	s1,104(sp)
+ 4e2:	f0ca                	sd	s2,96(sp)
+ 4e4:	ecce                	sd	s3,88(sp)
+ 4e6:	e8d2                	sd	s4,80(sp)
+ 4e8:	e4d6                	sd	s5,72(sp)
+ 4ea:	e0da                	sd	s6,64(sp)
+ 4ec:	fc5e                	sd	s7,56(sp)
+ 4ee:	f862                	sd	s8,48(sp)
+ 4f0:	f466                	sd	s9,40(sp)
+ 4f2:	f06a                	sd	s10,32(sp)
+ 4f4:	ec6e                	sd	s11,24(sp)
+ 4f6:	0100                	addi	s0,sp,128
   char *s;
   int c, i, state;
 
   state = 0;
   for(i = 0; fmt[i]; i++){
- 520:	0005c903          	lbu	s2,0(a1)
- 524:	18090f63          	beqz	s2,6c2 <vprintf+0x1c0>
- 528:	8aaa                	mv	s5,a0
- 52a:	8b32                	mv	s6,a2
- 52c:	00158493          	addi	s1,a1,1
+ 4f8:	0005c903          	lbu	s2,0(a1)
+ 4fc:	18090f63          	beqz	s2,69a <vprintf+0x1c0>
+ 500:	8aaa                	mv	s5,a0
+ 502:	8b32                	mv	s6,a2
+ 504:	00158493          	addi	s1,a1,1
   state = 0;
- 530:	4981                	li	s3,0
+ 508:	4981                	li	s3,0
       if(c == '%'){
         state = '%';
       } else {
         putc(fd, c);
       }
     } else if(state == '%'){
- 532:	02500a13          	li	s4,37
+ 50a:	02500a13          	li	s4,37
       if(c == 'd'){
- 536:	06400c13          	li	s8,100
+ 50e:	06400c13          	li	s8,100
         printint(fd, va_arg(ap, int), 10, 1);
       } else if(c == 'l') {
- 53a:	06c00c93          	li	s9,108
+ 512:	06c00c93          	li	s9,108
         printint(fd, va_arg(ap, uint64), 10, 0);
       } else if(c == 'x') {
- 53e:	07800d13          	li	s10,120
+ 516:	07800d13          	li	s10,120
         printint(fd, va_arg(ap, int), 16, 0);
       } else if(c == 'p') {
- 542:	07000d93          	li	s11,112
+ 51a:	07000d93          	li	s11,112
     putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
- 546:	00000b97          	auipc	s7,0x0
- 54a:	3eab8b93          	addi	s7,s7,1002 # 930 <digits>
- 54e:	a839                	j	56c <vprintf+0x6a>
+ 51e:	00000b97          	auipc	s7,0x0
+ 522:	3eab8b93          	addi	s7,s7,1002 # 908 <digits>
+ 526:	a839                	j	544 <vprintf+0x6a>
         putc(fd, c);
- 550:	85ca                	mv	a1,s2
- 552:	8556                	mv	a0,s5
- 554:	00000097          	auipc	ra,0x0
- 558:	ee2080e7          	jalr	-286(ra) # 436 <putc>
- 55c:	a019                	j	562 <vprintf+0x60>
+ 528:	85ca                	mv	a1,s2
+ 52a:	8556                	mv	a0,s5
+ 52c:	00000097          	auipc	ra,0x0
+ 530:	ee2080e7          	jalr	-286(ra) # 40e <putc>
+ 534:	a019                	j	53a <vprintf+0x60>
     } else if(state == '%'){
- 55e:	01498f63          	beq	s3,s4,57c <vprintf+0x7a>
+ 536:	01498f63          	beq	s3,s4,554 <vprintf+0x7a>
   for(i = 0; fmt[i]; i++){
- 562:	0485                	addi	s1,s1,1
- 564:	fff4c903          	lbu	s2,-1(s1)
- 568:	14090d63          	beqz	s2,6c2 <vprintf+0x1c0>
+ 53a:	0485                	addi	s1,s1,1
+ 53c:	fff4c903          	lbu	s2,-1(s1)
+ 540:	14090d63          	beqz	s2,69a <vprintf+0x1c0>
     c = fmt[i] & 0xff;
- 56c:	0009079b          	sext.w	a5,s2
+ 544:	0009079b          	sext.w	a5,s2
     if(state == 0){
- 570:	fe0997e3          	bnez	s3,55e <vprintf+0x5c>
+ 548:	fe0997e3          	bnez	s3,536 <vprintf+0x5c>
       if(c == '%'){
- 574:	fd479ee3          	bne	a5,s4,550 <vprintf+0x4e>
+ 54c:	fd479ee3          	bne	a5,s4,528 <vprintf+0x4e>
         state = '%';
- 578:	89be                	mv	s3,a5
- 57a:	b7e5                	j	562 <vprintf+0x60>
+ 550:	89be                	mv	s3,a5
+ 552:	b7e5                	j	53a <vprintf+0x60>
       if(c == 'd'){
- 57c:	05878063          	beq	a5,s8,5bc <vprintf+0xba>
+ 554:	05878063          	beq	a5,s8,594 <vprintf+0xba>
       } else if(c == 'l') {
- 580:	05978c63          	beq	a5,s9,5d8 <vprintf+0xd6>
+ 558:	05978c63          	beq	a5,s9,5b0 <vprintf+0xd6>
       } else if(c == 'x') {
- 584:	07a78863          	beq	a5,s10,5f4 <vprintf+0xf2>
+ 55c:	07a78863          	beq	a5,s10,5cc <vprintf+0xf2>
       } else if(c == 'p') {
- 588:	09b78463          	beq	a5,s11,610 <vprintf+0x10e>
+ 560:	09b78463          	beq	a5,s11,5e8 <vprintf+0x10e>
         printptr(fd, va_arg(ap, uint64));
       } else if(c == 's'){
- 58c:	07300713          	li	a4,115
- 590:	0ce78663          	beq	a5,a4,65c <vprintf+0x15a>
+ 564:	07300713          	li	a4,115
+ 568:	0ce78663          	beq	a5,a4,634 <vprintf+0x15a>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 594:	06300713          	li	a4,99
- 598:	0ee78e63          	beq	a5,a4,694 <vprintf+0x192>
+ 56c:	06300713          	li	a4,99
+ 570:	0ee78e63          	beq	a5,a4,66c <vprintf+0x192>
         putc(fd, va_arg(ap, uint));
       } else if(c == '%'){
- 59c:	11478863          	beq	a5,s4,6ac <vprintf+0x1aa>
+ 574:	11478863          	beq	a5,s4,684 <vprintf+0x1aa>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
- 5a0:	85d2                	mv	a1,s4
- 5a2:	8556                	mv	a0,s5
- 5a4:	00000097          	auipc	ra,0x0
- 5a8:	e92080e7          	jalr	-366(ra) # 436 <putc>
+ 578:	85d2                	mv	a1,s4
+ 57a:	8556                	mv	a0,s5
+ 57c:	00000097          	auipc	ra,0x0
+ 580:	e92080e7          	jalr	-366(ra) # 40e <putc>
         putc(fd, c);
- 5ac:	85ca                	mv	a1,s2
- 5ae:	8556                	mv	a0,s5
- 5b0:	00000097          	auipc	ra,0x0
- 5b4:	e86080e7          	jalr	-378(ra) # 436 <putc>
+ 584:	85ca                	mv	a1,s2
+ 586:	8556                	mv	a0,s5
+ 588:	00000097          	auipc	ra,0x0
+ 58c:	e86080e7          	jalr	-378(ra) # 40e <putc>
       }
       state = 0;
- 5b8:	4981                	li	s3,0
- 5ba:	b765                	j	562 <vprintf+0x60>
+ 590:	4981                	li	s3,0
+ 592:	b765                	j	53a <vprintf+0x60>
         printint(fd, va_arg(ap, int), 10, 1);
- 5bc:	008b0913          	addi	s2,s6,8
- 5c0:	4685                	li	a3,1
- 5c2:	4629                	li	a2,10
- 5c4:	000b2583          	lw	a1,0(s6)
- 5c8:	8556                	mv	a0,s5
- 5ca:	00000097          	auipc	ra,0x0
- 5ce:	e8e080e7          	jalr	-370(ra) # 458 <printint>
- 5d2:	8b4a                	mv	s6,s2
+ 594:	008b0913          	addi	s2,s6,8
+ 598:	4685                	li	a3,1
+ 59a:	4629                	li	a2,10
+ 59c:	000b2583          	lw	a1,0(s6)
+ 5a0:	8556                	mv	a0,s5
+ 5a2:	00000097          	auipc	ra,0x0
+ 5a6:	e8e080e7          	jalr	-370(ra) # 430 <printint>
+ 5aa:	8b4a                	mv	s6,s2
       state = 0;
- 5d4:	4981                	li	s3,0
- 5d6:	b771                	j	562 <vprintf+0x60>
+ 5ac:	4981                	li	s3,0
+ 5ae:	b771                	j	53a <vprintf+0x60>
         printint(fd, va_arg(ap, uint64), 10, 0);
- 5d8:	008b0913          	addi	s2,s6,8
- 5dc:	4681                	li	a3,0
- 5de:	4629                	li	a2,10
- 5e0:	000b2583          	lw	a1,0(s6)
- 5e4:	8556                	mv	a0,s5
- 5e6:	00000097          	auipc	ra,0x0
- 5ea:	e72080e7          	jalr	-398(ra) # 458 <printint>
- 5ee:	8b4a                	mv	s6,s2
+ 5b0:	008b0913          	addi	s2,s6,8
+ 5b4:	4681                	li	a3,0
+ 5b6:	4629                	li	a2,10
+ 5b8:	000b2583          	lw	a1,0(s6)
+ 5bc:	8556                	mv	a0,s5
+ 5be:	00000097          	auipc	ra,0x0
+ 5c2:	e72080e7          	jalr	-398(ra) # 430 <printint>
+ 5c6:	8b4a                	mv	s6,s2
       state = 0;
- 5f0:	4981                	li	s3,0
- 5f2:	bf85                	j	562 <vprintf+0x60>
+ 5c8:	4981                	li	s3,0
+ 5ca:	bf85                	j	53a <vprintf+0x60>
         printint(fd, va_arg(ap, int), 16, 0);
- 5f4:	008b0913          	addi	s2,s6,8
- 5f8:	4681                	li	a3,0
- 5fa:	4641                	li	a2,16
- 5fc:	000b2583          	lw	a1,0(s6)
- 600:	8556                	mv	a0,s5
- 602:	00000097          	auipc	ra,0x0
- 606:	e56080e7          	jalr	-426(ra) # 458 <printint>
- 60a:	8b4a                	mv	s6,s2
+ 5cc:	008b0913          	addi	s2,s6,8
+ 5d0:	4681                	li	a3,0
+ 5d2:	4641                	li	a2,16
+ 5d4:	000b2583          	lw	a1,0(s6)
+ 5d8:	8556                	mv	a0,s5
+ 5da:	00000097          	auipc	ra,0x0
+ 5de:	e56080e7          	jalr	-426(ra) # 430 <printint>
+ 5e2:	8b4a                	mv	s6,s2
       state = 0;
- 60c:	4981                	li	s3,0
- 60e:	bf91                	j	562 <vprintf+0x60>
+ 5e4:	4981                	li	s3,0
+ 5e6:	bf91                	j	53a <vprintf+0x60>
         printptr(fd, va_arg(ap, uint64));
- 610:	008b0793          	addi	a5,s6,8
- 614:	f8f43423          	sd	a5,-120(s0)
- 618:	000b3983          	ld	s3,0(s6)
+ 5e8:	008b0793          	addi	a5,s6,8
+ 5ec:	f8f43423          	sd	a5,-120(s0)
+ 5f0:	000b3983          	ld	s3,0(s6)
   putc(fd, '0');
- 61c:	03000593          	li	a1,48
- 620:	8556                	mv	a0,s5
- 622:	00000097          	auipc	ra,0x0
- 626:	e14080e7          	jalr	-492(ra) # 436 <putc>
+ 5f4:	03000593          	li	a1,48
+ 5f8:	8556                	mv	a0,s5
+ 5fa:	00000097          	auipc	ra,0x0
+ 5fe:	e14080e7          	jalr	-492(ra) # 40e <putc>
   putc(fd, 'x');
- 62a:	85ea                	mv	a1,s10
- 62c:	8556                	mv	a0,s5
- 62e:	00000097          	auipc	ra,0x0
- 632:	e08080e7          	jalr	-504(ra) # 436 <putc>
- 636:	4941                	li	s2,16
+ 602:	85ea                	mv	a1,s10
+ 604:	8556                	mv	a0,s5
+ 606:	00000097          	auipc	ra,0x0
+ 60a:	e08080e7          	jalr	-504(ra) # 40e <putc>
+ 60e:	4941                	li	s2,16
     putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
- 638:	03c9d793          	srli	a5,s3,0x3c
- 63c:	97de                	add	a5,a5,s7
- 63e:	0007c583          	lbu	a1,0(a5)
- 642:	8556                	mv	a0,s5
- 644:	00000097          	auipc	ra,0x0
- 648:	df2080e7          	jalr	-526(ra) # 436 <putc>
+ 610:	03c9d793          	srli	a5,s3,0x3c
+ 614:	97de                	add	a5,a5,s7
+ 616:	0007c583          	lbu	a1,0(a5)
+ 61a:	8556                	mv	a0,s5
+ 61c:	00000097          	auipc	ra,0x0
+ 620:	df2080e7          	jalr	-526(ra) # 40e <putc>
   for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
- 64c:	0992                	slli	s3,s3,0x4
- 64e:	397d                	addiw	s2,s2,-1
- 650:	fe0914e3          	bnez	s2,638 <vprintf+0x136>
+ 624:	0992                	slli	s3,s3,0x4
+ 626:	397d                	addiw	s2,s2,-1
+ 628:	fe0914e3          	bnez	s2,610 <vprintf+0x136>
         printptr(fd, va_arg(ap, uint64));
- 654:	f8843b03          	ld	s6,-120(s0)
+ 62c:	f8843b03          	ld	s6,-120(s0)
       state = 0;
- 658:	4981                	li	s3,0
- 65a:	b721                	j	562 <vprintf+0x60>
+ 630:	4981                	li	s3,0
+ 632:	b721                	j	53a <vprintf+0x60>
         s = va_arg(ap, char*);
- 65c:	008b0993          	addi	s3,s6,8
- 660:	000b3903          	ld	s2,0(s6)
+ 634:	008b0993          	addi	s3,s6,8
+ 638:	000b3903          	ld	s2,0(s6)
         if(s == 0)
- 664:	02090163          	beqz	s2,686 <vprintf+0x184>
+ 63c:	02090163          	beqz	s2,65e <vprintf+0x184>
         while(*s != 0){
- 668:	00094583          	lbu	a1,0(s2)
- 66c:	c9a1                	beqz	a1,6bc <vprintf+0x1ba>
+ 640:	00094583          	lbu	a1,0(s2)
+ 644:	c9a1                	beqz	a1,694 <vprintf+0x1ba>
           putc(fd, *s);
- 66e:	8556                	mv	a0,s5
- 670:	00000097          	auipc	ra,0x0
- 674:	dc6080e7          	jalr	-570(ra) # 436 <putc>
+ 646:	8556                	mv	a0,s5
+ 648:	00000097          	auipc	ra,0x0
+ 64c:	dc6080e7          	jalr	-570(ra) # 40e <putc>
           s++;
- 678:	0905                	addi	s2,s2,1
+ 650:	0905                	addi	s2,s2,1
         while(*s != 0){
- 67a:	00094583          	lbu	a1,0(s2)
- 67e:	f9e5                	bnez	a1,66e <vprintf+0x16c>
+ 652:	00094583          	lbu	a1,0(s2)
+ 656:	f9e5                	bnez	a1,646 <vprintf+0x16c>
         s = va_arg(ap, char*);
- 680:	8b4e                	mv	s6,s3
+ 658:	8b4e                	mv	s6,s3
       state = 0;
- 682:	4981                	li	s3,0
- 684:	bdf9                	j	562 <vprintf+0x60>
+ 65a:	4981                	li	s3,0
+ 65c:	bdf9                	j	53a <vprintf+0x60>
           s = "(null)";
- 686:	00000917          	auipc	s2,0x0
- 68a:	2a290913          	addi	s2,s2,674 # 928 <malloc+0x15c>
+ 65e:	00000917          	auipc	s2,0x0
+ 662:	2a290913          	addi	s2,s2,674 # 900 <malloc+0x15c>
         while(*s != 0){
- 68e:	02800593          	li	a1,40
- 692:	bff1                	j	66e <vprintf+0x16c>
+ 666:	02800593          	li	a1,40
+ 66a:	bff1                	j	646 <vprintf+0x16c>
         putc(fd, va_arg(ap, uint));
- 694:	008b0913          	addi	s2,s6,8
- 698:	000b4583          	lbu	a1,0(s6)
- 69c:	8556                	mv	a0,s5
- 69e:	00000097          	auipc	ra,0x0
- 6a2:	d98080e7          	jalr	-616(ra) # 436 <putc>
- 6a6:	8b4a                	mv	s6,s2
+ 66c:	008b0913          	addi	s2,s6,8
+ 670:	000b4583          	lbu	a1,0(s6)
+ 674:	8556                	mv	a0,s5
+ 676:	00000097          	auipc	ra,0x0
+ 67a:	d98080e7          	jalr	-616(ra) # 40e <putc>
+ 67e:	8b4a                	mv	s6,s2
       state = 0;
- 6a8:	4981                	li	s3,0
- 6aa:	bd65                	j	562 <vprintf+0x60>
+ 680:	4981                	li	s3,0
+ 682:	bd65                	j	53a <vprintf+0x60>
         putc(fd, c);
- 6ac:	85d2                	mv	a1,s4
- 6ae:	8556                	mv	a0,s5
- 6b0:	00000097          	auipc	ra,0x0
- 6b4:	d86080e7          	jalr	-634(ra) # 436 <putc>
+ 684:	85d2                	mv	a1,s4
+ 686:	8556                	mv	a0,s5
+ 688:	00000097          	auipc	ra,0x0
+ 68c:	d86080e7          	jalr	-634(ra) # 40e <putc>
       state = 0;
- 6b8:	4981                	li	s3,0
- 6ba:	b565                	j	562 <vprintf+0x60>
+ 690:	4981                	li	s3,0
+ 692:	b565                	j	53a <vprintf+0x60>
         s = va_arg(ap, char*);
- 6bc:	8b4e                	mv	s6,s3
+ 694:	8b4e                	mv	s6,s3
       state = 0;
- 6be:	4981                	li	s3,0
- 6c0:	b54d                	j	562 <vprintf+0x60>
+ 696:	4981                	li	s3,0
+ 698:	b54d                	j	53a <vprintf+0x60>
     }
   }
 }
- 6c2:	70e6                	ld	ra,120(sp)
- 6c4:	7446                	ld	s0,112(sp)
- 6c6:	74a6                	ld	s1,104(sp)
- 6c8:	7906                	ld	s2,96(sp)
- 6ca:	69e6                	ld	s3,88(sp)
- 6cc:	6a46                	ld	s4,80(sp)
- 6ce:	6aa6                	ld	s5,72(sp)
- 6d0:	6b06                	ld	s6,64(sp)
- 6d2:	7be2                	ld	s7,56(sp)
- 6d4:	7c42                	ld	s8,48(sp)
- 6d6:	7ca2                	ld	s9,40(sp)
- 6d8:	7d02                	ld	s10,32(sp)
- 6da:	6de2                	ld	s11,24(sp)
- 6dc:	6109                	addi	sp,sp,128
- 6de:	8082                	ret
-
-00000000000006e0 <fprintf>:
+ 69a:	70e6                	ld	ra,120(sp)
+ 69c:	7446                	ld	s0,112(sp)
+ 69e:	74a6                	ld	s1,104(sp)
+ 6a0:	7906                	ld	s2,96(sp)
+ 6a2:	69e6                	ld	s3,88(sp)
+ 6a4:	6a46                	ld	s4,80(sp)
+ 6a6:	6aa6                	ld	s5,72(sp)
+ 6a8:	6b06                	ld	s6,64(sp)
+ 6aa:	7be2                	ld	s7,56(sp)
+ 6ac:	7c42                	ld	s8,48(sp)
+ 6ae:	7ca2                	ld	s9,40(sp)
+ 6b0:	7d02                	ld	s10,32(sp)
+ 6b2:	6de2                	ld	s11,24(sp)
+ 6b4:	6109                	addi	sp,sp,128
+ 6b6:	8082                	ret
+
+00000000000006b8 <fprintf>:
 
 void
 fprintf(int fd, const char *fmt, ...)
 {
- 6e0:	715d                	addi	sp,sp,-80
- 6e2:	ec06                	sd	ra,24(sp)
- 6e4:	e822                	sd	s0,16(sp)
- 6e6:	1000                	addi	s0,sp,32
- 6e8:	e010                	sd	a2,0(s0)
- 6ea:	e414                	sd	a3,8(s0)
- 6ec:	e818                	sd	a4,16(s0)
- 6ee:	ec1c                	sd	a5,24(s0)
- 6f0:	03043023          	sd	a6,32(s0)
- 6f4:	03143423          	sd	a7,40(s0)
+ 6b8:	715d                	addi	sp,sp,-80
+ 6ba:	ec06                	sd	ra,24(sp)
+ 6bc:	e822                	sd	s0,16(sp)
+ 6be:	1000                	addi	s0,sp,32
+ 6c0:	e010                	sd	a2,0(s0)
+ 6c2:	e414                	sd	a3,8(s0)
+ 6c4:	e818                	sd	a4,16(s0)
+ 6c6:	ec1c                	sd	a5,24(s0)
+ 6c8:	03043023          	sd	a6,32(s0)
+ 6cc:	03143423          	sd	a7,40(s0)
   va_list ap;
 
   va_start(ap, fmt);
- 6f8:	fe843423          	sd	s0,-24(s0)
+ 6d0:	fe843423          	sd	s0,-24(s0)
   vprintf(fd, fmt, ap);
- 6fc:	8622                	mv	a2,s0
- 6fe:	00000097          	auipc	ra,0x0
- 702:	e04080e7          	jalr	-508(ra) # 502 <vprintf>
+ 6d4:	8622                	mv	a2,s0
+ 6d6:	00000097          	auipc	ra,0x0
+ 6da:	e04080e7          	jalr	-508(ra) # 4da <vprintf>
 }
- 706:	60e2                	ld	ra,24(sp)
- 708:	6442                	ld	s0,16(sp)
- 70a:	6161                	addi	sp,sp,80
- 70c:	8082                	ret
+ 6de:	60e2                	ld	ra,24(sp)
+ 6e0:	6442                	ld	s0,16(sp)
+ 6e2:	6161                	addi	sp,sp,80
+ 6e4:	8082                	ret
 
-000000000000070e <printf>:
+00000000000006e6 <printf>:
 
 void
 printf(const char *fmt, ...)
 {
- 70e:	711d                	addi	sp,sp,-96
- 710:	ec06                	sd	ra,24(sp)
- 712:	e822                	sd	s0,16(sp)
- 714:	1000                	addi	s0,sp,32
- 716:	e40c                	sd	a1,8(s0)
- 718:	e810                	sd	a2,16(s0)
- 71a:	ec14                	sd	a3,24(s0)
- 71c:	f018                	sd	a4,32(s0)
- 71e:	f41c                	sd	a5,40(s0)
- 720:	03043823          	sd	a6,48(s0)
- 724:	03143c23          	sd	a7,56(s0)
+ 6e6:	711d                	addi	sp,sp,-96
+ 6e8:	ec06                	sd	ra,24(sp)
+ 6ea:	e822                	sd	s0,16(sp)
+ 6ec:	1000                	addi	s0,sp,32
+ 6ee:	e40c                	sd	a1,8(s0)
+ 6f0:	e810                	sd	a2,16(s0)
+ 6f2:	ec14                	sd	a3,24(s0)
+ 6f4:	f018                	sd	a4,32(s0)
+ 6f6:	f41c                	sd	a5,40(s0)
+ 6f8:	03043823          	sd	a6,48(s0)
+ 6fc:	03143c23          	sd	a7,56(s0)
   va_list ap;
 
   va_start(ap, fmt);
- 728:	00840613          	addi	a2,s0,8
- 72c:	fec43423          	sd	a2,-24(s0)
+ 700:	00840613          	addi	a2,s0,8
+ 704:	fec43423          	sd	a2,-24(s0)
   vprintf(1, fmt, ap);
- 730:	85aa                	mv	a1,a0
- 732:	4505                	li	a0,1
- 734:	00000097          	auipc	ra,0x0
- 738:	dce080e7          	jalr	-562(ra) # 502 <vprintf>
+ 708:	85aa                	mv	a1,a0
+ 70a:	4505                	li	a0,1
+ 70c:	00000097          	auipc	ra,0x0
+ 710:	dce080e7          	jalr	-562(ra) # 4da <vprintf>
 }
- 73c:	60e2                	ld	ra,24(sp)
- 73e:	6442                	ld	s0,16(sp)
- 740:	6125                	addi	sp,sp,96
- 742:	8082                	ret
+ 714:	60e2                	ld	ra,24(sp)
+ 716:	6442                	ld	s0,16(sp)
+ 718:	6125                	addi	sp,sp,96
+ 71a:	8082                	ret
 
-0000000000000744 <free>:
+000000000000071c <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 744:	1141                	addi	sp,sp,-16
- 746:	e422                	sd	s0,8(sp)
- 748:	0800                	addi	s0,sp,16
+ 71c:	1141                	addi	sp,sp,-16
+ 71e:	e422                	sd	s0,8(sp)
+ 720:	0800                	addi	s0,sp,16
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
- 74a:	ff050693          	addi	a3,a0,-16
+ 722:	ff050693          	addi	a3,a0,-16
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 74e:	00000797          	auipc	a5,0x0
- 752:	20a7b783          	ld	a5,522(a5) # 958 <freep>
- 756:	a805                	j	786 <free+0x42>
+ 726:	00000797          	auipc	a5,0x0
+ 72a:	20a7b783          	ld	a5,522(a5) # 930 <freep>
+ 72e:	a805                	j	75e <free+0x42>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
       break;
   if(bp + bp->s.size == p->s.ptr){
     bp->s.size += p->s.ptr->s.size;
- 758:	4618                	lw	a4,8(a2)
- 75a:	9db9                	addw	a1,a1,a4
- 75c:	feb52c23          	sw	a1,-8(a0)
+ 730:	4618                	lw	a4,8(a2)
+ 732:	9db9                	addw	a1,a1,a4
+ 734:	feb52c23          	sw	a1,-8(a0)
     bp->s.ptr = p->s.ptr->s.ptr;
- 760:	6398                	ld	a4,0(a5)
- 762:	6318                	ld	a4,0(a4)
- 764:	fee53823          	sd	a4,-16(a0)
- 768:	a091                	j	7ac <free+0x68>
+ 738:	6398                	ld	a4,0(a5)
+ 73a:	6318                	ld	a4,0(a4)
+ 73c:	fee53823          	sd	a4,-16(a0)
+ 740:	a091                	j	784 <free+0x68>
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
     p->s.size += bp->s.size;
- 76a:	ff852703          	lw	a4,-8(a0)
- 76e:	9e39                	addw	a2,a2,a4
- 770:	c790                	sw	a2,8(a5)
+ 742:	ff852703          	lw	a4,-8(a0)
+ 746:	9e39                	addw	a2,a2,a4
+ 748:	c790                	sw	a2,8(a5)
     p->s.ptr = bp->s.ptr;
- 772:	ff053703          	ld	a4,-16(a0)
- 776:	e398                	sd	a4,0(a5)
- 778:	a099                	j	7be <free+0x7a>
+ 74a:	ff053703          	ld	a4,-16(a0)
+ 74e:	e398                	sd	a4,0(a5)
+ 750:	a099                	j	796 <free+0x7a>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 77a:	6398                	ld	a4,0(a5)
- 77c:	00e7e463          	bltu	a5,a4,784 <free+0x40>
- 780:	00e6ea63          	bltu	a3,a4,794 <free+0x50>
+ 752:	6398                	ld	a4,0(a5)
+ 754:	00e7e463          	bltu	a5,a4,75c <free+0x40>
+ 758:	00e6ea63          	bltu	a3,a4,76c <free+0x50>
 {
- 784:	87ba                	mv	a5,a4
+ 75c:	87ba                	mv	a5,a4
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 786:	fed7fae3          	bgeu	a5,a3,77a <free+0x36>
- 78a:	6398                	ld	a4,0(a5)
- 78c:	00e6e463          	bltu	a3,a4,794 <free+0x50>
+ 75e:	fed7fae3          	bgeu	a5,a3,752 <free+0x36>
+ 762:	6398                	ld	a4,0(a5)
+ 764:	00e6e463          	bltu	a3,a4,76c <free+0x50>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 790:	fee7eae3          	bltu	a5,a4,784 <free+0x40>
+ 768:	fee7eae3          	bltu	a5,a4,75c <free+0x40>
   if(bp + bp->s.size == p->s.ptr){
- 794:	ff852583          	lw	a1,-8(a0)
- 798:	6390                	ld	a2,0(a5)
- 79a:	02059713          	slli	a4,a1,0x20
- 79e:	9301                	srli	a4,a4,0x20
- 7a0:	0712                	slli	a4,a4,0x4
- 7a2:	9736                	add	a4,a4,a3
- 7a4:	fae60ae3          	beq	a2,a4,758 <free+0x14>
+ 76c:	ff852583          	lw	a1,-8(a0)
+ 770:	6390                	ld	a2,0(a5)
+ 772:	02059713          	slli	a4,a1,0x20
+ 776:	9301                	srli	a4,a4,0x20
+ 778:	0712                	slli	a4,a4,0x4
+ 77a:	9736                	add	a4,a4,a3
+ 77c:	fae60ae3          	beq	a2,a4,730 <free+0x14>
     bp->s.ptr = p->s.ptr;
- 7a8:	fec53823          	sd	a2,-16(a0)
+ 780:	fec53823          	sd	a2,-16(a0)
   if(p + p->s.size == bp){
- 7ac:	4790                	lw	a2,8(a5)
- 7ae:	02061713          	slli	a4,a2,0x20
- 7b2:	9301                	srli	a4,a4,0x20
- 7b4:	0712                	slli	a4,a4,0x4
- 7b6:	973e                	add	a4,a4,a5
- 7b8:	fae689e3          	beq	a3,a4,76a <free+0x26>
+ 784:	4790                	lw	a2,8(a5)
+ 786:	02061713          	slli	a4,a2,0x20
+ 78a:	9301                	srli	a4,a4,0x20
+ 78c:	0712                	slli	a4,a4,0x4
+ 78e:	973e                	add	a4,a4,a5
+ 790:	fae689e3          	beq	a3,a4,742 <free+0x26>
   } else
     p->s.ptr = bp;
- 7bc:	e394                	sd	a3,0(a5)
+ 794:	e394                	sd	a3,0(a5)
   freep = p;
- 7be:	00000717          	auipc	a4,0x0
- 7c2:	18f73d23          	sd	a5,410(a4) # 958 <freep>
+ 796:	00000717          	auipc	a4,0x0
+ 79a:	18f73d23          	sd	a5,410(a4) # 930 <freep>
 }
- 7c6:	6422                	ld	s0,8(sp)
- 7c8:	0141                	addi	sp,sp,16
- 7ca:	8082                	ret
+ 79e:	6422                	ld	s0,8(sp)
+ 7a0:	0141                	addi	sp,sp,16
+ 7a2:	8082                	ret
 
-00000000000007cc <malloc>:
+00000000000007a4 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 7cc:	7139                	addi	sp,sp,-64
- 7ce:	fc06                	sd	ra,56(sp)
- 7d0:	f822                	sd	s0,48(sp)
- 7d2:	f426                	sd	s1,40(sp)
- 7d4:	f04a                	sd	s2,32(sp)
- 7d6:	ec4e                	sd	s3,24(sp)
- 7d8:	e852                	sd	s4,16(sp)
- 7da:	e456                	sd	s5,8(sp)
- 7dc:	e05a                	sd	s6,0(sp)
- 7de:	0080                	addi	s0,sp,64
+ 7a4:	7139                	addi	sp,sp,-64
+ 7a6:	fc06                	sd	ra,56(sp)
+ 7a8:	f822                	sd	s0,48(sp)
+ 7aa:	f426                	sd	s1,40(sp)
+ 7ac:	f04a                	sd	s2,32(sp)
+ 7ae:	ec4e                	sd	s3,24(sp)
+ 7b0:	e852                	sd	s4,16(sp)
+ 7b2:	e456                	sd	s5,8(sp)
+ 7b4:	e05a                	sd	s6,0(sp)
+ 7b6:	0080                	addi	s0,sp,64
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 7e0:	02051493          	slli	s1,a0,0x20
- 7e4:	9081                	srli	s1,s1,0x20
- 7e6:	04bd                	addi	s1,s1,15
- 7e8:	8091                	srli	s1,s1,0x4
- 7ea:	0014899b          	addiw	s3,s1,1
- 7ee:	0485                	addi	s1,s1,1
+ 7b8:	02051493          	slli	s1,a0,0x20
+ 7bc:	9081                	srli	s1,s1,0x20
+ 7be:	04bd                	addi	s1,s1,15
+ 7c0:	8091                	srli	s1,s1,0x4
+ 7c2:	0014899b          	addiw	s3,s1,1
+ 7c6:	0485                	addi	s1,s1,1
   if((prevp = freep) == 0){
- 7f0:	00000517          	auipc	a0,0x0
- 7f4:	16853503          	ld	a0,360(a0) # 958 <freep>
- 7f8:	c515                	beqz	a0,824 <malloc+0x58>
+ 7c8:	00000517          	auipc	a0,0x0
+ 7cc:	16853503          	ld	a0,360(a0) # 930 <freep>
+ 7d0:	c515                	beqz	a0,7fc <malloc+0x58>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7fa:	611c                	ld	a5,0(a0)
+ 7d2:	611c                	ld	a5,0(a0)
     if(p->s.size >= nunits){
- 7fc:	4798                	lw	a4,8(a5)
- 7fe:	02977f63          	bgeu	a4,s1,83c <malloc+0x70>
- 802:	8a4e                	mv	s4,s3
- 804:	0009871b          	sext.w	a4,s3
- 808:	6685                	lui	a3,0x1
- 80a:	00d77363          	bgeu	a4,a3,810 <malloc+0x44>
- 80e:	6a05                	lui	s4,0x1
- 810:	000a0b1b          	sext.w	s6,s4
+ 7d4:	4798                	lw	a4,8(a5)
+ 7d6:	02977f63          	bgeu	a4,s1,814 <malloc+0x70>
+ 7da:	8a4e                	mv	s4,s3
+ 7dc:	0009871b          	sext.w	a4,s3
+ 7e0:	6685                	lui	a3,0x1
+ 7e2:	00d77363          	bgeu	a4,a3,7e8 <malloc+0x44>
+ 7e6:	6a05                	lui	s4,0x1
+ 7e8:	000a0b1b          	sext.w	s6,s4
   p = sbrk(nu * sizeof(Header));
- 814:	004a1a1b          	slliw	s4,s4,0x4
+ 7ec:	004a1a1b          	slliw	s4,s4,0x4
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 818:	00000917          	auipc	s2,0x0
- 81c:	14090913          	addi	s2,s2,320 # 958 <freep>
+ 7f0:	00000917          	auipc	s2,0x0
+ 7f4:	14090913          	addi	s2,s2,320 # 930 <freep>
   if(p == (char*)-1)
- 820:	5afd                	li	s5,-1
- 822:	a88d                	j	894 <malloc+0xc8>
+ 7f8:	5afd                	li	s5,-1
+ 7fa:	a88d                	j	86c <malloc+0xc8>
     base.s.ptr = freep = prevp = &base;
- 824:	00000797          	auipc	a5,0x0
- 828:	13c78793          	addi	a5,a5,316 # 960 <base>
- 82c:	00000717          	auipc	a4,0x0
- 830:	12f73623          	sd	a5,300(a4) # 958 <freep>
- 834:	e39c                	sd	a5,0(a5)
+ 7fc:	00000797          	auipc	a5,0x0
+ 800:	13c78793          	addi	a5,a5,316 # 938 <base>
+ 804:	00000717          	auipc	a4,0x0
+ 808:	12f73623          	sd	a5,300(a4) # 930 <freep>
+ 80c:	e39c                	sd	a5,0(a5)
     base.s.size = 0;
- 836:	0007a423          	sw	zero,8(a5)
+ 80e:	0007a423          	sw	zero,8(a5)
     if(p->s.size >= nunits){
- 83a:	b7e1                	j	802 <malloc+0x36>
+ 812:	b7e1                	j	7da <malloc+0x36>
       if(p->s.size == nunits)
- 83c:	02e48b63          	beq	s1,a4,872 <malloc+0xa6>
+ 814:	02e48b63          	beq	s1,a4,84a <malloc+0xa6>
         p->s.size -= nunits;
- 840:	4137073b          	subw	a4,a4,s3
- 844:	c798                	sw	a4,8(a5)
+ 818:	4137073b          	subw	a4,a4,s3
+ 81c:	c798                	sw	a4,8(a5)
         p += p->s.size;
- 846:	1702                	slli	a4,a4,0x20
- 848:	9301                	srli	a4,a4,0x20
- 84a:	0712                	slli	a4,a4,0x4
- 84c:	97ba                	add	a5,a5,a4
+ 81e:	1702                	slli	a4,a4,0x20
+ 820:	9301                	srli	a4,a4,0x20
+ 822:	0712                	slli	a4,a4,0x4
+ 824:	97ba                	add	a5,a5,a4
         p->s.size = nunits;
- 84e:	0137a423          	sw	s3,8(a5)
+ 826:	0137a423          	sw	s3,8(a5)
       freep = prevp;
- 852:	00000717          	auipc	a4,0x0
- 856:	10a73323          	sd	a0,262(a4) # 958 <freep>
+ 82a:	00000717          	auipc	a4,0x0
+ 82e:	10a73323          	sd	a0,262(a4) # 930 <freep>
       return (void*)(p + 1);
- 85a:	01078513          	addi	a0,a5,16
+ 832:	01078513          	addi	a0,a5,16
       if((p = morecore(nunits)) == 0)
         return 0;
   }
 }
- 85e:	70e2                	ld	ra,56(sp)
- 860:	7442                	ld	s0,48(sp)
- 862:	74a2                	ld	s1,40(sp)
- 864:	7902                	ld	s2,32(sp)
- 866:	69e2                	ld	s3,24(sp)
- 868:	6a42                	ld	s4,16(sp)
- 86a:	6aa2                	ld	s5,8(sp)
- 86c:	6b02                	ld	s6,0(sp)
- 86e:	6121                	addi	sp,sp,64
- 870:	8082                	ret
+ 836:	70e2                	ld	ra,56(sp)
+ 838:	7442                	ld	s0,48(sp)
+ 83a:	74a2                	ld	s1,40(sp)
+ 83c:	7902                	ld	s2,32(sp)
+ 83e:	69e2                	ld	s3,24(sp)
+ 840:	6a42                	ld	s4,16(sp)
+ 842:	6aa2                	ld	s5,8(sp)
+ 844:	6b02                	ld	s6,0(sp)
+ 846:	6121                	addi	sp,sp,64
+ 848:	8082                	ret
         prevp->s.ptr = p->s.ptr;
- 872:	6398                	ld	a4,0(a5)
- 874:	e118                	sd	a4,0(a0)
- 876:	bff1                	j	852 <malloc+0x86>
+ 84a:	6398                	ld	a4,0(a5)
+ 84c:	e118                	sd	a4,0(a0)
+ 84e:	bff1                	j	82a <malloc+0x86>
   hp->s.size = nu;
- 878:	01652423          	sw	s6,8(a0)
+ 850:	01652423          	sw	s6,8(a0)
   free((void*)(hp + 1));
- 87c:	0541                	addi	a0,a0,16
- 87e:	00000097          	auipc	ra,0x0
- 882:	ec6080e7          	jalr	-314(ra) # 744 <free>
+ 854:	0541                	addi	a0,a0,16
+ 856:	00000097          	auipc	ra,0x0
+ 85a:	ec6080e7          	jalr	-314(ra) # 71c <free>
   return freep;
- 886:	00093503          	ld	a0,0(s2)
+ 85e:	00093503          	ld	a0,0(s2)
       if((p = morecore(nunits)) == 0)
- 88a:	d971                	beqz	a0,85e <malloc+0x92>
+ 862:	d971                	beqz	a0,836 <malloc+0x92>
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 88c:	611c                	ld	a5,0(a0)
+ 864:	611c                	ld	a5,0(a0)
     if(p->s.size >= nunits){
- 88e:	4798                	lw	a4,8(a5)
- 890:	fa9776e3          	bgeu	a4,s1,83c <malloc+0x70>
+ 866:	4798                	lw	a4,8(a5)
+ 868:	fa9776e3          	bgeu	a4,s1,814 <malloc+0x70>
     if(p == freep)
- 894:	00093703          	ld	a4,0(s2)
- 898:	853e                	mv	a0,a5
- 89a:	fef719e3          	bne	a4,a5,88c <malloc+0xc0>
+ 86c:	00093703          	ld	a4,0(s2)
+ 870:	853e                	mv	a0,a5
+ 872:	fef719e3          	bne	a4,a5,864 <malloc+0xc0>
   p = sbrk(nu * sizeof(Header));
- 89e:	8552                	mv	a0,s4
- 8a0:	00000097          	auipc	ra,0x0
- 8a4:	b56080e7          	jalr	-1194(ra) # 3f6 <sbrk>
+ 876:	8552                	mv	a0,s4
+ 878:	00000097          	auipc	ra,0x0
+ 87c:	b7e080e7          	jalr	-1154(ra) # 3f6 <sbrk>
   if(p == (char*)-1)
- 8a8:	fd5518e3          	bne	a0,s5,878 <malloc+0xac>
+ 880:	fd5518e3          	bne	a0,s5,850 <malloc+0xac>
         return 0;
- 8ac:	4501                	li	a0,0
- 8ae:	bf45                	j	85e <malloc+0x92>
+ 884:	4501                	li	a0,0
+ 886:	bf45                	j	836 <malloc+0x92>
diff --git a/user/init.o b/user/init.o
index 9d47584..0a82a98 100644
Binary files a/user/init.o and b/user/init.o differ
diff --git a/user/init.sym b/user/init.sym
index cb0695b..36d9f8f 100644
--- a/user/init.sym
+++ b/user/init.sym
@@ -1,8 +1,8 @@
 0000000000000000 .text
-00000000000008b0 .rodata
-0000000000000948 .data
-0000000000000958 .sbss
-0000000000000960 .bss
+0000000000000888 .rodata
+0000000000000920 .data
+0000000000000930 .sbss
+0000000000000938 .bss
 0000000000000000 .comment
 0000000000000000 .debug_aranges
 0000000000000000 .debug_info
@@ -15,54 +15,49 @@
 0000000000000000 init.c
 0000000000000000 ulib.c
 0000000000000000 printf.c
-0000000000000436 putc
-0000000000000458 printint
-0000000000000930 digits
+000000000000040e putc
+0000000000000430 printint
+0000000000000908 digits
 0000000000000000 umalloc.c
-0000000000000958 freep
-0000000000000960 base
+0000000000000930 freep
+0000000000000938 base
 00000000000000f8 strcpy
-000000000000070e printf
-0000000000001148 __global_pointer$
-0000000000000948 argv
+00000000000006e6 printf
+0000000000001120 __global_pointer$
+0000000000000920 argv
 00000000000002b8 memmove
 00000000000003b6 mknod
 00000000000001b4 gets
-0000000000000958 __SDATA_BEGIN__
+0000000000000930 __SDATA_BEGIN__
 00000000000003ee getpid
 000000000000034e memcpy
-000000000000041e print_stats
-00000000000007cc malloc
+00000000000007a4 malloc
 00000000000003fe sleep
 000000000000037e pipe
 000000000000038e write
 00000000000003c6 fstat
-00000000000006e0 fprintf
+00000000000006b8 fprintf
 000000000000039e kill
-0000000000000502 vprintf
+00000000000004da vprintf
 00000000000003de chdir
-000000000000040e pause_system
 00000000000003a6 exec
 0000000000000376 wait
 0000000000000386 read
 00000000000003be unlink
-000000000000042e set_cpu
-0000000000000426 get_cpu
 0000000000000314 memcmp
 0000000000000366 fork
-0000000000000416 kill_system
-0000000000000970 __BSS_END__
+0000000000000948 __BSS_END__
 00000000000003f6 sbrk
 0000000000000406 uptime
-0000000000000958 __bss_start
+0000000000000930 __bss_start
 000000000000016a memset
 0000000000000000 main
 0000000000000114 strcmp
 00000000000003e6 dup
-0000000000000948 __DATA_BEGIN__
+0000000000000920 __DATA_BEGIN__
 0000000000000228 stat
-0000000000000958 _edata
-0000000000000970 _end
+0000000000000930 _edata
+0000000000000948 _end
 00000000000003ce link
 000000000000036e exit
 000000000000026e atoi
@@ -71,4 +66,4 @@
 0000000000000190 strchr
 00000000000003d6 mkdir
 0000000000000396 close
-0000000000000744 free
+000000000000071c free
diff --git a/user/kill.asm b/user/kill.asm
index 177c10e..9ac48f7 100644
--- a/user/kill.asm
+++ b/user/kill.asm
@@ -48,10 +48,10 @@ main(int argc, char **argv)
   44:	29a080e7          	jalr	666(ra) # 2da <exit>
     fprintf(2, "usage: kill pid...\n");
   48:	00000597          	auipc	a1,0x0
-  4c:	7d858593          	addi	a1,a1,2008 # 820 <malloc+0xe8>
+  4c:	7b058593          	addi	a1,a1,1968 # 7f8 <malloc+0xe8>
   50:	4509                	li	a0,2
   52:	00000097          	auipc	ra,0x0
-  56:	5fa080e7          	jalr	1530(ra) # 64c <fprintf>
+  56:	5d2080e7          	jalr	1490(ra) # 624 <fprintf>
     exit(1);
   5a:	4505                	li	a0,1
   5c:	00000097          	auipc	ra,0x0
@@ -694,696 +694,646 @@ uptime:
  ret
  378:	8082                	ret
 
-000000000000037a <pause_system>:
-.global pause_system
-pause_system:
- li a7, SYS_pause_system
- 37a:	48d9                	li	a7,22
- ecall
- 37c:	00000073          	ecall
- ret
- 380:	8082                	ret
-
-0000000000000382 <kill_system>:
-.global kill_system
-kill_system:
- li a7, SYS_kill_system
- 382:	48dd                	li	a7,23
- ecall
- 384:	00000073          	ecall
- ret
- 388:	8082                	ret
-
-000000000000038a <print_stats>:
-.global print_stats
-print_stats:
- li a7, SYS_print_stats
- 38a:	48e1                	li	a7,24
- ecall
- 38c:	00000073          	ecall
- ret
- 390:	8082                	ret
-
-0000000000000392 <get_cpu>:
-.global get_cpu
-get_cpu:
- li a7, SYS_get_cpu
- 392:	48e5                	li	a7,25
- ecall
- 394:	00000073          	ecall
- ret
- 398:	8082                	ret
-
-000000000000039a <set_cpu>:
-.global set_cpu
-set_cpu:
- li a7, SYS_set_cpu
- 39a:	48e9                	li	a7,26
- ecall
- 39c:	00000073          	ecall
- ret
- 3a0:	8082                	ret
-
-00000000000003a2 <putc>:
+000000000000037a <putc>:
 
 static char digits[] = "0123456789ABCDEF";
 
 static void
 putc(int fd, char c)
 {
- 3a2:	1101                	addi	sp,sp,-32
- 3a4:	ec06                	sd	ra,24(sp)
- 3a6:	e822                	sd	s0,16(sp)
- 3a8:	1000                	addi	s0,sp,32
- 3aa:	feb407a3          	sb	a1,-17(s0)
+ 37a:	1101                	addi	sp,sp,-32
+ 37c:	ec06                	sd	ra,24(sp)
+ 37e:	e822                	sd	s0,16(sp)
+ 380:	1000                	addi	s0,sp,32
+ 382:	feb407a3          	sb	a1,-17(s0)
   write(fd, &c, 1);
- 3ae:	4605                	li	a2,1
- 3b0:	fef40593          	addi	a1,s0,-17
- 3b4:	00000097          	auipc	ra,0x0
- 3b8:	f46080e7          	jalr	-186(ra) # 2fa <write>
+ 386:	4605                	li	a2,1
+ 388:	fef40593          	addi	a1,s0,-17
+ 38c:	00000097          	auipc	ra,0x0
+ 390:	f6e080e7          	jalr	-146(ra) # 2fa <write>
 }
- 3bc:	60e2                	ld	ra,24(sp)
- 3be:	6442                	ld	s0,16(sp)
- 3c0:	6105                	addi	sp,sp,32
- 3c2:	8082                	ret
+ 394:	60e2                	ld	ra,24(sp)
+ 396:	6442                	ld	s0,16(sp)
+ 398:	6105                	addi	sp,sp,32
+ 39a:	8082                	ret
 
-00000000000003c4 <printint>:
+000000000000039c <printint>:
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 3c4:	7139                	addi	sp,sp,-64
- 3c6:	fc06                	sd	ra,56(sp)
- 3c8:	f822                	sd	s0,48(sp)
- 3ca:	f426                	sd	s1,40(sp)
- 3cc:	f04a                	sd	s2,32(sp)
- 3ce:	ec4e                	sd	s3,24(sp)
- 3d0:	0080                	addi	s0,sp,64
- 3d2:	84aa                	mv	s1,a0
+ 39c:	7139                	addi	sp,sp,-64
+ 39e:	fc06                	sd	ra,56(sp)
+ 3a0:	f822                	sd	s0,48(sp)
+ 3a2:	f426                	sd	s1,40(sp)
+ 3a4:	f04a                	sd	s2,32(sp)
+ 3a6:	ec4e                	sd	s3,24(sp)
+ 3a8:	0080                	addi	s0,sp,64
+ 3aa:	84aa                	mv	s1,a0
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 3d4:	c299                	beqz	a3,3da <printint+0x16>
- 3d6:	0805c863          	bltz	a1,466 <printint+0xa2>
+ 3ac:	c299                	beqz	a3,3b2 <printint+0x16>
+ 3ae:	0805c863          	bltz	a1,43e <printint+0xa2>
     neg = 1;
     x = -xx;
   } else {
     x = xx;
- 3da:	2581                	sext.w	a1,a1
+ 3b2:	2581                	sext.w	a1,a1
   neg = 0;
- 3dc:	4881                	li	a7,0
- 3de:	fc040693          	addi	a3,s0,-64
+ 3b4:	4881                	li	a7,0
+ 3b6:	fc040693          	addi	a3,s0,-64
   }
 
   i = 0;
- 3e2:	4701                	li	a4,0
+ 3ba:	4701                	li	a4,0
   do{
     buf[i++] = digits[x % base];
- 3e4:	2601                	sext.w	a2,a2
- 3e6:	00000517          	auipc	a0,0x0
- 3ea:	45a50513          	addi	a0,a0,1114 # 840 <digits>
- 3ee:	883a                	mv	a6,a4
- 3f0:	2705                	addiw	a4,a4,1
- 3f2:	02c5f7bb          	remuw	a5,a1,a2
- 3f6:	1782                	slli	a5,a5,0x20
- 3f8:	9381                	srli	a5,a5,0x20
- 3fa:	97aa                	add	a5,a5,a0
- 3fc:	0007c783          	lbu	a5,0(a5)
- 400:	00f68023          	sb	a5,0(a3)
+ 3bc:	2601                	sext.w	a2,a2
+ 3be:	00000517          	auipc	a0,0x0
+ 3c2:	45a50513          	addi	a0,a0,1114 # 818 <digits>
+ 3c6:	883a                	mv	a6,a4
+ 3c8:	2705                	addiw	a4,a4,1
+ 3ca:	02c5f7bb          	remuw	a5,a1,a2
+ 3ce:	1782                	slli	a5,a5,0x20
+ 3d0:	9381                	srli	a5,a5,0x20
+ 3d2:	97aa                	add	a5,a5,a0
+ 3d4:	0007c783          	lbu	a5,0(a5)
+ 3d8:	00f68023          	sb	a5,0(a3)
   }while((x /= base) != 0);
- 404:	0005879b          	sext.w	a5,a1
- 408:	02c5d5bb          	divuw	a1,a1,a2
- 40c:	0685                	addi	a3,a3,1
- 40e:	fec7f0e3          	bgeu	a5,a2,3ee <printint+0x2a>
+ 3dc:	0005879b          	sext.w	a5,a1
+ 3e0:	02c5d5bb          	divuw	a1,a1,a2
+ 3e4:	0685                	addi	a3,a3,1
+ 3e6:	fec7f0e3          	bgeu	a5,a2,3c6 <printint+0x2a>
   if(neg)
- 412:	00088b63          	beqz	a7,428 <printint+0x64>
+ 3ea:	00088b63          	beqz	a7,400 <printint+0x64>
     buf[i++] = '-';
- 416:	fd040793          	addi	a5,s0,-48
- 41a:	973e                	add	a4,a4,a5
- 41c:	02d00793          	li	a5,45
- 420:	fef70823          	sb	a5,-16(a4)
- 424:	0028071b          	addiw	a4,a6,2
+ 3ee:	fd040793          	addi	a5,s0,-48
+ 3f2:	973e                	add	a4,a4,a5
+ 3f4:	02d00793          	li	a5,45
+ 3f8:	fef70823          	sb	a5,-16(a4)
+ 3fc:	0028071b          	addiw	a4,a6,2
 
   while(--i >= 0)
- 428:	02e05863          	blez	a4,458 <printint+0x94>
- 42c:	fc040793          	addi	a5,s0,-64
- 430:	00e78933          	add	s2,a5,a4
- 434:	fff78993          	addi	s3,a5,-1
- 438:	99ba                	add	s3,s3,a4
- 43a:	377d                	addiw	a4,a4,-1
- 43c:	1702                	slli	a4,a4,0x20
- 43e:	9301                	srli	a4,a4,0x20
- 440:	40e989b3          	sub	s3,s3,a4
+ 400:	02e05863          	blez	a4,430 <printint+0x94>
+ 404:	fc040793          	addi	a5,s0,-64
+ 408:	00e78933          	add	s2,a5,a4
+ 40c:	fff78993          	addi	s3,a5,-1
+ 410:	99ba                	add	s3,s3,a4
+ 412:	377d                	addiw	a4,a4,-1
+ 414:	1702                	slli	a4,a4,0x20
+ 416:	9301                	srli	a4,a4,0x20
+ 418:	40e989b3          	sub	s3,s3,a4
     putc(fd, buf[i]);
- 444:	fff94583          	lbu	a1,-1(s2)
- 448:	8526                	mv	a0,s1
- 44a:	00000097          	auipc	ra,0x0
- 44e:	f58080e7          	jalr	-168(ra) # 3a2 <putc>
+ 41c:	fff94583          	lbu	a1,-1(s2)
+ 420:	8526                	mv	a0,s1
+ 422:	00000097          	auipc	ra,0x0
+ 426:	f58080e7          	jalr	-168(ra) # 37a <putc>
   while(--i >= 0)
- 452:	197d                	addi	s2,s2,-1
- 454:	ff3918e3          	bne	s2,s3,444 <printint+0x80>
+ 42a:	197d                	addi	s2,s2,-1
+ 42c:	ff3918e3          	bne	s2,s3,41c <printint+0x80>
 }
- 458:	70e2                	ld	ra,56(sp)
- 45a:	7442                	ld	s0,48(sp)
- 45c:	74a2                	ld	s1,40(sp)
- 45e:	7902                	ld	s2,32(sp)
- 460:	69e2                	ld	s3,24(sp)
- 462:	6121                	addi	sp,sp,64
- 464:	8082                	ret
+ 430:	70e2                	ld	ra,56(sp)
+ 432:	7442                	ld	s0,48(sp)
+ 434:	74a2                	ld	s1,40(sp)
+ 436:	7902                	ld	s2,32(sp)
+ 438:	69e2                	ld	s3,24(sp)
+ 43a:	6121                	addi	sp,sp,64
+ 43c:	8082                	ret
     x = -xx;
- 466:	40b005bb          	negw	a1,a1
+ 43e:	40b005bb          	negw	a1,a1
     neg = 1;
- 46a:	4885                	li	a7,1
+ 442:	4885                	li	a7,1
     x = -xx;
- 46c:	bf8d                	j	3de <printint+0x1a>
+ 444:	bf8d                	j	3b6 <printint+0x1a>
 
-000000000000046e <vprintf>:
+0000000000000446 <vprintf>:
 }
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 vprintf(int fd, const char *fmt, va_list ap)
 {
- 46e:	7119                	addi	sp,sp,-128
- 470:	fc86                	sd	ra,120(sp)
- 472:	f8a2                	sd	s0,112(sp)
- 474:	f4a6                	sd	s1,104(sp)
- 476:	f0ca                	sd	s2,96(sp)
- 478:	ecce                	sd	s3,88(sp)
- 47a:	e8d2                	sd	s4,80(sp)
- 47c:	e4d6                	sd	s5,72(sp)
- 47e:	e0da                	sd	s6,64(sp)
- 480:	fc5e                	sd	s7,56(sp)
- 482:	f862                	sd	s8,48(sp)
- 484:	f466                	sd	s9,40(sp)
- 486:	f06a                	sd	s10,32(sp)
- 488:	ec6e                	sd	s11,24(sp)
- 48a:	0100                	addi	s0,sp,128
+ 446:	7119                	addi	sp,sp,-128
+ 448:	fc86                	sd	ra,120(sp)
+ 44a:	f8a2                	sd	s0,112(sp)
+ 44c:	f4a6                	sd	s1,104(sp)
+ 44e:	f0ca                	sd	s2,96(sp)
+ 450:	ecce                	sd	s3,88(sp)
+ 452:	e8d2                	sd	s4,80(sp)
+ 454:	e4d6                	sd	s5,72(sp)
+ 456:	e0da                	sd	s6,64(sp)
+ 458:	fc5e                	sd	s7,56(sp)
+ 45a:	f862                	sd	s8,48(sp)
+ 45c:	f466                	sd	s9,40(sp)
+ 45e:	f06a                	sd	s10,32(sp)
+ 460:	ec6e                	sd	s11,24(sp)
+ 462:	0100                	addi	s0,sp,128
   char *s;
   int c, i, state;
 
   state = 0;
   for(i = 0; fmt[i]; i++){
- 48c:	0005c903          	lbu	s2,0(a1)
- 490:	18090f63          	beqz	s2,62e <vprintf+0x1c0>
- 494:	8aaa                	mv	s5,a0
- 496:	8b32                	mv	s6,a2
- 498:	00158493          	addi	s1,a1,1
+ 464:	0005c903          	lbu	s2,0(a1)
+ 468:	18090f63          	beqz	s2,606 <vprintf+0x1c0>
+ 46c:	8aaa                	mv	s5,a0
+ 46e:	8b32                	mv	s6,a2
+ 470:	00158493          	addi	s1,a1,1
   state = 0;
- 49c:	4981                	li	s3,0
+ 474:	4981                	li	s3,0
       if(c == '%'){
         state = '%';
       } else {
         putc(fd, c);
       }
     } else if(state == '%'){
- 49e:	02500a13          	li	s4,37
+ 476:	02500a13          	li	s4,37
       if(c == 'd'){
- 4a2:	06400c13          	li	s8,100
+ 47a:	06400c13          	li	s8,100
         printint(fd, va_arg(ap, int), 10, 1);
       } else if(c == 'l') {
- 4a6:	06c00c93          	li	s9,108
+ 47e:	06c00c93          	li	s9,108
         printint(fd, va_arg(ap, uint64), 10, 0);
       } else if(c == 'x') {
- 4aa:	07800d13          	li	s10,120
+ 482:	07800d13          	li	s10,120
         printint(fd, va_arg(ap, int), 16, 0);
       } else if(c == 'p') {
- 4ae:	07000d93          	li	s11,112
+ 486:	07000d93          	li	s11,112
     putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
- 4b2:	00000b97          	auipc	s7,0x0
- 4b6:	38eb8b93          	addi	s7,s7,910 # 840 <digits>
- 4ba:	a839                	j	4d8 <vprintf+0x6a>
+ 48a:	00000b97          	auipc	s7,0x0
+ 48e:	38eb8b93          	addi	s7,s7,910 # 818 <digits>
+ 492:	a839                	j	4b0 <vprintf+0x6a>
         putc(fd, c);
- 4bc:	85ca                	mv	a1,s2
- 4be:	8556                	mv	a0,s5
- 4c0:	00000097          	auipc	ra,0x0
- 4c4:	ee2080e7          	jalr	-286(ra) # 3a2 <putc>
- 4c8:	a019                	j	4ce <vprintf+0x60>
+ 494:	85ca                	mv	a1,s2
+ 496:	8556                	mv	a0,s5
+ 498:	00000097          	auipc	ra,0x0
+ 49c:	ee2080e7          	jalr	-286(ra) # 37a <putc>
+ 4a0:	a019                	j	4a6 <vprintf+0x60>
     } else if(state == '%'){
- 4ca:	01498f63          	beq	s3,s4,4e8 <vprintf+0x7a>
+ 4a2:	01498f63          	beq	s3,s4,4c0 <vprintf+0x7a>
   for(i = 0; fmt[i]; i++){
- 4ce:	0485                	addi	s1,s1,1
- 4d0:	fff4c903          	lbu	s2,-1(s1)
- 4d4:	14090d63          	beqz	s2,62e <vprintf+0x1c0>
+ 4a6:	0485                	addi	s1,s1,1
+ 4a8:	fff4c903          	lbu	s2,-1(s1)
+ 4ac:	14090d63          	beqz	s2,606 <vprintf+0x1c0>
     c = fmt[i] & 0xff;
- 4d8:	0009079b          	sext.w	a5,s2
+ 4b0:	0009079b          	sext.w	a5,s2
     if(state == 0){
- 4dc:	fe0997e3          	bnez	s3,4ca <vprintf+0x5c>
+ 4b4:	fe0997e3          	bnez	s3,4a2 <vprintf+0x5c>
       if(c == '%'){
- 4e0:	fd479ee3          	bne	a5,s4,4bc <vprintf+0x4e>
+ 4b8:	fd479ee3          	bne	a5,s4,494 <vprintf+0x4e>
         state = '%';
- 4e4:	89be                	mv	s3,a5
- 4e6:	b7e5                	j	4ce <vprintf+0x60>
+ 4bc:	89be                	mv	s3,a5
+ 4be:	b7e5                	j	4a6 <vprintf+0x60>
       if(c == 'd'){
- 4e8:	05878063          	beq	a5,s8,528 <vprintf+0xba>
+ 4c0:	05878063          	beq	a5,s8,500 <vprintf+0xba>
       } else if(c == 'l') {
- 4ec:	05978c63          	beq	a5,s9,544 <vprintf+0xd6>
+ 4c4:	05978c63          	beq	a5,s9,51c <vprintf+0xd6>
       } else if(c == 'x') {
- 4f0:	07a78863          	beq	a5,s10,560 <vprintf+0xf2>
+ 4c8:	07a78863          	beq	a5,s10,538 <vprintf+0xf2>
       } else if(c == 'p') {
- 4f4:	09b78463          	beq	a5,s11,57c <vprintf+0x10e>
+ 4cc:	09b78463          	beq	a5,s11,554 <vprintf+0x10e>
         printptr(fd, va_arg(ap, uint64));
       } else if(c == 's'){
- 4f8:	07300713          	li	a4,115
- 4fc:	0ce78663          	beq	a5,a4,5c8 <vprintf+0x15a>
+ 4d0:	07300713          	li	a4,115
+ 4d4:	0ce78663          	beq	a5,a4,5a0 <vprintf+0x15a>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 500:	06300713          	li	a4,99
- 504:	0ee78e63          	beq	a5,a4,600 <vprintf+0x192>
+ 4d8:	06300713          	li	a4,99
+ 4dc:	0ee78e63          	beq	a5,a4,5d8 <vprintf+0x192>
         putc(fd, va_arg(ap, uint));
       } else if(c == '%'){
- 508:	11478863          	beq	a5,s4,618 <vprintf+0x1aa>
+ 4e0:	11478863          	beq	a5,s4,5f0 <vprintf+0x1aa>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
- 50c:	85d2                	mv	a1,s4
- 50e:	8556                	mv	a0,s5
- 510:	00000097          	auipc	ra,0x0
- 514:	e92080e7          	jalr	-366(ra) # 3a2 <putc>
+ 4e4:	85d2                	mv	a1,s4
+ 4e6:	8556                	mv	a0,s5
+ 4e8:	00000097          	auipc	ra,0x0
+ 4ec:	e92080e7          	jalr	-366(ra) # 37a <putc>
         putc(fd, c);
- 518:	85ca                	mv	a1,s2
- 51a:	8556                	mv	a0,s5
- 51c:	00000097          	auipc	ra,0x0
- 520:	e86080e7          	jalr	-378(ra) # 3a2 <putc>
+ 4f0:	85ca                	mv	a1,s2
+ 4f2:	8556                	mv	a0,s5
+ 4f4:	00000097          	auipc	ra,0x0
+ 4f8:	e86080e7          	jalr	-378(ra) # 37a <putc>
       }
       state = 0;
- 524:	4981                	li	s3,0
- 526:	b765                	j	4ce <vprintf+0x60>
+ 4fc:	4981                	li	s3,0
+ 4fe:	b765                	j	4a6 <vprintf+0x60>
         printint(fd, va_arg(ap, int), 10, 1);
- 528:	008b0913          	addi	s2,s6,8
- 52c:	4685                	li	a3,1
- 52e:	4629                	li	a2,10
- 530:	000b2583          	lw	a1,0(s6)
- 534:	8556                	mv	a0,s5
- 536:	00000097          	auipc	ra,0x0
- 53a:	e8e080e7          	jalr	-370(ra) # 3c4 <printint>
- 53e:	8b4a                	mv	s6,s2
+ 500:	008b0913          	addi	s2,s6,8
+ 504:	4685                	li	a3,1
+ 506:	4629                	li	a2,10
+ 508:	000b2583          	lw	a1,0(s6)
+ 50c:	8556                	mv	a0,s5
+ 50e:	00000097          	auipc	ra,0x0
+ 512:	e8e080e7          	jalr	-370(ra) # 39c <printint>
+ 516:	8b4a                	mv	s6,s2
       state = 0;
- 540:	4981                	li	s3,0
- 542:	b771                	j	4ce <vprintf+0x60>
+ 518:	4981                	li	s3,0
+ 51a:	b771                	j	4a6 <vprintf+0x60>
         printint(fd, va_arg(ap, uint64), 10, 0);
- 544:	008b0913          	addi	s2,s6,8
- 548:	4681                	li	a3,0
- 54a:	4629                	li	a2,10
- 54c:	000b2583          	lw	a1,0(s6)
- 550:	8556                	mv	a0,s5
- 552:	00000097          	auipc	ra,0x0
- 556:	e72080e7          	jalr	-398(ra) # 3c4 <printint>
- 55a:	8b4a                	mv	s6,s2
+ 51c:	008b0913          	addi	s2,s6,8
+ 520:	4681                	li	a3,0
+ 522:	4629                	li	a2,10
+ 524:	000b2583          	lw	a1,0(s6)
+ 528:	8556                	mv	a0,s5
+ 52a:	00000097          	auipc	ra,0x0
+ 52e:	e72080e7          	jalr	-398(ra) # 39c <printint>
+ 532:	8b4a                	mv	s6,s2
       state = 0;
- 55c:	4981                	li	s3,0
- 55e:	bf85                	j	4ce <vprintf+0x60>
+ 534:	4981                	li	s3,0
+ 536:	bf85                	j	4a6 <vprintf+0x60>
         printint(fd, va_arg(ap, int), 16, 0);
- 560:	008b0913          	addi	s2,s6,8
- 564:	4681                	li	a3,0
- 566:	4641                	li	a2,16
- 568:	000b2583          	lw	a1,0(s6)
- 56c:	8556                	mv	a0,s5
- 56e:	00000097          	auipc	ra,0x0
- 572:	e56080e7          	jalr	-426(ra) # 3c4 <printint>
- 576:	8b4a                	mv	s6,s2
+ 538:	008b0913          	addi	s2,s6,8
+ 53c:	4681                	li	a3,0
+ 53e:	4641                	li	a2,16
+ 540:	000b2583          	lw	a1,0(s6)
+ 544:	8556                	mv	a0,s5
+ 546:	00000097          	auipc	ra,0x0
+ 54a:	e56080e7          	jalr	-426(ra) # 39c <printint>
+ 54e:	8b4a                	mv	s6,s2
       state = 0;
- 578:	4981                	li	s3,0
- 57a:	bf91                	j	4ce <vprintf+0x60>
+ 550:	4981                	li	s3,0
+ 552:	bf91                	j	4a6 <vprintf+0x60>
         printptr(fd, va_arg(ap, uint64));
- 57c:	008b0793          	addi	a5,s6,8
- 580:	f8f43423          	sd	a5,-120(s0)
- 584:	000b3983          	ld	s3,0(s6)
+ 554:	008b0793          	addi	a5,s6,8
+ 558:	f8f43423          	sd	a5,-120(s0)
+ 55c:	000b3983          	ld	s3,0(s6)
   putc(fd, '0');
- 588:	03000593          	li	a1,48
- 58c:	8556                	mv	a0,s5
- 58e:	00000097          	auipc	ra,0x0
- 592:	e14080e7          	jalr	-492(ra) # 3a2 <putc>
+ 560:	03000593          	li	a1,48
+ 564:	8556                	mv	a0,s5
+ 566:	00000097          	auipc	ra,0x0
+ 56a:	e14080e7          	jalr	-492(ra) # 37a <putc>
   putc(fd, 'x');
- 596:	85ea                	mv	a1,s10
- 598:	8556                	mv	a0,s5
- 59a:	00000097          	auipc	ra,0x0
- 59e:	e08080e7          	jalr	-504(ra) # 3a2 <putc>
- 5a2:	4941                	li	s2,16
+ 56e:	85ea                	mv	a1,s10
+ 570:	8556                	mv	a0,s5
+ 572:	00000097          	auipc	ra,0x0
+ 576:	e08080e7          	jalr	-504(ra) # 37a <putc>
+ 57a:	4941                	li	s2,16
     putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
- 5a4:	03c9d793          	srli	a5,s3,0x3c
- 5a8:	97de                	add	a5,a5,s7
- 5aa:	0007c583          	lbu	a1,0(a5)
- 5ae:	8556                	mv	a0,s5
- 5b0:	00000097          	auipc	ra,0x0
- 5b4:	df2080e7          	jalr	-526(ra) # 3a2 <putc>
+ 57c:	03c9d793          	srli	a5,s3,0x3c
+ 580:	97de                	add	a5,a5,s7
+ 582:	0007c583          	lbu	a1,0(a5)
+ 586:	8556                	mv	a0,s5
+ 588:	00000097          	auipc	ra,0x0
+ 58c:	df2080e7          	jalr	-526(ra) # 37a <putc>
   for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
- 5b8:	0992                	slli	s3,s3,0x4
- 5ba:	397d                	addiw	s2,s2,-1
- 5bc:	fe0914e3          	bnez	s2,5a4 <vprintf+0x136>
+ 590:	0992                	slli	s3,s3,0x4
+ 592:	397d                	addiw	s2,s2,-1
+ 594:	fe0914e3          	bnez	s2,57c <vprintf+0x136>
         printptr(fd, va_arg(ap, uint64));
- 5c0:	f8843b03          	ld	s6,-120(s0)
+ 598:	f8843b03          	ld	s6,-120(s0)
       state = 0;
- 5c4:	4981                	li	s3,0
- 5c6:	b721                	j	4ce <vprintf+0x60>
+ 59c:	4981                	li	s3,0
+ 59e:	b721                	j	4a6 <vprintf+0x60>
         s = va_arg(ap, char*);
- 5c8:	008b0993          	addi	s3,s6,8
- 5cc:	000b3903          	ld	s2,0(s6)
+ 5a0:	008b0993          	addi	s3,s6,8
+ 5a4:	000b3903          	ld	s2,0(s6)
         if(s == 0)
- 5d0:	02090163          	beqz	s2,5f2 <vprintf+0x184>
+ 5a8:	02090163          	beqz	s2,5ca <vprintf+0x184>
         while(*s != 0){
- 5d4:	00094583          	lbu	a1,0(s2)
- 5d8:	c9a1                	beqz	a1,628 <vprintf+0x1ba>
+ 5ac:	00094583          	lbu	a1,0(s2)
+ 5b0:	c9a1                	beqz	a1,600 <vprintf+0x1ba>
           putc(fd, *s);
- 5da:	8556                	mv	a0,s5
- 5dc:	00000097          	auipc	ra,0x0
- 5e0:	dc6080e7          	jalr	-570(ra) # 3a2 <putc>
+ 5b2:	8556                	mv	a0,s5
+ 5b4:	00000097          	auipc	ra,0x0
+ 5b8:	dc6080e7          	jalr	-570(ra) # 37a <putc>
           s++;
- 5e4:	0905                	addi	s2,s2,1
+ 5bc:	0905                	addi	s2,s2,1
         while(*s != 0){
- 5e6:	00094583          	lbu	a1,0(s2)
- 5ea:	f9e5                	bnez	a1,5da <vprintf+0x16c>
+ 5be:	00094583          	lbu	a1,0(s2)
+ 5c2:	f9e5                	bnez	a1,5b2 <vprintf+0x16c>
         s = va_arg(ap, char*);
- 5ec:	8b4e                	mv	s6,s3
+ 5c4:	8b4e                	mv	s6,s3
       state = 0;
- 5ee:	4981                	li	s3,0
- 5f0:	bdf9                	j	4ce <vprintf+0x60>
+ 5c6:	4981                	li	s3,0
+ 5c8:	bdf9                	j	4a6 <vprintf+0x60>
           s = "(null)";
- 5f2:	00000917          	auipc	s2,0x0
- 5f6:	24690913          	addi	s2,s2,582 # 838 <malloc+0x100>
+ 5ca:	00000917          	auipc	s2,0x0
+ 5ce:	24690913          	addi	s2,s2,582 # 810 <malloc+0x100>
         while(*s != 0){
- 5fa:	02800593          	li	a1,40
- 5fe:	bff1                	j	5da <vprintf+0x16c>
+ 5d2:	02800593          	li	a1,40
+ 5d6:	bff1                	j	5b2 <vprintf+0x16c>
         putc(fd, va_arg(ap, uint));
- 600:	008b0913          	addi	s2,s6,8
- 604:	000b4583          	lbu	a1,0(s6)
- 608:	8556                	mv	a0,s5
- 60a:	00000097          	auipc	ra,0x0
- 60e:	d98080e7          	jalr	-616(ra) # 3a2 <putc>
- 612:	8b4a                	mv	s6,s2
+ 5d8:	008b0913          	addi	s2,s6,8
+ 5dc:	000b4583          	lbu	a1,0(s6)
+ 5e0:	8556                	mv	a0,s5
+ 5e2:	00000097          	auipc	ra,0x0
+ 5e6:	d98080e7          	jalr	-616(ra) # 37a <putc>
+ 5ea:	8b4a                	mv	s6,s2
       state = 0;
- 614:	4981                	li	s3,0
- 616:	bd65                	j	4ce <vprintf+0x60>
+ 5ec:	4981                	li	s3,0
+ 5ee:	bd65                	j	4a6 <vprintf+0x60>
         putc(fd, c);
- 618:	85d2                	mv	a1,s4
- 61a:	8556                	mv	a0,s5
- 61c:	00000097          	auipc	ra,0x0
- 620:	d86080e7          	jalr	-634(ra) # 3a2 <putc>
+ 5f0:	85d2                	mv	a1,s4
+ 5f2:	8556                	mv	a0,s5
+ 5f4:	00000097          	auipc	ra,0x0
+ 5f8:	d86080e7          	jalr	-634(ra) # 37a <putc>
       state = 0;
- 624:	4981                	li	s3,0
- 626:	b565                	j	4ce <vprintf+0x60>
+ 5fc:	4981                	li	s3,0
+ 5fe:	b565                	j	4a6 <vprintf+0x60>
         s = va_arg(ap, char*);
- 628:	8b4e                	mv	s6,s3
+ 600:	8b4e                	mv	s6,s3
       state = 0;
- 62a:	4981                	li	s3,0
- 62c:	b54d                	j	4ce <vprintf+0x60>
+ 602:	4981                	li	s3,0
+ 604:	b54d                	j	4a6 <vprintf+0x60>
     }
   }
 }
- 62e:	70e6                	ld	ra,120(sp)
- 630:	7446                	ld	s0,112(sp)
- 632:	74a6                	ld	s1,104(sp)
- 634:	7906                	ld	s2,96(sp)
- 636:	69e6                	ld	s3,88(sp)
- 638:	6a46                	ld	s4,80(sp)
- 63a:	6aa6                	ld	s5,72(sp)
- 63c:	6b06                	ld	s6,64(sp)
- 63e:	7be2                	ld	s7,56(sp)
- 640:	7c42                	ld	s8,48(sp)
- 642:	7ca2                	ld	s9,40(sp)
- 644:	7d02                	ld	s10,32(sp)
- 646:	6de2                	ld	s11,24(sp)
- 648:	6109                	addi	sp,sp,128
- 64a:	8082                	ret
-
-000000000000064c <fprintf>:
+ 606:	70e6                	ld	ra,120(sp)
+ 608:	7446                	ld	s0,112(sp)
+ 60a:	74a6                	ld	s1,104(sp)
+ 60c:	7906                	ld	s2,96(sp)
+ 60e:	69e6                	ld	s3,88(sp)
+ 610:	6a46                	ld	s4,80(sp)
+ 612:	6aa6                	ld	s5,72(sp)
+ 614:	6b06                	ld	s6,64(sp)
+ 616:	7be2                	ld	s7,56(sp)
+ 618:	7c42                	ld	s8,48(sp)
+ 61a:	7ca2                	ld	s9,40(sp)
+ 61c:	7d02                	ld	s10,32(sp)
+ 61e:	6de2                	ld	s11,24(sp)
+ 620:	6109                	addi	sp,sp,128
+ 622:	8082                	ret
+
+0000000000000624 <fprintf>:
 
 void
 fprintf(int fd, const char *fmt, ...)
 {
- 64c:	715d                	addi	sp,sp,-80
- 64e:	ec06                	sd	ra,24(sp)
- 650:	e822                	sd	s0,16(sp)
- 652:	1000                	addi	s0,sp,32
- 654:	e010                	sd	a2,0(s0)
- 656:	e414                	sd	a3,8(s0)
- 658:	e818                	sd	a4,16(s0)
- 65a:	ec1c                	sd	a5,24(s0)
- 65c:	03043023          	sd	a6,32(s0)
- 660:	03143423          	sd	a7,40(s0)
+ 624:	715d                	addi	sp,sp,-80
+ 626:	ec06                	sd	ra,24(sp)
+ 628:	e822                	sd	s0,16(sp)
+ 62a:	1000                	addi	s0,sp,32
+ 62c:	e010                	sd	a2,0(s0)
+ 62e:	e414                	sd	a3,8(s0)
+ 630:	e818                	sd	a4,16(s0)
+ 632:	ec1c                	sd	a5,24(s0)
+ 634:	03043023          	sd	a6,32(s0)
+ 638:	03143423          	sd	a7,40(s0)
   va_list ap;
 
   va_start(ap, fmt);
- 664:	fe843423          	sd	s0,-24(s0)
+ 63c:	fe843423          	sd	s0,-24(s0)
   vprintf(fd, fmt, ap);
- 668:	8622                	mv	a2,s0
- 66a:	00000097          	auipc	ra,0x0
- 66e:	e04080e7          	jalr	-508(ra) # 46e <vprintf>
+ 640:	8622                	mv	a2,s0
+ 642:	00000097          	auipc	ra,0x0
+ 646:	e04080e7          	jalr	-508(ra) # 446 <vprintf>
 }
- 672:	60e2                	ld	ra,24(sp)
- 674:	6442                	ld	s0,16(sp)
- 676:	6161                	addi	sp,sp,80
- 678:	8082                	ret
+ 64a:	60e2                	ld	ra,24(sp)
+ 64c:	6442                	ld	s0,16(sp)
+ 64e:	6161                	addi	sp,sp,80
+ 650:	8082                	ret
 
-000000000000067a <printf>:
+0000000000000652 <printf>:
 
 void
 printf(const char *fmt, ...)
 {
- 67a:	711d                	addi	sp,sp,-96
- 67c:	ec06                	sd	ra,24(sp)
- 67e:	e822                	sd	s0,16(sp)
- 680:	1000                	addi	s0,sp,32
- 682:	e40c                	sd	a1,8(s0)
- 684:	e810                	sd	a2,16(s0)
- 686:	ec14                	sd	a3,24(s0)
- 688:	f018                	sd	a4,32(s0)
- 68a:	f41c                	sd	a5,40(s0)
- 68c:	03043823          	sd	a6,48(s0)
- 690:	03143c23          	sd	a7,56(s0)
+ 652:	711d                	addi	sp,sp,-96
+ 654:	ec06                	sd	ra,24(sp)
+ 656:	e822                	sd	s0,16(sp)
+ 658:	1000                	addi	s0,sp,32
+ 65a:	e40c                	sd	a1,8(s0)
+ 65c:	e810                	sd	a2,16(s0)
+ 65e:	ec14                	sd	a3,24(s0)
+ 660:	f018                	sd	a4,32(s0)
+ 662:	f41c                	sd	a5,40(s0)
+ 664:	03043823          	sd	a6,48(s0)
+ 668:	03143c23          	sd	a7,56(s0)
   va_list ap;
 
   va_start(ap, fmt);
- 694:	00840613          	addi	a2,s0,8
- 698:	fec43423          	sd	a2,-24(s0)
+ 66c:	00840613          	addi	a2,s0,8
+ 670:	fec43423          	sd	a2,-24(s0)
   vprintf(1, fmt, ap);
- 69c:	85aa                	mv	a1,a0
- 69e:	4505                	li	a0,1
- 6a0:	00000097          	auipc	ra,0x0
- 6a4:	dce080e7          	jalr	-562(ra) # 46e <vprintf>
+ 674:	85aa                	mv	a1,a0
+ 676:	4505                	li	a0,1
+ 678:	00000097          	auipc	ra,0x0
+ 67c:	dce080e7          	jalr	-562(ra) # 446 <vprintf>
 }
- 6a8:	60e2                	ld	ra,24(sp)
- 6aa:	6442                	ld	s0,16(sp)
- 6ac:	6125                	addi	sp,sp,96
- 6ae:	8082                	ret
+ 680:	60e2                	ld	ra,24(sp)
+ 682:	6442                	ld	s0,16(sp)
+ 684:	6125                	addi	sp,sp,96
+ 686:	8082                	ret
 
-00000000000006b0 <free>:
+0000000000000688 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 6b0:	1141                	addi	sp,sp,-16
- 6b2:	e422                	sd	s0,8(sp)
- 6b4:	0800                	addi	s0,sp,16
+ 688:	1141                	addi	sp,sp,-16
+ 68a:	e422                	sd	s0,8(sp)
+ 68c:	0800                	addi	s0,sp,16
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
- 6b6:	ff050693          	addi	a3,a0,-16
+ 68e:	ff050693          	addi	a3,a0,-16
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6ba:	00000797          	auipc	a5,0x0
- 6be:	19e7b783          	ld	a5,414(a5) # 858 <freep>
- 6c2:	a805                	j	6f2 <free+0x42>
+ 692:	00000797          	auipc	a5,0x0
+ 696:	19e7b783          	ld	a5,414(a5) # 830 <freep>
+ 69a:	a805                	j	6ca <free+0x42>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
       break;
   if(bp + bp->s.size == p->s.ptr){
     bp->s.size += p->s.ptr->s.size;
- 6c4:	4618                	lw	a4,8(a2)
- 6c6:	9db9                	addw	a1,a1,a4
- 6c8:	feb52c23          	sw	a1,-8(a0)
+ 69c:	4618                	lw	a4,8(a2)
+ 69e:	9db9                	addw	a1,a1,a4
+ 6a0:	feb52c23          	sw	a1,-8(a0)
     bp->s.ptr = p->s.ptr->s.ptr;
- 6cc:	6398                	ld	a4,0(a5)
- 6ce:	6318                	ld	a4,0(a4)
- 6d0:	fee53823          	sd	a4,-16(a0)
- 6d4:	a091                	j	718 <free+0x68>
+ 6a4:	6398                	ld	a4,0(a5)
+ 6a6:	6318                	ld	a4,0(a4)
+ 6a8:	fee53823          	sd	a4,-16(a0)
+ 6ac:	a091                	j	6f0 <free+0x68>
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
     p->s.size += bp->s.size;
- 6d6:	ff852703          	lw	a4,-8(a0)
- 6da:	9e39                	addw	a2,a2,a4
- 6dc:	c790                	sw	a2,8(a5)
+ 6ae:	ff852703          	lw	a4,-8(a0)
+ 6b2:	9e39                	addw	a2,a2,a4
+ 6b4:	c790                	sw	a2,8(a5)
     p->s.ptr = bp->s.ptr;
- 6de:	ff053703          	ld	a4,-16(a0)
- 6e2:	e398                	sd	a4,0(a5)
- 6e4:	a099                	j	72a <free+0x7a>
+ 6b6:	ff053703          	ld	a4,-16(a0)
+ 6ba:	e398                	sd	a4,0(a5)
+ 6bc:	a099                	j	702 <free+0x7a>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6e6:	6398                	ld	a4,0(a5)
- 6e8:	00e7e463          	bltu	a5,a4,6f0 <free+0x40>
- 6ec:	00e6ea63          	bltu	a3,a4,700 <free+0x50>
+ 6be:	6398                	ld	a4,0(a5)
+ 6c0:	00e7e463          	bltu	a5,a4,6c8 <free+0x40>
+ 6c4:	00e6ea63          	bltu	a3,a4,6d8 <free+0x50>
 {
- 6f0:	87ba                	mv	a5,a4
+ 6c8:	87ba                	mv	a5,a4
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6f2:	fed7fae3          	bgeu	a5,a3,6e6 <free+0x36>
- 6f6:	6398                	ld	a4,0(a5)
- 6f8:	00e6e463          	bltu	a3,a4,700 <free+0x50>
+ 6ca:	fed7fae3          	bgeu	a5,a3,6be <free+0x36>
+ 6ce:	6398                	ld	a4,0(a5)
+ 6d0:	00e6e463          	bltu	a3,a4,6d8 <free+0x50>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6fc:	fee7eae3          	bltu	a5,a4,6f0 <free+0x40>
+ 6d4:	fee7eae3          	bltu	a5,a4,6c8 <free+0x40>
   if(bp + bp->s.size == p->s.ptr){
- 700:	ff852583          	lw	a1,-8(a0)
- 704:	6390                	ld	a2,0(a5)
- 706:	02059713          	slli	a4,a1,0x20
- 70a:	9301                	srli	a4,a4,0x20
- 70c:	0712                	slli	a4,a4,0x4
- 70e:	9736                	add	a4,a4,a3
- 710:	fae60ae3          	beq	a2,a4,6c4 <free+0x14>
+ 6d8:	ff852583          	lw	a1,-8(a0)
+ 6dc:	6390                	ld	a2,0(a5)
+ 6de:	02059713          	slli	a4,a1,0x20
+ 6e2:	9301                	srli	a4,a4,0x20
+ 6e4:	0712                	slli	a4,a4,0x4
+ 6e6:	9736                	add	a4,a4,a3
+ 6e8:	fae60ae3          	beq	a2,a4,69c <free+0x14>
     bp->s.ptr = p->s.ptr;
- 714:	fec53823          	sd	a2,-16(a0)
+ 6ec:	fec53823          	sd	a2,-16(a0)
   if(p + p->s.size == bp){
- 718:	4790                	lw	a2,8(a5)
- 71a:	02061713          	slli	a4,a2,0x20
- 71e:	9301                	srli	a4,a4,0x20
- 720:	0712                	slli	a4,a4,0x4
- 722:	973e                	add	a4,a4,a5
- 724:	fae689e3          	beq	a3,a4,6d6 <free+0x26>
+ 6f0:	4790                	lw	a2,8(a5)
+ 6f2:	02061713          	slli	a4,a2,0x20
+ 6f6:	9301                	srli	a4,a4,0x20
+ 6f8:	0712                	slli	a4,a4,0x4
+ 6fa:	973e                	add	a4,a4,a5
+ 6fc:	fae689e3          	beq	a3,a4,6ae <free+0x26>
   } else
     p->s.ptr = bp;
- 728:	e394                	sd	a3,0(a5)
+ 700:	e394                	sd	a3,0(a5)
   freep = p;
- 72a:	00000717          	auipc	a4,0x0
- 72e:	12f73723          	sd	a5,302(a4) # 858 <freep>
+ 702:	00000717          	auipc	a4,0x0
+ 706:	12f73723          	sd	a5,302(a4) # 830 <freep>
 }
- 732:	6422                	ld	s0,8(sp)
- 734:	0141                	addi	sp,sp,16
- 736:	8082                	ret
+ 70a:	6422                	ld	s0,8(sp)
+ 70c:	0141                	addi	sp,sp,16
+ 70e:	8082                	ret
 
-0000000000000738 <malloc>:
+0000000000000710 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 738:	7139                	addi	sp,sp,-64
- 73a:	fc06                	sd	ra,56(sp)
- 73c:	f822                	sd	s0,48(sp)
- 73e:	f426                	sd	s1,40(sp)
- 740:	f04a                	sd	s2,32(sp)
- 742:	ec4e                	sd	s3,24(sp)
- 744:	e852                	sd	s4,16(sp)
- 746:	e456                	sd	s5,8(sp)
- 748:	e05a                	sd	s6,0(sp)
- 74a:	0080                	addi	s0,sp,64
+ 710:	7139                	addi	sp,sp,-64
+ 712:	fc06                	sd	ra,56(sp)
+ 714:	f822                	sd	s0,48(sp)
+ 716:	f426                	sd	s1,40(sp)
+ 718:	f04a                	sd	s2,32(sp)
+ 71a:	ec4e                	sd	s3,24(sp)
+ 71c:	e852                	sd	s4,16(sp)
+ 71e:	e456                	sd	s5,8(sp)
+ 720:	e05a                	sd	s6,0(sp)
+ 722:	0080                	addi	s0,sp,64
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 74c:	02051493          	slli	s1,a0,0x20
- 750:	9081                	srli	s1,s1,0x20
- 752:	04bd                	addi	s1,s1,15
- 754:	8091                	srli	s1,s1,0x4
- 756:	0014899b          	addiw	s3,s1,1
- 75a:	0485                	addi	s1,s1,1
+ 724:	02051493          	slli	s1,a0,0x20
+ 728:	9081                	srli	s1,s1,0x20
+ 72a:	04bd                	addi	s1,s1,15
+ 72c:	8091                	srli	s1,s1,0x4
+ 72e:	0014899b          	addiw	s3,s1,1
+ 732:	0485                	addi	s1,s1,1
   if((prevp = freep) == 0){
- 75c:	00000517          	auipc	a0,0x0
- 760:	0fc53503          	ld	a0,252(a0) # 858 <freep>
- 764:	c515                	beqz	a0,790 <malloc+0x58>
+ 734:	00000517          	auipc	a0,0x0
+ 738:	0fc53503          	ld	a0,252(a0) # 830 <freep>
+ 73c:	c515                	beqz	a0,768 <malloc+0x58>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 766:	611c                	ld	a5,0(a0)
+ 73e:	611c                	ld	a5,0(a0)
     if(p->s.size >= nunits){
- 768:	4798                	lw	a4,8(a5)
- 76a:	02977f63          	bgeu	a4,s1,7a8 <malloc+0x70>
- 76e:	8a4e                	mv	s4,s3
- 770:	0009871b          	sext.w	a4,s3
- 774:	6685                	lui	a3,0x1
- 776:	00d77363          	bgeu	a4,a3,77c <malloc+0x44>
- 77a:	6a05                	lui	s4,0x1
- 77c:	000a0b1b          	sext.w	s6,s4
+ 740:	4798                	lw	a4,8(a5)
+ 742:	02977f63          	bgeu	a4,s1,780 <malloc+0x70>
+ 746:	8a4e                	mv	s4,s3
+ 748:	0009871b          	sext.w	a4,s3
+ 74c:	6685                	lui	a3,0x1
+ 74e:	00d77363          	bgeu	a4,a3,754 <malloc+0x44>
+ 752:	6a05                	lui	s4,0x1
+ 754:	000a0b1b          	sext.w	s6,s4
   p = sbrk(nu * sizeof(Header));
- 780:	004a1a1b          	slliw	s4,s4,0x4
+ 758:	004a1a1b          	slliw	s4,s4,0x4
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 784:	00000917          	auipc	s2,0x0
- 788:	0d490913          	addi	s2,s2,212 # 858 <freep>
+ 75c:	00000917          	auipc	s2,0x0
+ 760:	0d490913          	addi	s2,s2,212 # 830 <freep>
   if(p == (char*)-1)
- 78c:	5afd                	li	s5,-1
- 78e:	a88d                	j	800 <malloc+0xc8>
+ 764:	5afd                	li	s5,-1
+ 766:	a88d                	j	7d8 <malloc+0xc8>
     base.s.ptr = freep = prevp = &base;
- 790:	00000797          	auipc	a5,0x0
- 794:	0d078793          	addi	a5,a5,208 # 860 <base>
- 798:	00000717          	auipc	a4,0x0
- 79c:	0cf73023          	sd	a5,192(a4) # 858 <freep>
- 7a0:	e39c                	sd	a5,0(a5)
+ 768:	00000797          	auipc	a5,0x0
+ 76c:	0d078793          	addi	a5,a5,208 # 838 <base>
+ 770:	00000717          	auipc	a4,0x0
+ 774:	0cf73023          	sd	a5,192(a4) # 830 <freep>
+ 778:	e39c                	sd	a5,0(a5)
     base.s.size = 0;
- 7a2:	0007a423          	sw	zero,8(a5)
+ 77a:	0007a423          	sw	zero,8(a5)
     if(p->s.size >= nunits){
- 7a6:	b7e1                	j	76e <malloc+0x36>
+ 77e:	b7e1                	j	746 <malloc+0x36>
       if(p->s.size == nunits)
- 7a8:	02e48b63          	beq	s1,a4,7de <malloc+0xa6>
+ 780:	02e48b63          	beq	s1,a4,7b6 <malloc+0xa6>
         p->s.size -= nunits;
- 7ac:	4137073b          	subw	a4,a4,s3
- 7b0:	c798                	sw	a4,8(a5)
+ 784:	4137073b          	subw	a4,a4,s3
+ 788:	c798                	sw	a4,8(a5)
         p += p->s.size;
- 7b2:	1702                	slli	a4,a4,0x20
- 7b4:	9301                	srli	a4,a4,0x20
- 7b6:	0712                	slli	a4,a4,0x4
- 7b8:	97ba                	add	a5,a5,a4
+ 78a:	1702                	slli	a4,a4,0x20
+ 78c:	9301                	srli	a4,a4,0x20
+ 78e:	0712                	slli	a4,a4,0x4
+ 790:	97ba                	add	a5,a5,a4
         p->s.size = nunits;
- 7ba:	0137a423          	sw	s3,8(a5)
+ 792:	0137a423          	sw	s3,8(a5)
       freep = prevp;
- 7be:	00000717          	auipc	a4,0x0
- 7c2:	08a73d23          	sd	a0,154(a4) # 858 <freep>
+ 796:	00000717          	auipc	a4,0x0
+ 79a:	08a73d23          	sd	a0,154(a4) # 830 <freep>
       return (void*)(p + 1);
- 7c6:	01078513          	addi	a0,a5,16
+ 79e:	01078513          	addi	a0,a5,16
       if((p = morecore(nunits)) == 0)
         return 0;
   }
 }
- 7ca:	70e2                	ld	ra,56(sp)
- 7cc:	7442                	ld	s0,48(sp)
- 7ce:	74a2                	ld	s1,40(sp)
- 7d0:	7902                	ld	s2,32(sp)
- 7d2:	69e2                	ld	s3,24(sp)
- 7d4:	6a42                	ld	s4,16(sp)
- 7d6:	6aa2                	ld	s5,8(sp)
- 7d8:	6b02                	ld	s6,0(sp)
- 7da:	6121                	addi	sp,sp,64
- 7dc:	8082                	ret
+ 7a2:	70e2                	ld	ra,56(sp)
+ 7a4:	7442                	ld	s0,48(sp)
+ 7a6:	74a2                	ld	s1,40(sp)
+ 7a8:	7902                	ld	s2,32(sp)
+ 7aa:	69e2                	ld	s3,24(sp)
+ 7ac:	6a42                	ld	s4,16(sp)
+ 7ae:	6aa2                	ld	s5,8(sp)
+ 7b0:	6b02                	ld	s6,0(sp)
+ 7b2:	6121                	addi	sp,sp,64
+ 7b4:	8082                	ret
         prevp->s.ptr = p->s.ptr;
- 7de:	6398                	ld	a4,0(a5)
- 7e0:	e118                	sd	a4,0(a0)
- 7e2:	bff1                	j	7be <malloc+0x86>
+ 7b6:	6398                	ld	a4,0(a5)
+ 7b8:	e118                	sd	a4,0(a0)
+ 7ba:	bff1                	j	796 <malloc+0x86>
   hp->s.size = nu;
- 7e4:	01652423          	sw	s6,8(a0)
+ 7bc:	01652423          	sw	s6,8(a0)
   free((void*)(hp + 1));
- 7e8:	0541                	addi	a0,a0,16
- 7ea:	00000097          	auipc	ra,0x0
- 7ee:	ec6080e7          	jalr	-314(ra) # 6b0 <free>
+ 7c0:	0541                	addi	a0,a0,16
+ 7c2:	00000097          	auipc	ra,0x0
+ 7c6:	ec6080e7          	jalr	-314(ra) # 688 <free>
   return freep;
- 7f2:	00093503          	ld	a0,0(s2)
+ 7ca:	00093503          	ld	a0,0(s2)
       if((p = morecore(nunits)) == 0)
- 7f6:	d971                	beqz	a0,7ca <malloc+0x92>
+ 7ce:	d971                	beqz	a0,7a2 <malloc+0x92>
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7f8:	611c                	ld	a5,0(a0)
+ 7d0:	611c                	ld	a5,0(a0)
     if(p->s.size >= nunits){
- 7fa:	4798                	lw	a4,8(a5)
- 7fc:	fa9776e3          	bgeu	a4,s1,7a8 <malloc+0x70>
+ 7d2:	4798                	lw	a4,8(a5)
+ 7d4:	fa9776e3          	bgeu	a4,s1,780 <malloc+0x70>
     if(p == freep)
- 800:	00093703          	ld	a4,0(s2)
- 804:	853e                	mv	a0,a5
- 806:	fef719e3          	bne	a4,a5,7f8 <malloc+0xc0>
+ 7d8:	00093703          	ld	a4,0(s2)
+ 7dc:	853e                	mv	a0,a5
+ 7de:	fef719e3          	bne	a4,a5,7d0 <malloc+0xc0>
   p = sbrk(nu * sizeof(Header));
- 80a:	8552                	mv	a0,s4
- 80c:	00000097          	auipc	ra,0x0
- 810:	b56080e7          	jalr	-1194(ra) # 362 <sbrk>
+ 7e2:	8552                	mv	a0,s4
+ 7e4:	00000097          	auipc	ra,0x0
+ 7e8:	b7e080e7          	jalr	-1154(ra) # 362 <sbrk>
   if(p == (char*)-1)
- 814:	fd5518e3          	bne	a0,s5,7e4 <malloc+0xac>
+ 7ec:	fd5518e3          	bne	a0,s5,7bc <malloc+0xac>
         return 0;
- 818:	4501                	li	a0,0
- 81a:	bf45                	j	7ca <malloc+0x92>
+ 7f0:	4501                	li	a0,0
+ 7f2:	bf45                	j	7a2 <malloc+0x92>
diff --git a/user/kill.o b/user/kill.o
index 0e33b88..f69f326 100644
Binary files a/user/kill.o and b/user/kill.o differ
diff --git a/user/kill.sym b/user/kill.sym
index d1abffd..9751ca3 100644
--- a/user/kill.sym
+++ b/user/kill.sym
@@ -1,7 +1,7 @@
 0000000000000000 .text
-0000000000000820 .rodata
-0000000000000858 .sbss
-0000000000000860 .bss
+00000000000007f8 .rodata
+0000000000000830 .sbss
+0000000000000838 .bss
 0000000000000000 .comment
 0000000000000000 .debug_aranges
 0000000000000000 .debug_info
@@ -14,53 +14,48 @@
 0000000000000000 kill.c
 0000000000000000 ulib.c
 0000000000000000 printf.c
-00000000000003a2 putc
-00000000000003c4 printint
-0000000000000840 digits
+000000000000037a putc
+000000000000039c printint
+0000000000000818 digits
 0000000000000000 umalloc.c
-0000000000000858 freep
-0000000000000860 base
+0000000000000830 freep
+0000000000000838 base
 0000000000000064 strcpy
-000000000000067a printf
-0000000000001051 __global_pointer$
+0000000000000652 printf
+0000000000001029 __global_pointer$
 0000000000000224 memmove
 0000000000000322 mknod
 0000000000000120 gets
-0000000000000851 __SDATA_BEGIN__
+0000000000000829 __SDATA_BEGIN__
 000000000000035a getpid
 00000000000002ba memcpy
-000000000000038a print_stats
-0000000000000738 malloc
+0000000000000710 malloc
 000000000000036a sleep
 00000000000002ea pipe
 00000000000002fa write
 0000000000000332 fstat
-000000000000064c fprintf
+0000000000000624 fprintf
 000000000000030a kill
-000000000000046e vprintf
+0000000000000446 vprintf
 000000000000034a chdir
-000000000000037a pause_system
 0000000000000312 exec
 00000000000002e2 wait
 00000000000002f2 read
 000000000000032a unlink
-000000000000039a set_cpu
-0000000000000392 get_cpu
 0000000000000280 memcmp
 00000000000002d2 fork
-0000000000000382 kill_system
-0000000000000870 __BSS_END__
+0000000000000848 __BSS_END__
 0000000000000362 sbrk
 0000000000000372 uptime
-0000000000000851 __bss_start
+0000000000000829 __bss_start
 00000000000000d6 memset
 0000000000000000 main
 0000000000000080 strcmp
 0000000000000352 dup
-0000000000000851 __DATA_BEGIN__
+0000000000000829 __DATA_BEGIN__
 0000000000000194 stat
-0000000000000851 _edata
-0000000000000870 _end
+0000000000000829 _edata
+0000000000000848 _end
 000000000000033a link
 00000000000002da exit
 00000000000001da atoi
@@ -69,4 +64,4 @@
 00000000000000fc strchr
 0000000000000342 mkdir
 0000000000000302 close
-00000000000006b0 free
+0000000000000688 free
diff --git a/user/ln.asm b/user/ln.asm
index b867199..1e54749 100644
--- a/user/ln.asm
+++ b/user/ln.asm
@@ -20,11 +20,11 @@ main(int argc, char *argv[])
    a:	478d                	li	a5,3
    c:	02f50063          	beq	a0,a5,2c <main+0x2c>
     fprintf(2, "Usage: ln old new\n");
-  10:	00001597          	auipc	a1,0x1
-  14:	80858593          	addi	a1,a1,-2040 # 818 <malloc+0xe4>
+  10:	00000597          	auipc	a1,0x0
+  14:	7e058593          	addi	a1,a1,2016 # 7f0 <malloc+0xe4>
   18:	4509                	li	a0,2
   1a:	00000097          	auipc	ra,0x0
-  1e:	62e080e7          	jalr	1582(ra) # 648 <fprintf>
+  1e:	606080e7          	jalr	1542(ra) # 620 <fprintf>
     exit(1);
   22:	4505                	li	a0,1
   24:	00000097          	auipc	ra,0x0
@@ -46,10 +46,10 @@ main(int argc, char *argv[])
   48:	6894                	ld	a3,16(s1)
   4a:	6490                	ld	a2,8(s1)
   4c:	00000597          	auipc	a1,0x0
-  50:	7e458593          	addi	a1,a1,2020 # 830 <malloc+0xfc>
+  50:	7bc58593          	addi	a1,a1,1980 # 808 <malloc+0xfc>
   54:	4509                	li	a0,2
   56:	00000097          	auipc	ra,0x0
-  5a:	5f2080e7          	jalr	1522(ra) # 648 <fprintf>
+  5a:	5ca080e7          	jalr	1482(ra) # 620 <fprintf>
   5e:	b7c5                	j	3e <main+0x3e>
 
 0000000000000060 <strcpy>:
@@ -689,696 +689,646 @@ uptime:
  ret
  374:	8082                	ret
 
-0000000000000376 <pause_system>:
-.global pause_system
-pause_system:
- li a7, SYS_pause_system
- 376:	48d9                	li	a7,22
- ecall
- 378:	00000073          	ecall
- ret
- 37c:	8082                	ret
-
-000000000000037e <kill_system>:
-.global kill_system
-kill_system:
- li a7, SYS_kill_system
- 37e:	48dd                	li	a7,23
- ecall
- 380:	00000073          	ecall
- ret
- 384:	8082                	ret
-
-0000000000000386 <print_stats>:
-.global print_stats
-print_stats:
- li a7, SYS_print_stats
- 386:	48e1                	li	a7,24
- ecall
- 388:	00000073          	ecall
- ret
- 38c:	8082                	ret
-
-000000000000038e <get_cpu>:
-.global get_cpu
-get_cpu:
- li a7, SYS_get_cpu
- 38e:	48e5                	li	a7,25
- ecall
- 390:	00000073          	ecall
- ret
- 394:	8082                	ret
-
-0000000000000396 <set_cpu>:
-.global set_cpu
-set_cpu:
- li a7, SYS_set_cpu
- 396:	48e9                	li	a7,26
- ecall
- 398:	00000073          	ecall
- ret
- 39c:	8082                	ret
-
-000000000000039e <putc>:
+0000000000000376 <putc>:
 
 static char digits[] = "0123456789ABCDEF";
 
 static void
 putc(int fd, char c)
 {
- 39e:	1101                	addi	sp,sp,-32
- 3a0:	ec06                	sd	ra,24(sp)
- 3a2:	e822                	sd	s0,16(sp)
- 3a4:	1000                	addi	s0,sp,32
- 3a6:	feb407a3          	sb	a1,-17(s0)
+ 376:	1101                	addi	sp,sp,-32
+ 378:	ec06                	sd	ra,24(sp)
+ 37a:	e822                	sd	s0,16(sp)
+ 37c:	1000                	addi	s0,sp,32
+ 37e:	feb407a3          	sb	a1,-17(s0)
   write(fd, &c, 1);
- 3aa:	4605                	li	a2,1
- 3ac:	fef40593          	addi	a1,s0,-17
- 3b0:	00000097          	auipc	ra,0x0
- 3b4:	f46080e7          	jalr	-186(ra) # 2f6 <write>
+ 382:	4605                	li	a2,1
+ 384:	fef40593          	addi	a1,s0,-17
+ 388:	00000097          	auipc	ra,0x0
+ 38c:	f6e080e7          	jalr	-146(ra) # 2f6 <write>
 }
- 3b8:	60e2                	ld	ra,24(sp)
- 3ba:	6442                	ld	s0,16(sp)
- 3bc:	6105                	addi	sp,sp,32
- 3be:	8082                	ret
+ 390:	60e2                	ld	ra,24(sp)
+ 392:	6442                	ld	s0,16(sp)
+ 394:	6105                	addi	sp,sp,32
+ 396:	8082                	ret
 
-00000000000003c0 <printint>:
+0000000000000398 <printint>:
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 3c0:	7139                	addi	sp,sp,-64
- 3c2:	fc06                	sd	ra,56(sp)
- 3c4:	f822                	sd	s0,48(sp)
- 3c6:	f426                	sd	s1,40(sp)
- 3c8:	f04a                	sd	s2,32(sp)
- 3ca:	ec4e                	sd	s3,24(sp)
- 3cc:	0080                	addi	s0,sp,64
- 3ce:	84aa                	mv	s1,a0
+ 398:	7139                	addi	sp,sp,-64
+ 39a:	fc06                	sd	ra,56(sp)
+ 39c:	f822                	sd	s0,48(sp)
+ 39e:	f426                	sd	s1,40(sp)
+ 3a0:	f04a                	sd	s2,32(sp)
+ 3a2:	ec4e                	sd	s3,24(sp)
+ 3a4:	0080                	addi	s0,sp,64
+ 3a6:	84aa                	mv	s1,a0
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 3d0:	c299                	beqz	a3,3d6 <printint+0x16>
- 3d2:	0805c863          	bltz	a1,462 <printint+0xa2>
+ 3a8:	c299                	beqz	a3,3ae <printint+0x16>
+ 3aa:	0805c863          	bltz	a1,43a <printint+0xa2>
     neg = 1;
     x = -xx;
   } else {
     x = xx;
- 3d6:	2581                	sext.w	a1,a1
+ 3ae:	2581                	sext.w	a1,a1
   neg = 0;
- 3d8:	4881                	li	a7,0
- 3da:	fc040693          	addi	a3,s0,-64
+ 3b0:	4881                	li	a7,0
+ 3b2:	fc040693          	addi	a3,s0,-64
   }
 
   i = 0;
- 3de:	4701                	li	a4,0
+ 3b6:	4701                	li	a4,0
   do{
     buf[i++] = digits[x % base];
- 3e0:	2601                	sext.w	a2,a2
- 3e2:	00000517          	auipc	a0,0x0
- 3e6:	46e50513          	addi	a0,a0,1134 # 850 <digits>
- 3ea:	883a                	mv	a6,a4
- 3ec:	2705                	addiw	a4,a4,1
- 3ee:	02c5f7bb          	remuw	a5,a1,a2
- 3f2:	1782                	slli	a5,a5,0x20
- 3f4:	9381                	srli	a5,a5,0x20
- 3f6:	97aa                	add	a5,a5,a0
- 3f8:	0007c783          	lbu	a5,0(a5)
- 3fc:	00f68023          	sb	a5,0(a3)
+ 3b8:	2601                	sext.w	a2,a2
+ 3ba:	00000517          	auipc	a0,0x0
+ 3be:	46e50513          	addi	a0,a0,1134 # 828 <digits>
+ 3c2:	883a                	mv	a6,a4
+ 3c4:	2705                	addiw	a4,a4,1
+ 3c6:	02c5f7bb          	remuw	a5,a1,a2
+ 3ca:	1782                	slli	a5,a5,0x20
+ 3cc:	9381                	srli	a5,a5,0x20
+ 3ce:	97aa                	add	a5,a5,a0
+ 3d0:	0007c783          	lbu	a5,0(a5)
+ 3d4:	00f68023          	sb	a5,0(a3)
   }while((x /= base) != 0);
- 400:	0005879b          	sext.w	a5,a1
- 404:	02c5d5bb          	divuw	a1,a1,a2
- 408:	0685                	addi	a3,a3,1
- 40a:	fec7f0e3          	bgeu	a5,a2,3ea <printint+0x2a>
+ 3d8:	0005879b          	sext.w	a5,a1
+ 3dc:	02c5d5bb          	divuw	a1,a1,a2
+ 3e0:	0685                	addi	a3,a3,1
+ 3e2:	fec7f0e3          	bgeu	a5,a2,3c2 <printint+0x2a>
   if(neg)
- 40e:	00088b63          	beqz	a7,424 <printint+0x64>
+ 3e6:	00088b63          	beqz	a7,3fc <printint+0x64>
     buf[i++] = '-';
- 412:	fd040793          	addi	a5,s0,-48
- 416:	973e                	add	a4,a4,a5
- 418:	02d00793          	li	a5,45
- 41c:	fef70823          	sb	a5,-16(a4)
- 420:	0028071b          	addiw	a4,a6,2
+ 3ea:	fd040793          	addi	a5,s0,-48
+ 3ee:	973e                	add	a4,a4,a5
+ 3f0:	02d00793          	li	a5,45
+ 3f4:	fef70823          	sb	a5,-16(a4)
+ 3f8:	0028071b          	addiw	a4,a6,2
 
   while(--i >= 0)
- 424:	02e05863          	blez	a4,454 <printint+0x94>
- 428:	fc040793          	addi	a5,s0,-64
- 42c:	00e78933          	add	s2,a5,a4
- 430:	fff78993          	addi	s3,a5,-1
- 434:	99ba                	add	s3,s3,a4
- 436:	377d                	addiw	a4,a4,-1
- 438:	1702                	slli	a4,a4,0x20
- 43a:	9301                	srli	a4,a4,0x20
- 43c:	40e989b3          	sub	s3,s3,a4
+ 3fc:	02e05863          	blez	a4,42c <printint+0x94>
+ 400:	fc040793          	addi	a5,s0,-64
+ 404:	00e78933          	add	s2,a5,a4
+ 408:	fff78993          	addi	s3,a5,-1
+ 40c:	99ba                	add	s3,s3,a4
+ 40e:	377d                	addiw	a4,a4,-1
+ 410:	1702                	slli	a4,a4,0x20
+ 412:	9301                	srli	a4,a4,0x20
+ 414:	40e989b3          	sub	s3,s3,a4
     putc(fd, buf[i]);
- 440:	fff94583          	lbu	a1,-1(s2)
- 444:	8526                	mv	a0,s1
- 446:	00000097          	auipc	ra,0x0
- 44a:	f58080e7          	jalr	-168(ra) # 39e <putc>
+ 418:	fff94583          	lbu	a1,-1(s2)
+ 41c:	8526                	mv	a0,s1
+ 41e:	00000097          	auipc	ra,0x0
+ 422:	f58080e7          	jalr	-168(ra) # 376 <putc>
   while(--i >= 0)
- 44e:	197d                	addi	s2,s2,-1
- 450:	ff3918e3          	bne	s2,s3,440 <printint+0x80>
+ 426:	197d                	addi	s2,s2,-1
+ 428:	ff3918e3          	bne	s2,s3,418 <printint+0x80>
 }
- 454:	70e2                	ld	ra,56(sp)
- 456:	7442                	ld	s0,48(sp)
- 458:	74a2                	ld	s1,40(sp)
- 45a:	7902                	ld	s2,32(sp)
- 45c:	69e2                	ld	s3,24(sp)
- 45e:	6121                	addi	sp,sp,64
- 460:	8082                	ret
+ 42c:	70e2                	ld	ra,56(sp)
+ 42e:	7442                	ld	s0,48(sp)
+ 430:	74a2                	ld	s1,40(sp)
+ 432:	7902                	ld	s2,32(sp)
+ 434:	69e2                	ld	s3,24(sp)
+ 436:	6121                	addi	sp,sp,64
+ 438:	8082                	ret
     x = -xx;
- 462:	40b005bb          	negw	a1,a1
+ 43a:	40b005bb          	negw	a1,a1
     neg = 1;
- 466:	4885                	li	a7,1
+ 43e:	4885                	li	a7,1
     x = -xx;
- 468:	bf8d                	j	3da <printint+0x1a>
+ 440:	bf8d                	j	3b2 <printint+0x1a>
 
-000000000000046a <vprintf>:
+0000000000000442 <vprintf>:
 }
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 vprintf(int fd, const char *fmt, va_list ap)
 {
- 46a:	7119                	addi	sp,sp,-128
- 46c:	fc86                	sd	ra,120(sp)
- 46e:	f8a2                	sd	s0,112(sp)
- 470:	f4a6                	sd	s1,104(sp)
- 472:	f0ca                	sd	s2,96(sp)
- 474:	ecce                	sd	s3,88(sp)
- 476:	e8d2                	sd	s4,80(sp)
- 478:	e4d6                	sd	s5,72(sp)
- 47a:	e0da                	sd	s6,64(sp)
- 47c:	fc5e                	sd	s7,56(sp)
- 47e:	f862                	sd	s8,48(sp)
- 480:	f466                	sd	s9,40(sp)
- 482:	f06a                	sd	s10,32(sp)
- 484:	ec6e                	sd	s11,24(sp)
- 486:	0100                	addi	s0,sp,128
+ 442:	7119                	addi	sp,sp,-128
+ 444:	fc86                	sd	ra,120(sp)
+ 446:	f8a2                	sd	s0,112(sp)
+ 448:	f4a6                	sd	s1,104(sp)
+ 44a:	f0ca                	sd	s2,96(sp)
+ 44c:	ecce                	sd	s3,88(sp)
+ 44e:	e8d2                	sd	s4,80(sp)
+ 450:	e4d6                	sd	s5,72(sp)
+ 452:	e0da                	sd	s6,64(sp)
+ 454:	fc5e                	sd	s7,56(sp)
+ 456:	f862                	sd	s8,48(sp)
+ 458:	f466                	sd	s9,40(sp)
+ 45a:	f06a                	sd	s10,32(sp)
+ 45c:	ec6e                	sd	s11,24(sp)
+ 45e:	0100                	addi	s0,sp,128
   char *s;
   int c, i, state;
 
   state = 0;
   for(i = 0; fmt[i]; i++){
- 488:	0005c903          	lbu	s2,0(a1)
- 48c:	18090f63          	beqz	s2,62a <vprintf+0x1c0>
- 490:	8aaa                	mv	s5,a0
- 492:	8b32                	mv	s6,a2
- 494:	00158493          	addi	s1,a1,1
+ 460:	0005c903          	lbu	s2,0(a1)
+ 464:	18090f63          	beqz	s2,602 <vprintf+0x1c0>
+ 468:	8aaa                	mv	s5,a0
+ 46a:	8b32                	mv	s6,a2
+ 46c:	00158493          	addi	s1,a1,1
   state = 0;
- 498:	4981                	li	s3,0
+ 470:	4981                	li	s3,0
       if(c == '%'){
         state = '%';
       } else {
         putc(fd, c);
       }
     } else if(state == '%'){
- 49a:	02500a13          	li	s4,37
+ 472:	02500a13          	li	s4,37
       if(c == 'd'){
- 49e:	06400c13          	li	s8,100
+ 476:	06400c13          	li	s8,100
         printint(fd, va_arg(ap, int), 10, 1);
       } else if(c == 'l') {
- 4a2:	06c00c93          	li	s9,108
+ 47a:	06c00c93          	li	s9,108
         printint(fd, va_arg(ap, uint64), 10, 0);
       } else if(c == 'x') {
- 4a6:	07800d13          	li	s10,120
+ 47e:	07800d13          	li	s10,120
         printint(fd, va_arg(ap, int), 16, 0);
       } else if(c == 'p') {
- 4aa:	07000d93          	li	s11,112
+ 482:	07000d93          	li	s11,112
     putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
- 4ae:	00000b97          	auipc	s7,0x0
- 4b2:	3a2b8b93          	addi	s7,s7,930 # 850 <digits>
- 4b6:	a839                	j	4d4 <vprintf+0x6a>
+ 486:	00000b97          	auipc	s7,0x0
+ 48a:	3a2b8b93          	addi	s7,s7,930 # 828 <digits>
+ 48e:	a839                	j	4ac <vprintf+0x6a>
         putc(fd, c);
- 4b8:	85ca                	mv	a1,s2
- 4ba:	8556                	mv	a0,s5
- 4bc:	00000097          	auipc	ra,0x0
- 4c0:	ee2080e7          	jalr	-286(ra) # 39e <putc>
- 4c4:	a019                	j	4ca <vprintf+0x60>
+ 490:	85ca                	mv	a1,s2
+ 492:	8556                	mv	a0,s5
+ 494:	00000097          	auipc	ra,0x0
+ 498:	ee2080e7          	jalr	-286(ra) # 376 <putc>
+ 49c:	a019                	j	4a2 <vprintf+0x60>
     } else if(state == '%'){
- 4c6:	01498f63          	beq	s3,s4,4e4 <vprintf+0x7a>
+ 49e:	01498f63          	beq	s3,s4,4bc <vprintf+0x7a>
   for(i = 0; fmt[i]; i++){
- 4ca:	0485                	addi	s1,s1,1
- 4cc:	fff4c903          	lbu	s2,-1(s1)
- 4d0:	14090d63          	beqz	s2,62a <vprintf+0x1c0>
+ 4a2:	0485                	addi	s1,s1,1
+ 4a4:	fff4c903          	lbu	s2,-1(s1)
+ 4a8:	14090d63          	beqz	s2,602 <vprintf+0x1c0>
     c = fmt[i] & 0xff;
- 4d4:	0009079b          	sext.w	a5,s2
+ 4ac:	0009079b          	sext.w	a5,s2
     if(state == 0){
- 4d8:	fe0997e3          	bnez	s3,4c6 <vprintf+0x5c>
+ 4b0:	fe0997e3          	bnez	s3,49e <vprintf+0x5c>
       if(c == '%'){
- 4dc:	fd479ee3          	bne	a5,s4,4b8 <vprintf+0x4e>
+ 4b4:	fd479ee3          	bne	a5,s4,490 <vprintf+0x4e>
         state = '%';
- 4e0:	89be                	mv	s3,a5
- 4e2:	b7e5                	j	4ca <vprintf+0x60>
+ 4b8:	89be                	mv	s3,a5
+ 4ba:	b7e5                	j	4a2 <vprintf+0x60>
       if(c == 'd'){
- 4e4:	05878063          	beq	a5,s8,524 <vprintf+0xba>
+ 4bc:	05878063          	beq	a5,s8,4fc <vprintf+0xba>
       } else if(c == 'l') {
- 4e8:	05978c63          	beq	a5,s9,540 <vprintf+0xd6>
+ 4c0:	05978c63          	beq	a5,s9,518 <vprintf+0xd6>
       } else if(c == 'x') {
- 4ec:	07a78863          	beq	a5,s10,55c <vprintf+0xf2>
+ 4c4:	07a78863          	beq	a5,s10,534 <vprintf+0xf2>
       } else if(c == 'p') {
- 4f0:	09b78463          	beq	a5,s11,578 <vprintf+0x10e>
+ 4c8:	09b78463          	beq	a5,s11,550 <vprintf+0x10e>
         printptr(fd, va_arg(ap, uint64));
       } else if(c == 's'){
- 4f4:	07300713          	li	a4,115
- 4f8:	0ce78663          	beq	a5,a4,5c4 <vprintf+0x15a>
+ 4cc:	07300713          	li	a4,115
+ 4d0:	0ce78663          	beq	a5,a4,59c <vprintf+0x15a>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 4fc:	06300713          	li	a4,99
- 500:	0ee78e63          	beq	a5,a4,5fc <vprintf+0x192>
+ 4d4:	06300713          	li	a4,99
+ 4d8:	0ee78e63          	beq	a5,a4,5d4 <vprintf+0x192>
         putc(fd, va_arg(ap, uint));
       } else if(c == '%'){
- 504:	11478863          	beq	a5,s4,614 <vprintf+0x1aa>
+ 4dc:	11478863          	beq	a5,s4,5ec <vprintf+0x1aa>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
- 508:	85d2                	mv	a1,s4
- 50a:	8556                	mv	a0,s5
- 50c:	00000097          	auipc	ra,0x0
- 510:	e92080e7          	jalr	-366(ra) # 39e <putc>
+ 4e0:	85d2                	mv	a1,s4
+ 4e2:	8556                	mv	a0,s5
+ 4e4:	00000097          	auipc	ra,0x0
+ 4e8:	e92080e7          	jalr	-366(ra) # 376 <putc>
         putc(fd, c);
- 514:	85ca                	mv	a1,s2
- 516:	8556                	mv	a0,s5
- 518:	00000097          	auipc	ra,0x0
- 51c:	e86080e7          	jalr	-378(ra) # 39e <putc>
+ 4ec:	85ca                	mv	a1,s2
+ 4ee:	8556                	mv	a0,s5
+ 4f0:	00000097          	auipc	ra,0x0
+ 4f4:	e86080e7          	jalr	-378(ra) # 376 <putc>
       }
       state = 0;
- 520:	4981                	li	s3,0
- 522:	b765                	j	4ca <vprintf+0x60>
+ 4f8:	4981                	li	s3,0
+ 4fa:	b765                	j	4a2 <vprintf+0x60>
         printint(fd, va_arg(ap, int), 10, 1);
- 524:	008b0913          	addi	s2,s6,8
- 528:	4685                	li	a3,1
- 52a:	4629                	li	a2,10
- 52c:	000b2583          	lw	a1,0(s6)
- 530:	8556                	mv	a0,s5
- 532:	00000097          	auipc	ra,0x0
- 536:	e8e080e7          	jalr	-370(ra) # 3c0 <printint>
- 53a:	8b4a                	mv	s6,s2
+ 4fc:	008b0913          	addi	s2,s6,8
+ 500:	4685                	li	a3,1
+ 502:	4629                	li	a2,10
+ 504:	000b2583          	lw	a1,0(s6)
+ 508:	8556                	mv	a0,s5
+ 50a:	00000097          	auipc	ra,0x0
+ 50e:	e8e080e7          	jalr	-370(ra) # 398 <printint>
+ 512:	8b4a                	mv	s6,s2
       state = 0;
- 53c:	4981                	li	s3,0
- 53e:	b771                	j	4ca <vprintf+0x60>
+ 514:	4981                	li	s3,0
+ 516:	b771                	j	4a2 <vprintf+0x60>
         printint(fd, va_arg(ap, uint64), 10, 0);
- 540:	008b0913          	addi	s2,s6,8
- 544:	4681                	li	a3,0
- 546:	4629                	li	a2,10
- 548:	000b2583          	lw	a1,0(s6)
- 54c:	8556                	mv	a0,s5
- 54e:	00000097          	auipc	ra,0x0
- 552:	e72080e7          	jalr	-398(ra) # 3c0 <printint>
- 556:	8b4a                	mv	s6,s2
+ 518:	008b0913          	addi	s2,s6,8
+ 51c:	4681                	li	a3,0
+ 51e:	4629                	li	a2,10
+ 520:	000b2583          	lw	a1,0(s6)
+ 524:	8556                	mv	a0,s5
+ 526:	00000097          	auipc	ra,0x0
+ 52a:	e72080e7          	jalr	-398(ra) # 398 <printint>
+ 52e:	8b4a                	mv	s6,s2
       state = 0;
- 558:	4981                	li	s3,0
- 55a:	bf85                	j	4ca <vprintf+0x60>
+ 530:	4981                	li	s3,0
+ 532:	bf85                	j	4a2 <vprintf+0x60>
         printint(fd, va_arg(ap, int), 16, 0);
- 55c:	008b0913          	addi	s2,s6,8
- 560:	4681                	li	a3,0
- 562:	4641                	li	a2,16
- 564:	000b2583          	lw	a1,0(s6)
- 568:	8556                	mv	a0,s5
- 56a:	00000097          	auipc	ra,0x0
- 56e:	e56080e7          	jalr	-426(ra) # 3c0 <printint>
- 572:	8b4a                	mv	s6,s2
+ 534:	008b0913          	addi	s2,s6,8
+ 538:	4681                	li	a3,0
+ 53a:	4641                	li	a2,16
+ 53c:	000b2583          	lw	a1,0(s6)
+ 540:	8556                	mv	a0,s5
+ 542:	00000097          	auipc	ra,0x0
+ 546:	e56080e7          	jalr	-426(ra) # 398 <printint>
+ 54a:	8b4a                	mv	s6,s2
       state = 0;
- 574:	4981                	li	s3,0
- 576:	bf91                	j	4ca <vprintf+0x60>
+ 54c:	4981                	li	s3,0
+ 54e:	bf91                	j	4a2 <vprintf+0x60>
         printptr(fd, va_arg(ap, uint64));
- 578:	008b0793          	addi	a5,s6,8
- 57c:	f8f43423          	sd	a5,-120(s0)
- 580:	000b3983          	ld	s3,0(s6)
+ 550:	008b0793          	addi	a5,s6,8
+ 554:	f8f43423          	sd	a5,-120(s0)
+ 558:	000b3983          	ld	s3,0(s6)
   putc(fd, '0');
- 584:	03000593          	li	a1,48
- 588:	8556                	mv	a0,s5
- 58a:	00000097          	auipc	ra,0x0
- 58e:	e14080e7          	jalr	-492(ra) # 39e <putc>
+ 55c:	03000593          	li	a1,48
+ 560:	8556                	mv	a0,s5
+ 562:	00000097          	auipc	ra,0x0
+ 566:	e14080e7          	jalr	-492(ra) # 376 <putc>
   putc(fd, 'x');
- 592:	85ea                	mv	a1,s10
- 594:	8556                	mv	a0,s5
- 596:	00000097          	auipc	ra,0x0
- 59a:	e08080e7          	jalr	-504(ra) # 39e <putc>
- 59e:	4941                	li	s2,16
+ 56a:	85ea                	mv	a1,s10
+ 56c:	8556                	mv	a0,s5
+ 56e:	00000097          	auipc	ra,0x0
+ 572:	e08080e7          	jalr	-504(ra) # 376 <putc>
+ 576:	4941                	li	s2,16
     putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
- 5a0:	03c9d793          	srli	a5,s3,0x3c
- 5a4:	97de                	add	a5,a5,s7
- 5a6:	0007c583          	lbu	a1,0(a5)
- 5aa:	8556                	mv	a0,s5
- 5ac:	00000097          	auipc	ra,0x0
- 5b0:	df2080e7          	jalr	-526(ra) # 39e <putc>
+ 578:	03c9d793          	srli	a5,s3,0x3c
+ 57c:	97de                	add	a5,a5,s7
+ 57e:	0007c583          	lbu	a1,0(a5)
+ 582:	8556                	mv	a0,s5
+ 584:	00000097          	auipc	ra,0x0
+ 588:	df2080e7          	jalr	-526(ra) # 376 <putc>
   for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
- 5b4:	0992                	slli	s3,s3,0x4
- 5b6:	397d                	addiw	s2,s2,-1
- 5b8:	fe0914e3          	bnez	s2,5a0 <vprintf+0x136>
+ 58c:	0992                	slli	s3,s3,0x4
+ 58e:	397d                	addiw	s2,s2,-1
+ 590:	fe0914e3          	bnez	s2,578 <vprintf+0x136>
         printptr(fd, va_arg(ap, uint64));
- 5bc:	f8843b03          	ld	s6,-120(s0)
+ 594:	f8843b03          	ld	s6,-120(s0)
       state = 0;
- 5c0:	4981                	li	s3,0
- 5c2:	b721                	j	4ca <vprintf+0x60>
+ 598:	4981                	li	s3,0
+ 59a:	b721                	j	4a2 <vprintf+0x60>
         s = va_arg(ap, char*);
- 5c4:	008b0993          	addi	s3,s6,8
- 5c8:	000b3903          	ld	s2,0(s6)
+ 59c:	008b0993          	addi	s3,s6,8
+ 5a0:	000b3903          	ld	s2,0(s6)
         if(s == 0)
- 5cc:	02090163          	beqz	s2,5ee <vprintf+0x184>
+ 5a4:	02090163          	beqz	s2,5c6 <vprintf+0x184>
         while(*s != 0){
- 5d0:	00094583          	lbu	a1,0(s2)
- 5d4:	c9a1                	beqz	a1,624 <vprintf+0x1ba>
+ 5a8:	00094583          	lbu	a1,0(s2)
+ 5ac:	c9a1                	beqz	a1,5fc <vprintf+0x1ba>
           putc(fd, *s);
- 5d6:	8556                	mv	a0,s5
- 5d8:	00000097          	auipc	ra,0x0
- 5dc:	dc6080e7          	jalr	-570(ra) # 39e <putc>
+ 5ae:	8556                	mv	a0,s5
+ 5b0:	00000097          	auipc	ra,0x0
+ 5b4:	dc6080e7          	jalr	-570(ra) # 376 <putc>
           s++;
- 5e0:	0905                	addi	s2,s2,1
+ 5b8:	0905                	addi	s2,s2,1
         while(*s != 0){
- 5e2:	00094583          	lbu	a1,0(s2)
- 5e6:	f9e5                	bnez	a1,5d6 <vprintf+0x16c>
+ 5ba:	00094583          	lbu	a1,0(s2)
+ 5be:	f9e5                	bnez	a1,5ae <vprintf+0x16c>
         s = va_arg(ap, char*);
- 5e8:	8b4e                	mv	s6,s3
+ 5c0:	8b4e                	mv	s6,s3
       state = 0;
- 5ea:	4981                	li	s3,0
- 5ec:	bdf9                	j	4ca <vprintf+0x60>
+ 5c2:	4981                	li	s3,0
+ 5c4:	bdf9                	j	4a2 <vprintf+0x60>
           s = "(null)";
- 5ee:	00000917          	auipc	s2,0x0
- 5f2:	25a90913          	addi	s2,s2,602 # 848 <malloc+0x114>
+ 5c6:	00000917          	auipc	s2,0x0
+ 5ca:	25a90913          	addi	s2,s2,602 # 820 <malloc+0x114>
         while(*s != 0){
- 5f6:	02800593          	li	a1,40
- 5fa:	bff1                	j	5d6 <vprintf+0x16c>
+ 5ce:	02800593          	li	a1,40
+ 5d2:	bff1                	j	5ae <vprintf+0x16c>
         putc(fd, va_arg(ap, uint));
- 5fc:	008b0913          	addi	s2,s6,8
- 600:	000b4583          	lbu	a1,0(s6)
- 604:	8556                	mv	a0,s5
- 606:	00000097          	auipc	ra,0x0
- 60a:	d98080e7          	jalr	-616(ra) # 39e <putc>
- 60e:	8b4a                	mv	s6,s2
+ 5d4:	008b0913          	addi	s2,s6,8
+ 5d8:	000b4583          	lbu	a1,0(s6)
+ 5dc:	8556                	mv	a0,s5
+ 5de:	00000097          	auipc	ra,0x0
+ 5e2:	d98080e7          	jalr	-616(ra) # 376 <putc>
+ 5e6:	8b4a                	mv	s6,s2
       state = 0;
- 610:	4981                	li	s3,0
- 612:	bd65                	j	4ca <vprintf+0x60>
+ 5e8:	4981                	li	s3,0
+ 5ea:	bd65                	j	4a2 <vprintf+0x60>
         putc(fd, c);
- 614:	85d2                	mv	a1,s4
- 616:	8556                	mv	a0,s5
- 618:	00000097          	auipc	ra,0x0
- 61c:	d86080e7          	jalr	-634(ra) # 39e <putc>
+ 5ec:	85d2                	mv	a1,s4
+ 5ee:	8556                	mv	a0,s5
+ 5f0:	00000097          	auipc	ra,0x0
+ 5f4:	d86080e7          	jalr	-634(ra) # 376 <putc>
       state = 0;
- 620:	4981                	li	s3,0
- 622:	b565                	j	4ca <vprintf+0x60>
+ 5f8:	4981                	li	s3,0
+ 5fa:	b565                	j	4a2 <vprintf+0x60>
         s = va_arg(ap, char*);
- 624:	8b4e                	mv	s6,s3
+ 5fc:	8b4e                	mv	s6,s3
       state = 0;
- 626:	4981                	li	s3,0
- 628:	b54d                	j	4ca <vprintf+0x60>
+ 5fe:	4981                	li	s3,0
+ 600:	b54d                	j	4a2 <vprintf+0x60>
     }
   }
 }
- 62a:	70e6                	ld	ra,120(sp)
- 62c:	7446                	ld	s0,112(sp)
- 62e:	74a6                	ld	s1,104(sp)
- 630:	7906                	ld	s2,96(sp)
- 632:	69e6                	ld	s3,88(sp)
- 634:	6a46                	ld	s4,80(sp)
- 636:	6aa6                	ld	s5,72(sp)
- 638:	6b06                	ld	s6,64(sp)
- 63a:	7be2                	ld	s7,56(sp)
- 63c:	7c42                	ld	s8,48(sp)
- 63e:	7ca2                	ld	s9,40(sp)
- 640:	7d02                	ld	s10,32(sp)
- 642:	6de2                	ld	s11,24(sp)
- 644:	6109                	addi	sp,sp,128
- 646:	8082                	ret
-
-0000000000000648 <fprintf>:
+ 602:	70e6                	ld	ra,120(sp)
+ 604:	7446                	ld	s0,112(sp)
+ 606:	74a6                	ld	s1,104(sp)
+ 608:	7906                	ld	s2,96(sp)
+ 60a:	69e6                	ld	s3,88(sp)
+ 60c:	6a46                	ld	s4,80(sp)
+ 60e:	6aa6                	ld	s5,72(sp)
+ 610:	6b06                	ld	s6,64(sp)
+ 612:	7be2                	ld	s7,56(sp)
+ 614:	7c42                	ld	s8,48(sp)
+ 616:	7ca2                	ld	s9,40(sp)
+ 618:	7d02                	ld	s10,32(sp)
+ 61a:	6de2                	ld	s11,24(sp)
+ 61c:	6109                	addi	sp,sp,128
+ 61e:	8082                	ret
+
+0000000000000620 <fprintf>:
 
 void
 fprintf(int fd, const char *fmt, ...)
 {
- 648:	715d                	addi	sp,sp,-80
- 64a:	ec06                	sd	ra,24(sp)
- 64c:	e822                	sd	s0,16(sp)
- 64e:	1000                	addi	s0,sp,32
- 650:	e010                	sd	a2,0(s0)
- 652:	e414                	sd	a3,8(s0)
- 654:	e818                	sd	a4,16(s0)
- 656:	ec1c                	sd	a5,24(s0)
- 658:	03043023          	sd	a6,32(s0)
- 65c:	03143423          	sd	a7,40(s0)
+ 620:	715d                	addi	sp,sp,-80
+ 622:	ec06                	sd	ra,24(sp)
+ 624:	e822                	sd	s0,16(sp)
+ 626:	1000                	addi	s0,sp,32
+ 628:	e010                	sd	a2,0(s0)
+ 62a:	e414                	sd	a3,8(s0)
+ 62c:	e818                	sd	a4,16(s0)
+ 62e:	ec1c                	sd	a5,24(s0)
+ 630:	03043023          	sd	a6,32(s0)
+ 634:	03143423          	sd	a7,40(s0)
   va_list ap;
 
   va_start(ap, fmt);
- 660:	fe843423          	sd	s0,-24(s0)
+ 638:	fe843423          	sd	s0,-24(s0)
   vprintf(fd, fmt, ap);
- 664:	8622                	mv	a2,s0
- 666:	00000097          	auipc	ra,0x0
- 66a:	e04080e7          	jalr	-508(ra) # 46a <vprintf>
+ 63c:	8622                	mv	a2,s0
+ 63e:	00000097          	auipc	ra,0x0
+ 642:	e04080e7          	jalr	-508(ra) # 442 <vprintf>
 }
- 66e:	60e2                	ld	ra,24(sp)
- 670:	6442                	ld	s0,16(sp)
- 672:	6161                	addi	sp,sp,80
- 674:	8082                	ret
+ 646:	60e2                	ld	ra,24(sp)
+ 648:	6442                	ld	s0,16(sp)
+ 64a:	6161                	addi	sp,sp,80
+ 64c:	8082                	ret
 
-0000000000000676 <printf>:
+000000000000064e <printf>:
 
 void
 printf(const char *fmt, ...)
 {
- 676:	711d                	addi	sp,sp,-96
- 678:	ec06                	sd	ra,24(sp)
- 67a:	e822                	sd	s0,16(sp)
- 67c:	1000                	addi	s0,sp,32
- 67e:	e40c                	sd	a1,8(s0)
- 680:	e810                	sd	a2,16(s0)
- 682:	ec14                	sd	a3,24(s0)
- 684:	f018                	sd	a4,32(s0)
- 686:	f41c                	sd	a5,40(s0)
- 688:	03043823          	sd	a6,48(s0)
- 68c:	03143c23          	sd	a7,56(s0)
+ 64e:	711d                	addi	sp,sp,-96
+ 650:	ec06                	sd	ra,24(sp)
+ 652:	e822                	sd	s0,16(sp)
+ 654:	1000                	addi	s0,sp,32
+ 656:	e40c                	sd	a1,8(s0)
+ 658:	e810                	sd	a2,16(s0)
+ 65a:	ec14                	sd	a3,24(s0)
+ 65c:	f018                	sd	a4,32(s0)
+ 65e:	f41c                	sd	a5,40(s0)
+ 660:	03043823          	sd	a6,48(s0)
+ 664:	03143c23          	sd	a7,56(s0)
   va_list ap;
 
   va_start(ap, fmt);
- 690:	00840613          	addi	a2,s0,8
- 694:	fec43423          	sd	a2,-24(s0)
+ 668:	00840613          	addi	a2,s0,8
+ 66c:	fec43423          	sd	a2,-24(s0)
   vprintf(1, fmt, ap);
- 698:	85aa                	mv	a1,a0
- 69a:	4505                	li	a0,1
- 69c:	00000097          	auipc	ra,0x0
- 6a0:	dce080e7          	jalr	-562(ra) # 46a <vprintf>
+ 670:	85aa                	mv	a1,a0
+ 672:	4505                	li	a0,1
+ 674:	00000097          	auipc	ra,0x0
+ 678:	dce080e7          	jalr	-562(ra) # 442 <vprintf>
 }
- 6a4:	60e2                	ld	ra,24(sp)
- 6a6:	6442                	ld	s0,16(sp)
- 6a8:	6125                	addi	sp,sp,96
- 6aa:	8082                	ret
+ 67c:	60e2                	ld	ra,24(sp)
+ 67e:	6442                	ld	s0,16(sp)
+ 680:	6125                	addi	sp,sp,96
+ 682:	8082                	ret
 
-00000000000006ac <free>:
+0000000000000684 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 6ac:	1141                	addi	sp,sp,-16
- 6ae:	e422                	sd	s0,8(sp)
- 6b0:	0800                	addi	s0,sp,16
+ 684:	1141                	addi	sp,sp,-16
+ 686:	e422                	sd	s0,8(sp)
+ 688:	0800                	addi	s0,sp,16
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
- 6b2:	ff050693          	addi	a3,a0,-16
+ 68a:	ff050693          	addi	a3,a0,-16
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6b6:	00000797          	auipc	a5,0x0
- 6ba:	1b27b783          	ld	a5,434(a5) # 868 <freep>
- 6be:	a805                	j	6ee <free+0x42>
+ 68e:	00000797          	auipc	a5,0x0
+ 692:	1b27b783          	ld	a5,434(a5) # 840 <freep>
+ 696:	a805                	j	6c6 <free+0x42>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
       break;
   if(bp + bp->s.size == p->s.ptr){
     bp->s.size += p->s.ptr->s.size;
- 6c0:	4618                	lw	a4,8(a2)
- 6c2:	9db9                	addw	a1,a1,a4
- 6c4:	feb52c23          	sw	a1,-8(a0)
+ 698:	4618                	lw	a4,8(a2)
+ 69a:	9db9                	addw	a1,a1,a4
+ 69c:	feb52c23          	sw	a1,-8(a0)
     bp->s.ptr = p->s.ptr->s.ptr;
- 6c8:	6398                	ld	a4,0(a5)
- 6ca:	6318                	ld	a4,0(a4)
- 6cc:	fee53823          	sd	a4,-16(a0)
- 6d0:	a091                	j	714 <free+0x68>
+ 6a0:	6398                	ld	a4,0(a5)
+ 6a2:	6318                	ld	a4,0(a4)
+ 6a4:	fee53823          	sd	a4,-16(a0)
+ 6a8:	a091                	j	6ec <free+0x68>
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
     p->s.size += bp->s.size;
- 6d2:	ff852703          	lw	a4,-8(a0)
- 6d6:	9e39                	addw	a2,a2,a4
- 6d8:	c790                	sw	a2,8(a5)
+ 6aa:	ff852703          	lw	a4,-8(a0)
+ 6ae:	9e39                	addw	a2,a2,a4
+ 6b0:	c790                	sw	a2,8(a5)
     p->s.ptr = bp->s.ptr;
- 6da:	ff053703          	ld	a4,-16(a0)
- 6de:	e398                	sd	a4,0(a5)
- 6e0:	a099                	j	726 <free+0x7a>
+ 6b2:	ff053703          	ld	a4,-16(a0)
+ 6b6:	e398                	sd	a4,0(a5)
+ 6b8:	a099                	j	6fe <free+0x7a>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6e2:	6398                	ld	a4,0(a5)
- 6e4:	00e7e463          	bltu	a5,a4,6ec <free+0x40>
- 6e8:	00e6ea63          	bltu	a3,a4,6fc <free+0x50>
+ 6ba:	6398                	ld	a4,0(a5)
+ 6bc:	00e7e463          	bltu	a5,a4,6c4 <free+0x40>
+ 6c0:	00e6ea63          	bltu	a3,a4,6d4 <free+0x50>
 {
- 6ec:	87ba                	mv	a5,a4
+ 6c4:	87ba                	mv	a5,a4
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6ee:	fed7fae3          	bgeu	a5,a3,6e2 <free+0x36>
- 6f2:	6398                	ld	a4,0(a5)
- 6f4:	00e6e463          	bltu	a3,a4,6fc <free+0x50>
+ 6c6:	fed7fae3          	bgeu	a5,a3,6ba <free+0x36>
+ 6ca:	6398                	ld	a4,0(a5)
+ 6cc:	00e6e463          	bltu	a3,a4,6d4 <free+0x50>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6f8:	fee7eae3          	bltu	a5,a4,6ec <free+0x40>
+ 6d0:	fee7eae3          	bltu	a5,a4,6c4 <free+0x40>
   if(bp + bp->s.size == p->s.ptr){
- 6fc:	ff852583          	lw	a1,-8(a0)
- 700:	6390                	ld	a2,0(a5)
- 702:	02059713          	slli	a4,a1,0x20
- 706:	9301                	srli	a4,a4,0x20
- 708:	0712                	slli	a4,a4,0x4
- 70a:	9736                	add	a4,a4,a3
- 70c:	fae60ae3          	beq	a2,a4,6c0 <free+0x14>
+ 6d4:	ff852583          	lw	a1,-8(a0)
+ 6d8:	6390                	ld	a2,0(a5)
+ 6da:	02059713          	slli	a4,a1,0x20
+ 6de:	9301                	srli	a4,a4,0x20
+ 6e0:	0712                	slli	a4,a4,0x4
+ 6e2:	9736                	add	a4,a4,a3
+ 6e4:	fae60ae3          	beq	a2,a4,698 <free+0x14>
     bp->s.ptr = p->s.ptr;
- 710:	fec53823          	sd	a2,-16(a0)
+ 6e8:	fec53823          	sd	a2,-16(a0)
   if(p + p->s.size == bp){
- 714:	4790                	lw	a2,8(a5)
- 716:	02061713          	slli	a4,a2,0x20
- 71a:	9301                	srli	a4,a4,0x20
- 71c:	0712                	slli	a4,a4,0x4
- 71e:	973e                	add	a4,a4,a5
- 720:	fae689e3          	beq	a3,a4,6d2 <free+0x26>
+ 6ec:	4790                	lw	a2,8(a5)
+ 6ee:	02061713          	slli	a4,a2,0x20
+ 6f2:	9301                	srli	a4,a4,0x20
+ 6f4:	0712                	slli	a4,a4,0x4
+ 6f6:	973e                	add	a4,a4,a5
+ 6f8:	fae689e3          	beq	a3,a4,6aa <free+0x26>
   } else
     p->s.ptr = bp;
- 724:	e394                	sd	a3,0(a5)
+ 6fc:	e394                	sd	a3,0(a5)
   freep = p;
- 726:	00000717          	auipc	a4,0x0
- 72a:	14f73123          	sd	a5,322(a4) # 868 <freep>
+ 6fe:	00000717          	auipc	a4,0x0
+ 702:	14f73123          	sd	a5,322(a4) # 840 <freep>
 }
- 72e:	6422                	ld	s0,8(sp)
- 730:	0141                	addi	sp,sp,16
- 732:	8082                	ret
+ 706:	6422                	ld	s0,8(sp)
+ 708:	0141                	addi	sp,sp,16
+ 70a:	8082                	ret
 
-0000000000000734 <malloc>:
+000000000000070c <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 734:	7139                	addi	sp,sp,-64
- 736:	fc06                	sd	ra,56(sp)
- 738:	f822                	sd	s0,48(sp)
- 73a:	f426                	sd	s1,40(sp)
- 73c:	f04a                	sd	s2,32(sp)
- 73e:	ec4e                	sd	s3,24(sp)
- 740:	e852                	sd	s4,16(sp)
- 742:	e456                	sd	s5,8(sp)
- 744:	e05a                	sd	s6,0(sp)
- 746:	0080                	addi	s0,sp,64
+ 70c:	7139                	addi	sp,sp,-64
+ 70e:	fc06                	sd	ra,56(sp)
+ 710:	f822                	sd	s0,48(sp)
+ 712:	f426                	sd	s1,40(sp)
+ 714:	f04a                	sd	s2,32(sp)
+ 716:	ec4e                	sd	s3,24(sp)
+ 718:	e852                	sd	s4,16(sp)
+ 71a:	e456                	sd	s5,8(sp)
+ 71c:	e05a                	sd	s6,0(sp)
+ 71e:	0080                	addi	s0,sp,64
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 748:	02051493          	slli	s1,a0,0x20
- 74c:	9081                	srli	s1,s1,0x20
- 74e:	04bd                	addi	s1,s1,15
- 750:	8091                	srli	s1,s1,0x4
- 752:	0014899b          	addiw	s3,s1,1
- 756:	0485                	addi	s1,s1,1
+ 720:	02051493          	slli	s1,a0,0x20
+ 724:	9081                	srli	s1,s1,0x20
+ 726:	04bd                	addi	s1,s1,15
+ 728:	8091                	srli	s1,s1,0x4
+ 72a:	0014899b          	addiw	s3,s1,1
+ 72e:	0485                	addi	s1,s1,1
   if((prevp = freep) == 0){
- 758:	00000517          	auipc	a0,0x0
- 75c:	11053503          	ld	a0,272(a0) # 868 <freep>
- 760:	c515                	beqz	a0,78c <malloc+0x58>
+ 730:	00000517          	auipc	a0,0x0
+ 734:	11053503          	ld	a0,272(a0) # 840 <freep>
+ 738:	c515                	beqz	a0,764 <malloc+0x58>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 762:	611c                	ld	a5,0(a0)
+ 73a:	611c                	ld	a5,0(a0)
     if(p->s.size >= nunits){
- 764:	4798                	lw	a4,8(a5)
- 766:	02977f63          	bgeu	a4,s1,7a4 <malloc+0x70>
- 76a:	8a4e                	mv	s4,s3
- 76c:	0009871b          	sext.w	a4,s3
- 770:	6685                	lui	a3,0x1
- 772:	00d77363          	bgeu	a4,a3,778 <malloc+0x44>
- 776:	6a05                	lui	s4,0x1
- 778:	000a0b1b          	sext.w	s6,s4
+ 73c:	4798                	lw	a4,8(a5)
+ 73e:	02977f63          	bgeu	a4,s1,77c <malloc+0x70>
+ 742:	8a4e                	mv	s4,s3
+ 744:	0009871b          	sext.w	a4,s3
+ 748:	6685                	lui	a3,0x1
+ 74a:	00d77363          	bgeu	a4,a3,750 <malloc+0x44>
+ 74e:	6a05                	lui	s4,0x1
+ 750:	000a0b1b          	sext.w	s6,s4
   p = sbrk(nu * sizeof(Header));
- 77c:	004a1a1b          	slliw	s4,s4,0x4
+ 754:	004a1a1b          	slliw	s4,s4,0x4
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 780:	00000917          	auipc	s2,0x0
- 784:	0e890913          	addi	s2,s2,232 # 868 <freep>
+ 758:	00000917          	auipc	s2,0x0
+ 75c:	0e890913          	addi	s2,s2,232 # 840 <freep>
   if(p == (char*)-1)
- 788:	5afd                	li	s5,-1
- 78a:	a88d                	j	7fc <malloc+0xc8>
+ 760:	5afd                	li	s5,-1
+ 762:	a88d                	j	7d4 <malloc+0xc8>
     base.s.ptr = freep = prevp = &base;
- 78c:	00000797          	auipc	a5,0x0
- 790:	0e478793          	addi	a5,a5,228 # 870 <base>
- 794:	00000717          	auipc	a4,0x0
- 798:	0cf73a23          	sd	a5,212(a4) # 868 <freep>
- 79c:	e39c                	sd	a5,0(a5)
+ 764:	00000797          	auipc	a5,0x0
+ 768:	0e478793          	addi	a5,a5,228 # 848 <base>
+ 76c:	00000717          	auipc	a4,0x0
+ 770:	0cf73a23          	sd	a5,212(a4) # 840 <freep>
+ 774:	e39c                	sd	a5,0(a5)
     base.s.size = 0;
- 79e:	0007a423          	sw	zero,8(a5)
+ 776:	0007a423          	sw	zero,8(a5)
     if(p->s.size >= nunits){
- 7a2:	b7e1                	j	76a <malloc+0x36>
+ 77a:	b7e1                	j	742 <malloc+0x36>
       if(p->s.size == nunits)
- 7a4:	02e48b63          	beq	s1,a4,7da <malloc+0xa6>
+ 77c:	02e48b63          	beq	s1,a4,7b2 <malloc+0xa6>
         p->s.size -= nunits;
- 7a8:	4137073b          	subw	a4,a4,s3
- 7ac:	c798                	sw	a4,8(a5)
+ 780:	4137073b          	subw	a4,a4,s3
+ 784:	c798                	sw	a4,8(a5)
         p += p->s.size;
- 7ae:	1702                	slli	a4,a4,0x20
- 7b0:	9301                	srli	a4,a4,0x20
- 7b2:	0712                	slli	a4,a4,0x4
- 7b4:	97ba                	add	a5,a5,a4
+ 786:	1702                	slli	a4,a4,0x20
+ 788:	9301                	srli	a4,a4,0x20
+ 78a:	0712                	slli	a4,a4,0x4
+ 78c:	97ba                	add	a5,a5,a4
         p->s.size = nunits;
- 7b6:	0137a423          	sw	s3,8(a5)
+ 78e:	0137a423          	sw	s3,8(a5)
       freep = prevp;
- 7ba:	00000717          	auipc	a4,0x0
- 7be:	0aa73723          	sd	a0,174(a4) # 868 <freep>
+ 792:	00000717          	auipc	a4,0x0
+ 796:	0aa73723          	sd	a0,174(a4) # 840 <freep>
       return (void*)(p + 1);
- 7c2:	01078513          	addi	a0,a5,16
+ 79a:	01078513          	addi	a0,a5,16
       if((p = morecore(nunits)) == 0)
         return 0;
   }
 }
- 7c6:	70e2                	ld	ra,56(sp)
- 7c8:	7442                	ld	s0,48(sp)
- 7ca:	74a2                	ld	s1,40(sp)
- 7cc:	7902                	ld	s2,32(sp)
- 7ce:	69e2                	ld	s3,24(sp)
- 7d0:	6a42                	ld	s4,16(sp)
- 7d2:	6aa2                	ld	s5,8(sp)
- 7d4:	6b02                	ld	s6,0(sp)
- 7d6:	6121                	addi	sp,sp,64
- 7d8:	8082                	ret
+ 79e:	70e2                	ld	ra,56(sp)
+ 7a0:	7442                	ld	s0,48(sp)
+ 7a2:	74a2                	ld	s1,40(sp)
+ 7a4:	7902                	ld	s2,32(sp)
+ 7a6:	69e2                	ld	s3,24(sp)
+ 7a8:	6a42                	ld	s4,16(sp)
+ 7aa:	6aa2                	ld	s5,8(sp)
+ 7ac:	6b02                	ld	s6,0(sp)
+ 7ae:	6121                	addi	sp,sp,64
+ 7b0:	8082                	ret
         prevp->s.ptr = p->s.ptr;
- 7da:	6398                	ld	a4,0(a5)
- 7dc:	e118                	sd	a4,0(a0)
- 7de:	bff1                	j	7ba <malloc+0x86>
+ 7b2:	6398                	ld	a4,0(a5)
+ 7b4:	e118                	sd	a4,0(a0)
+ 7b6:	bff1                	j	792 <malloc+0x86>
   hp->s.size = nu;
- 7e0:	01652423          	sw	s6,8(a0)
+ 7b8:	01652423          	sw	s6,8(a0)
   free((void*)(hp + 1));
- 7e4:	0541                	addi	a0,a0,16
- 7e6:	00000097          	auipc	ra,0x0
- 7ea:	ec6080e7          	jalr	-314(ra) # 6ac <free>
+ 7bc:	0541                	addi	a0,a0,16
+ 7be:	00000097          	auipc	ra,0x0
+ 7c2:	ec6080e7          	jalr	-314(ra) # 684 <free>
   return freep;
- 7ee:	00093503          	ld	a0,0(s2)
+ 7c6:	00093503          	ld	a0,0(s2)
       if((p = morecore(nunits)) == 0)
- 7f2:	d971                	beqz	a0,7c6 <malloc+0x92>
+ 7ca:	d971                	beqz	a0,79e <malloc+0x92>
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7f4:	611c                	ld	a5,0(a0)
+ 7cc:	611c                	ld	a5,0(a0)
     if(p->s.size >= nunits){
- 7f6:	4798                	lw	a4,8(a5)
- 7f8:	fa9776e3          	bgeu	a4,s1,7a4 <malloc+0x70>
+ 7ce:	4798                	lw	a4,8(a5)
+ 7d0:	fa9776e3          	bgeu	a4,s1,77c <malloc+0x70>
     if(p == freep)
- 7fc:	00093703          	ld	a4,0(s2)
- 800:	853e                	mv	a0,a5
- 802:	fef719e3          	bne	a4,a5,7f4 <malloc+0xc0>
+ 7d4:	00093703          	ld	a4,0(s2)
+ 7d8:	853e                	mv	a0,a5
+ 7da:	fef719e3          	bne	a4,a5,7cc <malloc+0xc0>
   p = sbrk(nu * sizeof(Header));
- 806:	8552                	mv	a0,s4
- 808:	00000097          	auipc	ra,0x0
- 80c:	b56080e7          	jalr	-1194(ra) # 35e <sbrk>
+ 7de:	8552                	mv	a0,s4
+ 7e0:	00000097          	auipc	ra,0x0
+ 7e4:	b7e080e7          	jalr	-1154(ra) # 35e <sbrk>
   if(p == (char*)-1)
- 810:	fd5518e3          	bne	a0,s5,7e0 <malloc+0xac>
+ 7e8:	fd5518e3          	bne	a0,s5,7b8 <malloc+0xac>
         return 0;
- 814:	4501                	li	a0,0
- 816:	bf45                	j	7c6 <malloc+0x92>
+ 7ec:	4501                	li	a0,0
+ 7ee:	bf45                	j	79e <malloc+0x92>
diff --git a/user/ln.o b/user/ln.o
index b79346e..18e46a4 100644
Binary files a/user/ln.o and b/user/ln.o differ
diff --git a/user/ln.sym b/user/ln.sym
index 2ebf11a..deb7bd4 100644
--- a/user/ln.sym
+++ b/user/ln.sym
@@ -1,7 +1,7 @@
 0000000000000000 .text
-0000000000000818 .rodata
-0000000000000868 .sbss
-0000000000000870 .bss
+00000000000007f0 .rodata
+0000000000000840 .sbss
+0000000000000848 .bss
 0000000000000000 .comment
 0000000000000000 .debug_aranges
 0000000000000000 .debug_info
@@ -14,53 +14,48 @@
 0000000000000000 ln.c
 0000000000000000 ulib.c
 0000000000000000 printf.c
-000000000000039e putc
-00000000000003c0 printint
-0000000000000850 digits
+0000000000000376 putc
+0000000000000398 printint
+0000000000000828 digits
 0000000000000000 umalloc.c
-0000000000000868 freep
-0000000000000870 base
+0000000000000840 freep
+0000000000000848 base
 0000000000000060 strcpy
-0000000000000676 printf
-0000000000001061 __global_pointer$
+000000000000064e printf
+0000000000001039 __global_pointer$
 0000000000000220 memmove
 000000000000031e mknod
 000000000000011c gets
-0000000000000861 __SDATA_BEGIN__
+0000000000000839 __SDATA_BEGIN__
 0000000000000356 getpid
 00000000000002b6 memcpy
-0000000000000386 print_stats
-0000000000000734 malloc
+000000000000070c malloc
 0000000000000366 sleep
 00000000000002e6 pipe
 00000000000002f6 write
 000000000000032e fstat
-0000000000000648 fprintf
+0000000000000620 fprintf
 0000000000000306 kill
-000000000000046a vprintf
+0000000000000442 vprintf
 0000000000000346 chdir
-0000000000000376 pause_system
 000000000000030e exec
 00000000000002de wait
 00000000000002ee read
 0000000000000326 unlink
-0000000000000396 set_cpu
-000000000000038e get_cpu
 000000000000027c memcmp
 00000000000002ce fork
-000000000000037e kill_system
-0000000000000880 __BSS_END__
+0000000000000858 __BSS_END__
 000000000000035e sbrk
 000000000000036e uptime
-0000000000000861 __bss_start
+0000000000000839 __bss_start
 00000000000000d2 memset
 0000000000000000 main
 000000000000007c strcmp
 000000000000034e dup
-0000000000000861 __DATA_BEGIN__
+0000000000000839 __DATA_BEGIN__
 0000000000000190 stat
-0000000000000861 _edata
-0000000000000880 _end
+0000000000000839 _edata
+0000000000000858 _end
 0000000000000336 link
 00000000000002d6 exit
 00000000000001d6 atoi
@@ -69,4 +64,4 @@
 00000000000000f8 strchr
 000000000000033e mkdir
 00000000000002fe close
-00000000000006ac free
+0000000000000684 free
diff --git a/user/ls.asm b/user/ls.asm
index 3ef2d8d..1152125 100644
--- a/user/ls.asm
+++ b/user/ls.asm
@@ -65,7 +65,7 @@ fmtname(char *path)
   5e:	00000097          	auipc	ra,0x0
   62:	2be080e7          	jalr	702(ra) # 31c <strlen>
   66:	00001997          	auipc	s3,0x1
-  6a:	ac298993          	addi	s3,s3,-1342 # b28 <buf.1117>
+  6a:	a9a98993          	addi	s3,s3,-1382 # b00 <buf.1107>
   6e:	0005061b          	sext.w	a2,a0
   72:	85a6                	mv	a1,s1
   74:	854e                	mv	a0,s3
@@ -148,9 +148,9 @@ ls(char *path)
  11c:	d9c42683          	lw	a3,-612(s0)
  120:	da041603          	lh	a2,-608(s0)
  124:	00001517          	auipc	a0,0x1
- 128:	99c50513          	addi	a0,a0,-1636 # ac0 <malloc+0x118>
+ 128:	97450513          	addi	a0,a0,-1676 # a98 <malloc+0x118>
  12c:	00000097          	auipc	ra,0x0
- 130:	7be080e7          	jalr	1982(ra) # 8ea <printf>
+ 130:	796080e7          	jalr	1942(ra) # 8c2 <printf>
       }
       printf("%s %d %d %d\n", fmtname(buf), st.type, st.ino, st.size);
     }
@@ -173,19 +173,19 @@ ls(char *path)
     fprintf(2, "ls: cannot open %s\n", path);
  160:	864a                	mv	a2,s2
  162:	00001597          	auipc	a1,0x1
- 166:	92e58593          	addi	a1,a1,-1746 # a90 <malloc+0xe8>
+ 166:	90658593          	addi	a1,a1,-1786 # a68 <malloc+0xe8>
  16a:	4509                	li	a0,2
  16c:	00000097          	auipc	ra,0x0
- 170:	750080e7          	jalr	1872(ra) # 8bc <fprintf>
+ 170:	728080e7          	jalr	1832(ra) # 894 <fprintf>
     return;
  174:	b7e9                	j	13e <ls+0x8a>
     fprintf(2, "ls: cannot stat %s\n", path);
  176:	864a                	mv	a2,s2
  178:	00001597          	auipc	a1,0x1
- 17c:	93058593          	addi	a1,a1,-1744 # aa8 <malloc+0x100>
+ 17c:	90858593          	addi	a1,a1,-1784 # a80 <malloc+0x100>
  180:	4509                	li	a0,2
  182:	00000097          	auipc	ra,0x0
- 186:	73a080e7          	jalr	1850(ra) # 8bc <fprintf>
+ 186:	712080e7          	jalr	1810(ra) # 894 <fprintf>
     close(fd);
  18a:	8526                	mv	a0,s1
  18c:	00000097          	auipc	ra,0x0
@@ -201,9 +201,9 @@ ls(char *path)
  1a6:	00a7fb63          	bgeu	a5,a0,1bc <ls+0x108>
       printf("ls: path too long\n");
  1aa:	00001517          	auipc	a0,0x1
- 1ae:	92650513          	addi	a0,a0,-1754 # ad0 <malloc+0x128>
+ 1ae:	8fe50513          	addi	a0,a0,-1794 # aa8 <malloc+0x128>
  1b2:	00000097          	auipc	ra,0x0
- 1b6:	738080e7          	jalr	1848(ra) # 8ea <printf>
+ 1b6:	710080e7          	jalr	1808(ra) # 8c2 <printf>
       break;
  1ba:	bfad                	j	134 <ls+0x80>
     strcpy(buf, path);
@@ -225,17 +225,17 @@ ls(char *path)
  1ec:	00f90023          	sb	a5,0(s2)
       printf("%s %d %d %d\n", fmtname(buf), st.type, st.ino, st.size);
  1f0:	00001a17          	auipc	s4,0x1
- 1f4:	8f8a0a13          	addi	s4,s4,-1800 # ae8 <malloc+0x140>
+ 1f4:	8d0a0a13          	addi	s4,s4,-1840 # ac0 <malloc+0x140>
         printf("ls: cannot stat %s\n", buf);
  1f8:	00001a97          	auipc	s5,0x1
- 1fc:	8b0a8a93          	addi	s5,s5,-1872 # aa8 <malloc+0x100>
+ 1fc:	888a8a93          	addi	s5,s5,-1912 # a80 <malloc+0x100>
     while(read(fd, &de, sizeof(de)) == sizeof(de)){
  200:	a801                	j	210 <ls+0x15c>
         printf("ls: cannot stat %s\n", buf);
  202:	dc040593          	addi	a1,s0,-576
  206:	8556                	mv	a0,s5
  208:	00000097          	auipc	ra,0x0
- 20c:	6e2080e7          	jalr	1762(ra) # 8ea <printf>
+ 20c:	6ba080e7          	jalr	1722(ra) # 8c2 <printf>
     while(read(fd, &de, sizeof(de)) == sizeof(de)){
  210:	4641                	li	a2,16
  212:	db040593          	addi	a1,s0,-592
@@ -271,7 +271,7 @@ ls(char *path)
  26a:	da041603          	lh	a2,-608(s0)
  26e:	8552                	mv	a0,s4
  270:	00000097          	auipc	ra,0x0
- 274:	67a080e7          	jalr	1658(ra) # 8ea <printf>
+ 274:	652080e7          	jalr	1618(ra) # 8c2 <printf>
  278:	bf61                	j	210 <ls+0x15c>
 
 000000000000027a <main>:
@@ -314,7 +314,7 @@ main(int argc, char *argv[])
  2b6:	298080e7          	jalr	664(ra) # 54a <exit>
     ls(".");
  2ba:	00001517          	auipc	a0,0x1
- 2be:	83e50513          	addi	a0,a0,-1986 # af8 <malloc+0x150>
+ 2be:	81650513          	addi	a0,a0,-2026 # ad0 <malloc+0x150>
  2c2:	00000097          	auipc	ra,0x0
  2c6:	df2080e7          	jalr	-526(ra) # b4 <ls>
     exit(0);
@@ -959,696 +959,646 @@ uptime:
  ret
  5e8:	8082                	ret
 
-00000000000005ea <pause_system>:
-.global pause_system
-pause_system:
- li a7, SYS_pause_system
- 5ea:	48d9                	li	a7,22
- ecall
- 5ec:	00000073          	ecall
- ret
- 5f0:	8082                	ret
-
-00000000000005f2 <kill_system>:
-.global kill_system
-kill_system:
- li a7, SYS_kill_system
- 5f2:	48dd                	li	a7,23
- ecall
- 5f4:	00000073          	ecall
- ret
- 5f8:	8082                	ret
-
-00000000000005fa <print_stats>:
-.global print_stats
-print_stats:
- li a7, SYS_print_stats
- 5fa:	48e1                	li	a7,24
- ecall
- 5fc:	00000073          	ecall
- ret
- 600:	8082                	ret
-
-0000000000000602 <get_cpu>:
-.global get_cpu
-get_cpu:
- li a7, SYS_get_cpu
- 602:	48e5                	li	a7,25
- ecall
- 604:	00000073          	ecall
- ret
- 608:	8082                	ret
-
-000000000000060a <set_cpu>:
-.global set_cpu
-set_cpu:
- li a7, SYS_set_cpu
- 60a:	48e9                	li	a7,26
- ecall
- 60c:	00000073          	ecall
- ret
- 610:	8082                	ret
-
-0000000000000612 <putc>:
+00000000000005ea <putc>:
 
 static char digits[] = "0123456789ABCDEF";
 
 static void
 putc(int fd, char c)
 {
- 612:	1101                	addi	sp,sp,-32
- 614:	ec06                	sd	ra,24(sp)
- 616:	e822                	sd	s0,16(sp)
- 618:	1000                	addi	s0,sp,32
- 61a:	feb407a3          	sb	a1,-17(s0)
+ 5ea:	1101                	addi	sp,sp,-32
+ 5ec:	ec06                	sd	ra,24(sp)
+ 5ee:	e822                	sd	s0,16(sp)
+ 5f0:	1000                	addi	s0,sp,32
+ 5f2:	feb407a3          	sb	a1,-17(s0)
   write(fd, &c, 1);
- 61e:	4605                	li	a2,1
- 620:	fef40593          	addi	a1,s0,-17
- 624:	00000097          	auipc	ra,0x0
- 628:	f46080e7          	jalr	-186(ra) # 56a <write>
+ 5f6:	4605                	li	a2,1
+ 5f8:	fef40593          	addi	a1,s0,-17
+ 5fc:	00000097          	auipc	ra,0x0
+ 600:	f6e080e7          	jalr	-146(ra) # 56a <write>
 }
- 62c:	60e2                	ld	ra,24(sp)
- 62e:	6442                	ld	s0,16(sp)
- 630:	6105                	addi	sp,sp,32
- 632:	8082                	ret
+ 604:	60e2                	ld	ra,24(sp)
+ 606:	6442                	ld	s0,16(sp)
+ 608:	6105                	addi	sp,sp,32
+ 60a:	8082                	ret
 
-0000000000000634 <printint>:
+000000000000060c <printint>:
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 634:	7139                	addi	sp,sp,-64
- 636:	fc06                	sd	ra,56(sp)
- 638:	f822                	sd	s0,48(sp)
- 63a:	f426                	sd	s1,40(sp)
- 63c:	f04a                	sd	s2,32(sp)
- 63e:	ec4e                	sd	s3,24(sp)
- 640:	0080                	addi	s0,sp,64
- 642:	84aa                	mv	s1,a0
+ 60c:	7139                	addi	sp,sp,-64
+ 60e:	fc06                	sd	ra,56(sp)
+ 610:	f822                	sd	s0,48(sp)
+ 612:	f426                	sd	s1,40(sp)
+ 614:	f04a                	sd	s2,32(sp)
+ 616:	ec4e                	sd	s3,24(sp)
+ 618:	0080                	addi	s0,sp,64
+ 61a:	84aa                	mv	s1,a0
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 644:	c299                	beqz	a3,64a <printint+0x16>
- 646:	0805c863          	bltz	a1,6d6 <printint+0xa2>
+ 61c:	c299                	beqz	a3,622 <printint+0x16>
+ 61e:	0805c863          	bltz	a1,6ae <printint+0xa2>
     neg = 1;
     x = -xx;
   } else {
     x = xx;
- 64a:	2581                	sext.w	a1,a1
+ 622:	2581                	sext.w	a1,a1
   neg = 0;
- 64c:	4881                	li	a7,0
- 64e:	fc040693          	addi	a3,s0,-64
+ 624:	4881                	li	a7,0
+ 626:	fc040693          	addi	a3,s0,-64
   }
 
   i = 0;
- 652:	4701                	li	a4,0
+ 62a:	4701                	li	a4,0
   do{
     buf[i++] = digits[x % base];
- 654:	2601                	sext.w	a2,a2
- 656:	00000517          	auipc	a0,0x0
- 65a:	4b250513          	addi	a0,a0,1202 # b08 <digits>
- 65e:	883a                	mv	a6,a4
- 660:	2705                	addiw	a4,a4,1
- 662:	02c5f7bb          	remuw	a5,a1,a2
- 666:	1782                	slli	a5,a5,0x20
- 668:	9381                	srli	a5,a5,0x20
- 66a:	97aa                	add	a5,a5,a0
- 66c:	0007c783          	lbu	a5,0(a5)
- 670:	00f68023          	sb	a5,0(a3)
+ 62c:	2601                	sext.w	a2,a2
+ 62e:	00000517          	auipc	a0,0x0
+ 632:	4b250513          	addi	a0,a0,1202 # ae0 <digits>
+ 636:	883a                	mv	a6,a4
+ 638:	2705                	addiw	a4,a4,1
+ 63a:	02c5f7bb          	remuw	a5,a1,a2
+ 63e:	1782                	slli	a5,a5,0x20
+ 640:	9381                	srli	a5,a5,0x20
+ 642:	97aa                	add	a5,a5,a0
+ 644:	0007c783          	lbu	a5,0(a5)
+ 648:	00f68023          	sb	a5,0(a3)
   }while((x /= base) != 0);
- 674:	0005879b          	sext.w	a5,a1
- 678:	02c5d5bb          	divuw	a1,a1,a2
- 67c:	0685                	addi	a3,a3,1
- 67e:	fec7f0e3          	bgeu	a5,a2,65e <printint+0x2a>
+ 64c:	0005879b          	sext.w	a5,a1
+ 650:	02c5d5bb          	divuw	a1,a1,a2
+ 654:	0685                	addi	a3,a3,1
+ 656:	fec7f0e3          	bgeu	a5,a2,636 <printint+0x2a>
   if(neg)
- 682:	00088b63          	beqz	a7,698 <printint+0x64>
+ 65a:	00088b63          	beqz	a7,670 <printint+0x64>
     buf[i++] = '-';
- 686:	fd040793          	addi	a5,s0,-48
- 68a:	973e                	add	a4,a4,a5
- 68c:	02d00793          	li	a5,45
- 690:	fef70823          	sb	a5,-16(a4)
- 694:	0028071b          	addiw	a4,a6,2
+ 65e:	fd040793          	addi	a5,s0,-48
+ 662:	973e                	add	a4,a4,a5
+ 664:	02d00793          	li	a5,45
+ 668:	fef70823          	sb	a5,-16(a4)
+ 66c:	0028071b          	addiw	a4,a6,2
 
   while(--i >= 0)
- 698:	02e05863          	blez	a4,6c8 <printint+0x94>
- 69c:	fc040793          	addi	a5,s0,-64
- 6a0:	00e78933          	add	s2,a5,a4
- 6a4:	fff78993          	addi	s3,a5,-1
- 6a8:	99ba                	add	s3,s3,a4
- 6aa:	377d                	addiw	a4,a4,-1
- 6ac:	1702                	slli	a4,a4,0x20
- 6ae:	9301                	srli	a4,a4,0x20
- 6b0:	40e989b3          	sub	s3,s3,a4
+ 670:	02e05863          	blez	a4,6a0 <printint+0x94>
+ 674:	fc040793          	addi	a5,s0,-64
+ 678:	00e78933          	add	s2,a5,a4
+ 67c:	fff78993          	addi	s3,a5,-1
+ 680:	99ba                	add	s3,s3,a4
+ 682:	377d                	addiw	a4,a4,-1
+ 684:	1702                	slli	a4,a4,0x20
+ 686:	9301                	srli	a4,a4,0x20
+ 688:	40e989b3          	sub	s3,s3,a4
     putc(fd, buf[i]);
- 6b4:	fff94583          	lbu	a1,-1(s2)
- 6b8:	8526                	mv	a0,s1
- 6ba:	00000097          	auipc	ra,0x0
- 6be:	f58080e7          	jalr	-168(ra) # 612 <putc>
+ 68c:	fff94583          	lbu	a1,-1(s2)
+ 690:	8526                	mv	a0,s1
+ 692:	00000097          	auipc	ra,0x0
+ 696:	f58080e7          	jalr	-168(ra) # 5ea <putc>
   while(--i >= 0)
- 6c2:	197d                	addi	s2,s2,-1
- 6c4:	ff3918e3          	bne	s2,s3,6b4 <printint+0x80>
+ 69a:	197d                	addi	s2,s2,-1
+ 69c:	ff3918e3          	bne	s2,s3,68c <printint+0x80>
 }
- 6c8:	70e2                	ld	ra,56(sp)
- 6ca:	7442                	ld	s0,48(sp)
- 6cc:	74a2                	ld	s1,40(sp)
- 6ce:	7902                	ld	s2,32(sp)
- 6d0:	69e2                	ld	s3,24(sp)
- 6d2:	6121                	addi	sp,sp,64
- 6d4:	8082                	ret
+ 6a0:	70e2                	ld	ra,56(sp)
+ 6a2:	7442                	ld	s0,48(sp)
+ 6a4:	74a2                	ld	s1,40(sp)
+ 6a6:	7902                	ld	s2,32(sp)
+ 6a8:	69e2                	ld	s3,24(sp)
+ 6aa:	6121                	addi	sp,sp,64
+ 6ac:	8082                	ret
     x = -xx;
- 6d6:	40b005bb          	negw	a1,a1
+ 6ae:	40b005bb          	negw	a1,a1
     neg = 1;
- 6da:	4885                	li	a7,1
+ 6b2:	4885                	li	a7,1
     x = -xx;
- 6dc:	bf8d                	j	64e <printint+0x1a>
+ 6b4:	bf8d                	j	626 <printint+0x1a>
 
-00000000000006de <vprintf>:
+00000000000006b6 <vprintf>:
 }
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 vprintf(int fd, const char *fmt, va_list ap)
 {
- 6de:	7119                	addi	sp,sp,-128
- 6e0:	fc86                	sd	ra,120(sp)
- 6e2:	f8a2                	sd	s0,112(sp)
- 6e4:	f4a6                	sd	s1,104(sp)
- 6e6:	f0ca                	sd	s2,96(sp)
- 6e8:	ecce                	sd	s3,88(sp)
- 6ea:	e8d2                	sd	s4,80(sp)
- 6ec:	e4d6                	sd	s5,72(sp)
- 6ee:	e0da                	sd	s6,64(sp)
- 6f0:	fc5e                	sd	s7,56(sp)
- 6f2:	f862                	sd	s8,48(sp)
- 6f4:	f466                	sd	s9,40(sp)
- 6f6:	f06a                	sd	s10,32(sp)
- 6f8:	ec6e                	sd	s11,24(sp)
- 6fa:	0100                	addi	s0,sp,128
+ 6b6:	7119                	addi	sp,sp,-128
+ 6b8:	fc86                	sd	ra,120(sp)
+ 6ba:	f8a2                	sd	s0,112(sp)
+ 6bc:	f4a6                	sd	s1,104(sp)
+ 6be:	f0ca                	sd	s2,96(sp)
+ 6c0:	ecce                	sd	s3,88(sp)
+ 6c2:	e8d2                	sd	s4,80(sp)
+ 6c4:	e4d6                	sd	s5,72(sp)
+ 6c6:	e0da                	sd	s6,64(sp)
+ 6c8:	fc5e                	sd	s7,56(sp)
+ 6ca:	f862                	sd	s8,48(sp)
+ 6cc:	f466                	sd	s9,40(sp)
+ 6ce:	f06a                	sd	s10,32(sp)
+ 6d0:	ec6e                	sd	s11,24(sp)
+ 6d2:	0100                	addi	s0,sp,128
   char *s;
   int c, i, state;
 
   state = 0;
   for(i = 0; fmt[i]; i++){
- 6fc:	0005c903          	lbu	s2,0(a1)
- 700:	18090f63          	beqz	s2,89e <vprintf+0x1c0>
- 704:	8aaa                	mv	s5,a0
- 706:	8b32                	mv	s6,a2
- 708:	00158493          	addi	s1,a1,1
+ 6d4:	0005c903          	lbu	s2,0(a1)
+ 6d8:	18090f63          	beqz	s2,876 <vprintf+0x1c0>
+ 6dc:	8aaa                	mv	s5,a0
+ 6de:	8b32                	mv	s6,a2
+ 6e0:	00158493          	addi	s1,a1,1
   state = 0;
- 70c:	4981                	li	s3,0
+ 6e4:	4981                	li	s3,0
       if(c == '%'){
         state = '%';
       } else {
         putc(fd, c);
       }
     } else if(state == '%'){
- 70e:	02500a13          	li	s4,37
+ 6e6:	02500a13          	li	s4,37
       if(c == 'd'){
- 712:	06400c13          	li	s8,100
+ 6ea:	06400c13          	li	s8,100
         printint(fd, va_arg(ap, int), 10, 1);
       } else if(c == 'l') {
- 716:	06c00c93          	li	s9,108
+ 6ee:	06c00c93          	li	s9,108
         printint(fd, va_arg(ap, uint64), 10, 0);
       } else if(c == 'x') {
- 71a:	07800d13          	li	s10,120
+ 6f2:	07800d13          	li	s10,120
         printint(fd, va_arg(ap, int), 16, 0);
       } else if(c == 'p') {
- 71e:	07000d93          	li	s11,112
+ 6f6:	07000d93          	li	s11,112
     putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
- 722:	00000b97          	auipc	s7,0x0
- 726:	3e6b8b93          	addi	s7,s7,998 # b08 <digits>
- 72a:	a839                	j	748 <vprintf+0x6a>
+ 6fa:	00000b97          	auipc	s7,0x0
+ 6fe:	3e6b8b93          	addi	s7,s7,998 # ae0 <digits>
+ 702:	a839                	j	720 <vprintf+0x6a>
         putc(fd, c);
- 72c:	85ca                	mv	a1,s2
- 72e:	8556                	mv	a0,s5
- 730:	00000097          	auipc	ra,0x0
- 734:	ee2080e7          	jalr	-286(ra) # 612 <putc>
- 738:	a019                	j	73e <vprintf+0x60>
+ 704:	85ca                	mv	a1,s2
+ 706:	8556                	mv	a0,s5
+ 708:	00000097          	auipc	ra,0x0
+ 70c:	ee2080e7          	jalr	-286(ra) # 5ea <putc>
+ 710:	a019                	j	716 <vprintf+0x60>
     } else if(state == '%'){
- 73a:	01498f63          	beq	s3,s4,758 <vprintf+0x7a>
+ 712:	01498f63          	beq	s3,s4,730 <vprintf+0x7a>
   for(i = 0; fmt[i]; i++){
- 73e:	0485                	addi	s1,s1,1
- 740:	fff4c903          	lbu	s2,-1(s1)
- 744:	14090d63          	beqz	s2,89e <vprintf+0x1c0>
+ 716:	0485                	addi	s1,s1,1
+ 718:	fff4c903          	lbu	s2,-1(s1)
+ 71c:	14090d63          	beqz	s2,876 <vprintf+0x1c0>
     c = fmt[i] & 0xff;
- 748:	0009079b          	sext.w	a5,s2
+ 720:	0009079b          	sext.w	a5,s2
     if(state == 0){
- 74c:	fe0997e3          	bnez	s3,73a <vprintf+0x5c>
+ 724:	fe0997e3          	bnez	s3,712 <vprintf+0x5c>
       if(c == '%'){
- 750:	fd479ee3          	bne	a5,s4,72c <vprintf+0x4e>
+ 728:	fd479ee3          	bne	a5,s4,704 <vprintf+0x4e>
         state = '%';
- 754:	89be                	mv	s3,a5
- 756:	b7e5                	j	73e <vprintf+0x60>
+ 72c:	89be                	mv	s3,a5
+ 72e:	b7e5                	j	716 <vprintf+0x60>
       if(c == 'd'){
- 758:	05878063          	beq	a5,s8,798 <vprintf+0xba>
+ 730:	05878063          	beq	a5,s8,770 <vprintf+0xba>
       } else if(c == 'l') {
- 75c:	05978c63          	beq	a5,s9,7b4 <vprintf+0xd6>
+ 734:	05978c63          	beq	a5,s9,78c <vprintf+0xd6>
       } else if(c == 'x') {
- 760:	07a78863          	beq	a5,s10,7d0 <vprintf+0xf2>
+ 738:	07a78863          	beq	a5,s10,7a8 <vprintf+0xf2>
       } else if(c == 'p') {
- 764:	09b78463          	beq	a5,s11,7ec <vprintf+0x10e>
+ 73c:	09b78463          	beq	a5,s11,7c4 <vprintf+0x10e>
         printptr(fd, va_arg(ap, uint64));
       } else if(c == 's'){
- 768:	07300713          	li	a4,115
- 76c:	0ce78663          	beq	a5,a4,838 <vprintf+0x15a>
+ 740:	07300713          	li	a4,115
+ 744:	0ce78663          	beq	a5,a4,810 <vprintf+0x15a>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 770:	06300713          	li	a4,99
- 774:	0ee78e63          	beq	a5,a4,870 <vprintf+0x192>
+ 748:	06300713          	li	a4,99
+ 74c:	0ee78e63          	beq	a5,a4,848 <vprintf+0x192>
         putc(fd, va_arg(ap, uint));
       } else if(c == '%'){
- 778:	11478863          	beq	a5,s4,888 <vprintf+0x1aa>
+ 750:	11478863          	beq	a5,s4,860 <vprintf+0x1aa>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
- 77c:	85d2                	mv	a1,s4
- 77e:	8556                	mv	a0,s5
- 780:	00000097          	auipc	ra,0x0
- 784:	e92080e7          	jalr	-366(ra) # 612 <putc>
+ 754:	85d2                	mv	a1,s4
+ 756:	8556                	mv	a0,s5
+ 758:	00000097          	auipc	ra,0x0
+ 75c:	e92080e7          	jalr	-366(ra) # 5ea <putc>
         putc(fd, c);
- 788:	85ca                	mv	a1,s2
- 78a:	8556                	mv	a0,s5
- 78c:	00000097          	auipc	ra,0x0
- 790:	e86080e7          	jalr	-378(ra) # 612 <putc>
+ 760:	85ca                	mv	a1,s2
+ 762:	8556                	mv	a0,s5
+ 764:	00000097          	auipc	ra,0x0
+ 768:	e86080e7          	jalr	-378(ra) # 5ea <putc>
       }
       state = 0;
- 794:	4981                	li	s3,0
- 796:	b765                	j	73e <vprintf+0x60>
+ 76c:	4981                	li	s3,0
+ 76e:	b765                	j	716 <vprintf+0x60>
         printint(fd, va_arg(ap, int), 10, 1);
- 798:	008b0913          	addi	s2,s6,8
- 79c:	4685                	li	a3,1
- 79e:	4629                	li	a2,10
- 7a0:	000b2583          	lw	a1,0(s6)
- 7a4:	8556                	mv	a0,s5
- 7a6:	00000097          	auipc	ra,0x0
- 7aa:	e8e080e7          	jalr	-370(ra) # 634 <printint>
- 7ae:	8b4a                	mv	s6,s2
+ 770:	008b0913          	addi	s2,s6,8
+ 774:	4685                	li	a3,1
+ 776:	4629                	li	a2,10
+ 778:	000b2583          	lw	a1,0(s6)
+ 77c:	8556                	mv	a0,s5
+ 77e:	00000097          	auipc	ra,0x0
+ 782:	e8e080e7          	jalr	-370(ra) # 60c <printint>
+ 786:	8b4a                	mv	s6,s2
       state = 0;
- 7b0:	4981                	li	s3,0
- 7b2:	b771                	j	73e <vprintf+0x60>
+ 788:	4981                	li	s3,0
+ 78a:	b771                	j	716 <vprintf+0x60>
         printint(fd, va_arg(ap, uint64), 10, 0);
- 7b4:	008b0913          	addi	s2,s6,8
- 7b8:	4681                	li	a3,0
- 7ba:	4629                	li	a2,10
- 7bc:	000b2583          	lw	a1,0(s6)
- 7c0:	8556                	mv	a0,s5
- 7c2:	00000097          	auipc	ra,0x0
- 7c6:	e72080e7          	jalr	-398(ra) # 634 <printint>
- 7ca:	8b4a                	mv	s6,s2
+ 78c:	008b0913          	addi	s2,s6,8
+ 790:	4681                	li	a3,0
+ 792:	4629                	li	a2,10
+ 794:	000b2583          	lw	a1,0(s6)
+ 798:	8556                	mv	a0,s5
+ 79a:	00000097          	auipc	ra,0x0
+ 79e:	e72080e7          	jalr	-398(ra) # 60c <printint>
+ 7a2:	8b4a                	mv	s6,s2
       state = 0;
- 7cc:	4981                	li	s3,0
- 7ce:	bf85                	j	73e <vprintf+0x60>
+ 7a4:	4981                	li	s3,0
+ 7a6:	bf85                	j	716 <vprintf+0x60>
         printint(fd, va_arg(ap, int), 16, 0);
- 7d0:	008b0913          	addi	s2,s6,8
- 7d4:	4681                	li	a3,0
- 7d6:	4641                	li	a2,16
- 7d8:	000b2583          	lw	a1,0(s6)
- 7dc:	8556                	mv	a0,s5
- 7de:	00000097          	auipc	ra,0x0
- 7e2:	e56080e7          	jalr	-426(ra) # 634 <printint>
- 7e6:	8b4a                	mv	s6,s2
+ 7a8:	008b0913          	addi	s2,s6,8
+ 7ac:	4681                	li	a3,0
+ 7ae:	4641                	li	a2,16
+ 7b0:	000b2583          	lw	a1,0(s6)
+ 7b4:	8556                	mv	a0,s5
+ 7b6:	00000097          	auipc	ra,0x0
+ 7ba:	e56080e7          	jalr	-426(ra) # 60c <printint>
+ 7be:	8b4a                	mv	s6,s2
       state = 0;
- 7e8:	4981                	li	s3,0
- 7ea:	bf91                	j	73e <vprintf+0x60>
+ 7c0:	4981                	li	s3,0
+ 7c2:	bf91                	j	716 <vprintf+0x60>
         printptr(fd, va_arg(ap, uint64));
- 7ec:	008b0793          	addi	a5,s6,8
- 7f0:	f8f43423          	sd	a5,-120(s0)
- 7f4:	000b3983          	ld	s3,0(s6)
+ 7c4:	008b0793          	addi	a5,s6,8
+ 7c8:	f8f43423          	sd	a5,-120(s0)
+ 7cc:	000b3983          	ld	s3,0(s6)
   putc(fd, '0');
- 7f8:	03000593          	li	a1,48
- 7fc:	8556                	mv	a0,s5
- 7fe:	00000097          	auipc	ra,0x0
- 802:	e14080e7          	jalr	-492(ra) # 612 <putc>
+ 7d0:	03000593          	li	a1,48
+ 7d4:	8556                	mv	a0,s5
+ 7d6:	00000097          	auipc	ra,0x0
+ 7da:	e14080e7          	jalr	-492(ra) # 5ea <putc>
   putc(fd, 'x');
- 806:	85ea                	mv	a1,s10
- 808:	8556                	mv	a0,s5
- 80a:	00000097          	auipc	ra,0x0
- 80e:	e08080e7          	jalr	-504(ra) # 612 <putc>
- 812:	4941                	li	s2,16
+ 7de:	85ea                	mv	a1,s10
+ 7e0:	8556                	mv	a0,s5
+ 7e2:	00000097          	auipc	ra,0x0
+ 7e6:	e08080e7          	jalr	-504(ra) # 5ea <putc>
+ 7ea:	4941                	li	s2,16
     putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
- 814:	03c9d793          	srli	a5,s3,0x3c
- 818:	97de                	add	a5,a5,s7
- 81a:	0007c583          	lbu	a1,0(a5)
- 81e:	8556                	mv	a0,s5
- 820:	00000097          	auipc	ra,0x0
- 824:	df2080e7          	jalr	-526(ra) # 612 <putc>
+ 7ec:	03c9d793          	srli	a5,s3,0x3c
+ 7f0:	97de                	add	a5,a5,s7
+ 7f2:	0007c583          	lbu	a1,0(a5)
+ 7f6:	8556                	mv	a0,s5
+ 7f8:	00000097          	auipc	ra,0x0
+ 7fc:	df2080e7          	jalr	-526(ra) # 5ea <putc>
   for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
- 828:	0992                	slli	s3,s3,0x4
- 82a:	397d                	addiw	s2,s2,-1
- 82c:	fe0914e3          	bnez	s2,814 <vprintf+0x136>
+ 800:	0992                	slli	s3,s3,0x4
+ 802:	397d                	addiw	s2,s2,-1
+ 804:	fe0914e3          	bnez	s2,7ec <vprintf+0x136>
         printptr(fd, va_arg(ap, uint64));
- 830:	f8843b03          	ld	s6,-120(s0)
+ 808:	f8843b03          	ld	s6,-120(s0)
       state = 0;
- 834:	4981                	li	s3,0
- 836:	b721                	j	73e <vprintf+0x60>
+ 80c:	4981                	li	s3,0
+ 80e:	b721                	j	716 <vprintf+0x60>
         s = va_arg(ap, char*);
- 838:	008b0993          	addi	s3,s6,8
- 83c:	000b3903          	ld	s2,0(s6)
+ 810:	008b0993          	addi	s3,s6,8
+ 814:	000b3903          	ld	s2,0(s6)
         if(s == 0)
- 840:	02090163          	beqz	s2,862 <vprintf+0x184>
+ 818:	02090163          	beqz	s2,83a <vprintf+0x184>
         while(*s != 0){
- 844:	00094583          	lbu	a1,0(s2)
- 848:	c9a1                	beqz	a1,898 <vprintf+0x1ba>
+ 81c:	00094583          	lbu	a1,0(s2)
+ 820:	c9a1                	beqz	a1,870 <vprintf+0x1ba>
           putc(fd, *s);
- 84a:	8556                	mv	a0,s5
- 84c:	00000097          	auipc	ra,0x0
- 850:	dc6080e7          	jalr	-570(ra) # 612 <putc>
+ 822:	8556                	mv	a0,s5
+ 824:	00000097          	auipc	ra,0x0
+ 828:	dc6080e7          	jalr	-570(ra) # 5ea <putc>
           s++;
- 854:	0905                	addi	s2,s2,1
+ 82c:	0905                	addi	s2,s2,1
         while(*s != 0){
- 856:	00094583          	lbu	a1,0(s2)
- 85a:	f9e5                	bnez	a1,84a <vprintf+0x16c>
+ 82e:	00094583          	lbu	a1,0(s2)
+ 832:	f9e5                	bnez	a1,822 <vprintf+0x16c>
         s = va_arg(ap, char*);
- 85c:	8b4e                	mv	s6,s3
+ 834:	8b4e                	mv	s6,s3
       state = 0;
- 85e:	4981                	li	s3,0
- 860:	bdf9                	j	73e <vprintf+0x60>
+ 836:	4981                	li	s3,0
+ 838:	bdf9                	j	716 <vprintf+0x60>
           s = "(null)";
- 862:	00000917          	auipc	s2,0x0
- 866:	29e90913          	addi	s2,s2,670 # b00 <malloc+0x158>
+ 83a:	00000917          	auipc	s2,0x0
+ 83e:	29e90913          	addi	s2,s2,670 # ad8 <malloc+0x158>
         while(*s != 0){
- 86a:	02800593          	li	a1,40
- 86e:	bff1                	j	84a <vprintf+0x16c>
+ 842:	02800593          	li	a1,40
+ 846:	bff1                	j	822 <vprintf+0x16c>
         putc(fd, va_arg(ap, uint));
- 870:	008b0913          	addi	s2,s6,8
- 874:	000b4583          	lbu	a1,0(s6)
- 878:	8556                	mv	a0,s5
- 87a:	00000097          	auipc	ra,0x0
- 87e:	d98080e7          	jalr	-616(ra) # 612 <putc>
- 882:	8b4a                	mv	s6,s2
+ 848:	008b0913          	addi	s2,s6,8
+ 84c:	000b4583          	lbu	a1,0(s6)
+ 850:	8556                	mv	a0,s5
+ 852:	00000097          	auipc	ra,0x0
+ 856:	d98080e7          	jalr	-616(ra) # 5ea <putc>
+ 85a:	8b4a                	mv	s6,s2
       state = 0;
- 884:	4981                	li	s3,0
- 886:	bd65                	j	73e <vprintf+0x60>
+ 85c:	4981                	li	s3,0
+ 85e:	bd65                	j	716 <vprintf+0x60>
         putc(fd, c);
- 888:	85d2                	mv	a1,s4
- 88a:	8556                	mv	a0,s5
- 88c:	00000097          	auipc	ra,0x0
- 890:	d86080e7          	jalr	-634(ra) # 612 <putc>
+ 860:	85d2                	mv	a1,s4
+ 862:	8556                	mv	a0,s5
+ 864:	00000097          	auipc	ra,0x0
+ 868:	d86080e7          	jalr	-634(ra) # 5ea <putc>
       state = 0;
- 894:	4981                	li	s3,0
- 896:	b565                	j	73e <vprintf+0x60>
+ 86c:	4981                	li	s3,0
+ 86e:	b565                	j	716 <vprintf+0x60>
         s = va_arg(ap, char*);
- 898:	8b4e                	mv	s6,s3
+ 870:	8b4e                	mv	s6,s3
       state = 0;
- 89a:	4981                	li	s3,0
- 89c:	b54d                	j	73e <vprintf+0x60>
+ 872:	4981                	li	s3,0
+ 874:	b54d                	j	716 <vprintf+0x60>
     }
   }
 }
- 89e:	70e6                	ld	ra,120(sp)
- 8a0:	7446                	ld	s0,112(sp)
- 8a2:	74a6                	ld	s1,104(sp)
- 8a4:	7906                	ld	s2,96(sp)
- 8a6:	69e6                	ld	s3,88(sp)
- 8a8:	6a46                	ld	s4,80(sp)
- 8aa:	6aa6                	ld	s5,72(sp)
- 8ac:	6b06                	ld	s6,64(sp)
- 8ae:	7be2                	ld	s7,56(sp)
- 8b0:	7c42                	ld	s8,48(sp)
- 8b2:	7ca2                	ld	s9,40(sp)
- 8b4:	7d02                	ld	s10,32(sp)
- 8b6:	6de2                	ld	s11,24(sp)
- 8b8:	6109                	addi	sp,sp,128
- 8ba:	8082                	ret
-
-00000000000008bc <fprintf>:
+ 876:	70e6                	ld	ra,120(sp)
+ 878:	7446                	ld	s0,112(sp)
+ 87a:	74a6                	ld	s1,104(sp)
+ 87c:	7906                	ld	s2,96(sp)
+ 87e:	69e6                	ld	s3,88(sp)
+ 880:	6a46                	ld	s4,80(sp)
+ 882:	6aa6                	ld	s5,72(sp)
+ 884:	6b06                	ld	s6,64(sp)
+ 886:	7be2                	ld	s7,56(sp)
+ 888:	7c42                	ld	s8,48(sp)
+ 88a:	7ca2                	ld	s9,40(sp)
+ 88c:	7d02                	ld	s10,32(sp)
+ 88e:	6de2                	ld	s11,24(sp)
+ 890:	6109                	addi	sp,sp,128
+ 892:	8082                	ret
+
+0000000000000894 <fprintf>:
 
 void
 fprintf(int fd, const char *fmt, ...)
 {
- 8bc:	715d                	addi	sp,sp,-80
- 8be:	ec06                	sd	ra,24(sp)
- 8c0:	e822                	sd	s0,16(sp)
- 8c2:	1000                	addi	s0,sp,32
- 8c4:	e010                	sd	a2,0(s0)
- 8c6:	e414                	sd	a3,8(s0)
- 8c8:	e818                	sd	a4,16(s0)
- 8ca:	ec1c                	sd	a5,24(s0)
- 8cc:	03043023          	sd	a6,32(s0)
- 8d0:	03143423          	sd	a7,40(s0)
+ 894:	715d                	addi	sp,sp,-80
+ 896:	ec06                	sd	ra,24(sp)
+ 898:	e822                	sd	s0,16(sp)
+ 89a:	1000                	addi	s0,sp,32
+ 89c:	e010                	sd	a2,0(s0)
+ 89e:	e414                	sd	a3,8(s0)
+ 8a0:	e818                	sd	a4,16(s0)
+ 8a2:	ec1c                	sd	a5,24(s0)
+ 8a4:	03043023          	sd	a6,32(s0)
+ 8a8:	03143423          	sd	a7,40(s0)
   va_list ap;
 
   va_start(ap, fmt);
- 8d4:	fe843423          	sd	s0,-24(s0)
+ 8ac:	fe843423          	sd	s0,-24(s0)
   vprintf(fd, fmt, ap);
- 8d8:	8622                	mv	a2,s0
- 8da:	00000097          	auipc	ra,0x0
- 8de:	e04080e7          	jalr	-508(ra) # 6de <vprintf>
+ 8b0:	8622                	mv	a2,s0
+ 8b2:	00000097          	auipc	ra,0x0
+ 8b6:	e04080e7          	jalr	-508(ra) # 6b6 <vprintf>
 }
- 8e2:	60e2                	ld	ra,24(sp)
- 8e4:	6442                	ld	s0,16(sp)
- 8e6:	6161                	addi	sp,sp,80
- 8e8:	8082                	ret
+ 8ba:	60e2                	ld	ra,24(sp)
+ 8bc:	6442                	ld	s0,16(sp)
+ 8be:	6161                	addi	sp,sp,80
+ 8c0:	8082                	ret
 
-00000000000008ea <printf>:
+00000000000008c2 <printf>:
 
 void
 printf(const char *fmt, ...)
 {
- 8ea:	711d                	addi	sp,sp,-96
- 8ec:	ec06                	sd	ra,24(sp)
- 8ee:	e822                	sd	s0,16(sp)
- 8f0:	1000                	addi	s0,sp,32
- 8f2:	e40c                	sd	a1,8(s0)
- 8f4:	e810                	sd	a2,16(s0)
- 8f6:	ec14                	sd	a3,24(s0)
- 8f8:	f018                	sd	a4,32(s0)
- 8fa:	f41c                	sd	a5,40(s0)
- 8fc:	03043823          	sd	a6,48(s0)
- 900:	03143c23          	sd	a7,56(s0)
+ 8c2:	711d                	addi	sp,sp,-96
+ 8c4:	ec06                	sd	ra,24(sp)
+ 8c6:	e822                	sd	s0,16(sp)
+ 8c8:	1000                	addi	s0,sp,32
+ 8ca:	e40c                	sd	a1,8(s0)
+ 8cc:	e810                	sd	a2,16(s0)
+ 8ce:	ec14                	sd	a3,24(s0)
+ 8d0:	f018                	sd	a4,32(s0)
+ 8d2:	f41c                	sd	a5,40(s0)
+ 8d4:	03043823          	sd	a6,48(s0)
+ 8d8:	03143c23          	sd	a7,56(s0)
   va_list ap;
 
   va_start(ap, fmt);
- 904:	00840613          	addi	a2,s0,8
- 908:	fec43423          	sd	a2,-24(s0)
+ 8dc:	00840613          	addi	a2,s0,8
+ 8e0:	fec43423          	sd	a2,-24(s0)
   vprintf(1, fmt, ap);
- 90c:	85aa                	mv	a1,a0
- 90e:	4505                	li	a0,1
- 910:	00000097          	auipc	ra,0x0
- 914:	dce080e7          	jalr	-562(ra) # 6de <vprintf>
+ 8e4:	85aa                	mv	a1,a0
+ 8e6:	4505                	li	a0,1
+ 8e8:	00000097          	auipc	ra,0x0
+ 8ec:	dce080e7          	jalr	-562(ra) # 6b6 <vprintf>
 }
- 918:	60e2                	ld	ra,24(sp)
- 91a:	6442                	ld	s0,16(sp)
- 91c:	6125                	addi	sp,sp,96
- 91e:	8082                	ret
+ 8f0:	60e2                	ld	ra,24(sp)
+ 8f2:	6442                	ld	s0,16(sp)
+ 8f4:	6125                	addi	sp,sp,96
+ 8f6:	8082                	ret
 
-0000000000000920 <free>:
+00000000000008f8 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 920:	1141                	addi	sp,sp,-16
- 922:	e422                	sd	s0,8(sp)
- 924:	0800                	addi	s0,sp,16
+ 8f8:	1141                	addi	sp,sp,-16
+ 8fa:	e422                	sd	s0,8(sp)
+ 8fc:	0800                	addi	s0,sp,16
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
- 926:	ff050693          	addi	a3,a0,-16
+ 8fe:	ff050693          	addi	a3,a0,-16
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 92a:	00000797          	auipc	a5,0x0
- 92e:	1f67b783          	ld	a5,502(a5) # b20 <freep>
- 932:	a805                	j	962 <free+0x42>
+ 902:	00000797          	auipc	a5,0x0
+ 906:	1f67b783          	ld	a5,502(a5) # af8 <freep>
+ 90a:	a805                	j	93a <free+0x42>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
       break;
   if(bp + bp->s.size == p->s.ptr){
     bp->s.size += p->s.ptr->s.size;
- 934:	4618                	lw	a4,8(a2)
- 936:	9db9                	addw	a1,a1,a4
- 938:	feb52c23          	sw	a1,-8(a0)
+ 90c:	4618                	lw	a4,8(a2)
+ 90e:	9db9                	addw	a1,a1,a4
+ 910:	feb52c23          	sw	a1,-8(a0)
     bp->s.ptr = p->s.ptr->s.ptr;
- 93c:	6398                	ld	a4,0(a5)
- 93e:	6318                	ld	a4,0(a4)
- 940:	fee53823          	sd	a4,-16(a0)
- 944:	a091                	j	988 <free+0x68>
+ 914:	6398                	ld	a4,0(a5)
+ 916:	6318                	ld	a4,0(a4)
+ 918:	fee53823          	sd	a4,-16(a0)
+ 91c:	a091                	j	960 <free+0x68>
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
     p->s.size += bp->s.size;
- 946:	ff852703          	lw	a4,-8(a0)
- 94a:	9e39                	addw	a2,a2,a4
- 94c:	c790                	sw	a2,8(a5)
+ 91e:	ff852703          	lw	a4,-8(a0)
+ 922:	9e39                	addw	a2,a2,a4
+ 924:	c790                	sw	a2,8(a5)
     p->s.ptr = bp->s.ptr;
- 94e:	ff053703          	ld	a4,-16(a0)
- 952:	e398                	sd	a4,0(a5)
- 954:	a099                	j	99a <free+0x7a>
+ 926:	ff053703          	ld	a4,-16(a0)
+ 92a:	e398                	sd	a4,0(a5)
+ 92c:	a099                	j	972 <free+0x7a>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 956:	6398                	ld	a4,0(a5)
- 958:	00e7e463          	bltu	a5,a4,960 <free+0x40>
- 95c:	00e6ea63          	bltu	a3,a4,970 <free+0x50>
+ 92e:	6398                	ld	a4,0(a5)
+ 930:	00e7e463          	bltu	a5,a4,938 <free+0x40>
+ 934:	00e6ea63          	bltu	a3,a4,948 <free+0x50>
 {
- 960:	87ba                	mv	a5,a4
+ 938:	87ba                	mv	a5,a4
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 962:	fed7fae3          	bgeu	a5,a3,956 <free+0x36>
- 966:	6398                	ld	a4,0(a5)
- 968:	00e6e463          	bltu	a3,a4,970 <free+0x50>
+ 93a:	fed7fae3          	bgeu	a5,a3,92e <free+0x36>
+ 93e:	6398                	ld	a4,0(a5)
+ 940:	00e6e463          	bltu	a3,a4,948 <free+0x50>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 96c:	fee7eae3          	bltu	a5,a4,960 <free+0x40>
+ 944:	fee7eae3          	bltu	a5,a4,938 <free+0x40>
   if(bp + bp->s.size == p->s.ptr){
- 970:	ff852583          	lw	a1,-8(a0)
- 974:	6390                	ld	a2,0(a5)
- 976:	02059713          	slli	a4,a1,0x20
- 97a:	9301                	srli	a4,a4,0x20
- 97c:	0712                	slli	a4,a4,0x4
- 97e:	9736                	add	a4,a4,a3
- 980:	fae60ae3          	beq	a2,a4,934 <free+0x14>
+ 948:	ff852583          	lw	a1,-8(a0)
+ 94c:	6390                	ld	a2,0(a5)
+ 94e:	02059713          	slli	a4,a1,0x20
+ 952:	9301                	srli	a4,a4,0x20
+ 954:	0712                	slli	a4,a4,0x4
+ 956:	9736                	add	a4,a4,a3
+ 958:	fae60ae3          	beq	a2,a4,90c <free+0x14>
     bp->s.ptr = p->s.ptr;
- 984:	fec53823          	sd	a2,-16(a0)
+ 95c:	fec53823          	sd	a2,-16(a0)
   if(p + p->s.size == bp){
- 988:	4790                	lw	a2,8(a5)
- 98a:	02061713          	slli	a4,a2,0x20
- 98e:	9301                	srli	a4,a4,0x20
- 990:	0712                	slli	a4,a4,0x4
- 992:	973e                	add	a4,a4,a5
- 994:	fae689e3          	beq	a3,a4,946 <free+0x26>
+ 960:	4790                	lw	a2,8(a5)
+ 962:	02061713          	slli	a4,a2,0x20
+ 966:	9301                	srli	a4,a4,0x20
+ 968:	0712                	slli	a4,a4,0x4
+ 96a:	973e                	add	a4,a4,a5
+ 96c:	fae689e3          	beq	a3,a4,91e <free+0x26>
   } else
     p->s.ptr = bp;
- 998:	e394                	sd	a3,0(a5)
+ 970:	e394                	sd	a3,0(a5)
   freep = p;
- 99a:	00000717          	auipc	a4,0x0
- 99e:	18f73323          	sd	a5,390(a4) # b20 <freep>
+ 972:	00000717          	auipc	a4,0x0
+ 976:	18f73323          	sd	a5,390(a4) # af8 <freep>
 }
- 9a2:	6422                	ld	s0,8(sp)
- 9a4:	0141                	addi	sp,sp,16
- 9a6:	8082                	ret
+ 97a:	6422                	ld	s0,8(sp)
+ 97c:	0141                	addi	sp,sp,16
+ 97e:	8082                	ret
 
-00000000000009a8 <malloc>:
+0000000000000980 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 9a8:	7139                	addi	sp,sp,-64
- 9aa:	fc06                	sd	ra,56(sp)
- 9ac:	f822                	sd	s0,48(sp)
- 9ae:	f426                	sd	s1,40(sp)
- 9b0:	f04a                	sd	s2,32(sp)
- 9b2:	ec4e                	sd	s3,24(sp)
- 9b4:	e852                	sd	s4,16(sp)
- 9b6:	e456                	sd	s5,8(sp)
- 9b8:	e05a                	sd	s6,0(sp)
- 9ba:	0080                	addi	s0,sp,64
+ 980:	7139                	addi	sp,sp,-64
+ 982:	fc06                	sd	ra,56(sp)
+ 984:	f822                	sd	s0,48(sp)
+ 986:	f426                	sd	s1,40(sp)
+ 988:	f04a                	sd	s2,32(sp)
+ 98a:	ec4e                	sd	s3,24(sp)
+ 98c:	e852                	sd	s4,16(sp)
+ 98e:	e456                	sd	s5,8(sp)
+ 990:	e05a                	sd	s6,0(sp)
+ 992:	0080                	addi	s0,sp,64
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 9bc:	02051493          	slli	s1,a0,0x20
- 9c0:	9081                	srli	s1,s1,0x20
- 9c2:	04bd                	addi	s1,s1,15
- 9c4:	8091                	srli	s1,s1,0x4
- 9c6:	0014899b          	addiw	s3,s1,1
- 9ca:	0485                	addi	s1,s1,1
+ 994:	02051493          	slli	s1,a0,0x20
+ 998:	9081                	srli	s1,s1,0x20
+ 99a:	04bd                	addi	s1,s1,15
+ 99c:	8091                	srli	s1,s1,0x4
+ 99e:	0014899b          	addiw	s3,s1,1
+ 9a2:	0485                	addi	s1,s1,1
   if((prevp = freep) == 0){
- 9cc:	00000517          	auipc	a0,0x0
- 9d0:	15453503          	ld	a0,340(a0) # b20 <freep>
- 9d4:	c515                	beqz	a0,a00 <malloc+0x58>
+ 9a4:	00000517          	auipc	a0,0x0
+ 9a8:	15453503          	ld	a0,340(a0) # af8 <freep>
+ 9ac:	c515                	beqz	a0,9d8 <malloc+0x58>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 9d6:	611c                	ld	a5,0(a0)
+ 9ae:	611c                	ld	a5,0(a0)
     if(p->s.size >= nunits){
- 9d8:	4798                	lw	a4,8(a5)
- 9da:	02977f63          	bgeu	a4,s1,a18 <malloc+0x70>
- 9de:	8a4e                	mv	s4,s3
- 9e0:	0009871b          	sext.w	a4,s3
- 9e4:	6685                	lui	a3,0x1
- 9e6:	00d77363          	bgeu	a4,a3,9ec <malloc+0x44>
- 9ea:	6a05                	lui	s4,0x1
- 9ec:	000a0b1b          	sext.w	s6,s4
+ 9b0:	4798                	lw	a4,8(a5)
+ 9b2:	02977f63          	bgeu	a4,s1,9f0 <malloc+0x70>
+ 9b6:	8a4e                	mv	s4,s3
+ 9b8:	0009871b          	sext.w	a4,s3
+ 9bc:	6685                	lui	a3,0x1
+ 9be:	00d77363          	bgeu	a4,a3,9c4 <malloc+0x44>
+ 9c2:	6a05                	lui	s4,0x1
+ 9c4:	000a0b1b          	sext.w	s6,s4
   p = sbrk(nu * sizeof(Header));
- 9f0:	004a1a1b          	slliw	s4,s4,0x4
+ 9c8:	004a1a1b          	slliw	s4,s4,0x4
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 9f4:	00000917          	auipc	s2,0x0
- 9f8:	12c90913          	addi	s2,s2,300 # b20 <freep>
+ 9cc:	00000917          	auipc	s2,0x0
+ 9d0:	12c90913          	addi	s2,s2,300 # af8 <freep>
   if(p == (char*)-1)
- 9fc:	5afd                	li	s5,-1
- 9fe:	a88d                	j	a70 <malloc+0xc8>
+ 9d4:	5afd                	li	s5,-1
+ 9d6:	a88d                	j	a48 <malloc+0xc8>
     base.s.ptr = freep = prevp = &base;
- a00:	00000797          	auipc	a5,0x0
- a04:	13878793          	addi	a5,a5,312 # b38 <base>
- a08:	00000717          	auipc	a4,0x0
- a0c:	10f73c23          	sd	a5,280(a4) # b20 <freep>
- a10:	e39c                	sd	a5,0(a5)
+ 9d8:	00000797          	auipc	a5,0x0
+ 9dc:	13878793          	addi	a5,a5,312 # b10 <base>
+ 9e0:	00000717          	auipc	a4,0x0
+ 9e4:	10f73c23          	sd	a5,280(a4) # af8 <freep>
+ 9e8:	e39c                	sd	a5,0(a5)
     base.s.size = 0;
- a12:	0007a423          	sw	zero,8(a5)
+ 9ea:	0007a423          	sw	zero,8(a5)
     if(p->s.size >= nunits){
- a16:	b7e1                	j	9de <malloc+0x36>
+ 9ee:	b7e1                	j	9b6 <malloc+0x36>
       if(p->s.size == nunits)
- a18:	02e48b63          	beq	s1,a4,a4e <malloc+0xa6>
+ 9f0:	02e48b63          	beq	s1,a4,a26 <malloc+0xa6>
         p->s.size -= nunits;
- a1c:	4137073b          	subw	a4,a4,s3
- a20:	c798                	sw	a4,8(a5)
+ 9f4:	4137073b          	subw	a4,a4,s3
+ 9f8:	c798                	sw	a4,8(a5)
         p += p->s.size;
- a22:	1702                	slli	a4,a4,0x20
- a24:	9301                	srli	a4,a4,0x20
- a26:	0712                	slli	a4,a4,0x4
- a28:	97ba                	add	a5,a5,a4
+ 9fa:	1702                	slli	a4,a4,0x20
+ 9fc:	9301                	srli	a4,a4,0x20
+ 9fe:	0712                	slli	a4,a4,0x4
+ a00:	97ba                	add	a5,a5,a4
         p->s.size = nunits;
- a2a:	0137a423          	sw	s3,8(a5)
+ a02:	0137a423          	sw	s3,8(a5)
       freep = prevp;
- a2e:	00000717          	auipc	a4,0x0
- a32:	0ea73923          	sd	a0,242(a4) # b20 <freep>
+ a06:	00000717          	auipc	a4,0x0
+ a0a:	0ea73923          	sd	a0,242(a4) # af8 <freep>
       return (void*)(p + 1);
- a36:	01078513          	addi	a0,a5,16
+ a0e:	01078513          	addi	a0,a5,16
       if((p = morecore(nunits)) == 0)
         return 0;
   }
 }
- a3a:	70e2                	ld	ra,56(sp)
- a3c:	7442                	ld	s0,48(sp)
- a3e:	74a2                	ld	s1,40(sp)
- a40:	7902                	ld	s2,32(sp)
- a42:	69e2                	ld	s3,24(sp)
- a44:	6a42                	ld	s4,16(sp)
- a46:	6aa2                	ld	s5,8(sp)
- a48:	6b02                	ld	s6,0(sp)
- a4a:	6121                	addi	sp,sp,64
- a4c:	8082                	ret
+ a12:	70e2                	ld	ra,56(sp)
+ a14:	7442                	ld	s0,48(sp)
+ a16:	74a2                	ld	s1,40(sp)
+ a18:	7902                	ld	s2,32(sp)
+ a1a:	69e2                	ld	s3,24(sp)
+ a1c:	6a42                	ld	s4,16(sp)
+ a1e:	6aa2                	ld	s5,8(sp)
+ a20:	6b02                	ld	s6,0(sp)
+ a22:	6121                	addi	sp,sp,64
+ a24:	8082                	ret
         prevp->s.ptr = p->s.ptr;
- a4e:	6398                	ld	a4,0(a5)
- a50:	e118                	sd	a4,0(a0)
- a52:	bff1                	j	a2e <malloc+0x86>
+ a26:	6398                	ld	a4,0(a5)
+ a28:	e118                	sd	a4,0(a0)
+ a2a:	bff1                	j	a06 <malloc+0x86>
   hp->s.size = nu;
- a54:	01652423          	sw	s6,8(a0)
+ a2c:	01652423          	sw	s6,8(a0)
   free((void*)(hp + 1));
- a58:	0541                	addi	a0,a0,16
- a5a:	00000097          	auipc	ra,0x0
- a5e:	ec6080e7          	jalr	-314(ra) # 920 <free>
+ a30:	0541                	addi	a0,a0,16
+ a32:	00000097          	auipc	ra,0x0
+ a36:	ec6080e7          	jalr	-314(ra) # 8f8 <free>
   return freep;
- a62:	00093503          	ld	a0,0(s2)
+ a3a:	00093503          	ld	a0,0(s2)
       if((p = morecore(nunits)) == 0)
- a66:	d971                	beqz	a0,a3a <malloc+0x92>
+ a3e:	d971                	beqz	a0,a12 <malloc+0x92>
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- a68:	611c                	ld	a5,0(a0)
+ a40:	611c                	ld	a5,0(a0)
     if(p->s.size >= nunits){
- a6a:	4798                	lw	a4,8(a5)
- a6c:	fa9776e3          	bgeu	a4,s1,a18 <malloc+0x70>
+ a42:	4798                	lw	a4,8(a5)
+ a44:	fa9776e3          	bgeu	a4,s1,9f0 <malloc+0x70>
     if(p == freep)
- a70:	00093703          	ld	a4,0(s2)
- a74:	853e                	mv	a0,a5
- a76:	fef719e3          	bne	a4,a5,a68 <malloc+0xc0>
+ a48:	00093703          	ld	a4,0(s2)
+ a4c:	853e                	mv	a0,a5
+ a4e:	fef719e3          	bne	a4,a5,a40 <malloc+0xc0>
   p = sbrk(nu * sizeof(Header));
- a7a:	8552                	mv	a0,s4
- a7c:	00000097          	auipc	ra,0x0
- a80:	b56080e7          	jalr	-1194(ra) # 5d2 <sbrk>
+ a52:	8552                	mv	a0,s4
+ a54:	00000097          	auipc	ra,0x0
+ a58:	b7e080e7          	jalr	-1154(ra) # 5d2 <sbrk>
   if(p == (char*)-1)
- a84:	fd5518e3          	bne	a0,s5,a54 <malloc+0xac>
+ a5c:	fd5518e3          	bne	a0,s5,a2c <malloc+0xac>
         return 0;
- a88:	4501                	li	a0,0
- a8a:	bf45                	j	a3a <malloc+0x92>
+ a60:	4501                	li	a0,0
+ a62:	bf45                	j	a12 <malloc+0x92>
diff --git a/user/ls.o b/user/ls.o
index 15efcca..c1a6591 100644
Binary files a/user/ls.o and b/user/ls.o differ
diff --git a/user/ls.sym b/user/ls.sym
index d3baed5..ded9a42 100644
--- a/user/ls.sym
+++ b/user/ls.sym
@@ -1,7 +1,7 @@
 0000000000000000 .text
-0000000000000a90 .rodata
-0000000000000b20 .sbss
-0000000000000b28 .bss
+0000000000000a68 .rodata
+0000000000000af8 .sbss
+0000000000000b00 .bss
 0000000000000000 .comment
 0000000000000000 .debug_aranges
 0000000000000000 .debug_info
@@ -12,57 +12,52 @@
 0000000000000000 .debug_loc
 0000000000000000 .debug_ranges
 0000000000000000 ls.c
-0000000000000b28 buf.1117
+0000000000000b00 buf.1107
 0000000000000000 ulib.c
 0000000000000000 printf.c
-0000000000000612 putc
-0000000000000634 printint
-0000000000000b08 digits
+00000000000005ea putc
+000000000000060c printint
+0000000000000ae0 digits
 0000000000000000 umalloc.c
-0000000000000b20 freep
-0000000000000b38 base
+0000000000000af8 freep
+0000000000000b10 base
 00000000000002d4 strcpy
 0000000000000000 fmtname
-00000000000008ea printf
-0000000000001319 __global_pointer$
+00000000000008c2 printf
+00000000000012f1 __global_pointer$
 0000000000000494 memmove
 0000000000000592 mknod
 0000000000000390 gets
-0000000000000b19 __SDATA_BEGIN__
+0000000000000af1 __SDATA_BEGIN__
 00000000000005ca getpid
 000000000000052a memcpy
-00000000000005fa print_stats
-00000000000009a8 malloc
+0000000000000980 malloc
 00000000000005da sleep
 000000000000055a pipe
 000000000000056a write
 00000000000005a2 fstat
-00000000000008bc fprintf
+0000000000000894 fprintf
 000000000000057a kill
-00000000000006de vprintf
+00000000000006b6 vprintf
 00000000000005ba chdir
-00000000000005ea pause_system
 0000000000000582 exec
 0000000000000552 wait
 0000000000000562 read
 000000000000059a unlink
-000000000000060a set_cpu
-0000000000000602 get_cpu
 00000000000004f0 memcmp
 0000000000000542 fork
-00000000000005f2 kill_system
-0000000000000b48 __BSS_END__
+0000000000000b20 __BSS_END__
 00000000000005d2 sbrk
 00000000000005e2 uptime
-0000000000000b19 __bss_start
+0000000000000af1 __bss_start
 0000000000000346 memset
 000000000000027a main
 00000000000002f0 strcmp
 00000000000005c2 dup
-0000000000000b19 __DATA_BEGIN__
+0000000000000af1 __DATA_BEGIN__
 0000000000000404 stat
-0000000000000b19 _edata
-0000000000000b48 _end
+0000000000000af1 _edata
+0000000000000b20 _end
 00000000000005aa link
 00000000000000b4 ls
 000000000000054a exit
@@ -72,4 +67,4 @@
 000000000000036c strchr
 00000000000005b2 mkdir
 0000000000000572 close
-0000000000000920 free
+00000000000008f8 free
diff --git a/user/mkdir.asm b/user/mkdir.asm
index 9dce910..8b81a7e 100644
--- a/user/mkdir.asm
+++ b/user/mkdir.asm
@@ -46,10 +46,10 @@ main(int argc, char *argv[])
   3c:	a80d                	j	6e <main+0x6e>
     fprintf(2, "Usage: mkdir files...\n");
   3e:	00000597          	auipc	a1,0x0
-  42:	7f258593          	addi	a1,a1,2034 # 830 <malloc+0xe4>
+  42:	7ca58593          	addi	a1,a1,1994 # 808 <malloc+0xe4>
   46:	4509                	li	a0,2
   48:	00000097          	auipc	ra,0x0
-  4c:	618080e7          	jalr	1560(ra) # 660 <fprintf>
+  4c:	5f0080e7          	jalr	1520(ra) # 638 <fprintf>
     exit(1);
   50:	4505                	li	a0,1
   52:	00000097          	auipc	ra,0x0
@@ -57,10 +57,10 @@ main(int argc, char *argv[])
       fprintf(2, "mkdir: %s failed to create\n", argv[i]);
   5a:	6090                	ld	a2,0(s1)
   5c:	00000597          	auipc	a1,0x0
-  60:	7ec58593          	addi	a1,a1,2028 # 848 <malloc+0xfc>
+  60:	7c458593          	addi	a1,a1,1988 # 820 <malloc+0xfc>
   64:	4509                	li	a0,2
   66:	00000097          	auipc	ra,0x0
-  6a:	5fa080e7          	jalr	1530(ra) # 660 <fprintf>
+  6a:	5d2080e7          	jalr	1490(ra) # 638 <fprintf>
       break;
     }
   }
@@ -707,696 +707,646 @@ uptime:
  ret
  38c:	8082                	ret
 
-000000000000038e <pause_system>:
-.global pause_system
-pause_system:
- li a7, SYS_pause_system
- 38e:	48d9                	li	a7,22
- ecall
- 390:	00000073          	ecall
- ret
- 394:	8082                	ret
-
-0000000000000396 <kill_system>:
-.global kill_system
-kill_system:
- li a7, SYS_kill_system
- 396:	48dd                	li	a7,23
- ecall
- 398:	00000073          	ecall
- ret
- 39c:	8082                	ret
-
-000000000000039e <print_stats>:
-.global print_stats
-print_stats:
- li a7, SYS_print_stats
- 39e:	48e1                	li	a7,24
- ecall
- 3a0:	00000073          	ecall
- ret
- 3a4:	8082                	ret
-
-00000000000003a6 <get_cpu>:
-.global get_cpu
-get_cpu:
- li a7, SYS_get_cpu
- 3a6:	48e5                	li	a7,25
- ecall
- 3a8:	00000073          	ecall
- ret
- 3ac:	8082                	ret
-
-00000000000003ae <set_cpu>:
-.global set_cpu
-set_cpu:
- li a7, SYS_set_cpu
- 3ae:	48e9                	li	a7,26
- ecall
- 3b0:	00000073          	ecall
- ret
- 3b4:	8082                	ret
-
-00000000000003b6 <putc>:
+000000000000038e <putc>:
 
 static char digits[] = "0123456789ABCDEF";
 
 static void
 putc(int fd, char c)
 {
- 3b6:	1101                	addi	sp,sp,-32
- 3b8:	ec06                	sd	ra,24(sp)
- 3ba:	e822                	sd	s0,16(sp)
- 3bc:	1000                	addi	s0,sp,32
- 3be:	feb407a3          	sb	a1,-17(s0)
+ 38e:	1101                	addi	sp,sp,-32
+ 390:	ec06                	sd	ra,24(sp)
+ 392:	e822                	sd	s0,16(sp)
+ 394:	1000                	addi	s0,sp,32
+ 396:	feb407a3          	sb	a1,-17(s0)
   write(fd, &c, 1);
- 3c2:	4605                	li	a2,1
- 3c4:	fef40593          	addi	a1,s0,-17
- 3c8:	00000097          	auipc	ra,0x0
- 3cc:	f46080e7          	jalr	-186(ra) # 30e <write>
+ 39a:	4605                	li	a2,1
+ 39c:	fef40593          	addi	a1,s0,-17
+ 3a0:	00000097          	auipc	ra,0x0
+ 3a4:	f6e080e7          	jalr	-146(ra) # 30e <write>
 }
- 3d0:	60e2                	ld	ra,24(sp)
- 3d2:	6442                	ld	s0,16(sp)
- 3d4:	6105                	addi	sp,sp,32
- 3d6:	8082                	ret
+ 3a8:	60e2                	ld	ra,24(sp)
+ 3aa:	6442                	ld	s0,16(sp)
+ 3ac:	6105                	addi	sp,sp,32
+ 3ae:	8082                	ret
 
-00000000000003d8 <printint>:
+00000000000003b0 <printint>:
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 3d8:	7139                	addi	sp,sp,-64
- 3da:	fc06                	sd	ra,56(sp)
- 3dc:	f822                	sd	s0,48(sp)
- 3de:	f426                	sd	s1,40(sp)
- 3e0:	f04a                	sd	s2,32(sp)
- 3e2:	ec4e                	sd	s3,24(sp)
- 3e4:	0080                	addi	s0,sp,64
- 3e6:	84aa                	mv	s1,a0
+ 3b0:	7139                	addi	sp,sp,-64
+ 3b2:	fc06                	sd	ra,56(sp)
+ 3b4:	f822                	sd	s0,48(sp)
+ 3b6:	f426                	sd	s1,40(sp)
+ 3b8:	f04a                	sd	s2,32(sp)
+ 3ba:	ec4e                	sd	s3,24(sp)
+ 3bc:	0080                	addi	s0,sp,64
+ 3be:	84aa                	mv	s1,a0
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 3e8:	c299                	beqz	a3,3ee <printint+0x16>
- 3ea:	0805c863          	bltz	a1,47a <printint+0xa2>
+ 3c0:	c299                	beqz	a3,3c6 <printint+0x16>
+ 3c2:	0805c863          	bltz	a1,452 <printint+0xa2>
     neg = 1;
     x = -xx;
   } else {
     x = xx;
- 3ee:	2581                	sext.w	a1,a1
+ 3c6:	2581                	sext.w	a1,a1
   neg = 0;
- 3f0:	4881                	li	a7,0
- 3f2:	fc040693          	addi	a3,s0,-64
+ 3c8:	4881                	li	a7,0
+ 3ca:	fc040693          	addi	a3,s0,-64
   }
 
   i = 0;
- 3f6:	4701                	li	a4,0
+ 3ce:	4701                	li	a4,0
   do{
     buf[i++] = digits[x % base];
- 3f8:	2601                	sext.w	a2,a2
- 3fa:	00000517          	auipc	a0,0x0
- 3fe:	47650513          	addi	a0,a0,1142 # 870 <digits>
- 402:	883a                	mv	a6,a4
- 404:	2705                	addiw	a4,a4,1
- 406:	02c5f7bb          	remuw	a5,a1,a2
- 40a:	1782                	slli	a5,a5,0x20
- 40c:	9381                	srli	a5,a5,0x20
- 40e:	97aa                	add	a5,a5,a0
- 410:	0007c783          	lbu	a5,0(a5)
- 414:	00f68023          	sb	a5,0(a3)
+ 3d0:	2601                	sext.w	a2,a2
+ 3d2:	00000517          	auipc	a0,0x0
+ 3d6:	47650513          	addi	a0,a0,1142 # 848 <digits>
+ 3da:	883a                	mv	a6,a4
+ 3dc:	2705                	addiw	a4,a4,1
+ 3de:	02c5f7bb          	remuw	a5,a1,a2
+ 3e2:	1782                	slli	a5,a5,0x20
+ 3e4:	9381                	srli	a5,a5,0x20
+ 3e6:	97aa                	add	a5,a5,a0
+ 3e8:	0007c783          	lbu	a5,0(a5)
+ 3ec:	00f68023          	sb	a5,0(a3)
   }while((x /= base) != 0);
- 418:	0005879b          	sext.w	a5,a1
- 41c:	02c5d5bb          	divuw	a1,a1,a2
- 420:	0685                	addi	a3,a3,1
- 422:	fec7f0e3          	bgeu	a5,a2,402 <printint+0x2a>
+ 3f0:	0005879b          	sext.w	a5,a1
+ 3f4:	02c5d5bb          	divuw	a1,a1,a2
+ 3f8:	0685                	addi	a3,a3,1
+ 3fa:	fec7f0e3          	bgeu	a5,a2,3da <printint+0x2a>
   if(neg)
- 426:	00088b63          	beqz	a7,43c <printint+0x64>
+ 3fe:	00088b63          	beqz	a7,414 <printint+0x64>
     buf[i++] = '-';
- 42a:	fd040793          	addi	a5,s0,-48
- 42e:	973e                	add	a4,a4,a5
- 430:	02d00793          	li	a5,45
- 434:	fef70823          	sb	a5,-16(a4)
- 438:	0028071b          	addiw	a4,a6,2
+ 402:	fd040793          	addi	a5,s0,-48
+ 406:	973e                	add	a4,a4,a5
+ 408:	02d00793          	li	a5,45
+ 40c:	fef70823          	sb	a5,-16(a4)
+ 410:	0028071b          	addiw	a4,a6,2
 
   while(--i >= 0)
- 43c:	02e05863          	blez	a4,46c <printint+0x94>
- 440:	fc040793          	addi	a5,s0,-64
- 444:	00e78933          	add	s2,a5,a4
- 448:	fff78993          	addi	s3,a5,-1
- 44c:	99ba                	add	s3,s3,a4
- 44e:	377d                	addiw	a4,a4,-1
- 450:	1702                	slli	a4,a4,0x20
- 452:	9301                	srli	a4,a4,0x20
- 454:	40e989b3          	sub	s3,s3,a4
+ 414:	02e05863          	blez	a4,444 <printint+0x94>
+ 418:	fc040793          	addi	a5,s0,-64
+ 41c:	00e78933          	add	s2,a5,a4
+ 420:	fff78993          	addi	s3,a5,-1
+ 424:	99ba                	add	s3,s3,a4
+ 426:	377d                	addiw	a4,a4,-1
+ 428:	1702                	slli	a4,a4,0x20
+ 42a:	9301                	srli	a4,a4,0x20
+ 42c:	40e989b3          	sub	s3,s3,a4
     putc(fd, buf[i]);
- 458:	fff94583          	lbu	a1,-1(s2)
- 45c:	8526                	mv	a0,s1
- 45e:	00000097          	auipc	ra,0x0
- 462:	f58080e7          	jalr	-168(ra) # 3b6 <putc>
+ 430:	fff94583          	lbu	a1,-1(s2)
+ 434:	8526                	mv	a0,s1
+ 436:	00000097          	auipc	ra,0x0
+ 43a:	f58080e7          	jalr	-168(ra) # 38e <putc>
   while(--i >= 0)
- 466:	197d                	addi	s2,s2,-1
- 468:	ff3918e3          	bne	s2,s3,458 <printint+0x80>
+ 43e:	197d                	addi	s2,s2,-1
+ 440:	ff3918e3          	bne	s2,s3,430 <printint+0x80>
 }
- 46c:	70e2                	ld	ra,56(sp)
- 46e:	7442                	ld	s0,48(sp)
- 470:	74a2                	ld	s1,40(sp)
- 472:	7902                	ld	s2,32(sp)
- 474:	69e2                	ld	s3,24(sp)
- 476:	6121                	addi	sp,sp,64
- 478:	8082                	ret
+ 444:	70e2                	ld	ra,56(sp)
+ 446:	7442                	ld	s0,48(sp)
+ 448:	74a2                	ld	s1,40(sp)
+ 44a:	7902                	ld	s2,32(sp)
+ 44c:	69e2                	ld	s3,24(sp)
+ 44e:	6121                	addi	sp,sp,64
+ 450:	8082                	ret
     x = -xx;
- 47a:	40b005bb          	negw	a1,a1
+ 452:	40b005bb          	negw	a1,a1
     neg = 1;
- 47e:	4885                	li	a7,1
+ 456:	4885                	li	a7,1
     x = -xx;
- 480:	bf8d                	j	3f2 <printint+0x1a>
+ 458:	bf8d                	j	3ca <printint+0x1a>
 
-0000000000000482 <vprintf>:
+000000000000045a <vprintf>:
 }
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 vprintf(int fd, const char *fmt, va_list ap)
 {
- 482:	7119                	addi	sp,sp,-128
- 484:	fc86                	sd	ra,120(sp)
- 486:	f8a2                	sd	s0,112(sp)
- 488:	f4a6                	sd	s1,104(sp)
- 48a:	f0ca                	sd	s2,96(sp)
- 48c:	ecce                	sd	s3,88(sp)
- 48e:	e8d2                	sd	s4,80(sp)
- 490:	e4d6                	sd	s5,72(sp)
- 492:	e0da                	sd	s6,64(sp)
- 494:	fc5e                	sd	s7,56(sp)
- 496:	f862                	sd	s8,48(sp)
- 498:	f466                	sd	s9,40(sp)
- 49a:	f06a                	sd	s10,32(sp)
- 49c:	ec6e                	sd	s11,24(sp)
- 49e:	0100                	addi	s0,sp,128
+ 45a:	7119                	addi	sp,sp,-128
+ 45c:	fc86                	sd	ra,120(sp)
+ 45e:	f8a2                	sd	s0,112(sp)
+ 460:	f4a6                	sd	s1,104(sp)
+ 462:	f0ca                	sd	s2,96(sp)
+ 464:	ecce                	sd	s3,88(sp)
+ 466:	e8d2                	sd	s4,80(sp)
+ 468:	e4d6                	sd	s5,72(sp)
+ 46a:	e0da                	sd	s6,64(sp)
+ 46c:	fc5e                	sd	s7,56(sp)
+ 46e:	f862                	sd	s8,48(sp)
+ 470:	f466                	sd	s9,40(sp)
+ 472:	f06a                	sd	s10,32(sp)
+ 474:	ec6e                	sd	s11,24(sp)
+ 476:	0100                	addi	s0,sp,128
   char *s;
   int c, i, state;
 
   state = 0;
   for(i = 0; fmt[i]; i++){
- 4a0:	0005c903          	lbu	s2,0(a1)
- 4a4:	18090f63          	beqz	s2,642 <vprintf+0x1c0>
- 4a8:	8aaa                	mv	s5,a0
- 4aa:	8b32                	mv	s6,a2
- 4ac:	00158493          	addi	s1,a1,1
+ 478:	0005c903          	lbu	s2,0(a1)
+ 47c:	18090f63          	beqz	s2,61a <vprintf+0x1c0>
+ 480:	8aaa                	mv	s5,a0
+ 482:	8b32                	mv	s6,a2
+ 484:	00158493          	addi	s1,a1,1
   state = 0;
- 4b0:	4981                	li	s3,0
+ 488:	4981                	li	s3,0
       if(c == '%'){
         state = '%';
       } else {
         putc(fd, c);
       }
     } else if(state == '%'){
- 4b2:	02500a13          	li	s4,37
+ 48a:	02500a13          	li	s4,37
       if(c == 'd'){
- 4b6:	06400c13          	li	s8,100
+ 48e:	06400c13          	li	s8,100
         printint(fd, va_arg(ap, int), 10, 1);
       } else if(c == 'l') {
- 4ba:	06c00c93          	li	s9,108
+ 492:	06c00c93          	li	s9,108
         printint(fd, va_arg(ap, uint64), 10, 0);
       } else if(c == 'x') {
- 4be:	07800d13          	li	s10,120
+ 496:	07800d13          	li	s10,120
         printint(fd, va_arg(ap, int), 16, 0);
       } else if(c == 'p') {
- 4c2:	07000d93          	li	s11,112
+ 49a:	07000d93          	li	s11,112
     putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
- 4c6:	00000b97          	auipc	s7,0x0
- 4ca:	3aab8b93          	addi	s7,s7,938 # 870 <digits>
- 4ce:	a839                	j	4ec <vprintf+0x6a>
+ 49e:	00000b97          	auipc	s7,0x0
+ 4a2:	3aab8b93          	addi	s7,s7,938 # 848 <digits>
+ 4a6:	a839                	j	4c4 <vprintf+0x6a>
         putc(fd, c);
- 4d0:	85ca                	mv	a1,s2
- 4d2:	8556                	mv	a0,s5
- 4d4:	00000097          	auipc	ra,0x0
- 4d8:	ee2080e7          	jalr	-286(ra) # 3b6 <putc>
- 4dc:	a019                	j	4e2 <vprintf+0x60>
+ 4a8:	85ca                	mv	a1,s2
+ 4aa:	8556                	mv	a0,s5
+ 4ac:	00000097          	auipc	ra,0x0
+ 4b0:	ee2080e7          	jalr	-286(ra) # 38e <putc>
+ 4b4:	a019                	j	4ba <vprintf+0x60>
     } else if(state == '%'){
- 4de:	01498f63          	beq	s3,s4,4fc <vprintf+0x7a>
+ 4b6:	01498f63          	beq	s3,s4,4d4 <vprintf+0x7a>
   for(i = 0; fmt[i]; i++){
- 4e2:	0485                	addi	s1,s1,1
- 4e4:	fff4c903          	lbu	s2,-1(s1)
- 4e8:	14090d63          	beqz	s2,642 <vprintf+0x1c0>
+ 4ba:	0485                	addi	s1,s1,1
+ 4bc:	fff4c903          	lbu	s2,-1(s1)
+ 4c0:	14090d63          	beqz	s2,61a <vprintf+0x1c0>
     c = fmt[i] & 0xff;
- 4ec:	0009079b          	sext.w	a5,s2
+ 4c4:	0009079b          	sext.w	a5,s2
     if(state == 0){
- 4f0:	fe0997e3          	bnez	s3,4de <vprintf+0x5c>
+ 4c8:	fe0997e3          	bnez	s3,4b6 <vprintf+0x5c>
       if(c == '%'){
- 4f4:	fd479ee3          	bne	a5,s4,4d0 <vprintf+0x4e>
+ 4cc:	fd479ee3          	bne	a5,s4,4a8 <vprintf+0x4e>
         state = '%';
- 4f8:	89be                	mv	s3,a5
- 4fa:	b7e5                	j	4e2 <vprintf+0x60>
+ 4d0:	89be                	mv	s3,a5
+ 4d2:	b7e5                	j	4ba <vprintf+0x60>
       if(c == 'd'){
- 4fc:	05878063          	beq	a5,s8,53c <vprintf+0xba>
+ 4d4:	05878063          	beq	a5,s8,514 <vprintf+0xba>
       } else if(c == 'l') {
- 500:	05978c63          	beq	a5,s9,558 <vprintf+0xd6>
+ 4d8:	05978c63          	beq	a5,s9,530 <vprintf+0xd6>
       } else if(c == 'x') {
- 504:	07a78863          	beq	a5,s10,574 <vprintf+0xf2>
+ 4dc:	07a78863          	beq	a5,s10,54c <vprintf+0xf2>
       } else if(c == 'p') {
- 508:	09b78463          	beq	a5,s11,590 <vprintf+0x10e>
+ 4e0:	09b78463          	beq	a5,s11,568 <vprintf+0x10e>
         printptr(fd, va_arg(ap, uint64));
       } else if(c == 's'){
- 50c:	07300713          	li	a4,115
- 510:	0ce78663          	beq	a5,a4,5dc <vprintf+0x15a>
+ 4e4:	07300713          	li	a4,115
+ 4e8:	0ce78663          	beq	a5,a4,5b4 <vprintf+0x15a>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 514:	06300713          	li	a4,99
- 518:	0ee78e63          	beq	a5,a4,614 <vprintf+0x192>
+ 4ec:	06300713          	li	a4,99
+ 4f0:	0ee78e63          	beq	a5,a4,5ec <vprintf+0x192>
         putc(fd, va_arg(ap, uint));
       } else if(c == '%'){
- 51c:	11478863          	beq	a5,s4,62c <vprintf+0x1aa>
+ 4f4:	11478863          	beq	a5,s4,604 <vprintf+0x1aa>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
- 520:	85d2                	mv	a1,s4
- 522:	8556                	mv	a0,s5
- 524:	00000097          	auipc	ra,0x0
- 528:	e92080e7          	jalr	-366(ra) # 3b6 <putc>
+ 4f8:	85d2                	mv	a1,s4
+ 4fa:	8556                	mv	a0,s5
+ 4fc:	00000097          	auipc	ra,0x0
+ 500:	e92080e7          	jalr	-366(ra) # 38e <putc>
         putc(fd, c);
- 52c:	85ca                	mv	a1,s2
- 52e:	8556                	mv	a0,s5
- 530:	00000097          	auipc	ra,0x0
- 534:	e86080e7          	jalr	-378(ra) # 3b6 <putc>
+ 504:	85ca                	mv	a1,s2
+ 506:	8556                	mv	a0,s5
+ 508:	00000097          	auipc	ra,0x0
+ 50c:	e86080e7          	jalr	-378(ra) # 38e <putc>
       }
       state = 0;
- 538:	4981                	li	s3,0
- 53a:	b765                	j	4e2 <vprintf+0x60>
+ 510:	4981                	li	s3,0
+ 512:	b765                	j	4ba <vprintf+0x60>
         printint(fd, va_arg(ap, int), 10, 1);
- 53c:	008b0913          	addi	s2,s6,8
- 540:	4685                	li	a3,1
- 542:	4629                	li	a2,10
- 544:	000b2583          	lw	a1,0(s6)
- 548:	8556                	mv	a0,s5
- 54a:	00000097          	auipc	ra,0x0
- 54e:	e8e080e7          	jalr	-370(ra) # 3d8 <printint>
- 552:	8b4a                	mv	s6,s2
+ 514:	008b0913          	addi	s2,s6,8
+ 518:	4685                	li	a3,1
+ 51a:	4629                	li	a2,10
+ 51c:	000b2583          	lw	a1,0(s6)
+ 520:	8556                	mv	a0,s5
+ 522:	00000097          	auipc	ra,0x0
+ 526:	e8e080e7          	jalr	-370(ra) # 3b0 <printint>
+ 52a:	8b4a                	mv	s6,s2
       state = 0;
- 554:	4981                	li	s3,0
- 556:	b771                	j	4e2 <vprintf+0x60>
+ 52c:	4981                	li	s3,0
+ 52e:	b771                	j	4ba <vprintf+0x60>
         printint(fd, va_arg(ap, uint64), 10, 0);
- 558:	008b0913          	addi	s2,s6,8
- 55c:	4681                	li	a3,0
- 55e:	4629                	li	a2,10
- 560:	000b2583          	lw	a1,0(s6)
- 564:	8556                	mv	a0,s5
- 566:	00000097          	auipc	ra,0x0
- 56a:	e72080e7          	jalr	-398(ra) # 3d8 <printint>
- 56e:	8b4a                	mv	s6,s2
+ 530:	008b0913          	addi	s2,s6,8
+ 534:	4681                	li	a3,0
+ 536:	4629                	li	a2,10
+ 538:	000b2583          	lw	a1,0(s6)
+ 53c:	8556                	mv	a0,s5
+ 53e:	00000097          	auipc	ra,0x0
+ 542:	e72080e7          	jalr	-398(ra) # 3b0 <printint>
+ 546:	8b4a                	mv	s6,s2
       state = 0;
- 570:	4981                	li	s3,0
- 572:	bf85                	j	4e2 <vprintf+0x60>
+ 548:	4981                	li	s3,0
+ 54a:	bf85                	j	4ba <vprintf+0x60>
         printint(fd, va_arg(ap, int), 16, 0);
- 574:	008b0913          	addi	s2,s6,8
- 578:	4681                	li	a3,0
- 57a:	4641                	li	a2,16
- 57c:	000b2583          	lw	a1,0(s6)
- 580:	8556                	mv	a0,s5
- 582:	00000097          	auipc	ra,0x0
- 586:	e56080e7          	jalr	-426(ra) # 3d8 <printint>
- 58a:	8b4a                	mv	s6,s2
+ 54c:	008b0913          	addi	s2,s6,8
+ 550:	4681                	li	a3,0
+ 552:	4641                	li	a2,16
+ 554:	000b2583          	lw	a1,0(s6)
+ 558:	8556                	mv	a0,s5
+ 55a:	00000097          	auipc	ra,0x0
+ 55e:	e56080e7          	jalr	-426(ra) # 3b0 <printint>
+ 562:	8b4a                	mv	s6,s2
       state = 0;
- 58c:	4981                	li	s3,0
- 58e:	bf91                	j	4e2 <vprintf+0x60>
+ 564:	4981                	li	s3,0
+ 566:	bf91                	j	4ba <vprintf+0x60>
         printptr(fd, va_arg(ap, uint64));
- 590:	008b0793          	addi	a5,s6,8
- 594:	f8f43423          	sd	a5,-120(s0)
- 598:	000b3983          	ld	s3,0(s6)
+ 568:	008b0793          	addi	a5,s6,8
+ 56c:	f8f43423          	sd	a5,-120(s0)
+ 570:	000b3983          	ld	s3,0(s6)
   putc(fd, '0');
- 59c:	03000593          	li	a1,48
- 5a0:	8556                	mv	a0,s5
- 5a2:	00000097          	auipc	ra,0x0
- 5a6:	e14080e7          	jalr	-492(ra) # 3b6 <putc>
+ 574:	03000593          	li	a1,48
+ 578:	8556                	mv	a0,s5
+ 57a:	00000097          	auipc	ra,0x0
+ 57e:	e14080e7          	jalr	-492(ra) # 38e <putc>
   putc(fd, 'x');
- 5aa:	85ea                	mv	a1,s10
- 5ac:	8556                	mv	a0,s5
- 5ae:	00000097          	auipc	ra,0x0
- 5b2:	e08080e7          	jalr	-504(ra) # 3b6 <putc>
- 5b6:	4941                	li	s2,16
+ 582:	85ea                	mv	a1,s10
+ 584:	8556                	mv	a0,s5
+ 586:	00000097          	auipc	ra,0x0
+ 58a:	e08080e7          	jalr	-504(ra) # 38e <putc>
+ 58e:	4941                	li	s2,16
     putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
- 5b8:	03c9d793          	srli	a5,s3,0x3c
- 5bc:	97de                	add	a5,a5,s7
- 5be:	0007c583          	lbu	a1,0(a5)
- 5c2:	8556                	mv	a0,s5
- 5c4:	00000097          	auipc	ra,0x0
- 5c8:	df2080e7          	jalr	-526(ra) # 3b6 <putc>
+ 590:	03c9d793          	srli	a5,s3,0x3c
+ 594:	97de                	add	a5,a5,s7
+ 596:	0007c583          	lbu	a1,0(a5)
+ 59a:	8556                	mv	a0,s5
+ 59c:	00000097          	auipc	ra,0x0
+ 5a0:	df2080e7          	jalr	-526(ra) # 38e <putc>
   for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
- 5cc:	0992                	slli	s3,s3,0x4
- 5ce:	397d                	addiw	s2,s2,-1
- 5d0:	fe0914e3          	bnez	s2,5b8 <vprintf+0x136>
+ 5a4:	0992                	slli	s3,s3,0x4
+ 5a6:	397d                	addiw	s2,s2,-1
+ 5a8:	fe0914e3          	bnez	s2,590 <vprintf+0x136>
         printptr(fd, va_arg(ap, uint64));
- 5d4:	f8843b03          	ld	s6,-120(s0)
+ 5ac:	f8843b03          	ld	s6,-120(s0)
       state = 0;
- 5d8:	4981                	li	s3,0
- 5da:	b721                	j	4e2 <vprintf+0x60>
+ 5b0:	4981                	li	s3,0
+ 5b2:	b721                	j	4ba <vprintf+0x60>
         s = va_arg(ap, char*);
- 5dc:	008b0993          	addi	s3,s6,8
- 5e0:	000b3903          	ld	s2,0(s6)
+ 5b4:	008b0993          	addi	s3,s6,8
+ 5b8:	000b3903          	ld	s2,0(s6)
         if(s == 0)
- 5e4:	02090163          	beqz	s2,606 <vprintf+0x184>
+ 5bc:	02090163          	beqz	s2,5de <vprintf+0x184>
         while(*s != 0){
- 5e8:	00094583          	lbu	a1,0(s2)
- 5ec:	c9a1                	beqz	a1,63c <vprintf+0x1ba>
+ 5c0:	00094583          	lbu	a1,0(s2)
+ 5c4:	c9a1                	beqz	a1,614 <vprintf+0x1ba>
           putc(fd, *s);
- 5ee:	8556                	mv	a0,s5
- 5f0:	00000097          	auipc	ra,0x0
- 5f4:	dc6080e7          	jalr	-570(ra) # 3b6 <putc>
+ 5c6:	8556                	mv	a0,s5
+ 5c8:	00000097          	auipc	ra,0x0
+ 5cc:	dc6080e7          	jalr	-570(ra) # 38e <putc>
           s++;
- 5f8:	0905                	addi	s2,s2,1
+ 5d0:	0905                	addi	s2,s2,1
         while(*s != 0){
- 5fa:	00094583          	lbu	a1,0(s2)
- 5fe:	f9e5                	bnez	a1,5ee <vprintf+0x16c>
+ 5d2:	00094583          	lbu	a1,0(s2)
+ 5d6:	f9e5                	bnez	a1,5c6 <vprintf+0x16c>
         s = va_arg(ap, char*);
- 600:	8b4e                	mv	s6,s3
+ 5d8:	8b4e                	mv	s6,s3
       state = 0;
- 602:	4981                	li	s3,0
- 604:	bdf9                	j	4e2 <vprintf+0x60>
+ 5da:	4981                	li	s3,0
+ 5dc:	bdf9                	j	4ba <vprintf+0x60>
           s = "(null)";
- 606:	00000917          	auipc	s2,0x0
- 60a:	26290913          	addi	s2,s2,610 # 868 <malloc+0x11c>
+ 5de:	00000917          	auipc	s2,0x0
+ 5e2:	26290913          	addi	s2,s2,610 # 840 <malloc+0x11c>
         while(*s != 0){
- 60e:	02800593          	li	a1,40
- 612:	bff1                	j	5ee <vprintf+0x16c>
+ 5e6:	02800593          	li	a1,40
+ 5ea:	bff1                	j	5c6 <vprintf+0x16c>
         putc(fd, va_arg(ap, uint));
- 614:	008b0913          	addi	s2,s6,8
- 618:	000b4583          	lbu	a1,0(s6)
- 61c:	8556                	mv	a0,s5
- 61e:	00000097          	auipc	ra,0x0
- 622:	d98080e7          	jalr	-616(ra) # 3b6 <putc>
- 626:	8b4a                	mv	s6,s2
+ 5ec:	008b0913          	addi	s2,s6,8
+ 5f0:	000b4583          	lbu	a1,0(s6)
+ 5f4:	8556                	mv	a0,s5
+ 5f6:	00000097          	auipc	ra,0x0
+ 5fa:	d98080e7          	jalr	-616(ra) # 38e <putc>
+ 5fe:	8b4a                	mv	s6,s2
       state = 0;
- 628:	4981                	li	s3,0
- 62a:	bd65                	j	4e2 <vprintf+0x60>
+ 600:	4981                	li	s3,0
+ 602:	bd65                	j	4ba <vprintf+0x60>
         putc(fd, c);
- 62c:	85d2                	mv	a1,s4
- 62e:	8556                	mv	a0,s5
- 630:	00000097          	auipc	ra,0x0
- 634:	d86080e7          	jalr	-634(ra) # 3b6 <putc>
+ 604:	85d2                	mv	a1,s4
+ 606:	8556                	mv	a0,s5
+ 608:	00000097          	auipc	ra,0x0
+ 60c:	d86080e7          	jalr	-634(ra) # 38e <putc>
       state = 0;
- 638:	4981                	li	s3,0
- 63a:	b565                	j	4e2 <vprintf+0x60>
+ 610:	4981                	li	s3,0
+ 612:	b565                	j	4ba <vprintf+0x60>
         s = va_arg(ap, char*);
- 63c:	8b4e                	mv	s6,s3
+ 614:	8b4e                	mv	s6,s3
       state = 0;
- 63e:	4981                	li	s3,0
- 640:	b54d                	j	4e2 <vprintf+0x60>
+ 616:	4981                	li	s3,0
+ 618:	b54d                	j	4ba <vprintf+0x60>
     }
   }
 }
- 642:	70e6                	ld	ra,120(sp)
- 644:	7446                	ld	s0,112(sp)
- 646:	74a6                	ld	s1,104(sp)
- 648:	7906                	ld	s2,96(sp)
- 64a:	69e6                	ld	s3,88(sp)
- 64c:	6a46                	ld	s4,80(sp)
- 64e:	6aa6                	ld	s5,72(sp)
- 650:	6b06                	ld	s6,64(sp)
- 652:	7be2                	ld	s7,56(sp)
- 654:	7c42                	ld	s8,48(sp)
- 656:	7ca2                	ld	s9,40(sp)
- 658:	7d02                	ld	s10,32(sp)
- 65a:	6de2                	ld	s11,24(sp)
- 65c:	6109                	addi	sp,sp,128
- 65e:	8082                	ret
-
-0000000000000660 <fprintf>:
+ 61a:	70e6                	ld	ra,120(sp)
+ 61c:	7446                	ld	s0,112(sp)
+ 61e:	74a6                	ld	s1,104(sp)
+ 620:	7906                	ld	s2,96(sp)
+ 622:	69e6                	ld	s3,88(sp)
+ 624:	6a46                	ld	s4,80(sp)
+ 626:	6aa6                	ld	s5,72(sp)
+ 628:	6b06                	ld	s6,64(sp)
+ 62a:	7be2                	ld	s7,56(sp)
+ 62c:	7c42                	ld	s8,48(sp)
+ 62e:	7ca2                	ld	s9,40(sp)
+ 630:	7d02                	ld	s10,32(sp)
+ 632:	6de2                	ld	s11,24(sp)
+ 634:	6109                	addi	sp,sp,128
+ 636:	8082                	ret
+
+0000000000000638 <fprintf>:
 
 void
 fprintf(int fd, const char *fmt, ...)
 {
- 660:	715d                	addi	sp,sp,-80
- 662:	ec06                	sd	ra,24(sp)
- 664:	e822                	sd	s0,16(sp)
- 666:	1000                	addi	s0,sp,32
- 668:	e010                	sd	a2,0(s0)
- 66a:	e414                	sd	a3,8(s0)
- 66c:	e818                	sd	a4,16(s0)
- 66e:	ec1c                	sd	a5,24(s0)
- 670:	03043023          	sd	a6,32(s0)
- 674:	03143423          	sd	a7,40(s0)
+ 638:	715d                	addi	sp,sp,-80
+ 63a:	ec06                	sd	ra,24(sp)
+ 63c:	e822                	sd	s0,16(sp)
+ 63e:	1000                	addi	s0,sp,32
+ 640:	e010                	sd	a2,0(s0)
+ 642:	e414                	sd	a3,8(s0)
+ 644:	e818                	sd	a4,16(s0)
+ 646:	ec1c                	sd	a5,24(s0)
+ 648:	03043023          	sd	a6,32(s0)
+ 64c:	03143423          	sd	a7,40(s0)
   va_list ap;
 
   va_start(ap, fmt);
- 678:	fe843423          	sd	s0,-24(s0)
+ 650:	fe843423          	sd	s0,-24(s0)
   vprintf(fd, fmt, ap);
- 67c:	8622                	mv	a2,s0
- 67e:	00000097          	auipc	ra,0x0
- 682:	e04080e7          	jalr	-508(ra) # 482 <vprintf>
+ 654:	8622                	mv	a2,s0
+ 656:	00000097          	auipc	ra,0x0
+ 65a:	e04080e7          	jalr	-508(ra) # 45a <vprintf>
 }
- 686:	60e2                	ld	ra,24(sp)
- 688:	6442                	ld	s0,16(sp)
- 68a:	6161                	addi	sp,sp,80
- 68c:	8082                	ret
+ 65e:	60e2                	ld	ra,24(sp)
+ 660:	6442                	ld	s0,16(sp)
+ 662:	6161                	addi	sp,sp,80
+ 664:	8082                	ret
 
-000000000000068e <printf>:
+0000000000000666 <printf>:
 
 void
 printf(const char *fmt, ...)
 {
- 68e:	711d                	addi	sp,sp,-96
- 690:	ec06                	sd	ra,24(sp)
- 692:	e822                	sd	s0,16(sp)
- 694:	1000                	addi	s0,sp,32
- 696:	e40c                	sd	a1,8(s0)
- 698:	e810                	sd	a2,16(s0)
- 69a:	ec14                	sd	a3,24(s0)
- 69c:	f018                	sd	a4,32(s0)
- 69e:	f41c                	sd	a5,40(s0)
- 6a0:	03043823          	sd	a6,48(s0)
- 6a4:	03143c23          	sd	a7,56(s0)
+ 666:	711d                	addi	sp,sp,-96
+ 668:	ec06                	sd	ra,24(sp)
+ 66a:	e822                	sd	s0,16(sp)
+ 66c:	1000                	addi	s0,sp,32
+ 66e:	e40c                	sd	a1,8(s0)
+ 670:	e810                	sd	a2,16(s0)
+ 672:	ec14                	sd	a3,24(s0)
+ 674:	f018                	sd	a4,32(s0)
+ 676:	f41c                	sd	a5,40(s0)
+ 678:	03043823          	sd	a6,48(s0)
+ 67c:	03143c23          	sd	a7,56(s0)
   va_list ap;
 
   va_start(ap, fmt);
- 6a8:	00840613          	addi	a2,s0,8
- 6ac:	fec43423          	sd	a2,-24(s0)
+ 680:	00840613          	addi	a2,s0,8
+ 684:	fec43423          	sd	a2,-24(s0)
   vprintf(1, fmt, ap);
- 6b0:	85aa                	mv	a1,a0
- 6b2:	4505                	li	a0,1
- 6b4:	00000097          	auipc	ra,0x0
- 6b8:	dce080e7          	jalr	-562(ra) # 482 <vprintf>
+ 688:	85aa                	mv	a1,a0
+ 68a:	4505                	li	a0,1
+ 68c:	00000097          	auipc	ra,0x0
+ 690:	dce080e7          	jalr	-562(ra) # 45a <vprintf>
 }
- 6bc:	60e2                	ld	ra,24(sp)
- 6be:	6442                	ld	s0,16(sp)
- 6c0:	6125                	addi	sp,sp,96
- 6c2:	8082                	ret
+ 694:	60e2                	ld	ra,24(sp)
+ 696:	6442                	ld	s0,16(sp)
+ 698:	6125                	addi	sp,sp,96
+ 69a:	8082                	ret
 
-00000000000006c4 <free>:
+000000000000069c <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 6c4:	1141                	addi	sp,sp,-16
- 6c6:	e422                	sd	s0,8(sp)
- 6c8:	0800                	addi	s0,sp,16
+ 69c:	1141                	addi	sp,sp,-16
+ 69e:	e422                	sd	s0,8(sp)
+ 6a0:	0800                	addi	s0,sp,16
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
- 6ca:	ff050693          	addi	a3,a0,-16
+ 6a2:	ff050693          	addi	a3,a0,-16
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6ce:	00000797          	auipc	a5,0x0
- 6d2:	1ba7b783          	ld	a5,442(a5) # 888 <freep>
- 6d6:	a805                	j	706 <free+0x42>
+ 6a6:	00000797          	auipc	a5,0x0
+ 6aa:	1ba7b783          	ld	a5,442(a5) # 860 <freep>
+ 6ae:	a805                	j	6de <free+0x42>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
       break;
   if(bp + bp->s.size == p->s.ptr){
     bp->s.size += p->s.ptr->s.size;
- 6d8:	4618                	lw	a4,8(a2)
- 6da:	9db9                	addw	a1,a1,a4
- 6dc:	feb52c23          	sw	a1,-8(a0)
+ 6b0:	4618                	lw	a4,8(a2)
+ 6b2:	9db9                	addw	a1,a1,a4
+ 6b4:	feb52c23          	sw	a1,-8(a0)
     bp->s.ptr = p->s.ptr->s.ptr;
- 6e0:	6398                	ld	a4,0(a5)
- 6e2:	6318                	ld	a4,0(a4)
- 6e4:	fee53823          	sd	a4,-16(a0)
- 6e8:	a091                	j	72c <free+0x68>
+ 6b8:	6398                	ld	a4,0(a5)
+ 6ba:	6318                	ld	a4,0(a4)
+ 6bc:	fee53823          	sd	a4,-16(a0)
+ 6c0:	a091                	j	704 <free+0x68>
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
     p->s.size += bp->s.size;
- 6ea:	ff852703          	lw	a4,-8(a0)
- 6ee:	9e39                	addw	a2,a2,a4
- 6f0:	c790                	sw	a2,8(a5)
+ 6c2:	ff852703          	lw	a4,-8(a0)
+ 6c6:	9e39                	addw	a2,a2,a4
+ 6c8:	c790                	sw	a2,8(a5)
     p->s.ptr = bp->s.ptr;
- 6f2:	ff053703          	ld	a4,-16(a0)
- 6f6:	e398                	sd	a4,0(a5)
- 6f8:	a099                	j	73e <free+0x7a>
+ 6ca:	ff053703          	ld	a4,-16(a0)
+ 6ce:	e398                	sd	a4,0(a5)
+ 6d0:	a099                	j	716 <free+0x7a>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6fa:	6398                	ld	a4,0(a5)
- 6fc:	00e7e463          	bltu	a5,a4,704 <free+0x40>
- 700:	00e6ea63          	bltu	a3,a4,714 <free+0x50>
+ 6d2:	6398                	ld	a4,0(a5)
+ 6d4:	00e7e463          	bltu	a5,a4,6dc <free+0x40>
+ 6d8:	00e6ea63          	bltu	a3,a4,6ec <free+0x50>
 {
- 704:	87ba                	mv	a5,a4
+ 6dc:	87ba                	mv	a5,a4
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 706:	fed7fae3          	bgeu	a5,a3,6fa <free+0x36>
- 70a:	6398                	ld	a4,0(a5)
- 70c:	00e6e463          	bltu	a3,a4,714 <free+0x50>
+ 6de:	fed7fae3          	bgeu	a5,a3,6d2 <free+0x36>
+ 6e2:	6398                	ld	a4,0(a5)
+ 6e4:	00e6e463          	bltu	a3,a4,6ec <free+0x50>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 710:	fee7eae3          	bltu	a5,a4,704 <free+0x40>
+ 6e8:	fee7eae3          	bltu	a5,a4,6dc <free+0x40>
   if(bp + bp->s.size == p->s.ptr){
- 714:	ff852583          	lw	a1,-8(a0)
- 718:	6390                	ld	a2,0(a5)
- 71a:	02059713          	slli	a4,a1,0x20
- 71e:	9301                	srli	a4,a4,0x20
- 720:	0712                	slli	a4,a4,0x4
- 722:	9736                	add	a4,a4,a3
- 724:	fae60ae3          	beq	a2,a4,6d8 <free+0x14>
+ 6ec:	ff852583          	lw	a1,-8(a0)
+ 6f0:	6390                	ld	a2,0(a5)
+ 6f2:	02059713          	slli	a4,a1,0x20
+ 6f6:	9301                	srli	a4,a4,0x20
+ 6f8:	0712                	slli	a4,a4,0x4
+ 6fa:	9736                	add	a4,a4,a3
+ 6fc:	fae60ae3          	beq	a2,a4,6b0 <free+0x14>
     bp->s.ptr = p->s.ptr;
- 728:	fec53823          	sd	a2,-16(a0)
+ 700:	fec53823          	sd	a2,-16(a0)
   if(p + p->s.size == bp){
- 72c:	4790                	lw	a2,8(a5)
- 72e:	02061713          	slli	a4,a2,0x20
- 732:	9301                	srli	a4,a4,0x20
- 734:	0712                	slli	a4,a4,0x4
- 736:	973e                	add	a4,a4,a5
- 738:	fae689e3          	beq	a3,a4,6ea <free+0x26>
+ 704:	4790                	lw	a2,8(a5)
+ 706:	02061713          	slli	a4,a2,0x20
+ 70a:	9301                	srli	a4,a4,0x20
+ 70c:	0712                	slli	a4,a4,0x4
+ 70e:	973e                	add	a4,a4,a5
+ 710:	fae689e3          	beq	a3,a4,6c2 <free+0x26>
   } else
     p->s.ptr = bp;
- 73c:	e394                	sd	a3,0(a5)
+ 714:	e394                	sd	a3,0(a5)
   freep = p;
- 73e:	00000717          	auipc	a4,0x0
- 742:	14f73523          	sd	a5,330(a4) # 888 <freep>
+ 716:	00000717          	auipc	a4,0x0
+ 71a:	14f73523          	sd	a5,330(a4) # 860 <freep>
 }
- 746:	6422                	ld	s0,8(sp)
- 748:	0141                	addi	sp,sp,16
- 74a:	8082                	ret
+ 71e:	6422                	ld	s0,8(sp)
+ 720:	0141                	addi	sp,sp,16
+ 722:	8082                	ret
 
-000000000000074c <malloc>:
+0000000000000724 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 74c:	7139                	addi	sp,sp,-64
- 74e:	fc06                	sd	ra,56(sp)
- 750:	f822                	sd	s0,48(sp)
- 752:	f426                	sd	s1,40(sp)
- 754:	f04a                	sd	s2,32(sp)
- 756:	ec4e                	sd	s3,24(sp)
- 758:	e852                	sd	s4,16(sp)
- 75a:	e456                	sd	s5,8(sp)
- 75c:	e05a                	sd	s6,0(sp)
- 75e:	0080                	addi	s0,sp,64
+ 724:	7139                	addi	sp,sp,-64
+ 726:	fc06                	sd	ra,56(sp)
+ 728:	f822                	sd	s0,48(sp)
+ 72a:	f426                	sd	s1,40(sp)
+ 72c:	f04a                	sd	s2,32(sp)
+ 72e:	ec4e                	sd	s3,24(sp)
+ 730:	e852                	sd	s4,16(sp)
+ 732:	e456                	sd	s5,8(sp)
+ 734:	e05a                	sd	s6,0(sp)
+ 736:	0080                	addi	s0,sp,64
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 760:	02051493          	slli	s1,a0,0x20
- 764:	9081                	srli	s1,s1,0x20
- 766:	04bd                	addi	s1,s1,15
- 768:	8091                	srli	s1,s1,0x4
- 76a:	0014899b          	addiw	s3,s1,1
- 76e:	0485                	addi	s1,s1,1
+ 738:	02051493          	slli	s1,a0,0x20
+ 73c:	9081                	srli	s1,s1,0x20
+ 73e:	04bd                	addi	s1,s1,15
+ 740:	8091                	srli	s1,s1,0x4
+ 742:	0014899b          	addiw	s3,s1,1
+ 746:	0485                	addi	s1,s1,1
   if((prevp = freep) == 0){
- 770:	00000517          	auipc	a0,0x0
- 774:	11853503          	ld	a0,280(a0) # 888 <freep>
- 778:	c515                	beqz	a0,7a4 <malloc+0x58>
+ 748:	00000517          	auipc	a0,0x0
+ 74c:	11853503          	ld	a0,280(a0) # 860 <freep>
+ 750:	c515                	beqz	a0,77c <malloc+0x58>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 77a:	611c                	ld	a5,0(a0)
+ 752:	611c                	ld	a5,0(a0)
     if(p->s.size >= nunits){
- 77c:	4798                	lw	a4,8(a5)
- 77e:	02977f63          	bgeu	a4,s1,7bc <malloc+0x70>
- 782:	8a4e                	mv	s4,s3
- 784:	0009871b          	sext.w	a4,s3
- 788:	6685                	lui	a3,0x1
- 78a:	00d77363          	bgeu	a4,a3,790 <malloc+0x44>
- 78e:	6a05                	lui	s4,0x1
- 790:	000a0b1b          	sext.w	s6,s4
+ 754:	4798                	lw	a4,8(a5)
+ 756:	02977f63          	bgeu	a4,s1,794 <malloc+0x70>
+ 75a:	8a4e                	mv	s4,s3
+ 75c:	0009871b          	sext.w	a4,s3
+ 760:	6685                	lui	a3,0x1
+ 762:	00d77363          	bgeu	a4,a3,768 <malloc+0x44>
+ 766:	6a05                	lui	s4,0x1
+ 768:	000a0b1b          	sext.w	s6,s4
   p = sbrk(nu * sizeof(Header));
- 794:	004a1a1b          	slliw	s4,s4,0x4
+ 76c:	004a1a1b          	slliw	s4,s4,0x4
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 798:	00000917          	auipc	s2,0x0
- 79c:	0f090913          	addi	s2,s2,240 # 888 <freep>
+ 770:	00000917          	auipc	s2,0x0
+ 774:	0f090913          	addi	s2,s2,240 # 860 <freep>
   if(p == (char*)-1)
- 7a0:	5afd                	li	s5,-1
- 7a2:	a88d                	j	814 <malloc+0xc8>
+ 778:	5afd                	li	s5,-1
+ 77a:	a88d                	j	7ec <malloc+0xc8>
     base.s.ptr = freep = prevp = &base;
- 7a4:	00000797          	auipc	a5,0x0
- 7a8:	0ec78793          	addi	a5,a5,236 # 890 <base>
- 7ac:	00000717          	auipc	a4,0x0
- 7b0:	0cf73e23          	sd	a5,220(a4) # 888 <freep>
- 7b4:	e39c                	sd	a5,0(a5)
+ 77c:	00000797          	auipc	a5,0x0
+ 780:	0ec78793          	addi	a5,a5,236 # 868 <base>
+ 784:	00000717          	auipc	a4,0x0
+ 788:	0cf73e23          	sd	a5,220(a4) # 860 <freep>
+ 78c:	e39c                	sd	a5,0(a5)
     base.s.size = 0;
- 7b6:	0007a423          	sw	zero,8(a5)
+ 78e:	0007a423          	sw	zero,8(a5)
     if(p->s.size >= nunits){
- 7ba:	b7e1                	j	782 <malloc+0x36>
+ 792:	b7e1                	j	75a <malloc+0x36>
       if(p->s.size == nunits)
- 7bc:	02e48b63          	beq	s1,a4,7f2 <malloc+0xa6>
+ 794:	02e48b63          	beq	s1,a4,7ca <malloc+0xa6>
         p->s.size -= nunits;
- 7c0:	4137073b          	subw	a4,a4,s3
- 7c4:	c798                	sw	a4,8(a5)
+ 798:	4137073b          	subw	a4,a4,s3
+ 79c:	c798                	sw	a4,8(a5)
         p += p->s.size;
- 7c6:	1702                	slli	a4,a4,0x20
- 7c8:	9301                	srli	a4,a4,0x20
- 7ca:	0712                	slli	a4,a4,0x4
- 7cc:	97ba                	add	a5,a5,a4
+ 79e:	1702                	slli	a4,a4,0x20
+ 7a0:	9301                	srli	a4,a4,0x20
+ 7a2:	0712                	slli	a4,a4,0x4
+ 7a4:	97ba                	add	a5,a5,a4
         p->s.size = nunits;
- 7ce:	0137a423          	sw	s3,8(a5)
+ 7a6:	0137a423          	sw	s3,8(a5)
       freep = prevp;
- 7d2:	00000717          	auipc	a4,0x0
- 7d6:	0aa73b23          	sd	a0,182(a4) # 888 <freep>
+ 7aa:	00000717          	auipc	a4,0x0
+ 7ae:	0aa73b23          	sd	a0,182(a4) # 860 <freep>
       return (void*)(p + 1);
- 7da:	01078513          	addi	a0,a5,16
+ 7b2:	01078513          	addi	a0,a5,16
       if((p = morecore(nunits)) == 0)
         return 0;
   }
 }
- 7de:	70e2                	ld	ra,56(sp)
- 7e0:	7442                	ld	s0,48(sp)
- 7e2:	74a2                	ld	s1,40(sp)
- 7e4:	7902                	ld	s2,32(sp)
- 7e6:	69e2                	ld	s3,24(sp)
- 7e8:	6a42                	ld	s4,16(sp)
- 7ea:	6aa2                	ld	s5,8(sp)
- 7ec:	6b02                	ld	s6,0(sp)
- 7ee:	6121                	addi	sp,sp,64
- 7f0:	8082                	ret
+ 7b6:	70e2                	ld	ra,56(sp)
+ 7b8:	7442                	ld	s0,48(sp)
+ 7ba:	74a2                	ld	s1,40(sp)
+ 7bc:	7902                	ld	s2,32(sp)
+ 7be:	69e2                	ld	s3,24(sp)
+ 7c0:	6a42                	ld	s4,16(sp)
+ 7c2:	6aa2                	ld	s5,8(sp)
+ 7c4:	6b02                	ld	s6,0(sp)
+ 7c6:	6121                	addi	sp,sp,64
+ 7c8:	8082                	ret
         prevp->s.ptr = p->s.ptr;
- 7f2:	6398                	ld	a4,0(a5)
- 7f4:	e118                	sd	a4,0(a0)
- 7f6:	bff1                	j	7d2 <malloc+0x86>
+ 7ca:	6398                	ld	a4,0(a5)
+ 7cc:	e118                	sd	a4,0(a0)
+ 7ce:	bff1                	j	7aa <malloc+0x86>
   hp->s.size = nu;
- 7f8:	01652423          	sw	s6,8(a0)
+ 7d0:	01652423          	sw	s6,8(a0)
   free((void*)(hp + 1));
- 7fc:	0541                	addi	a0,a0,16
- 7fe:	00000097          	auipc	ra,0x0
- 802:	ec6080e7          	jalr	-314(ra) # 6c4 <free>
+ 7d4:	0541                	addi	a0,a0,16
+ 7d6:	00000097          	auipc	ra,0x0
+ 7da:	ec6080e7          	jalr	-314(ra) # 69c <free>
   return freep;
- 806:	00093503          	ld	a0,0(s2)
+ 7de:	00093503          	ld	a0,0(s2)
       if((p = morecore(nunits)) == 0)
- 80a:	d971                	beqz	a0,7de <malloc+0x92>
+ 7e2:	d971                	beqz	a0,7b6 <malloc+0x92>
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 80c:	611c                	ld	a5,0(a0)
+ 7e4:	611c                	ld	a5,0(a0)
     if(p->s.size >= nunits){
- 80e:	4798                	lw	a4,8(a5)
- 810:	fa9776e3          	bgeu	a4,s1,7bc <malloc+0x70>
+ 7e6:	4798                	lw	a4,8(a5)
+ 7e8:	fa9776e3          	bgeu	a4,s1,794 <malloc+0x70>
     if(p == freep)
- 814:	00093703          	ld	a4,0(s2)
- 818:	853e                	mv	a0,a5
- 81a:	fef719e3          	bne	a4,a5,80c <malloc+0xc0>
+ 7ec:	00093703          	ld	a4,0(s2)
+ 7f0:	853e                	mv	a0,a5
+ 7f2:	fef719e3          	bne	a4,a5,7e4 <malloc+0xc0>
   p = sbrk(nu * sizeof(Header));
- 81e:	8552                	mv	a0,s4
- 820:	00000097          	auipc	ra,0x0
- 824:	b56080e7          	jalr	-1194(ra) # 376 <sbrk>
+ 7f6:	8552                	mv	a0,s4
+ 7f8:	00000097          	auipc	ra,0x0
+ 7fc:	b7e080e7          	jalr	-1154(ra) # 376 <sbrk>
   if(p == (char*)-1)
- 828:	fd5518e3          	bne	a0,s5,7f8 <malloc+0xac>
+ 800:	fd5518e3          	bne	a0,s5,7d0 <malloc+0xac>
         return 0;
- 82c:	4501                	li	a0,0
- 82e:	bf45                	j	7de <malloc+0x92>
+ 804:	4501                	li	a0,0
+ 806:	bf45                	j	7b6 <malloc+0x92>
diff --git a/user/mkdir.o b/user/mkdir.o
index bd9e749..b4ff598 100644
Binary files a/user/mkdir.o and b/user/mkdir.o differ
diff --git a/user/mkdir.sym b/user/mkdir.sym
index 8ee51bd..023f4c1 100644
--- a/user/mkdir.sym
+++ b/user/mkdir.sym
@@ -1,7 +1,7 @@
 0000000000000000 .text
-0000000000000830 .rodata
-0000000000000888 .sbss
-0000000000000890 .bss
+0000000000000808 .rodata
+0000000000000860 .sbss
+0000000000000868 .bss
 0000000000000000 .comment
 0000000000000000 .debug_aranges
 0000000000000000 .debug_info
@@ -14,53 +14,48 @@
 0000000000000000 mkdir.c
 0000000000000000 ulib.c
 0000000000000000 printf.c
-00000000000003b6 putc
-00000000000003d8 printint
-0000000000000870 digits
+000000000000038e putc
+00000000000003b0 printint
+0000000000000848 digits
 0000000000000000 umalloc.c
-0000000000000888 freep
-0000000000000890 base
+0000000000000860 freep
+0000000000000868 base
 0000000000000078 strcpy
-000000000000068e printf
-0000000000001081 __global_pointer$
+0000000000000666 printf
+0000000000001059 __global_pointer$
 0000000000000238 memmove
 0000000000000336 mknod
 0000000000000134 gets
-0000000000000881 __SDATA_BEGIN__
+0000000000000859 __SDATA_BEGIN__
 000000000000036e getpid
 00000000000002ce memcpy
-000000000000039e print_stats
-000000000000074c malloc
+0000000000000724 malloc
 000000000000037e sleep
 00000000000002fe pipe
 000000000000030e write
 0000000000000346 fstat
-0000000000000660 fprintf
+0000000000000638 fprintf
 000000000000031e kill
-0000000000000482 vprintf
+000000000000045a vprintf
 000000000000035e chdir
-000000000000038e pause_system
 0000000000000326 exec
 00000000000002f6 wait
 0000000000000306 read
 000000000000033e unlink
-00000000000003ae set_cpu
-00000000000003a6 get_cpu
 0000000000000294 memcmp
 00000000000002e6 fork
-0000000000000396 kill_system
-00000000000008a0 __BSS_END__
+0000000000000878 __BSS_END__
 0000000000000376 sbrk
 0000000000000386 uptime
-0000000000000881 __bss_start
+0000000000000859 __bss_start
 00000000000000ea memset
 0000000000000000 main
 0000000000000094 strcmp
 0000000000000366 dup
-0000000000000881 __DATA_BEGIN__
+0000000000000859 __DATA_BEGIN__
 00000000000001a8 stat
-0000000000000881 _edata
-00000000000008a0 _end
+0000000000000859 _edata
+0000000000000878 _end
 000000000000034e link
 00000000000002ee exit
 00000000000001ee atoi
@@ -69,4 +64,4 @@
 0000000000000110 strchr
 0000000000000356 mkdir
 0000000000000316 close
-00000000000006c4 free
+000000000000069c free
diff --git a/user/rm.asm b/user/rm.asm
index 90e2649..6d43f3c 100644
--- a/user/rm.asm
+++ b/user/rm.asm
@@ -46,10 +46,10 @@ main(int argc, char *argv[])
   3c:	a80d                	j	6e <main+0x6e>
     fprintf(2, "Usage: rm files...\n");
   3e:	00000597          	auipc	a1,0x0
-  42:	7f258593          	addi	a1,a1,2034 # 830 <malloc+0xe4>
+  42:	7ca58593          	addi	a1,a1,1994 # 808 <malloc+0xe4>
   46:	4509                	li	a0,2
   48:	00000097          	auipc	ra,0x0
-  4c:	618080e7          	jalr	1560(ra) # 660 <fprintf>
+  4c:	5f0080e7          	jalr	1520(ra) # 638 <fprintf>
     exit(1);
   50:	4505                	li	a0,1
   52:	00000097          	auipc	ra,0x0
@@ -57,10 +57,10 @@ main(int argc, char *argv[])
       fprintf(2, "rm: %s failed to delete\n", argv[i]);
   5a:	6090                	ld	a2,0(s1)
   5c:	00000597          	auipc	a1,0x0
-  60:	7ec58593          	addi	a1,a1,2028 # 848 <malloc+0xfc>
+  60:	7c458593          	addi	a1,a1,1988 # 820 <malloc+0xfc>
   64:	4509                	li	a0,2
   66:	00000097          	auipc	ra,0x0
-  6a:	5fa080e7          	jalr	1530(ra) # 660 <fprintf>
+  6a:	5d2080e7          	jalr	1490(ra) # 638 <fprintf>
       break;
     }
   }
@@ -707,696 +707,646 @@ uptime:
  ret
  38c:	8082                	ret
 
-000000000000038e <pause_system>:
-.global pause_system
-pause_system:
- li a7, SYS_pause_system
- 38e:	48d9                	li	a7,22
- ecall
- 390:	00000073          	ecall
- ret
- 394:	8082                	ret
-
-0000000000000396 <kill_system>:
-.global kill_system
-kill_system:
- li a7, SYS_kill_system
- 396:	48dd                	li	a7,23
- ecall
- 398:	00000073          	ecall
- ret
- 39c:	8082                	ret
-
-000000000000039e <print_stats>:
-.global print_stats
-print_stats:
- li a7, SYS_print_stats
- 39e:	48e1                	li	a7,24
- ecall
- 3a0:	00000073          	ecall
- ret
- 3a4:	8082                	ret
-
-00000000000003a6 <get_cpu>:
-.global get_cpu
-get_cpu:
- li a7, SYS_get_cpu
- 3a6:	48e5                	li	a7,25
- ecall
- 3a8:	00000073          	ecall
- ret
- 3ac:	8082                	ret
-
-00000000000003ae <set_cpu>:
-.global set_cpu
-set_cpu:
- li a7, SYS_set_cpu
- 3ae:	48e9                	li	a7,26
- ecall
- 3b0:	00000073          	ecall
- ret
- 3b4:	8082                	ret
-
-00000000000003b6 <putc>:
+000000000000038e <putc>:
 
 static char digits[] = "0123456789ABCDEF";
 
 static void
 putc(int fd, char c)
 {
- 3b6:	1101                	addi	sp,sp,-32
- 3b8:	ec06                	sd	ra,24(sp)
- 3ba:	e822                	sd	s0,16(sp)
- 3bc:	1000                	addi	s0,sp,32
- 3be:	feb407a3          	sb	a1,-17(s0)
+ 38e:	1101                	addi	sp,sp,-32
+ 390:	ec06                	sd	ra,24(sp)
+ 392:	e822                	sd	s0,16(sp)
+ 394:	1000                	addi	s0,sp,32
+ 396:	feb407a3          	sb	a1,-17(s0)
   write(fd, &c, 1);
- 3c2:	4605                	li	a2,1
- 3c4:	fef40593          	addi	a1,s0,-17
- 3c8:	00000097          	auipc	ra,0x0
- 3cc:	f46080e7          	jalr	-186(ra) # 30e <write>
+ 39a:	4605                	li	a2,1
+ 39c:	fef40593          	addi	a1,s0,-17
+ 3a0:	00000097          	auipc	ra,0x0
+ 3a4:	f6e080e7          	jalr	-146(ra) # 30e <write>
 }
- 3d0:	60e2                	ld	ra,24(sp)
- 3d2:	6442                	ld	s0,16(sp)
- 3d4:	6105                	addi	sp,sp,32
- 3d6:	8082                	ret
+ 3a8:	60e2                	ld	ra,24(sp)
+ 3aa:	6442                	ld	s0,16(sp)
+ 3ac:	6105                	addi	sp,sp,32
+ 3ae:	8082                	ret
 
-00000000000003d8 <printint>:
+00000000000003b0 <printint>:
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 3d8:	7139                	addi	sp,sp,-64
- 3da:	fc06                	sd	ra,56(sp)
- 3dc:	f822                	sd	s0,48(sp)
- 3de:	f426                	sd	s1,40(sp)
- 3e0:	f04a                	sd	s2,32(sp)
- 3e2:	ec4e                	sd	s3,24(sp)
- 3e4:	0080                	addi	s0,sp,64
- 3e6:	84aa                	mv	s1,a0
+ 3b0:	7139                	addi	sp,sp,-64
+ 3b2:	fc06                	sd	ra,56(sp)
+ 3b4:	f822                	sd	s0,48(sp)
+ 3b6:	f426                	sd	s1,40(sp)
+ 3b8:	f04a                	sd	s2,32(sp)
+ 3ba:	ec4e                	sd	s3,24(sp)
+ 3bc:	0080                	addi	s0,sp,64
+ 3be:	84aa                	mv	s1,a0
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 3e8:	c299                	beqz	a3,3ee <printint+0x16>
- 3ea:	0805c863          	bltz	a1,47a <printint+0xa2>
+ 3c0:	c299                	beqz	a3,3c6 <printint+0x16>
+ 3c2:	0805c863          	bltz	a1,452 <printint+0xa2>
     neg = 1;
     x = -xx;
   } else {
     x = xx;
- 3ee:	2581                	sext.w	a1,a1
+ 3c6:	2581                	sext.w	a1,a1
   neg = 0;
- 3f0:	4881                	li	a7,0
- 3f2:	fc040693          	addi	a3,s0,-64
+ 3c8:	4881                	li	a7,0
+ 3ca:	fc040693          	addi	a3,s0,-64
   }
 
   i = 0;
- 3f6:	4701                	li	a4,0
+ 3ce:	4701                	li	a4,0
   do{
     buf[i++] = digits[x % base];
- 3f8:	2601                	sext.w	a2,a2
- 3fa:	00000517          	auipc	a0,0x0
- 3fe:	47650513          	addi	a0,a0,1142 # 870 <digits>
- 402:	883a                	mv	a6,a4
- 404:	2705                	addiw	a4,a4,1
- 406:	02c5f7bb          	remuw	a5,a1,a2
- 40a:	1782                	slli	a5,a5,0x20
- 40c:	9381                	srli	a5,a5,0x20
- 40e:	97aa                	add	a5,a5,a0
- 410:	0007c783          	lbu	a5,0(a5)
- 414:	00f68023          	sb	a5,0(a3)
+ 3d0:	2601                	sext.w	a2,a2
+ 3d2:	00000517          	auipc	a0,0x0
+ 3d6:	47650513          	addi	a0,a0,1142 # 848 <digits>
+ 3da:	883a                	mv	a6,a4
+ 3dc:	2705                	addiw	a4,a4,1
+ 3de:	02c5f7bb          	remuw	a5,a1,a2
+ 3e2:	1782                	slli	a5,a5,0x20
+ 3e4:	9381                	srli	a5,a5,0x20
+ 3e6:	97aa                	add	a5,a5,a0
+ 3e8:	0007c783          	lbu	a5,0(a5)
+ 3ec:	00f68023          	sb	a5,0(a3)
   }while((x /= base) != 0);
- 418:	0005879b          	sext.w	a5,a1
- 41c:	02c5d5bb          	divuw	a1,a1,a2
- 420:	0685                	addi	a3,a3,1
- 422:	fec7f0e3          	bgeu	a5,a2,402 <printint+0x2a>
+ 3f0:	0005879b          	sext.w	a5,a1
+ 3f4:	02c5d5bb          	divuw	a1,a1,a2
+ 3f8:	0685                	addi	a3,a3,1
+ 3fa:	fec7f0e3          	bgeu	a5,a2,3da <printint+0x2a>
   if(neg)
- 426:	00088b63          	beqz	a7,43c <printint+0x64>
+ 3fe:	00088b63          	beqz	a7,414 <printint+0x64>
     buf[i++] = '-';
- 42a:	fd040793          	addi	a5,s0,-48
- 42e:	973e                	add	a4,a4,a5
- 430:	02d00793          	li	a5,45
- 434:	fef70823          	sb	a5,-16(a4)
- 438:	0028071b          	addiw	a4,a6,2
+ 402:	fd040793          	addi	a5,s0,-48
+ 406:	973e                	add	a4,a4,a5
+ 408:	02d00793          	li	a5,45
+ 40c:	fef70823          	sb	a5,-16(a4)
+ 410:	0028071b          	addiw	a4,a6,2
 
   while(--i >= 0)
- 43c:	02e05863          	blez	a4,46c <printint+0x94>
- 440:	fc040793          	addi	a5,s0,-64
- 444:	00e78933          	add	s2,a5,a4
- 448:	fff78993          	addi	s3,a5,-1
- 44c:	99ba                	add	s3,s3,a4
- 44e:	377d                	addiw	a4,a4,-1
- 450:	1702                	slli	a4,a4,0x20
- 452:	9301                	srli	a4,a4,0x20
- 454:	40e989b3          	sub	s3,s3,a4
+ 414:	02e05863          	blez	a4,444 <printint+0x94>
+ 418:	fc040793          	addi	a5,s0,-64
+ 41c:	00e78933          	add	s2,a5,a4
+ 420:	fff78993          	addi	s3,a5,-1
+ 424:	99ba                	add	s3,s3,a4
+ 426:	377d                	addiw	a4,a4,-1
+ 428:	1702                	slli	a4,a4,0x20
+ 42a:	9301                	srli	a4,a4,0x20
+ 42c:	40e989b3          	sub	s3,s3,a4
     putc(fd, buf[i]);
- 458:	fff94583          	lbu	a1,-1(s2)
- 45c:	8526                	mv	a0,s1
- 45e:	00000097          	auipc	ra,0x0
- 462:	f58080e7          	jalr	-168(ra) # 3b6 <putc>
+ 430:	fff94583          	lbu	a1,-1(s2)
+ 434:	8526                	mv	a0,s1
+ 436:	00000097          	auipc	ra,0x0
+ 43a:	f58080e7          	jalr	-168(ra) # 38e <putc>
   while(--i >= 0)
- 466:	197d                	addi	s2,s2,-1
- 468:	ff3918e3          	bne	s2,s3,458 <printint+0x80>
+ 43e:	197d                	addi	s2,s2,-1
+ 440:	ff3918e3          	bne	s2,s3,430 <printint+0x80>
 }
- 46c:	70e2                	ld	ra,56(sp)
- 46e:	7442                	ld	s0,48(sp)
- 470:	74a2                	ld	s1,40(sp)
- 472:	7902                	ld	s2,32(sp)
- 474:	69e2                	ld	s3,24(sp)
- 476:	6121                	addi	sp,sp,64
- 478:	8082                	ret
+ 444:	70e2                	ld	ra,56(sp)
+ 446:	7442                	ld	s0,48(sp)
+ 448:	74a2                	ld	s1,40(sp)
+ 44a:	7902                	ld	s2,32(sp)
+ 44c:	69e2                	ld	s3,24(sp)
+ 44e:	6121                	addi	sp,sp,64
+ 450:	8082                	ret
     x = -xx;
- 47a:	40b005bb          	negw	a1,a1
+ 452:	40b005bb          	negw	a1,a1
     neg = 1;
- 47e:	4885                	li	a7,1
+ 456:	4885                	li	a7,1
     x = -xx;
- 480:	bf8d                	j	3f2 <printint+0x1a>
+ 458:	bf8d                	j	3ca <printint+0x1a>
 
-0000000000000482 <vprintf>:
+000000000000045a <vprintf>:
 }
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 vprintf(int fd, const char *fmt, va_list ap)
 {
- 482:	7119                	addi	sp,sp,-128
- 484:	fc86                	sd	ra,120(sp)
- 486:	f8a2                	sd	s0,112(sp)
- 488:	f4a6                	sd	s1,104(sp)
- 48a:	f0ca                	sd	s2,96(sp)
- 48c:	ecce                	sd	s3,88(sp)
- 48e:	e8d2                	sd	s4,80(sp)
- 490:	e4d6                	sd	s5,72(sp)
- 492:	e0da                	sd	s6,64(sp)
- 494:	fc5e                	sd	s7,56(sp)
- 496:	f862                	sd	s8,48(sp)
- 498:	f466                	sd	s9,40(sp)
- 49a:	f06a                	sd	s10,32(sp)
- 49c:	ec6e                	sd	s11,24(sp)
- 49e:	0100                	addi	s0,sp,128
+ 45a:	7119                	addi	sp,sp,-128
+ 45c:	fc86                	sd	ra,120(sp)
+ 45e:	f8a2                	sd	s0,112(sp)
+ 460:	f4a6                	sd	s1,104(sp)
+ 462:	f0ca                	sd	s2,96(sp)
+ 464:	ecce                	sd	s3,88(sp)
+ 466:	e8d2                	sd	s4,80(sp)
+ 468:	e4d6                	sd	s5,72(sp)
+ 46a:	e0da                	sd	s6,64(sp)
+ 46c:	fc5e                	sd	s7,56(sp)
+ 46e:	f862                	sd	s8,48(sp)
+ 470:	f466                	sd	s9,40(sp)
+ 472:	f06a                	sd	s10,32(sp)
+ 474:	ec6e                	sd	s11,24(sp)
+ 476:	0100                	addi	s0,sp,128
   char *s;
   int c, i, state;
 
   state = 0;
   for(i = 0; fmt[i]; i++){
- 4a0:	0005c903          	lbu	s2,0(a1)
- 4a4:	18090f63          	beqz	s2,642 <vprintf+0x1c0>
- 4a8:	8aaa                	mv	s5,a0
- 4aa:	8b32                	mv	s6,a2
- 4ac:	00158493          	addi	s1,a1,1
+ 478:	0005c903          	lbu	s2,0(a1)
+ 47c:	18090f63          	beqz	s2,61a <vprintf+0x1c0>
+ 480:	8aaa                	mv	s5,a0
+ 482:	8b32                	mv	s6,a2
+ 484:	00158493          	addi	s1,a1,1
   state = 0;
- 4b0:	4981                	li	s3,0
+ 488:	4981                	li	s3,0
       if(c == '%'){
         state = '%';
       } else {
         putc(fd, c);
       }
     } else if(state == '%'){
- 4b2:	02500a13          	li	s4,37
+ 48a:	02500a13          	li	s4,37
       if(c == 'd'){
- 4b6:	06400c13          	li	s8,100
+ 48e:	06400c13          	li	s8,100
         printint(fd, va_arg(ap, int), 10, 1);
       } else if(c == 'l') {
- 4ba:	06c00c93          	li	s9,108
+ 492:	06c00c93          	li	s9,108
         printint(fd, va_arg(ap, uint64), 10, 0);
       } else if(c == 'x') {
- 4be:	07800d13          	li	s10,120
+ 496:	07800d13          	li	s10,120
         printint(fd, va_arg(ap, int), 16, 0);
       } else if(c == 'p') {
- 4c2:	07000d93          	li	s11,112
+ 49a:	07000d93          	li	s11,112
     putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
- 4c6:	00000b97          	auipc	s7,0x0
- 4ca:	3aab8b93          	addi	s7,s7,938 # 870 <digits>
- 4ce:	a839                	j	4ec <vprintf+0x6a>
+ 49e:	00000b97          	auipc	s7,0x0
+ 4a2:	3aab8b93          	addi	s7,s7,938 # 848 <digits>
+ 4a6:	a839                	j	4c4 <vprintf+0x6a>
         putc(fd, c);
- 4d0:	85ca                	mv	a1,s2
- 4d2:	8556                	mv	a0,s5
- 4d4:	00000097          	auipc	ra,0x0
- 4d8:	ee2080e7          	jalr	-286(ra) # 3b6 <putc>
- 4dc:	a019                	j	4e2 <vprintf+0x60>
+ 4a8:	85ca                	mv	a1,s2
+ 4aa:	8556                	mv	a0,s5
+ 4ac:	00000097          	auipc	ra,0x0
+ 4b0:	ee2080e7          	jalr	-286(ra) # 38e <putc>
+ 4b4:	a019                	j	4ba <vprintf+0x60>
     } else if(state == '%'){
- 4de:	01498f63          	beq	s3,s4,4fc <vprintf+0x7a>
+ 4b6:	01498f63          	beq	s3,s4,4d4 <vprintf+0x7a>
   for(i = 0; fmt[i]; i++){
- 4e2:	0485                	addi	s1,s1,1
- 4e4:	fff4c903          	lbu	s2,-1(s1)
- 4e8:	14090d63          	beqz	s2,642 <vprintf+0x1c0>
+ 4ba:	0485                	addi	s1,s1,1
+ 4bc:	fff4c903          	lbu	s2,-1(s1)
+ 4c0:	14090d63          	beqz	s2,61a <vprintf+0x1c0>
     c = fmt[i] & 0xff;
- 4ec:	0009079b          	sext.w	a5,s2
+ 4c4:	0009079b          	sext.w	a5,s2
     if(state == 0){
- 4f0:	fe0997e3          	bnez	s3,4de <vprintf+0x5c>
+ 4c8:	fe0997e3          	bnez	s3,4b6 <vprintf+0x5c>
       if(c == '%'){
- 4f4:	fd479ee3          	bne	a5,s4,4d0 <vprintf+0x4e>
+ 4cc:	fd479ee3          	bne	a5,s4,4a8 <vprintf+0x4e>
         state = '%';
- 4f8:	89be                	mv	s3,a5
- 4fa:	b7e5                	j	4e2 <vprintf+0x60>
+ 4d0:	89be                	mv	s3,a5
+ 4d2:	b7e5                	j	4ba <vprintf+0x60>
       if(c == 'd'){
- 4fc:	05878063          	beq	a5,s8,53c <vprintf+0xba>
+ 4d4:	05878063          	beq	a5,s8,514 <vprintf+0xba>
       } else if(c == 'l') {
- 500:	05978c63          	beq	a5,s9,558 <vprintf+0xd6>
+ 4d8:	05978c63          	beq	a5,s9,530 <vprintf+0xd6>
       } else if(c == 'x') {
- 504:	07a78863          	beq	a5,s10,574 <vprintf+0xf2>
+ 4dc:	07a78863          	beq	a5,s10,54c <vprintf+0xf2>
       } else if(c == 'p') {
- 508:	09b78463          	beq	a5,s11,590 <vprintf+0x10e>
+ 4e0:	09b78463          	beq	a5,s11,568 <vprintf+0x10e>
         printptr(fd, va_arg(ap, uint64));
       } else if(c == 's'){
- 50c:	07300713          	li	a4,115
- 510:	0ce78663          	beq	a5,a4,5dc <vprintf+0x15a>
+ 4e4:	07300713          	li	a4,115
+ 4e8:	0ce78663          	beq	a5,a4,5b4 <vprintf+0x15a>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 514:	06300713          	li	a4,99
- 518:	0ee78e63          	beq	a5,a4,614 <vprintf+0x192>
+ 4ec:	06300713          	li	a4,99
+ 4f0:	0ee78e63          	beq	a5,a4,5ec <vprintf+0x192>
         putc(fd, va_arg(ap, uint));
       } else if(c == '%'){
- 51c:	11478863          	beq	a5,s4,62c <vprintf+0x1aa>
+ 4f4:	11478863          	beq	a5,s4,604 <vprintf+0x1aa>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
- 520:	85d2                	mv	a1,s4
- 522:	8556                	mv	a0,s5
- 524:	00000097          	auipc	ra,0x0
- 528:	e92080e7          	jalr	-366(ra) # 3b6 <putc>
+ 4f8:	85d2                	mv	a1,s4
+ 4fa:	8556                	mv	a0,s5
+ 4fc:	00000097          	auipc	ra,0x0
+ 500:	e92080e7          	jalr	-366(ra) # 38e <putc>
         putc(fd, c);
- 52c:	85ca                	mv	a1,s2
- 52e:	8556                	mv	a0,s5
- 530:	00000097          	auipc	ra,0x0
- 534:	e86080e7          	jalr	-378(ra) # 3b6 <putc>
+ 504:	85ca                	mv	a1,s2
+ 506:	8556                	mv	a0,s5
+ 508:	00000097          	auipc	ra,0x0
+ 50c:	e86080e7          	jalr	-378(ra) # 38e <putc>
       }
       state = 0;
- 538:	4981                	li	s3,0
- 53a:	b765                	j	4e2 <vprintf+0x60>
+ 510:	4981                	li	s3,0
+ 512:	b765                	j	4ba <vprintf+0x60>
         printint(fd, va_arg(ap, int), 10, 1);
- 53c:	008b0913          	addi	s2,s6,8
- 540:	4685                	li	a3,1
- 542:	4629                	li	a2,10
- 544:	000b2583          	lw	a1,0(s6)
- 548:	8556                	mv	a0,s5
- 54a:	00000097          	auipc	ra,0x0
- 54e:	e8e080e7          	jalr	-370(ra) # 3d8 <printint>
- 552:	8b4a                	mv	s6,s2
+ 514:	008b0913          	addi	s2,s6,8
+ 518:	4685                	li	a3,1
+ 51a:	4629                	li	a2,10
+ 51c:	000b2583          	lw	a1,0(s6)
+ 520:	8556                	mv	a0,s5
+ 522:	00000097          	auipc	ra,0x0
+ 526:	e8e080e7          	jalr	-370(ra) # 3b0 <printint>
+ 52a:	8b4a                	mv	s6,s2
       state = 0;
- 554:	4981                	li	s3,0
- 556:	b771                	j	4e2 <vprintf+0x60>
+ 52c:	4981                	li	s3,0
+ 52e:	b771                	j	4ba <vprintf+0x60>
         printint(fd, va_arg(ap, uint64), 10, 0);
- 558:	008b0913          	addi	s2,s6,8
- 55c:	4681                	li	a3,0
- 55e:	4629                	li	a2,10
- 560:	000b2583          	lw	a1,0(s6)
- 564:	8556                	mv	a0,s5
- 566:	00000097          	auipc	ra,0x0
- 56a:	e72080e7          	jalr	-398(ra) # 3d8 <printint>
- 56e:	8b4a                	mv	s6,s2
+ 530:	008b0913          	addi	s2,s6,8
+ 534:	4681                	li	a3,0
+ 536:	4629                	li	a2,10
+ 538:	000b2583          	lw	a1,0(s6)
+ 53c:	8556                	mv	a0,s5
+ 53e:	00000097          	auipc	ra,0x0
+ 542:	e72080e7          	jalr	-398(ra) # 3b0 <printint>
+ 546:	8b4a                	mv	s6,s2
       state = 0;
- 570:	4981                	li	s3,0
- 572:	bf85                	j	4e2 <vprintf+0x60>
+ 548:	4981                	li	s3,0
+ 54a:	bf85                	j	4ba <vprintf+0x60>
         printint(fd, va_arg(ap, int), 16, 0);
- 574:	008b0913          	addi	s2,s6,8
- 578:	4681                	li	a3,0
- 57a:	4641                	li	a2,16
- 57c:	000b2583          	lw	a1,0(s6)
- 580:	8556                	mv	a0,s5
- 582:	00000097          	auipc	ra,0x0
- 586:	e56080e7          	jalr	-426(ra) # 3d8 <printint>
- 58a:	8b4a                	mv	s6,s2
+ 54c:	008b0913          	addi	s2,s6,8
+ 550:	4681                	li	a3,0
+ 552:	4641                	li	a2,16
+ 554:	000b2583          	lw	a1,0(s6)
+ 558:	8556                	mv	a0,s5
+ 55a:	00000097          	auipc	ra,0x0
+ 55e:	e56080e7          	jalr	-426(ra) # 3b0 <printint>
+ 562:	8b4a                	mv	s6,s2
       state = 0;
- 58c:	4981                	li	s3,0
- 58e:	bf91                	j	4e2 <vprintf+0x60>
+ 564:	4981                	li	s3,0
+ 566:	bf91                	j	4ba <vprintf+0x60>
         printptr(fd, va_arg(ap, uint64));
- 590:	008b0793          	addi	a5,s6,8
- 594:	f8f43423          	sd	a5,-120(s0)
- 598:	000b3983          	ld	s3,0(s6)
+ 568:	008b0793          	addi	a5,s6,8
+ 56c:	f8f43423          	sd	a5,-120(s0)
+ 570:	000b3983          	ld	s3,0(s6)
   putc(fd, '0');
- 59c:	03000593          	li	a1,48
- 5a0:	8556                	mv	a0,s5
- 5a2:	00000097          	auipc	ra,0x0
- 5a6:	e14080e7          	jalr	-492(ra) # 3b6 <putc>
+ 574:	03000593          	li	a1,48
+ 578:	8556                	mv	a0,s5
+ 57a:	00000097          	auipc	ra,0x0
+ 57e:	e14080e7          	jalr	-492(ra) # 38e <putc>
   putc(fd, 'x');
- 5aa:	85ea                	mv	a1,s10
- 5ac:	8556                	mv	a0,s5
- 5ae:	00000097          	auipc	ra,0x0
- 5b2:	e08080e7          	jalr	-504(ra) # 3b6 <putc>
- 5b6:	4941                	li	s2,16
+ 582:	85ea                	mv	a1,s10
+ 584:	8556                	mv	a0,s5
+ 586:	00000097          	auipc	ra,0x0
+ 58a:	e08080e7          	jalr	-504(ra) # 38e <putc>
+ 58e:	4941                	li	s2,16
     putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
- 5b8:	03c9d793          	srli	a5,s3,0x3c
- 5bc:	97de                	add	a5,a5,s7
- 5be:	0007c583          	lbu	a1,0(a5)
- 5c2:	8556                	mv	a0,s5
- 5c4:	00000097          	auipc	ra,0x0
- 5c8:	df2080e7          	jalr	-526(ra) # 3b6 <putc>
+ 590:	03c9d793          	srli	a5,s3,0x3c
+ 594:	97de                	add	a5,a5,s7
+ 596:	0007c583          	lbu	a1,0(a5)
+ 59a:	8556                	mv	a0,s5
+ 59c:	00000097          	auipc	ra,0x0
+ 5a0:	df2080e7          	jalr	-526(ra) # 38e <putc>
   for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
- 5cc:	0992                	slli	s3,s3,0x4
- 5ce:	397d                	addiw	s2,s2,-1
- 5d0:	fe0914e3          	bnez	s2,5b8 <vprintf+0x136>
+ 5a4:	0992                	slli	s3,s3,0x4
+ 5a6:	397d                	addiw	s2,s2,-1
+ 5a8:	fe0914e3          	bnez	s2,590 <vprintf+0x136>
         printptr(fd, va_arg(ap, uint64));
- 5d4:	f8843b03          	ld	s6,-120(s0)
+ 5ac:	f8843b03          	ld	s6,-120(s0)
       state = 0;
- 5d8:	4981                	li	s3,0
- 5da:	b721                	j	4e2 <vprintf+0x60>
+ 5b0:	4981                	li	s3,0
+ 5b2:	b721                	j	4ba <vprintf+0x60>
         s = va_arg(ap, char*);
- 5dc:	008b0993          	addi	s3,s6,8
- 5e0:	000b3903          	ld	s2,0(s6)
+ 5b4:	008b0993          	addi	s3,s6,8
+ 5b8:	000b3903          	ld	s2,0(s6)
         if(s == 0)
- 5e4:	02090163          	beqz	s2,606 <vprintf+0x184>
+ 5bc:	02090163          	beqz	s2,5de <vprintf+0x184>
         while(*s != 0){
- 5e8:	00094583          	lbu	a1,0(s2)
- 5ec:	c9a1                	beqz	a1,63c <vprintf+0x1ba>
+ 5c0:	00094583          	lbu	a1,0(s2)
+ 5c4:	c9a1                	beqz	a1,614 <vprintf+0x1ba>
           putc(fd, *s);
- 5ee:	8556                	mv	a0,s5
- 5f0:	00000097          	auipc	ra,0x0
- 5f4:	dc6080e7          	jalr	-570(ra) # 3b6 <putc>
+ 5c6:	8556                	mv	a0,s5
+ 5c8:	00000097          	auipc	ra,0x0
+ 5cc:	dc6080e7          	jalr	-570(ra) # 38e <putc>
           s++;
- 5f8:	0905                	addi	s2,s2,1
+ 5d0:	0905                	addi	s2,s2,1
         while(*s != 0){
- 5fa:	00094583          	lbu	a1,0(s2)
- 5fe:	f9e5                	bnez	a1,5ee <vprintf+0x16c>
+ 5d2:	00094583          	lbu	a1,0(s2)
+ 5d6:	f9e5                	bnez	a1,5c6 <vprintf+0x16c>
         s = va_arg(ap, char*);
- 600:	8b4e                	mv	s6,s3
+ 5d8:	8b4e                	mv	s6,s3
       state = 0;
- 602:	4981                	li	s3,0
- 604:	bdf9                	j	4e2 <vprintf+0x60>
+ 5da:	4981                	li	s3,0
+ 5dc:	bdf9                	j	4ba <vprintf+0x60>
           s = "(null)";
- 606:	00000917          	auipc	s2,0x0
- 60a:	26290913          	addi	s2,s2,610 # 868 <malloc+0x11c>
+ 5de:	00000917          	auipc	s2,0x0
+ 5e2:	26290913          	addi	s2,s2,610 # 840 <malloc+0x11c>
         while(*s != 0){
- 60e:	02800593          	li	a1,40
- 612:	bff1                	j	5ee <vprintf+0x16c>
+ 5e6:	02800593          	li	a1,40
+ 5ea:	bff1                	j	5c6 <vprintf+0x16c>
         putc(fd, va_arg(ap, uint));
- 614:	008b0913          	addi	s2,s6,8
- 618:	000b4583          	lbu	a1,0(s6)
- 61c:	8556                	mv	a0,s5
- 61e:	00000097          	auipc	ra,0x0
- 622:	d98080e7          	jalr	-616(ra) # 3b6 <putc>
- 626:	8b4a                	mv	s6,s2
+ 5ec:	008b0913          	addi	s2,s6,8
+ 5f0:	000b4583          	lbu	a1,0(s6)
+ 5f4:	8556                	mv	a0,s5
+ 5f6:	00000097          	auipc	ra,0x0
+ 5fa:	d98080e7          	jalr	-616(ra) # 38e <putc>
+ 5fe:	8b4a                	mv	s6,s2
       state = 0;
- 628:	4981                	li	s3,0
- 62a:	bd65                	j	4e2 <vprintf+0x60>
+ 600:	4981                	li	s3,0
+ 602:	bd65                	j	4ba <vprintf+0x60>
         putc(fd, c);
- 62c:	85d2                	mv	a1,s4
- 62e:	8556                	mv	a0,s5
- 630:	00000097          	auipc	ra,0x0
- 634:	d86080e7          	jalr	-634(ra) # 3b6 <putc>
+ 604:	85d2                	mv	a1,s4
+ 606:	8556                	mv	a0,s5
+ 608:	00000097          	auipc	ra,0x0
+ 60c:	d86080e7          	jalr	-634(ra) # 38e <putc>
       state = 0;
- 638:	4981                	li	s3,0
- 63a:	b565                	j	4e2 <vprintf+0x60>
+ 610:	4981                	li	s3,0
+ 612:	b565                	j	4ba <vprintf+0x60>
         s = va_arg(ap, char*);
- 63c:	8b4e                	mv	s6,s3
+ 614:	8b4e                	mv	s6,s3
       state = 0;
- 63e:	4981                	li	s3,0
- 640:	b54d                	j	4e2 <vprintf+0x60>
+ 616:	4981                	li	s3,0
+ 618:	b54d                	j	4ba <vprintf+0x60>
     }
   }
 }
- 642:	70e6                	ld	ra,120(sp)
- 644:	7446                	ld	s0,112(sp)
- 646:	74a6                	ld	s1,104(sp)
- 648:	7906                	ld	s2,96(sp)
- 64a:	69e6                	ld	s3,88(sp)
- 64c:	6a46                	ld	s4,80(sp)
- 64e:	6aa6                	ld	s5,72(sp)
- 650:	6b06                	ld	s6,64(sp)
- 652:	7be2                	ld	s7,56(sp)
- 654:	7c42                	ld	s8,48(sp)
- 656:	7ca2                	ld	s9,40(sp)
- 658:	7d02                	ld	s10,32(sp)
- 65a:	6de2                	ld	s11,24(sp)
- 65c:	6109                	addi	sp,sp,128
- 65e:	8082                	ret
-
-0000000000000660 <fprintf>:
+ 61a:	70e6                	ld	ra,120(sp)
+ 61c:	7446                	ld	s0,112(sp)
+ 61e:	74a6                	ld	s1,104(sp)
+ 620:	7906                	ld	s2,96(sp)
+ 622:	69e6                	ld	s3,88(sp)
+ 624:	6a46                	ld	s4,80(sp)
+ 626:	6aa6                	ld	s5,72(sp)
+ 628:	6b06                	ld	s6,64(sp)
+ 62a:	7be2                	ld	s7,56(sp)
+ 62c:	7c42                	ld	s8,48(sp)
+ 62e:	7ca2                	ld	s9,40(sp)
+ 630:	7d02                	ld	s10,32(sp)
+ 632:	6de2                	ld	s11,24(sp)
+ 634:	6109                	addi	sp,sp,128
+ 636:	8082                	ret
+
+0000000000000638 <fprintf>:
 
 void
 fprintf(int fd, const char *fmt, ...)
 {
- 660:	715d                	addi	sp,sp,-80
- 662:	ec06                	sd	ra,24(sp)
- 664:	e822                	sd	s0,16(sp)
- 666:	1000                	addi	s0,sp,32
- 668:	e010                	sd	a2,0(s0)
- 66a:	e414                	sd	a3,8(s0)
- 66c:	e818                	sd	a4,16(s0)
- 66e:	ec1c                	sd	a5,24(s0)
- 670:	03043023          	sd	a6,32(s0)
- 674:	03143423          	sd	a7,40(s0)
+ 638:	715d                	addi	sp,sp,-80
+ 63a:	ec06                	sd	ra,24(sp)
+ 63c:	e822                	sd	s0,16(sp)
+ 63e:	1000                	addi	s0,sp,32
+ 640:	e010                	sd	a2,0(s0)
+ 642:	e414                	sd	a3,8(s0)
+ 644:	e818                	sd	a4,16(s0)
+ 646:	ec1c                	sd	a5,24(s0)
+ 648:	03043023          	sd	a6,32(s0)
+ 64c:	03143423          	sd	a7,40(s0)
   va_list ap;
 
   va_start(ap, fmt);
- 678:	fe843423          	sd	s0,-24(s0)
+ 650:	fe843423          	sd	s0,-24(s0)
   vprintf(fd, fmt, ap);
- 67c:	8622                	mv	a2,s0
- 67e:	00000097          	auipc	ra,0x0
- 682:	e04080e7          	jalr	-508(ra) # 482 <vprintf>
+ 654:	8622                	mv	a2,s0
+ 656:	00000097          	auipc	ra,0x0
+ 65a:	e04080e7          	jalr	-508(ra) # 45a <vprintf>
 }
- 686:	60e2                	ld	ra,24(sp)
- 688:	6442                	ld	s0,16(sp)
- 68a:	6161                	addi	sp,sp,80
- 68c:	8082                	ret
+ 65e:	60e2                	ld	ra,24(sp)
+ 660:	6442                	ld	s0,16(sp)
+ 662:	6161                	addi	sp,sp,80
+ 664:	8082                	ret
 
-000000000000068e <printf>:
+0000000000000666 <printf>:
 
 void
 printf(const char *fmt, ...)
 {
- 68e:	711d                	addi	sp,sp,-96
- 690:	ec06                	sd	ra,24(sp)
- 692:	e822                	sd	s0,16(sp)
- 694:	1000                	addi	s0,sp,32
- 696:	e40c                	sd	a1,8(s0)
- 698:	e810                	sd	a2,16(s0)
- 69a:	ec14                	sd	a3,24(s0)
- 69c:	f018                	sd	a4,32(s0)
- 69e:	f41c                	sd	a5,40(s0)
- 6a0:	03043823          	sd	a6,48(s0)
- 6a4:	03143c23          	sd	a7,56(s0)
+ 666:	711d                	addi	sp,sp,-96
+ 668:	ec06                	sd	ra,24(sp)
+ 66a:	e822                	sd	s0,16(sp)
+ 66c:	1000                	addi	s0,sp,32
+ 66e:	e40c                	sd	a1,8(s0)
+ 670:	e810                	sd	a2,16(s0)
+ 672:	ec14                	sd	a3,24(s0)
+ 674:	f018                	sd	a4,32(s0)
+ 676:	f41c                	sd	a5,40(s0)
+ 678:	03043823          	sd	a6,48(s0)
+ 67c:	03143c23          	sd	a7,56(s0)
   va_list ap;
 
   va_start(ap, fmt);
- 6a8:	00840613          	addi	a2,s0,8
- 6ac:	fec43423          	sd	a2,-24(s0)
+ 680:	00840613          	addi	a2,s0,8
+ 684:	fec43423          	sd	a2,-24(s0)
   vprintf(1, fmt, ap);
- 6b0:	85aa                	mv	a1,a0
- 6b2:	4505                	li	a0,1
- 6b4:	00000097          	auipc	ra,0x0
- 6b8:	dce080e7          	jalr	-562(ra) # 482 <vprintf>
+ 688:	85aa                	mv	a1,a0
+ 68a:	4505                	li	a0,1
+ 68c:	00000097          	auipc	ra,0x0
+ 690:	dce080e7          	jalr	-562(ra) # 45a <vprintf>
 }
- 6bc:	60e2                	ld	ra,24(sp)
- 6be:	6442                	ld	s0,16(sp)
- 6c0:	6125                	addi	sp,sp,96
- 6c2:	8082                	ret
+ 694:	60e2                	ld	ra,24(sp)
+ 696:	6442                	ld	s0,16(sp)
+ 698:	6125                	addi	sp,sp,96
+ 69a:	8082                	ret
 
-00000000000006c4 <free>:
+000000000000069c <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 6c4:	1141                	addi	sp,sp,-16
- 6c6:	e422                	sd	s0,8(sp)
- 6c8:	0800                	addi	s0,sp,16
+ 69c:	1141                	addi	sp,sp,-16
+ 69e:	e422                	sd	s0,8(sp)
+ 6a0:	0800                	addi	s0,sp,16
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
- 6ca:	ff050693          	addi	a3,a0,-16
+ 6a2:	ff050693          	addi	a3,a0,-16
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6ce:	00000797          	auipc	a5,0x0
- 6d2:	1ba7b783          	ld	a5,442(a5) # 888 <freep>
- 6d6:	a805                	j	706 <free+0x42>
+ 6a6:	00000797          	auipc	a5,0x0
+ 6aa:	1ba7b783          	ld	a5,442(a5) # 860 <freep>
+ 6ae:	a805                	j	6de <free+0x42>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
       break;
   if(bp + bp->s.size == p->s.ptr){
     bp->s.size += p->s.ptr->s.size;
- 6d8:	4618                	lw	a4,8(a2)
- 6da:	9db9                	addw	a1,a1,a4
- 6dc:	feb52c23          	sw	a1,-8(a0)
+ 6b0:	4618                	lw	a4,8(a2)
+ 6b2:	9db9                	addw	a1,a1,a4
+ 6b4:	feb52c23          	sw	a1,-8(a0)
     bp->s.ptr = p->s.ptr->s.ptr;
- 6e0:	6398                	ld	a4,0(a5)
- 6e2:	6318                	ld	a4,0(a4)
- 6e4:	fee53823          	sd	a4,-16(a0)
- 6e8:	a091                	j	72c <free+0x68>
+ 6b8:	6398                	ld	a4,0(a5)
+ 6ba:	6318                	ld	a4,0(a4)
+ 6bc:	fee53823          	sd	a4,-16(a0)
+ 6c0:	a091                	j	704 <free+0x68>
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
     p->s.size += bp->s.size;
- 6ea:	ff852703          	lw	a4,-8(a0)
- 6ee:	9e39                	addw	a2,a2,a4
- 6f0:	c790                	sw	a2,8(a5)
+ 6c2:	ff852703          	lw	a4,-8(a0)
+ 6c6:	9e39                	addw	a2,a2,a4
+ 6c8:	c790                	sw	a2,8(a5)
     p->s.ptr = bp->s.ptr;
- 6f2:	ff053703          	ld	a4,-16(a0)
- 6f6:	e398                	sd	a4,0(a5)
- 6f8:	a099                	j	73e <free+0x7a>
+ 6ca:	ff053703          	ld	a4,-16(a0)
+ 6ce:	e398                	sd	a4,0(a5)
+ 6d0:	a099                	j	716 <free+0x7a>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6fa:	6398                	ld	a4,0(a5)
- 6fc:	00e7e463          	bltu	a5,a4,704 <free+0x40>
- 700:	00e6ea63          	bltu	a3,a4,714 <free+0x50>
+ 6d2:	6398                	ld	a4,0(a5)
+ 6d4:	00e7e463          	bltu	a5,a4,6dc <free+0x40>
+ 6d8:	00e6ea63          	bltu	a3,a4,6ec <free+0x50>
 {
- 704:	87ba                	mv	a5,a4
+ 6dc:	87ba                	mv	a5,a4
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 706:	fed7fae3          	bgeu	a5,a3,6fa <free+0x36>
- 70a:	6398                	ld	a4,0(a5)
- 70c:	00e6e463          	bltu	a3,a4,714 <free+0x50>
+ 6de:	fed7fae3          	bgeu	a5,a3,6d2 <free+0x36>
+ 6e2:	6398                	ld	a4,0(a5)
+ 6e4:	00e6e463          	bltu	a3,a4,6ec <free+0x50>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 710:	fee7eae3          	bltu	a5,a4,704 <free+0x40>
+ 6e8:	fee7eae3          	bltu	a5,a4,6dc <free+0x40>
   if(bp + bp->s.size == p->s.ptr){
- 714:	ff852583          	lw	a1,-8(a0)
- 718:	6390                	ld	a2,0(a5)
- 71a:	02059713          	slli	a4,a1,0x20
- 71e:	9301                	srli	a4,a4,0x20
- 720:	0712                	slli	a4,a4,0x4
- 722:	9736                	add	a4,a4,a3
- 724:	fae60ae3          	beq	a2,a4,6d8 <free+0x14>
+ 6ec:	ff852583          	lw	a1,-8(a0)
+ 6f0:	6390                	ld	a2,0(a5)
+ 6f2:	02059713          	slli	a4,a1,0x20
+ 6f6:	9301                	srli	a4,a4,0x20
+ 6f8:	0712                	slli	a4,a4,0x4
+ 6fa:	9736                	add	a4,a4,a3
+ 6fc:	fae60ae3          	beq	a2,a4,6b0 <free+0x14>
     bp->s.ptr = p->s.ptr;
- 728:	fec53823          	sd	a2,-16(a0)
+ 700:	fec53823          	sd	a2,-16(a0)
   if(p + p->s.size == bp){
- 72c:	4790                	lw	a2,8(a5)
- 72e:	02061713          	slli	a4,a2,0x20
- 732:	9301                	srli	a4,a4,0x20
- 734:	0712                	slli	a4,a4,0x4
- 736:	973e                	add	a4,a4,a5
- 738:	fae689e3          	beq	a3,a4,6ea <free+0x26>
+ 704:	4790                	lw	a2,8(a5)
+ 706:	02061713          	slli	a4,a2,0x20
+ 70a:	9301                	srli	a4,a4,0x20
+ 70c:	0712                	slli	a4,a4,0x4
+ 70e:	973e                	add	a4,a4,a5
+ 710:	fae689e3          	beq	a3,a4,6c2 <free+0x26>
   } else
     p->s.ptr = bp;
- 73c:	e394                	sd	a3,0(a5)
+ 714:	e394                	sd	a3,0(a5)
   freep = p;
- 73e:	00000717          	auipc	a4,0x0
- 742:	14f73523          	sd	a5,330(a4) # 888 <freep>
+ 716:	00000717          	auipc	a4,0x0
+ 71a:	14f73523          	sd	a5,330(a4) # 860 <freep>
 }
- 746:	6422                	ld	s0,8(sp)
- 748:	0141                	addi	sp,sp,16
- 74a:	8082                	ret
+ 71e:	6422                	ld	s0,8(sp)
+ 720:	0141                	addi	sp,sp,16
+ 722:	8082                	ret
 
-000000000000074c <malloc>:
+0000000000000724 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 74c:	7139                	addi	sp,sp,-64
- 74e:	fc06                	sd	ra,56(sp)
- 750:	f822                	sd	s0,48(sp)
- 752:	f426                	sd	s1,40(sp)
- 754:	f04a                	sd	s2,32(sp)
- 756:	ec4e                	sd	s3,24(sp)
- 758:	e852                	sd	s4,16(sp)
- 75a:	e456                	sd	s5,8(sp)
- 75c:	e05a                	sd	s6,0(sp)
- 75e:	0080                	addi	s0,sp,64
+ 724:	7139                	addi	sp,sp,-64
+ 726:	fc06                	sd	ra,56(sp)
+ 728:	f822                	sd	s0,48(sp)
+ 72a:	f426                	sd	s1,40(sp)
+ 72c:	f04a                	sd	s2,32(sp)
+ 72e:	ec4e                	sd	s3,24(sp)
+ 730:	e852                	sd	s4,16(sp)
+ 732:	e456                	sd	s5,8(sp)
+ 734:	e05a                	sd	s6,0(sp)
+ 736:	0080                	addi	s0,sp,64
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 760:	02051493          	slli	s1,a0,0x20
- 764:	9081                	srli	s1,s1,0x20
- 766:	04bd                	addi	s1,s1,15
- 768:	8091                	srli	s1,s1,0x4
- 76a:	0014899b          	addiw	s3,s1,1
- 76e:	0485                	addi	s1,s1,1
+ 738:	02051493          	slli	s1,a0,0x20
+ 73c:	9081                	srli	s1,s1,0x20
+ 73e:	04bd                	addi	s1,s1,15
+ 740:	8091                	srli	s1,s1,0x4
+ 742:	0014899b          	addiw	s3,s1,1
+ 746:	0485                	addi	s1,s1,1
   if((prevp = freep) == 0){
- 770:	00000517          	auipc	a0,0x0
- 774:	11853503          	ld	a0,280(a0) # 888 <freep>
- 778:	c515                	beqz	a0,7a4 <malloc+0x58>
+ 748:	00000517          	auipc	a0,0x0
+ 74c:	11853503          	ld	a0,280(a0) # 860 <freep>
+ 750:	c515                	beqz	a0,77c <malloc+0x58>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 77a:	611c                	ld	a5,0(a0)
+ 752:	611c                	ld	a5,0(a0)
     if(p->s.size >= nunits){
- 77c:	4798                	lw	a4,8(a5)
- 77e:	02977f63          	bgeu	a4,s1,7bc <malloc+0x70>
- 782:	8a4e                	mv	s4,s3
- 784:	0009871b          	sext.w	a4,s3
- 788:	6685                	lui	a3,0x1
- 78a:	00d77363          	bgeu	a4,a3,790 <malloc+0x44>
- 78e:	6a05                	lui	s4,0x1
- 790:	000a0b1b          	sext.w	s6,s4
+ 754:	4798                	lw	a4,8(a5)
+ 756:	02977f63          	bgeu	a4,s1,794 <malloc+0x70>
+ 75a:	8a4e                	mv	s4,s3
+ 75c:	0009871b          	sext.w	a4,s3
+ 760:	6685                	lui	a3,0x1
+ 762:	00d77363          	bgeu	a4,a3,768 <malloc+0x44>
+ 766:	6a05                	lui	s4,0x1
+ 768:	000a0b1b          	sext.w	s6,s4
   p = sbrk(nu * sizeof(Header));
- 794:	004a1a1b          	slliw	s4,s4,0x4
+ 76c:	004a1a1b          	slliw	s4,s4,0x4
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 798:	00000917          	auipc	s2,0x0
- 79c:	0f090913          	addi	s2,s2,240 # 888 <freep>
+ 770:	00000917          	auipc	s2,0x0
+ 774:	0f090913          	addi	s2,s2,240 # 860 <freep>
   if(p == (char*)-1)
- 7a0:	5afd                	li	s5,-1
- 7a2:	a88d                	j	814 <malloc+0xc8>
+ 778:	5afd                	li	s5,-1
+ 77a:	a88d                	j	7ec <malloc+0xc8>
     base.s.ptr = freep = prevp = &base;
- 7a4:	00000797          	auipc	a5,0x0
- 7a8:	0ec78793          	addi	a5,a5,236 # 890 <base>
- 7ac:	00000717          	auipc	a4,0x0
- 7b0:	0cf73e23          	sd	a5,220(a4) # 888 <freep>
- 7b4:	e39c                	sd	a5,0(a5)
+ 77c:	00000797          	auipc	a5,0x0
+ 780:	0ec78793          	addi	a5,a5,236 # 868 <base>
+ 784:	00000717          	auipc	a4,0x0
+ 788:	0cf73e23          	sd	a5,220(a4) # 860 <freep>
+ 78c:	e39c                	sd	a5,0(a5)
     base.s.size = 0;
- 7b6:	0007a423          	sw	zero,8(a5)
+ 78e:	0007a423          	sw	zero,8(a5)
     if(p->s.size >= nunits){
- 7ba:	b7e1                	j	782 <malloc+0x36>
+ 792:	b7e1                	j	75a <malloc+0x36>
       if(p->s.size == nunits)
- 7bc:	02e48b63          	beq	s1,a4,7f2 <malloc+0xa6>
+ 794:	02e48b63          	beq	s1,a4,7ca <malloc+0xa6>
         p->s.size -= nunits;
- 7c0:	4137073b          	subw	a4,a4,s3
- 7c4:	c798                	sw	a4,8(a5)
+ 798:	4137073b          	subw	a4,a4,s3
+ 79c:	c798                	sw	a4,8(a5)
         p += p->s.size;
- 7c6:	1702                	slli	a4,a4,0x20
- 7c8:	9301                	srli	a4,a4,0x20
- 7ca:	0712                	slli	a4,a4,0x4
- 7cc:	97ba                	add	a5,a5,a4
+ 79e:	1702                	slli	a4,a4,0x20
+ 7a0:	9301                	srli	a4,a4,0x20
+ 7a2:	0712                	slli	a4,a4,0x4
+ 7a4:	97ba                	add	a5,a5,a4
         p->s.size = nunits;
- 7ce:	0137a423          	sw	s3,8(a5)
+ 7a6:	0137a423          	sw	s3,8(a5)
       freep = prevp;
- 7d2:	00000717          	auipc	a4,0x0
- 7d6:	0aa73b23          	sd	a0,182(a4) # 888 <freep>
+ 7aa:	00000717          	auipc	a4,0x0
+ 7ae:	0aa73b23          	sd	a0,182(a4) # 860 <freep>
       return (void*)(p + 1);
- 7da:	01078513          	addi	a0,a5,16
+ 7b2:	01078513          	addi	a0,a5,16
       if((p = morecore(nunits)) == 0)
         return 0;
   }
 }
- 7de:	70e2                	ld	ra,56(sp)
- 7e0:	7442                	ld	s0,48(sp)
- 7e2:	74a2                	ld	s1,40(sp)
- 7e4:	7902                	ld	s2,32(sp)
- 7e6:	69e2                	ld	s3,24(sp)
- 7e8:	6a42                	ld	s4,16(sp)
- 7ea:	6aa2                	ld	s5,8(sp)
- 7ec:	6b02                	ld	s6,0(sp)
- 7ee:	6121                	addi	sp,sp,64
- 7f0:	8082                	ret
+ 7b6:	70e2                	ld	ra,56(sp)
+ 7b8:	7442                	ld	s0,48(sp)
+ 7ba:	74a2                	ld	s1,40(sp)
+ 7bc:	7902                	ld	s2,32(sp)
+ 7be:	69e2                	ld	s3,24(sp)
+ 7c0:	6a42                	ld	s4,16(sp)
+ 7c2:	6aa2                	ld	s5,8(sp)
+ 7c4:	6b02                	ld	s6,0(sp)
+ 7c6:	6121                	addi	sp,sp,64
+ 7c8:	8082                	ret
         prevp->s.ptr = p->s.ptr;
- 7f2:	6398                	ld	a4,0(a5)
- 7f4:	e118                	sd	a4,0(a0)
- 7f6:	bff1                	j	7d2 <malloc+0x86>
+ 7ca:	6398                	ld	a4,0(a5)
+ 7cc:	e118                	sd	a4,0(a0)
+ 7ce:	bff1                	j	7aa <malloc+0x86>
   hp->s.size = nu;
- 7f8:	01652423          	sw	s6,8(a0)
+ 7d0:	01652423          	sw	s6,8(a0)
   free((void*)(hp + 1));
- 7fc:	0541                	addi	a0,a0,16
- 7fe:	00000097          	auipc	ra,0x0
- 802:	ec6080e7          	jalr	-314(ra) # 6c4 <free>
+ 7d4:	0541                	addi	a0,a0,16
+ 7d6:	00000097          	auipc	ra,0x0
+ 7da:	ec6080e7          	jalr	-314(ra) # 69c <free>
   return freep;
- 806:	00093503          	ld	a0,0(s2)
+ 7de:	00093503          	ld	a0,0(s2)
       if((p = morecore(nunits)) == 0)
- 80a:	d971                	beqz	a0,7de <malloc+0x92>
+ 7e2:	d971                	beqz	a0,7b6 <malloc+0x92>
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 80c:	611c                	ld	a5,0(a0)
+ 7e4:	611c                	ld	a5,0(a0)
     if(p->s.size >= nunits){
- 80e:	4798                	lw	a4,8(a5)
- 810:	fa9776e3          	bgeu	a4,s1,7bc <malloc+0x70>
+ 7e6:	4798                	lw	a4,8(a5)
+ 7e8:	fa9776e3          	bgeu	a4,s1,794 <malloc+0x70>
     if(p == freep)
- 814:	00093703          	ld	a4,0(s2)
- 818:	853e                	mv	a0,a5
- 81a:	fef719e3          	bne	a4,a5,80c <malloc+0xc0>
+ 7ec:	00093703          	ld	a4,0(s2)
+ 7f0:	853e                	mv	a0,a5
+ 7f2:	fef719e3          	bne	a4,a5,7e4 <malloc+0xc0>
   p = sbrk(nu * sizeof(Header));
- 81e:	8552                	mv	a0,s4
- 820:	00000097          	auipc	ra,0x0
- 824:	b56080e7          	jalr	-1194(ra) # 376 <sbrk>
+ 7f6:	8552                	mv	a0,s4
+ 7f8:	00000097          	auipc	ra,0x0
+ 7fc:	b7e080e7          	jalr	-1154(ra) # 376 <sbrk>
   if(p == (char*)-1)
- 828:	fd5518e3          	bne	a0,s5,7f8 <malloc+0xac>
+ 800:	fd5518e3          	bne	a0,s5,7d0 <malloc+0xac>
         return 0;
- 82c:	4501                	li	a0,0
- 82e:	bf45                	j	7de <malloc+0x92>
+ 804:	4501                	li	a0,0
+ 806:	bf45                	j	7b6 <malloc+0x92>
diff --git a/user/rm.o b/user/rm.o
index 97d128e..205cd26 100644
Binary files a/user/rm.o and b/user/rm.o differ
diff --git a/user/rm.sym b/user/rm.sym
index f73a303..0d07acc 100644
--- a/user/rm.sym
+++ b/user/rm.sym
@@ -1,7 +1,7 @@
 0000000000000000 .text
-0000000000000830 .rodata
-0000000000000888 .sbss
-0000000000000890 .bss
+0000000000000808 .rodata
+0000000000000860 .sbss
+0000000000000868 .bss
 0000000000000000 .comment
 0000000000000000 .debug_aranges
 0000000000000000 .debug_info
@@ -14,53 +14,48 @@
 0000000000000000 rm.c
 0000000000000000 ulib.c
 0000000000000000 printf.c
-00000000000003b6 putc
-00000000000003d8 printint
-0000000000000870 digits
+000000000000038e putc
+00000000000003b0 printint
+0000000000000848 digits
 0000000000000000 umalloc.c
-0000000000000888 freep
-0000000000000890 base
+0000000000000860 freep
+0000000000000868 base
 0000000000000078 strcpy
-000000000000068e printf
-0000000000001081 __global_pointer$
+0000000000000666 printf
+0000000000001059 __global_pointer$
 0000000000000238 memmove
 0000000000000336 mknod
 0000000000000134 gets
-0000000000000881 __SDATA_BEGIN__
+0000000000000859 __SDATA_BEGIN__
 000000000000036e getpid
 00000000000002ce memcpy
-000000000000039e print_stats
-000000000000074c malloc
+0000000000000724 malloc
 000000000000037e sleep
 00000000000002fe pipe
 000000000000030e write
 0000000000000346 fstat
-0000000000000660 fprintf
+0000000000000638 fprintf
 000000000000031e kill
-0000000000000482 vprintf
+000000000000045a vprintf
 000000000000035e chdir
-000000000000038e pause_system
 0000000000000326 exec
 00000000000002f6 wait
 0000000000000306 read
 000000000000033e unlink
-00000000000003ae set_cpu
-00000000000003a6 get_cpu
 0000000000000294 memcmp
 00000000000002e6 fork
-0000000000000396 kill_system
-00000000000008a0 __BSS_END__
+0000000000000878 __BSS_END__
 0000000000000376 sbrk
 0000000000000386 uptime
-0000000000000881 __bss_start
+0000000000000859 __bss_start
 00000000000000ea memset
 0000000000000000 main
 0000000000000094 strcmp
 0000000000000366 dup
-0000000000000881 __DATA_BEGIN__
+0000000000000859 __DATA_BEGIN__
 00000000000001a8 stat
-0000000000000881 _edata
-00000000000008a0 _end
+0000000000000859 _edata
+0000000000000878 _end
 000000000000034e link
 00000000000002ee exit
 00000000000001ee atoi
@@ -69,4 +64,4 @@
 0000000000000110 strchr
 0000000000000356 mkdir
 0000000000000316 close
-00000000000006c4 free
+000000000000069c free
diff --git a/user/sh.asm b/user/sh.asm
index 2442b5a..cbab20c 100644
--- a/user/sh.asm
+++ b/user/sh.asm
@@ -21,10 +21,10 @@ getcmd(char *buf, int nbuf)
        e:	892e                	mv	s2,a1
   fprintf(2, "$ ");
       10:	00001597          	auipc	a1,0x1
-      14:	30058593          	addi	a1,a1,768 # 1310 <malloc+0xe8>
+      14:	2d858593          	addi	a1,a1,728 # 12e8 <malloc+0xe8>
       18:	4509                	li	a0,2
       1a:	00001097          	auipc	ra,0x1
-      1e:	122080e7          	jalr	290(ra) # 113c <fprintf>
+      1e:	0fa080e7          	jalr	250(ra) # 1114 <fprintf>
   memset(buf, 0, nbuf);
       22:	864a                	mv	a2,s2
       24:	4581                	li	a1,0
@@ -64,10 +64,10 @@ panic(char *s)
       5c:	862a                	mv	a2,a0
   fprintf(2, "%s\n", s);
       5e:	00001597          	auipc	a1,0x1
-      62:	2ba58593          	addi	a1,a1,698 # 1318 <malloc+0xf0>
+      62:	29258593          	addi	a1,a1,658 # 12f0 <malloc+0xf0>
       66:	4509                	li	a0,2
       68:	00001097          	auipc	ra,0x1
-      6c:	0d4080e7          	jalr	212(ra) # 113c <fprintf>
+      6c:	0ac080e7          	jalr	172(ra) # 1114 <fprintf>
   exit(1);
       70:	4505                	li	a0,1
       72:	00001097          	auipc	ra,0x1
@@ -100,7 +100,7 @@ fork1(void)
       96:	8082                	ret
     panic("fork");
       98:	00001517          	auipc	a0,0x1
-      9c:	28850513          	addi	a0,a0,648 # 1320 <malloc+0xf8>
+      9c:	26050513          	addi	a0,a0,608 # 12f8 <malloc+0xf8>
       a0:	00000097          	auipc	ra,0x0
       a4:	fb4080e7          	jalr	-76(ra) # 54 <panic>
 
@@ -121,7 +121,7 @@ fork1(void)
       be:	00056783          	lwu	a5,0(a0)
       c2:	078a                	slli	a5,a5,0x2
       c4:	00001717          	auipc	a4,0x1
-      c8:	35c70713          	addi	a4,a4,860 # 1420 <malloc+0x1f8>
+      c8:	33470713          	addi	a4,a4,820 # 13f8 <malloc+0x1f8>
       cc:	97ba                	add	a5,a5,a4
       ce:	439c                	lw	a5,0(a5)
       d0:	97ba                	add	a5,a5,a4
@@ -132,7 +132,7 @@ fork1(void)
       da:	cf4080e7          	jalr	-780(ra) # dca <exit>
     panic("runcmd");
       de:	00001517          	auipc	a0,0x1
-      e2:	24a50513          	addi	a0,a0,586 # 1328 <malloc+0x100>
+      e2:	22250513          	addi	a0,a0,546 # 1300 <malloc+0x100>
       e6:	00000097          	auipc	ra,0x0
       ea:	f6e080e7          	jalr	-146(ra) # 54 <panic>
     if(ecmd->argv[0] == 0)
@@ -145,10 +145,10 @@ fork1(void)
     fprintf(2, "exec %s failed\n", ecmd->argv[0]);
       fe:	6490                	ld	a2,8(s1)
      100:	00001597          	auipc	a1,0x1
-     104:	23058593          	addi	a1,a1,560 # 1330 <malloc+0x108>
+     104:	20858593          	addi	a1,a1,520 # 1308 <malloc+0x108>
      108:	4509                	li	a0,2
      10a:	00001097          	auipc	ra,0x1
-     10e:	032080e7          	jalr	50(ra) # 113c <fprintf>
+     10e:	00a080e7          	jalr	10(ra) # 1114 <fprintf>
   exit(0);
      112:	4501                	li	a0,0
      114:	00001097          	auipc	ra,0x1
@@ -174,10 +174,10 @@ fork1(void)
       fprintf(2, "open %s failed\n", rcmd->file);
      14a:	6890                	ld	a2,16(s1)
      14c:	00001597          	auipc	a1,0x1
-     150:	1f458593          	addi	a1,a1,500 # 1340 <malloc+0x118>
+     150:	1cc58593          	addi	a1,a1,460 # 1318 <malloc+0x118>
      154:	4509                	li	a0,2
      156:	00001097          	auipc	ra,0x1
-     15a:	fe6080e7          	jalr	-26(ra) # 113c <fprintf>
+     15a:	fbe080e7          	jalr	-66(ra) # 1114 <fprintf>
       exit(1);
      15e:	4505                	li	a0,1
      160:	00001097          	auipc	ra,0x1
@@ -231,7 +231,7 @@ fork1(void)
      1e0:	bf0d                	j	112 <runcmd+0x6a>
       panic("pipe");
      1e2:	00001517          	auipc	a0,0x1
-     1e6:	16e50513          	addi	a0,a0,366 # 1350 <malloc+0x128>
+     1e6:	14650513          	addi	a0,a0,326 # 1328 <malloc+0x128>
      1ea:	00000097          	auipc	ra,0x0
      1ee:	e6a080e7          	jalr	-406(ra) # 54 <panic>
       close(1);
@@ -299,7 +299,7 @@ execcmd(void)
   cmd = malloc(sizeof(*cmd));
      280:	0a800513          	li	a0,168
      284:	00001097          	auipc	ra,0x1
-     288:	fa4080e7          	jalr	-92(ra) # 1228 <malloc>
+     288:	f7c080e7          	jalr	-132(ra) # 1200 <malloc>
      28c:	84aa                	mv	s1,a0
   memset(cmd, 0, sizeof(*cmd));
      28e:	0a800613          	li	a2,168
@@ -343,7 +343,7 @@ redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
   cmd = malloc(sizeof(*cmd));
      2ca:	02800513          	li	a0,40
      2ce:	00001097          	auipc	ra,0x1
-     2d2:	f5a080e7          	jalr	-166(ra) # 1228 <malloc>
+     2d2:	f32080e7          	jalr	-206(ra) # 1200 <malloc>
      2d6:	84aa                	mv	s1,a0
   memset(cmd, 0, sizeof(*cmd));
      2d8:	02800613          	li	a2,40
@@ -396,7 +396,7 @@ pipecmd(struct cmd *left, struct cmd *right)
   cmd = malloc(sizeof(*cmd));
      326:	4561                	li	a0,24
      328:	00001097          	auipc	ra,0x1
-     32c:	f00080e7          	jalr	-256(ra) # 1228 <malloc>
+     32c:	ed8080e7          	jalr	-296(ra) # 1200 <malloc>
      330:	84aa                	mv	s1,a0
   memset(cmd, 0, sizeof(*cmd));
      332:	4661                	li	a2,24
@@ -440,7 +440,7 @@ listcmd(struct cmd *left, struct cmd *right)
   cmd = malloc(sizeof(*cmd));
      36c:	4561                	li	a0,24
      36e:	00001097          	auipc	ra,0x1
-     372:	eba080e7          	jalr	-326(ra) # 1228 <malloc>
+     372:	e92080e7          	jalr	-366(ra) # 1200 <malloc>
      376:	84aa                	mv	s1,a0
   memset(cmd, 0, sizeof(*cmd));
      378:	4661                	li	a2,24
@@ -482,7 +482,7 @@ backcmd(struct cmd *subcmd)
   cmd = malloc(sizeof(*cmd));
      3ae:	4541                	li	a0,16
      3b0:	00001097          	auipc	ra,0x1
-     3b4:	e78080e7          	jalr	-392(ra) # 1228 <malloc>
+     3b4:	e50080e7          	jalr	-432(ra) # 1200 <malloc>
      3b8:	84aa                	mv	s1,a0
   memset(cmd, 0, sizeof(*cmd));
      3ba:	4641                	li	a2,16
@@ -532,7 +532,7 @@ gettoken(char **ps, char *es, char **q, char **eq)
      3f8:	6104                	ld	s1,0(a0)
   while(s < es && strchr(whitespace, *s))
      3fa:	00001997          	auipc	s3,0x1
-     3fe:	07e98993          	addi	s3,s3,126 # 1478 <whitespace>
+     3fe:	05698993          	addi	s3,s3,86 # 1450 <whitespace>
      402:	00b4fd63          	bgeu	s1,a1,41c <gettoken+0x40>
      406:	0004c583          	lbu	a1,0(s1)
      40a:	854e                	mv	a0,s3
@@ -581,7 +581,7 @@ gettoken(char **ps, char *es, char **q, char **eq)
 
   while(s < es && strchr(whitespace, *s))
      45e:	00001997          	auipc	s3,0x1
-     462:	01a98993          	addi	s3,s3,26 # 1478 <whitespace>
+     462:	ff298993          	addi	s3,s3,-14 # 1450 <whitespace>
      466:	0124fd63          	bgeu	s1,s2,480 <gettoken+0xa4>
      46a:	0004c583          	lbu	a1,0(s1)
      46e:	854e                	mv	a0,s3
@@ -631,9 +631,9 @@ gettoken(char **ps, char *es, char **q, char **eq)
      4c4:	f8e788e3          	beq	a5,a4,454 <gettoken+0x78>
     while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
      4c8:	00001997          	auipc	s3,0x1
-     4cc:	fb098993          	addi	s3,s3,-80 # 1478 <whitespace>
+     4cc:	f8898993          	addi	s3,s3,-120 # 1450 <whitespace>
      4d0:	00001a97          	auipc	s5,0x1
-     4d4:	fa0a8a93          	addi	s5,s5,-96 # 1470 <symbols>
+     4d4:	f78a8a93          	addi	s5,s5,-136 # 1448 <symbols>
      4d8:	0324f563          	bgeu	s1,s2,502 <gettoken+0x126>
      4dc:	0004c583          	lbu	a1,0(s1)
      4e0:	854e                	mv	a0,s3
@@ -682,7 +682,7 @@ peek(char **ps, char *es, char *toks)
      530:	6104                	ld	s1,0(a0)
   while(s < es && strchr(whitespace, *s))
      532:	00001997          	auipc	s3,0x1
-     536:	f4698993          	addi	s3,s3,-186 # 1478 <whitespace>
+     536:	f1e98993          	addi	s3,s3,-226 # 1450 <whitespace>
      53a:	00b4fd63          	bgeu	s1,a1,554 <peek+0x3c>
      53e:	0004c583          	lbu	a1,0(s1)
      542:	854e                	mv	a0,s3
@@ -744,7 +744,7 @@ parseredirs(struct cmd *cmd, char **ps, char *es)
 
   while(peek(ps, es, "<>")){
      5a2:	00001b97          	auipc	s7,0x1
-     5a6:	dd6b8b93          	addi	s7,s7,-554 # 1378 <malloc+0x150>
+     5a6:	daeb8b93          	addi	s7,s7,-594 # 1350 <malloc+0x150>
     tok = gettoken(ps, es, 0, 0);
     if(gettoken(ps, es, &q, &eq) != 'a')
      5aa:	06100c13          	li	s8,97
@@ -755,7 +755,7 @@ parseredirs(struct cmd *cmd, char **ps, char *es)
      5b2:	a02d                	j	5dc <parseredirs+0x5a>
       panic("missing file for redirection");
      5b4:	00001517          	auipc	a0,0x1
-     5b8:	da450513          	addi	a0,a0,-604 # 1358 <malloc+0x130>
+     5b8:	d7c50513          	addi	a0,a0,-644 # 1330 <malloc+0x130>
      5bc:	00000097          	auipc	ra,0x0
      5c0:	a98080e7          	jalr	-1384(ra) # 54 <panic>
     case '<':
@@ -873,7 +873,7 @@ parseexec(char **ps, char *es)
 
   if(peek(ps, es, "("))
      69c:	00001617          	auipc	a2,0x1
-     6a0:	ce460613          	addi	a2,a2,-796 # 1380 <malloc+0x158>
+     6a0:	cbc60613          	addi	a2,a2,-836 # 1358 <malloc+0x158>
      6a4:	00000097          	auipc	ra,0x0
      6a8:	e74080e7          	jalr	-396(ra) # 518 <peek>
      6ac:	e905                	bnez	a0,6dc <parseexec+0x5e>
@@ -896,7 +896,7 @@ parseexec(char **ps, char *es)
   while(!peek(ps, es, "|)&;")){
      6c8:	008c0913          	addi	s2,s8,8
      6cc:	00001b17          	auipc	s6,0x1
-     6d0:	cd4b0b13          	addi	s6,s6,-812 # 13a0 <malloc+0x178>
+     6d0:	cacb0b13          	addi	s6,s6,-852 # 1378 <malloc+0x178>
     if((tok=gettoken(ps, es, &q, &eq)) == 0)
       break;
     if(tok != 'a')
@@ -937,7 +937,7 @@ parseexec(char **ps, char *es)
      704:	8082                	ret
       panic("syntax");
      706:	00001517          	auipc	a0,0x1
-     70a:	c8250513          	addi	a0,a0,-894 # 1388 <malloc+0x160>
+     70a:	c5a50513          	addi	a0,a0,-934 # 1360 <malloc+0x160>
      70e:	00000097          	auipc	ra,0x0
      712:	946080e7          	jalr	-1722(ra) # 54 <panic>
     ret = parseredirs(ret, ps, es);
@@ -977,7 +977,7 @@ parseexec(char **ps, char *es)
      764:	fb7999e3          	bne	s3,s7,716 <parseexec+0x98>
       panic("too many args");
      768:	00001517          	auipc	a0,0x1
-     76c:	c2850513          	addi	a0,a0,-984 # 1390 <malloc+0x168>
+     76c:	c0050513          	addi	a0,a0,-1024 # 1368 <malloc+0x168>
      770:	00000097          	auipc	ra,0x0
      774:	8e4080e7          	jalr	-1820(ra) # 54 <panic>
   cmd->argv[argc] = 0;
@@ -1006,7 +1006,7 @@ parseexec(char **ps, char *es)
      7a0:	84aa                	mv	s1,a0
   if(peek(ps, es, "|")){
      7a2:	00001617          	auipc	a2,0x1
-     7a6:	c0660613          	addi	a2,a2,-1018 # 13a8 <malloc+0x180>
+     7a6:	bde60613          	addi	a2,a2,-1058 # 1380 <malloc+0x180>
      7aa:	85ce                	mv	a1,s3
      7ac:	854a                	mv	a0,s2
      7ae:	00000097          	auipc	ra,0x0
@@ -1059,7 +1059,7 @@ parseexec(char **ps, char *es)
      810:	84aa                	mv	s1,a0
   while(peek(ps, es, "&")){
      812:	00001a17          	auipc	s4,0x1
-     816:	b9ea0a13          	addi	s4,s4,-1122 # 13b0 <malloc+0x188>
+     816:	b76a0a13          	addi	s4,s4,-1162 # 1388 <malloc+0x188>
      81a:	8652                	mv	a2,s4
      81c:	85ce                	mv	a1,s3
      81e:	854a                	mv	a0,s2
@@ -1081,7 +1081,7 @@ parseexec(char **ps, char *es)
      846:	bfd1                	j	81a <parseline+0x26>
   if(peek(ps, es, ";")){
      848:	00001617          	auipc	a2,0x1
-     84c:	b7060613          	addi	a2,a2,-1168 # 13b8 <malloc+0x190>
+     84c:	b4860613          	addi	a2,a2,-1208 # 1390 <malloc+0x190>
      850:	85ce                	mv	a1,s3
      852:	854a                	mv	a0,s2
      854:	00000097          	auipc	ra,0x0
@@ -1130,7 +1130,7 @@ parseexec(char **ps, char *es)
      8ac:	892e                	mv	s2,a1
   if(!peek(ps, es, "("))
      8ae:	00001617          	auipc	a2,0x1
-     8b2:	ad260613          	addi	a2,a2,-1326 # 1380 <malloc+0x158>
+     8b2:	aaa60613          	addi	a2,a2,-1366 # 1358 <malloc+0x158>
      8b6:	00000097          	auipc	ra,0x0
      8ba:	c62080e7          	jalr	-926(ra) # 518 <peek>
      8be:	c12d                	beqz	a0,920 <parseblock+0x84>
@@ -1149,7 +1149,7 @@ parseexec(char **ps, char *es)
      8dc:	89aa                	mv	s3,a0
   if(!peek(ps, es, ")"))
      8de:	00001617          	auipc	a2,0x1
-     8e2:	af260613          	addi	a2,a2,-1294 # 13d0 <malloc+0x1a8>
+     8e2:	aca60613          	addi	a2,a2,-1334 # 13a8 <malloc+0x1a8>
      8e6:	85ca                	mv	a1,s2
      8e8:	8526                	mv	a0,s1
      8ea:	00000097          	auipc	ra,0x0
@@ -1178,12 +1178,12 @@ parseexec(char **ps, char *es)
      91e:	8082                	ret
     panic("parseblock");
      920:	00001517          	auipc	a0,0x1
-     924:	aa050513          	addi	a0,a0,-1376 # 13c0 <malloc+0x198>
+     924:	a7850513          	addi	a0,a0,-1416 # 1398 <malloc+0x198>
      928:	fffff097          	auipc	ra,0xfffff
      92c:	72c080e7          	jalr	1836(ra) # 54 <panic>
     panic("syntax - missing )");
      930:	00001517          	auipc	a0,0x1
-     934:	aa850513          	addi	a0,a0,-1368 # 13d8 <malloc+0x1b0>
+     934:	a8050513          	addi	a0,a0,-1408 # 13b0 <malloc+0x1b0>
      938:	fffff097          	auipc	ra,0xfffff
      93c:	71c080e7          	jalr	1820(ra) # 54 <panic>
 
@@ -1215,7 +1215,7 @@ nulterminate(struct cmd *cmd)
      956:	00056783          	lwu	a5,0(a0)
      95a:	078a                	slli	a5,a5,0x2
      95c:	00001717          	auipc	a4,0x1
-     960:	adc70713          	addi	a4,a4,-1316 # 1438 <malloc+0x210>
+     960:	ab470713          	addi	a4,a4,-1356 # 1410 <malloc+0x210>
      964:	97ba                	add	a5,a5,a4
      966:	439c                	lw	a5,0(a5)
      968:	97ba                	add	a5,a5,a4
@@ -1308,7 +1308,7 @@ nulterminate(struct cmd *cmd)
      a06:	892a                	mv	s2,a0
   peek(&s, es, "");
      a08:	00001617          	auipc	a2,0x1
-     a0c:	9e860613          	addi	a2,a2,-1560 # 13f0 <malloc+0x1c8>
+     a0c:	9c060613          	addi	a2,a2,-1600 # 13c8 <malloc+0x1c8>
      a10:	85a6                	mv	a1,s1
      a12:	fd840513          	addi	a0,s0,-40
      a16:	00000097          	auipc	ra,0x0
@@ -1330,13 +1330,13 @@ nulterminate(struct cmd *cmd)
      a3c:	8082                	ret
     fprintf(2, "leftovers: %s\n", s);
      a3e:	00001597          	auipc	a1,0x1
-     a42:	9ba58593          	addi	a1,a1,-1606 # 13f8 <malloc+0x1d0>
+     a42:	99258593          	addi	a1,a1,-1646 # 13d0 <malloc+0x1d0>
      a46:	4509                	li	a0,2
      a48:	00000097          	auipc	ra,0x0
-     a4c:	6f4080e7          	jalr	1780(ra) # 113c <fprintf>
+     a4c:	6cc080e7          	jalr	1740(ra) # 1114 <fprintf>
     panic("syntax");
      a50:	00001517          	auipc	a0,0x1
-     a54:	93850513          	addi	a0,a0,-1736 # 1388 <malloc+0x160>
+     a54:	91050513          	addi	a0,a0,-1776 # 1360 <malloc+0x160>
      a58:	fffff097          	auipc	ra,0xfffff
      a5c:	5fc080e7          	jalr	1532(ra) # 54 <panic>
 
@@ -1353,7 +1353,7 @@ nulterminate(struct cmd *cmd)
      a70:	0080                	addi	s0,sp,64
   while((fd = open("console", O_RDWR)) >= 0){
      a72:	00001497          	auipc	s1,0x1
-     a76:	99648493          	addi	s1,s1,-1642 # 1408 <malloc+0x1e0>
+     a76:	96e48493          	addi	s1,s1,-1682 # 13e0 <malloc+0x1e0>
      a7a:	4589                	li	a1,2
      a7c:	8526                	mv	a0,s1
      a7e:	00000097          	auipc	ra,0x0
@@ -1367,16 +1367,16 @@ nulterminate(struct cmd *cmd)
      a94:	362080e7          	jalr	866(ra) # df2 <close>
   while(getcmd(buf, sizeof(buf)) >= 0){
      a98:	00001497          	auipc	s1,0x1
-     a9c:	9f048493          	addi	s1,s1,-1552 # 1488 <buf.1143>
+     a9c:	9c848493          	addi	s1,s1,-1592 # 1460 <buf.1133>
     if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
      aa0:	06300913          	li	s2,99
      aa4:	02000993          	li	s3,32
       if(chdir(buf+3) < 0)
      aa8:	00001a17          	auipc	s4,0x1
-     aac:	9e3a0a13          	addi	s4,s4,-1565 # 148b <buf.1143+0x3>
+     aac:	9bba0a13          	addi	s4,s4,-1605 # 1463 <buf.1133+0x3>
         fprintf(2, "cannot cd %s\n", buf+3);
      ab0:	00001a97          	auipc	s5,0x1
-     ab4:	960a8a93          	addi	s5,s5,-1696 # 1410 <malloc+0x1e8>
+     ab4:	938a8a93          	addi	s5,s5,-1736 # 13e8 <malloc+0x1e8>
      ab8:	a819                	j	ace <main+0x6e>
     if(fork1() == 0)
      aba:	fffff097          	auipc	ra,0xfffff
@@ -1419,11 +1419,11 @@ nulterminate(struct cmd *cmd)
      b24:	85d6                	mv	a1,s5
      b26:	4509                	li	a0,2
      b28:	00000097          	auipc	ra,0x0
-     b2c:	614080e7          	jalr	1556(ra) # 113c <fprintf>
+     b2c:	5ec080e7          	jalr	1516(ra) # 1114 <fprintf>
      b30:	bf79                	j	ace <main+0x6e>
       runcmd(parsecmd(buf));
      b32:	00001517          	auipc	a0,0x1
-     b36:	95650513          	addi	a0,a0,-1706 # 1488 <buf.1143>
+     b36:	92e50513          	addi	a0,a0,-1746 # 1460 <buf.1133>
      b3a:	00000097          	auipc	ra,0x0
      b3e:	e9e080e7          	jalr	-354(ra) # 9d8 <parsecmd>
      b42:	fffff097          	auipc	ra,0xfffff
@@ -2070,696 +2070,646 @@ uptime:
  ret
      e68:	8082                	ret
 
-0000000000000e6a <pause_system>:
-.global pause_system
-pause_system:
- li a7, SYS_pause_system
-     e6a:	48d9                	li	a7,22
- ecall
-     e6c:	00000073          	ecall
- ret
-     e70:	8082                	ret
-
-0000000000000e72 <kill_system>:
-.global kill_system
-kill_system:
- li a7, SYS_kill_system
-     e72:	48dd                	li	a7,23
- ecall
-     e74:	00000073          	ecall
- ret
-     e78:	8082                	ret
-
-0000000000000e7a <print_stats>:
-.global print_stats
-print_stats:
- li a7, SYS_print_stats
-     e7a:	48e1                	li	a7,24
- ecall
-     e7c:	00000073          	ecall
- ret
-     e80:	8082                	ret
-
-0000000000000e82 <get_cpu>:
-.global get_cpu
-get_cpu:
- li a7, SYS_get_cpu
-     e82:	48e5                	li	a7,25
- ecall
-     e84:	00000073          	ecall
- ret
-     e88:	8082                	ret
-
-0000000000000e8a <set_cpu>:
-.global set_cpu
-set_cpu:
- li a7, SYS_set_cpu
-     e8a:	48e9                	li	a7,26
- ecall
-     e8c:	00000073          	ecall
- ret
-     e90:	8082                	ret
-
-0000000000000e92 <putc>:
+0000000000000e6a <putc>:
 
 static char digits[] = "0123456789ABCDEF";
 
 static void
 putc(int fd, char c)
 {
-     e92:	1101                	addi	sp,sp,-32
-     e94:	ec06                	sd	ra,24(sp)
-     e96:	e822                	sd	s0,16(sp)
-     e98:	1000                	addi	s0,sp,32
-     e9a:	feb407a3          	sb	a1,-17(s0)
+     e6a:	1101                	addi	sp,sp,-32
+     e6c:	ec06                	sd	ra,24(sp)
+     e6e:	e822                	sd	s0,16(sp)
+     e70:	1000                	addi	s0,sp,32
+     e72:	feb407a3          	sb	a1,-17(s0)
   write(fd, &c, 1);
-     e9e:	4605                	li	a2,1
-     ea0:	fef40593          	addi	a1,s0,-17
-     ea4:	00000097          	auipc	ra,0x0
-     ea8:	f46080e7          	jalr	-186(ra) # dea <write>
+     e76:	4605                	li	a2,1
+     e78:	fef40593          	addi	a1,s0,-17
+     e7c:	00000097          	auipc	ra,0x0
+     e80:	f6e080e7          	jalr	-146(ra) # dea <write>
 }
-     eac:	60e2                	ld	ra,24(sp)
-     eae:	6442                	ld	s0,16(sp)
-     eb0:	6105                	addi	sp,sp,32
-     eb2:	8082                	ret
+     e84:	60e2                	ld	ra,24(sp)
+     e86:	6442                	ld	s0,16(sp)
+     e88:	6105                	addi	sp,sp,32
+     e8a:	8082                	ret
 
-0000000000000eb4 <printint>:
+0000000000000e8c <printint>:
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
-     eb4:	7139                	addi	sp,sp,-64
-     eb6:	fc06                	sd	ra,56(sp)
-     eb8:	f822                	sd	s0,48(sp)
-     eba:	f426                	sd	s1,40(sp)
-     ebc:	f04a                	sd	s2,32(sp)
-     ebe:	ec4e                	sd	s3,24(sp)
-     ec0:	0080                	addi	s0,sp,64
-     ec2:	84aa                	mv	s1,a0
+     e8c:	7139                	addi	sp,sp,-64
+     e8e:	fc06                	sd	ra,56(sp)
+     e90:	f822                	sd	s0,48(sp)
+     e92:	f426                	sd	s1,40(sp)
+     e94:	f04a                	sd	s2,32(sp)
+     e96:	ec4e                	sd	s3,24(sp)
+     e98:	0080                	addi	s0,sp,64
+     e9a:	84aa                	mv	s1,a0
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
-     ec4:	c299                	beqz	a3,eca <printint+0x16>
-     ec6:	0805c863          	bltz	a1,f56 <printint+0xa2>
+     e9c:	c299                	beqz	a3,ea2 <printint+0x16>
+     e9e:	0805c863          	bltz	a1,f2e <printint+0xa2>
     neg = 1;
     x = -xx;
   } else {
     x = xx;
-     eca:	2581                	sext.w	a1,a1
+     ea2:	2581                	sext.w	a1,a1
   neg = 0;
-     ecc:	4881                	li	a7,0
-     ece:	fc040693          	addi	a3,s0,-64
+     ea4:	4881                	li	a7,0
+     ea6:	fc040693          	addi	a3,s0,-64
   }
 
   i = 0;
-     ed2:	4701                	li	a4,0
+     eaa:	4701                	li	a4,0
   do{
     buf[i++] = digits[x % base];
-     ed4:	2601                	sext.w	a2,a2
-     ed6:	00000517          	auipc	a0,0x0
-     eda:	58250513          	addi	a0,a0,1410 # 1458 <digits>
-     ede:	883a                	mv	a6,a4
-     ee0:	2705                	addiw	a4,a4,1
-     ee2:	02c5f7bb          	remuw	a5,a1,a2
-     ee6:	1782                	slli	a5,a5,0x20
-     ee8:	9381                	srli	a5,a5,0x20
-     eea:	97aa                	add	a5,a5,a0
-     eec:	0007c783          	lbu	a5,0(a5)
-     ef0:	00f68023          	sb	a5,0(a3)
+     eac:	2601                	sext.w	a2,a2
+     eae:	00000517          	auipc	a0,0x0
+     eb2:	58250513          	addi	a0,a0,1410 # 1430 <digits>
+     eb6:	883a                	mv	a6,a4
+     eb8:	2705                	addiw	a4,a4,1
+     eba:	02c5f7bb          	remuw	a5,a1,a2
+     ebe:	1782                	slli	a5,a5,0x20
+     ec0:	9381                	srli	a5,a5,0x20
+     ec2:	97aa                	add	a5,a5,a0
+     ec4:	0007c783          	lbu	a5,0(a5)
+     ec8:	00f68023          	sb	a5,0(a3)
   }while((x /= base) != 0);
-     ef4:	0005879b          	sext.w	a5,a1
-     ef8:	02c5d5bb          	divuw	a1,a1,a2
-     efc:	0685                	addi	a3,a3,1
-     efe:	fec7f0e3          	bgeu	a5,a2,ede <printint+0x2a>
+     ecc:	0005879b          	sext.w	a5,a1
+     ed0:	02c5d5bb          	divuw	a1,a1,a2
+     ed4:	0685                	addi	a3,a3,1
+     ed6:	fec7f0e3          	bgeu	a5,a2,eb6 <printint+0x2a>
   if(neg)
-     f02:	00088b63          	beqz	a7,f18 <printint+0x64>
+     eda:	00088b63          	beqz	a7,ef0 <printint+0x64>
     buf[i++] = '-';
-     f06:	fd040793          	addi	a5,s0,-48
-     f0a:	973e                	add	a4,a4,a5
-     f0c:	02d00793          	li	a5,45
-     f10:	fef70823          	sb	a5,-16(a4)
-     f14:	0028071b          	addiw	a4,a6,2
+     ede:	fd040793          	addi	a5,s0,-48
+     ee2:	973e                	add	a4,a4,a5
+     ee4:	02d00793          	li	a5,45
+     ee8:	fef70823          	sb	a5,-16(a4)
+     eec:	0028071b          	addiw	a4,a6,2
 
   while(--i >= 0)
-     f18:	02e05863          	blez	a4,f48 <printint+0x94>
-     f1c:	fc040793          	addi	a5,s0,-64
-     f20:	00e78933          	add	s2,a5,a4
-     f24:	fff78993          	addi	s3,a5,-1
-     f28:	99ba                	add	s3,s3,a4
-     f2a:	377d                	addiw	a4,a4,-1
-     f2c:	1702                	slli	a4,a4,0x20
-     f2e:	9301                	srli	a4,a4,0x20
-     f30:	40e989b3          	sub	s3,s3,a4
+     ef0:	02e05863          	blez	a4,f20 <printint+0x94>
+     ef4:	fc040793          	addi	a5,s0,-64
+     ef8:	00e78933          	add	s2,a5,a4
+     efc:	fff78993          	addi	s3,a5,-1
+     f00:	99ba                	add	s3,s3,a4
+     f02:	377d                	addiw	a4,a4,-1
+     f04:	1702                	slli	a4,a4,0x20
+     f06:	9301                	srli	a4,a4,0x20
+     f08:	40e989b3          	sub	s3,s3,a4
     putc(fd, buf[i]);
-     f34:	fff94583          	lbu	a1,-1(s2)
-     f38:	8526                	mv	a0,s1
-     f3a:	00000097          	auipc	ra,0x0
-     f3e:	f58080e7          	jalr	-168(ra) # e92 <putc>
+     f0c:	fff94583          	lbu	a1,-1(s2)
+     f10:	8526                	mv	a0,s1
+     f12:	00000097          	auipc	ra,0x0
+     f16:	f58080e7          	jalr	-168(ra) # e6a <putc>
   while(--i >= 0)
-     f42:	197d                	addi	s2,s2,-1
-     f44:	ff3918e3          	bne	s2,s3,f34 <printint+0x80>
+     f1a:	197d                	addi	s2,s2,-1
+     f1c:	ff3918e3          	bne	s2,s3,f0c <printint+0x80>
 }
-     f48:	70e2                	ld	ra,56(sp)
-     f4a:	7442                	ld	s0,48(sp)
-     f4c:	74a2                	ld	s1,40(sp)
-     f4e:	7902                	ld	s2,32(sp)
-     f50:	69e2                	ld	s3,24(sp)
-     f52:	6121                	addi	sp,sp,64
-     f54:	8082                	ret
+     f20:	70e2                	ld	ra,56(sp)
+     f22:	7442                	ld	s0,48(sp)
+     f24:	74a2                	ld	s1,40(sp)
+     f26:	7902                	ld	s2,32(sp)
+     f28:	69e2                	ld	s3,24(sp)
+     f2a:	6121                	addi	sp,sp,64
+     f2c:	8082                	ret
     x = -xx;
-     f56:	40b005bb          	negw	a1,a1
+     f2e:	40b005bb          	negw	a1,a1
     neg = 1;
-     f5a:	4885                	li	a7,1
+     f32:	4885                	li	a7,1
     x = -xx;
-     f5c:	bf8d                	j	ece <printint+0x1a>
+     f34:	bf8d                	j	ea6 <printint+0x1a>
 
-0000000000000f5e <vprintf>:
+0000000000000f36 <vprintf>:
 }
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 vprintf(int fd, const char *fmt, va_list ap)
 {
-     f5e:	7119                	addi	sp,sp,-128
-     f60:	fc86                	sd	ra,120(sp)
-     f62:	f8a2                	sd	s0,112(sp)
-     f64:	f4a6                	sd	s1,104(sp)
-     f66:	f0ca                	sd	s2,96(sp)
-     f68:	ecce                	sd	s3,88(sp)
-     f6a:	e8d2                	sd	s4,80(sp)
-     f6c:	e4d6                	sd	s5,72(sp)
-     f6e:	e0da                	sd	s6,64(sp)
-     f70:	fc5e                	sd	s7,56(sp)
-     f72:	f862                	sd	s8,48(sp)
-     f74:	f466                	sd	s9,40(sp)
-     f76:	f06a                	sd	s10,32(sp)
-     f78:	ec6e                	sd	s11,24(sp)
-     f7a:	0100                	addi	s0,sp,128
+     f36:	7119                	addi	sp,sp,-128
+     f38:	fc86                	sd	ra,120(sp)
+     f3a:	f8a2                	sd	s0,112(sp)
+     f3c:	f4a6                	sd	s1,104(sp)
+     f3e:	f0ca                	sd	s2,96(sp)
+     f40:	ecce                	sd	s3,88(sp)
+     f42:	e8d2                	sd	s4,80(sp)
+     f44:	e4d6                	sd	s5,72(sp)
+     f46:	e0da                	sd	s6,64(sp)
+     f48:	fc5e                	sd	s7,56(sp)
+     f4a:	f862                	sd	s8,48(sp)
+     f4c:	f466                	sd	s9,40(sp)
+     f4e:	f06a                	sd	s10,32(sp)
+     f50:	ec6e                	sd	s11,24(sp)
+     f52:	0100                	addi	s0,sp,128
   char *s;
   int c, i, state;
 
   state = 0;
   for(i = 0; fmt[i]; i++){
-     f7c:	0005c903          	lbu	s2,0(a1)
-     f80:	18090f63          	beqz	s2,111e <vprintf+0x1c0>
-     f84:	8aaa                	mv	s5,a0
-     f86:	8b32                	mv	s6,a2
-     f88:	00158493          	addi	s1,a1,1
+     f54:	0005c903          	lbu	s2,0(a1)
+     f58:	18090f63          	beqz	s2,10f6 <vprintf+0x1c0>
+     f5c:	8aaa                	mv	s5,a0
+     f5e:	8b32                	mv	s6,a2
+     f60:	00158493          	addi	s1,a1,1
   state = 0;
-     f8c:	4981                	li	s3,0
+     f64:	4981                	li	s3,0
       if(c == '%'){
         state = '%';
       } else {
         putc(fd, c);
       }
     } else if(state == '%'){
-     f8e:	02500a13          	li	s4,37
+     f66:	02500a13          	li	s4,37
       if(c == 'd'){
-     f92:	06400c13          	li	s8,100
+     f6a:	06400c13          	li	s8,100
         printint(fd, va_arg(ap, int), 10, 1);
       } else if(c == 'l') {
-     f96:	06c00c93          	li	s9,108
+     f6e:	06c00c93          	li	s9,108
         printint(fd, va_arg(ap, uint64), 10, 0);
       } else if(c == 'x') {
-     f9a:	07800d13          	li	s10,120
+     f72:	07800d13          	li	s10,120
         printint(fd, va_arg(ap, int), 16, 0);
       } else if(c == 'p') {
-     f9e:	07000d93          	li	s11,112
+     f76:	07000d93          	li	s11,112
     putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
-     fa2:	00000b97          	auipc	s7,0x0
-     fa6:	4b6b8b93          	addi	s7,s7,1206 # 1458 <digits>
-     faa:	a839                	j	fc8 <vprintf+0x6a>
+     f7a:	00000b97          	auipc	s7,0x0
+     f7e:	4b6b8b93          	addi	s7,s7,1206 # 1430 <digits>
+     f82:	a839                	j	fa0 <vprintf+0x6a>
         putc(fd, c);
-     fac:	85ca                	mv	a1,s2
-     fae:	8556                	mv	a0,s5
-     fb0:	00000097          	auipc	ra,0x0
-     fb4:	ee2080e7          	jalr	-286(ra) # e92 <putc>
-     fb8:	a019                	j	fbe <vprintf+0x60>
+     f84:	85ca                	mv	a1,s2
+     f86:	8556                	mv	a0,s5
+     f88:	00000097          	auipc	ra,0x0
+     f8c:	ee2080e7          	jalr	-286(ra) # e6a <putc>
+     f90:	a019                	j	f96 <vprintf+0x60>
     } else if(state == '%'){
-     fba:	01498f63          	beq	s3,s4,fd8 <vprintf+0x7a>
+     f92:	01498f63          	beq	s3,s4,fb0 <vprintf+0x7a>
   for(i = 0; fmt[i]; i++){
-     fbe:	0485                	addi	s1,s1,1
-     fc0:	fff4c903          	lbu	s2,-1(s1)
-     fc4:	14090d63          	beqz	s2,111e <vprintf+0x1c0>
+     f96:	0485                	addi	s1,s1,1
+     f98:	fff4c903          	lbu	s2,-1(s1)
+     f9c:	14090d63          	beqz	s2,10f6 <vprintf+0x1c0>
     c = fmt[i] & 0xff;
-     fc8:	0009079b          	sext.w	a5,s2
+     fa0:	0009079b          	sext.w	a5,s2
     if(state == 0){
-     fcc:	fe0997e3          	bnez	s3,fba <vprintf+0x5c>
+     fa4:	fe0997e3          	bnez	s3,f92 <vprintf+0x5c>
       if(c == '%'){
-     fd0:	fd479ee3          	bne	a5,s4,fac <vprintf+0x4e>
+     fa8:	fd479ee3          	bne	a5,s4,f84 <vprintf+0x4e>
         state = '%';
-     fd4:	89be                	mv	s3,a5
-     fd6:	b7e5                	j	fbe <vprintf+0x60>
+     fac:	89be                	mv	s3,a5
+     fae:	b7e5                	j	f96 <vprintf+0x60>
       if(c == 'd'){
-     fd8:	05878063          	beq	a5,s8,1018 <vprintf+0xba>
+     fb0:	05878063          	beq	a5,s8,ff0 <vprintf+0xba>
       } else if(c == 'l') {
-     fdc:	05978c63          	beq	a5,s9,1034 <vprintf+0xd6>
+     fb4:	05978c63          	beq	a5,s9,100c <vprintf+0xd6>
       } else if(c == 'x') {
-     fe0:	07a78863          	beq	a5,s10,1050 <vprintf+0xf2>
+     fb8:	07a78863          	beq	a5,s10,1028 <vprintf+0xf2>
       } else if(c == 'p') {
-     fe4:	09b78463          	beq	a5,s11,106c <vprintf+0x10e>
+     fbc:	09b78463          	beq	a5,s11,1044 <vprintf+0x10e>
         printptr(fd, va_arg(ap, uint64));
       } else if(c == 's'){
-     fe8:	07300713          	li	a4,115
-     fec:	0ce78663          	beq	a5,a4,10b8 <vprintf+0x15a>
+     fc0:	07300713          	li	a4,115
+     fc4:	0ce78663          	beq	a5,a4,1090 <vprintf+0x15a>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
-     ff0:	06300713          	li	a4,99
-     ff4:	0ee78e63          	beq	a5,a4,10f0 <vprintf+0x192>
+     fc8:	06300713          	li	a4,99
+     fcc:	0ee78e63          	beq	a5,a4,10c8 <vprintf+0x192>
         putc(fd, va_arg(ap, uint));
       } else if(c == '%'){
-     ff8:	11478863          	beq	a5,s4,1108 <vprintf+0x1aa>
+     fd0:	11478863          	beq	a5,s4,10e0 <vprintf+0x1aa>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
-     ffc:	85d2                	mv	a1,s4
-     ffe:	8556                	mv	a0,s5
-    1000:	00000097          	auipc	ra,0x0
-    1004:	e92080e7          	jalr	-366(ra) # e92 <putc>
+     fd4:	85d2                	mv	a1,s4
+     fd6:	8556                	mv	a0,s5
+     fd8:	00000097          	auipc	ra,0x0
+     fdc:	e92080e7          	jalr	-366(ra) # e6a <putc>
         putc(fd, c);
-    1008:	85ca                	mv	a1,s2
-    100a:	8556                	mv	a0,s5
-    100c:	00000097          	auipc	ra,0x0
-    1010:	e86080e7          	jalr	-378(ra) # e92 <putc>
+     fe0:	85ca                	mv	a1,s2
+     fe2:	8556                	mv	a0,s5
+     fe4:	00000097          	auipc	ra,0x0
+     fe8:	e86080e7          	jalr	-378(ra) # e6a <putc>
       }
       state = 0;
-    1014:	4981                	li	s3,0
-    1016:	b765                	j	fbe <vprintf+0x60>
+     fec:	4981                	li	s3,0
+     fee:	b765                	j	f96 <vprintf+0x60>
         printint(fd, va_arg(ap, int), 10, 1);
-    1018:	008b0913          	addi	s2,s6,8
-    101c:	4685                	li	a3,1
-    101e:	4629                	li	a2,10
-    1020:	000b2583          	lw	a1,0(s6)
-    1024:	8556                	mv	a0,s5
-    1026:	00000097          	auipc	ra,0x0
-    102a:	e8e080e7          	jalr	-370(ra) # eb4 <printint>
-    102e:	8b4a                	mv	s6,s2
+     ff0:	008b0913          	addi	s2,s6,8
+     ff4:	4685                	li	a3,1
+     ff6:	4629                	li	a2,10
+     ff8:	000b2583          	lw	a1,0(s6)
+     ffc:	8556                	mv	a0,s5
+     ffe:	00000097          	auipc	ra,0x0
+    1002:	e8e080e7          	jalr	-370(ra) # e8c <printint>
+    1006:	8b4a                	mv	s6,s2
       state = 0;
-    1030:	4981                	li	s3,0
-    1032:	b771                	j	fbe <vprintf+0x60>
+    1008:	4981                	li	s3,0
+    100a:	b771                	j	f96 <vprintf+0x60>
         printint(fd, va_arg(ap, uint64), 10, 0);
-    1034:	008b0913          	addi	s2,s6,8
-    1038:	4681                	li	a3,0
-    103a:	4629                	li	a2,10
-    103c:	000b2583          	lw	a1,0(s6)
-    1040:	8556                	mv	a0,s5
-    1042:	00000097          	auipc	ra,0x0
-    1046:	e72080e7          	jalr	-398(ra) # eb4 <printint>
-    104a:	8b4a                	mv	s6,s2
+    100c:	008b0913          	addi	s2,s6,8
+    1010:	4681                	li	a3,0
+    1012:	4629                	li	a2,10
+    1014:	000b2583          	lw	a1,0(s6)
+    1018:	8556                	mv	a0,s5
+    101a:	00000097          	auipc	ra,0x0
+    101e:	e72080e7          	jalr	-398(ra) # e8c <printint>
+    1022:	8b4a                	mv	s6,s2
       state = 0;
-    104c:	4981                	li	s3,0
-    104e:	bf85                	j	fbe <vprintf+0x60>
+    1024:	4981                	li	s3,0
+    1026:	bf85                	j	f96 <vprintf+0x60>
         printint(fd, va_arg(ap, int), 16, 0);
-    1050:	008b0913          	addi	s2,s6,8
-    1054:	4681                	li	a3,0
-    1056:	4641                	li	a2,16
-    1058:	000b2583          	lw	a1,0(s6)
-    105c:	8556                	mv	a0,s5
-    105e:	00000097          	auipc	ra,0x0
-    1062:	e56080e7          	jalr	-426(ra) # eb4 <printint>
-    1066:	8b4a                	mv	s6,s2
+    1028:	008b0913          	addi	s2,s6,8
+    102c:	4681                	li	a3,0
+    102e:	4641                	li	a2,16
+    1030:	000b2583          	lw	a1,0(s6)
+    1034:	8556                	mv	a0,s5
+    1036:	00000097          	auipc	ra,0x0
+    103a:	e56080e7          	jalr	-426(ra) # e8c <printint>
+    103e:	8b4a                	mv	s6,s2
       state = 0;
-    1068:	4981                	li	s3,0
-    106a:	bf91                	j	fbe <vprintf+0x60>
+    1040:	4981                	li	s3,0
+    1042:	bf91                	j	f96 <vprintf+0x60>
         printptr(fd, va_arg(ap, uint64));
-    106c:	008b0793          	addi	a5,s6,8
-    1070:	f8f43423          	sd	a5,-120(s0)
-    1074:	000b3983          	ld	s3,0(s6)
+    1044:	008b0793          	addi	a5,s6,8
+    1048:	f8f43423          	sd	a5,-120(s0)
+    104c:	000b3983          	ld	s3,0(s6)
   putc(fd, '0');
-    1078:	03000593          	li	a1,48
-    107c:	8556                	mv	a0,s5
-    107e:	00000097          	auipc	ra,0x0
-    1082:	e14080e7          	jalr	-492(ra) # e92 <putc>
+    1050:	03000593          	li	a1,48
+    1054:	8556                	mv	a0,s5
+    1056:	00000097          	auipc	ra,0x0
+    105a:	e14080e7          	jalr	-492(ra) # e6a <putc>
   putc(fd, 'x');
-    1086:	85ea                	mv	a1,s10
-    1088:	8556                	mv	a0,s5
-    108a:	00000097          	auipc	ra,0x0
-    108e:	e08080e7          	jalr	-504(ra) # e92 <putc>
-    1092:	4941                	li	s2,16
+    105e:	85ea                	mv	a1,s10
+    1060:	8556                	mv	a0,s5
+    1062:	00000097          	auipc	ra,0x0
+    1066:	e08080e7          	jalr	-504(ra) # e6a <putc>
+    106a:	4941                	li	s2,16
     putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
-    1094:	03c9d793          	srli	a5,s3,0x3c
-    1098:	97de                	add	a5,a5,s7
-    109a:	0007c583          	lbu	a1,0(a5)
-    109e:	8556                	mv	a0,s5
-    10a0:	00000097          	auipc	ra,0x0
-    10a4:	df2080e7          	jalr	-526(ra) # e92 <putc>
+    106c:	03c9d793          	srli	a5,s3,0x3c
+    1070:	97de                	add	a5,a5,s7
+    1072:	0007c583          	lbu	a1,0(a5)
+    1076:	8556                	mv	a0,s5
+    1078:	00000097          	auipc	ra,0x0
+    107c:	df2080e7          	jalr	-526(ra) # e6a <putc>
   for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
-    10a8:	0992                	slli	s3,s3,0x4
-    10aa:	397d                	addiw	s2,s2,-1
-    10ac:	fe0914e3          	bnez	s2,1094 <vprintf+0x136>
+    1080:	0992                	slli	s3,s3,0x4
+    1082:	397d                	addiw	s2,s2,-1
+    1084:	fe0914e3          	bnez	s2,106c <vprintf+0x136>
         printptr(fd, va_arg(ap, uint64));
-    10b0:	f8843b03          	ld	s6,-120(s0)
+    1088:	f8843b03          	ld	s6,-120(s0)
       state = 0;
-    10b4:	4981                	li	s3,0
-    10b6:	b721                	j	fbe <vprintf+0x60>
+    108c:	4981                	li	s3,0
+    108e:	b721                	j	f96 <vprintf+0x60>
         s = va_arg(ap, char*);
-    10b8:	008b0993          	addi	s3,s6,8
-    10bc:	000b3903          	ld	s2,0(s6)
+    1090:	008b0993          	addi	s3,s6,8
+    1094:	000b3903          	ld	s2,0(s6)
         if(s == 0)
-    10c0:	02090163          	beqz	s2,10e2 <vprintf+0x184>
+    1098:	02090163          	beqz	s2,10ba <vprintf+0x184>
         while(*s != 0){
-    10c4:	00094583          	lbu	a1,0(s2)
-    10c8:	c9a1                	beqz	a1,1118 <vprintf+0x1ba>
+    109c:	00094583          	lbu	a1,0(s2)
+    10a0:	c9a1                	beqz	a1,10f0 <vprintf+0x1ba>
           putc(fd, *s);
-    10ca:	8556                	mv	a0,s5
-    10cc:	00000097          	auipc	ra,0x0
-    10d0:	dc6080e7          	jalr	-570(ra) # e92 <putc>
+    10a2:	8556                	mv	a0,s5
+    10a4:	00000097          	auipc	ra,0x0
+    10a8:	dc6080e7          	jalr	-570(ra) # e6a <putc>
           s++;
-    10d4:	0905                	addi	s2,s2,1
+    10ac:	0905                	addi	s2,s2,1
         while(*s != 0){
-    10d6:	00094583          	lbu	a1,0(s2)
-    10da:	f9e5                	bnez	a1,10ca <vprintf+0x16c>
+    10ae:	00094583          	lbu	a1,0(s2)
+    10b2:	f9e5                	bnez	a1,10a2 <vprintf+0x16c>
         s = va_arg(ap, char*);
-    10dc:	8b4e                	mv	s6,s3
+    10b4:	8b4e                	mv	s6,s3
       state = 0;
-    10de:	4981                	li	s3,0
-    10e0:	bdf9                	j	fbe <vprintf+0x60>
+    10b6:	4981                	li	s3,0
+    10b8:	bdf9                	j	f96 <vprintf+0x60>
           s = "(null)";
-    10e2:	00000917          	auipc	s2,0x0
-    10e6:	36e90913          	addi	s2,s2,878 # 1450 <malloc+0x228>
+    10ba:	00000917          	auipc	s2,0x0
+    10be:	36e90913          	addi	s2,s2,878 # 1428 <malloc+0x228>
         while(*s != 0){
-    10ea:	02800593          	li	a1,40
-    10ee:	bff1                	j	10ca <vprintf+0x16c>
+    10c2:	02800593          	li	a1,40
+    10c6:	bff1                	j	10a2 <vprintf+0x16c>
         putc(fd, va_arg(ap, uint));
-    10f0:	008b0913          	addi	s2,s6,8
-    10f4:	000b4583          	lbu	a1,0(s6)
-    10f8:	8556                	mv	a0,s5
-    10fa:	00000097          	auipc	ra,0x0
-    10fe:	d98080e7          	jalr	-616(ra) # e92 <putc>
-    1102:	8b4a                	mv	s6,s2
+    10c8:	008b0913          	addi	s2,s6,8
+    10cc:	000b4583          	lbu	a1,0(s6)
+    10d0:	8556                	mv	a0,s5
+    10d2:	00000097          	auipc	ra,0x0
+    10d6:	d98080e7          	jalr	-616(ra) # e6a <putc>
+    10da:	8b4a                	mv	s6,s2
       state = 0;
-    1104:	4981                	li	s3,0
-    1106:	bd65                	j	fbe <vprintf+0x60>
+    10dc:	4981                	li	s3,0
+    10de:	bd65                	j	f96 <vprintf+0x60>
         putc(fd, c);
-    1108:	85d2                	mv	a1,s4
-    110a:	8556                	mv	a0,s5
-    110c:	00000097          	auipc	ra,0x0
-    1110:	d86080e7          	jalr	-634(ra) # e92 <putc>
+    10e0:	85d2                	mv	a1,s4
+    10e2:	8556                	mv	a0,s5
+    10e4:	00000097          	auipc	ra,0x0
+    10e8:	d86080e7          	jalr	-634(ra) # e6a <putc>
       state = 0;
-    1114:	4981                	li	s3,0
-    1116:	b565                	j	fbe <vprintf+0x60>
+    10ec:	4981                	li	s3,0
+    10ee:	b565                	j	f96 <vprintf+0x60>
         s = va_arg(ap, char*);
-    1118:	8b4e                	mv	s6,s3
+    10f0:	8b4e                	mv	s6,s3
       state = 0;
-    111a:	4981                	li	s3,0
-    111c:	b54d                	j	fbe <vprintf+0x60>
+    10f2:	4981                	li	s3,0
+    10f4:	b54d                	j	f96 <vprintf+0x60>
     }
   }
 }
-    111e:	70e6                	ld	ra,120(sp)
-    1120:	7446                	ld	s0,112(sp)
-    1122:	74a6                	ld	s1,104(sp)
-    1124:	7906                	ld	s2,96(sp)
-    1126:	69e6                	ld	s3,88(sp)
-    1128:	6a46                	ld	s4,80(sp)
-    112a:	6aa6                	ld	s5,72(sp)
-    112c:	6b06                	ld	s6,64(sp)
-    112e:	7be2                	ld	s7,56(sp)
-    1130:	7c42                	ld	s8,48(sp)
-    1132:	7ca2                	ld	s9,40(sp)
-    1134:	7d02                	ld	s10,32(sp)
-    1136:	6de2                	ld	s11,24(sp)
-    1138:	6109                	addi	sp,sp,128
-    113a:	8082                	ret
-
-000000000000113c <fprintf>:
+    10f6:	70e6                	ld	ra,120(sp)
+    10f8:	7446                	ld	s0,112(sp)
+    10fa:	74a6                	ld	s1,104(sp)
+    10fc:	7906                	ld	s2,96(sp)
+    10fe:	69e6                	ld	s3,88(sp)
+    1100:	6a46                	ld	s4,80(sp)
+    1102:	6aa6                	ld	s5,72(sp)
+    1104:	6b06                	ld	s6,64(sp)
+    1106:	7be2                	ld	s7,56(sp)
+    1108:	7c42                	ld	s8,48(sp)
+    110a:	7ca2                	ld	s9,40(sp)
+    110c:	7d02                	ld	s10,32(sp)
+    110e:	6de2                	ld	s11,24(sp)
+    1110:	6109                	addi	sp,sp,128
+    1112:	8082                	ret
+
+0000000000001114 <fprintf>:
 
 void
 fprintf(int fd, const char *fmt, ...)
 {
-    113c:	715d                	addi	sp,sp,-80
-    113e:	ec06                	sd	ra,24(sp)
-    1140:	e822                	sd	s0,16(sp)
-    1142:	1000                	addi	s0,sp,32
-    1144:	e010                	sd	a2,0(s0)
-    1146:	e414                	sd	a3,8(s0)
-    1148:	e818                	sd	a4,16(s0)
-    114a:	ec1c                	sd	a5,24(s0)
-    114c:	03043023          	sd	a6,32(s0)
-    1150:	03143423          	sd	a7,40(s0)
+    1114:	715d                	addi	sp,sp,-80
+    1116:	ec06                	sd	ra,24(sp)
+    1118:	e822                	sd	s0,16(sp)
+    111a:	1000                	addi	s0,sp,32
+    111c:	e010                	sd	a2,0(s0)
+    111e:	e414                	sd	a3,8(s0)
+    1120:	e818                	sd	a4,16(s0)
+    1122:	ec1c                	sd	a5,24(s0)
+    1124:	03043023          	sd	a6,32(s0)
+    1128:	03143423          	sd	a7,40(s0)
   va_list ap;
 
   va_start(ap, fmt);
-    1154:	fe843423          	sd	s0,-24(s0)
+    112c:	fe843423          	sd	s0,-24(s0)
   vprintf(fd, fmt, ap);
-    1158:	8622                	mv	a2,s0
-    115a:	00000097          	auipc	ra,0x0
-    115e:	e04080e7          	jalr	-508(ra) # f5e <vprintf>
+    1130:	8622                	mv	a2,s0
+    1132:	00000097          	auipc	ra,0x0
+    1136:	e04080e7          	jalr	-508(ra) # f36 <vprintf>
 }
-    1162:	60e2                	ld	ra,24(sp)
-    1164:	6442                	ld	s0,16(sp)
-    1166:	6161                	addi	sp,sp,80
-    1168:	8082                	ret
+    113a:	60e2                	ld	ra,24(sp)
+    113c:	6442                	ld	s0,16(sp)
+    113e:	6161                	addi	sp,sp,80
+    1140:	8082                	ret
 
-000000000000116a <printf>:
+0000000000001142 <printf>:
 
 void
 printf(const char *fmt, ...)
 {
-    116a:	711d                	addi	sp,sp,-96
-    116c:	ec06                	sd	ra,24(sp)
-    116e:	e822                	sd	s0,16(sp)
-    1170:	1000                	addi	s0,sp,32
-    1172:	e40c                	sd	a1,8(s0)
-    1174:	e810                	sd	a2,16(s0)
-    1176:	ec14                	sd	a3,24(s0)
-    1178:	f018                	sd	a4,32(s0)
-    117a:	f41c                	sd	a5,40(s0)
-    117c:	03043823          	sd	a6,48(s0)
-    1180:	03143c23          	sd	a7,56(s0)
+    1142:	711d                	addi	sp,sp,-96
+    1144:	ec06                	sd	ra,24(sp)
+    1146:	e822                	sd	s0,16(sp)
+    1148:	1000                	addi	s0,sp,32
+    114a:	e40c                	sd	a1,8(s0)
+    114c:	e810                	sd	a2,16(s0)
+    114e:	ec14                	sd	a3,24(s0)
+    1150:	f018                	sd	a4,32(s0)
+    1152:	f41c                	sd	a5,40(s0)
+    1154:	03043823          	sd	a6,48(s0)
+    1158:	03143c23          	sd	a7,56(s0)
   va_list ap;
 
   va_start(ap, fmt);
-    1184:	00840613          	addi	a2,s0,8
-    1188:	fec43423          	sd	a2,-24(s0)
+    115c:	00840613          	addi	a2,s0,8
+    1160:	fec43423          	sd	a2,-24(s0)
   vprintf(1, fmt, ap);
-    118c:	85aa                	mv	a1,a0
-    118e:	4505                	li	a0,1
-    1190:	00000097          	auipc	ra,0x0
-    1194:	dce080e7          	jalr	-562(ra) # f5e <vprintf>
+    1164:	85aa                	mv	a1,a0
+    1166:	4505                	li	a0,1
+    1168:	00000097          	auipc	ra,0x0
+    116c:	dce080e7          	jalr	-562(ra) # f36 <vprintf>
 }
-    1198:	60e2                	ld	ra,24(sp)
-    119a:	6442                	ld	s0,16(sp)
-    119c:	6125                	addi	sp,sp,96
-    119e:	8082                	ret
+    1170:	60e2                	ld	ra,24(sp)
+    1172:	6442                	ld	s0,16(sp)
+    1174:	6125                	addi	sp,sp,96
+    1176:	8082                	ret
 
-00000000000011a0 <free>:
+0000000000001178 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
-    11a0:	1141                	addi	sp,sp,-16
-    11a2:	e422                	sd	s0,8(sp)
-    11a4:	0800                	addi	s0,sp,16
+    1178:	1141                	addi	sp,sp,-16
+    117a:	e422                	sd	s0,8(sp)
+    117c:	0800                	addi	s0,sp,16
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
-    11a6:	ff050693          	addi	a3,a0,-16
+    117e:	ff050693          	addi	a3,a0,-16
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    11aa:	00000797          	auipc	a5,0x0
-    11ae:	2d67b783          	ld	a5,726(a5) # 1480 <freep>
-    11b2:	a805                	j	11e2 <free+0x42>
+    1182:	00000797          	auipc	a5,0x0
+    1186:	2d67b783          	ld	a5,726(a5) # 1458 <freep>
+    118a:	a805                	j	11ba <free+0x42>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
       break;
   if(bp + bp->s.size == p->s.ptr){
     bp->s.size += p->s.ptr->s.size;
-    11b4:	4618                	lw	a4,8(a2)
-    11b6:	9db9                	addw	a1,a1,a4
-    11b8:	feb52c23          	sw	a1,-8(a0)
+    118c:	4618                	lw	a4,8(a2)
+    118e:	9db9                	addw	a1,a1,a4
+    1190:	feb52c23          	sw	a1,-8(a0)
     bp->s.ptr = p->s.ptr->s.ptr;
-    11bc:	6398                	ld	a4,0(a5)
-    11be:	6318                	ld	a4,0(a4)
-    11c0:	fee53823          	sd	a4,-16(a0)
-    11c4:	a091                	j	1208 <free+0x68>
+    1194:	6398                	ld	a4,0(a5)
+    1196:	6318                	ld	a4,0(a4)
+    1198:	fee53823          	sd	a4,-16(a0)
+    119c:	a091                	j	11e0 <free+0x68>
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
     p->s.size += bp->s.size;
-    11c6:	ff852703          	lw	a4,-8(a0)
-    11ca:	9e39                	addw	a2,a2,a4
-    11cc:	c790                	sw	a2,8(a5)
+    119e:	ff852703          	lw	a4,-8(a0)
+    11a2:	9e39                	addw	a2,a2,a4
+    11a4:	c790                	sw	a2,8(a5)
     p->s.ptr = bp->s.ptr;
-    11ce:	ff053703          	ld	a4,-16(a0)
-    11d2:	e398                	sd	a4,0(a5)
-    11d4:	a099                	j	121a <free+0x7a>
+    11a6:	ff053703          	ld	a4,-16(a0)
+    11aa:	e398                	sd	a4,0(a5)
+    11ac:	a099                	j	11f2 <free+0x7a>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    11d6:	6398                	ld	a4,0(a5)
-    11d8:	00e7e463          	bltu	a5,a4,11e0 <free+0x40>
-    11dc:	00e6ea63          	bltu	a3,a4,11f0 <free+0x50>
+    11ae:	6398                	ld	a4,0(a5)
+    11b0:	00e7e463          	bltu	a5,a4,11b8 <free+0x40>
+    11b4:	00e6ea63          	bltu	a3,a4,11c8 <free+0x50>
 {
-    11e0:	87ba                	mv	a5,a4
+    11b8:	87ba                	mv	a5,a4
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    11e2:	fed7fae3          	bgeu	a5,a3,11d6 <free+0x36>
-    11e6:	6398                	ld	a4,0(a5)
-    11e8:	00e6e463          	bltu	a3,a4,11f0 <free+0x50>
+    11ba:	fed7fae3          	bgeu	a5,a3,11ae <free+0x36>
+    11be:	6398                	ld	a4,0(a5)
+    11c0:	00e6e463          	bltu	a3,a4,11c8 <free+0x50>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    11ec:	fee7eae3          	bltu	a5,a4,11e0 <free+0x40>
+    11c4:	fee7eae3          	bltu	a5,a4,11b8 <free+0x40>
   if(bp + bp->s.size == p->s.ptr){
-    11f0:	ff852583          	lw	a1,-8(a0)
-    11f4:	6390                	ld	a2,0(a5)
-    11f6:	02059713          	slli	a4,a1,0x20
-    11fa:	9301                	srli	a4,a4,0x20
-    11fc:	0712                	slli	a4,a4,0x4
-    11fe:	9736                	add	a4,a4,a3
-    1200:	fae60ae3          	beq	a2,a4,11b4 <free+0x14>
+    11c8:	ff852583          	lw	a1,-8(a0)
+    11cc:	6390                	ld	a2,0(a5)
+    11ce:	02059713          	slli	a4,a1,0x20
+    11d2:	9301                	srli	a4,a4,0x20
+    11d4:	0712                	slli	a4,a4,0x4
+    11d6:	9736                	add	a4,a4,a3
+    11d8:	fae60ae3          	beq	a2,a4,118c <free+0x14>
     bp->s.ptr = p->s.ptr;
-    1204:	fec53823          	sd	a2,-16(a0)
+    11dc:	fec53823          	sd	a2,-16(a0)
   if(p + p->s.size == bp){
-    1208:	4790                	lw	a2,8(a5)
-    120a:	02061713          	slli	a4,a2,0x20
-    120e:	9301                	srli	a4,a4,0x20
-    1210:	0712                	slli	a4,a4,0x4
-    1212:	973e                	add	a4,a4,a5
-    1214:	fae689e3          	beq	a3,a4,11c6 <free+0x26>
+    11e0:	4790                	lw	a2,8(a5)
+    11e2:	02061713          	slli	a4,a2,0x20
+    11e6:	9301                	srli	a4,a4,0x20
+    11e8:	0712                	slli	a4,a4,0x4
+    11ea:	973e                	add	a4,a4,a5
+    11ec:	fae689e3          	beq	a3,a4,119e <free+0x26>
   } else
     p->s.ptr = bp;
-    1218:	e394                	sd	a3,0(a5)
+    11f0:	e394                	sd	a3,0(a5)
   freep = p;
-    121a:	00000717          	auipc	a4,0x0
-    121e:	26f73323          	sd	a5,614(a4) # 1480 <freep>
+    11f2:	00000717          	auipc	a4,0x0
+    11f6:	26f73323          	sd	a5,614(a4) # 1458 <freep>
 }
-    1222:	6422                	ld	s0,8(sp)
-    1224:	0141                	addi	sp,sp,16
-    1226:	8082                	ret
+    11fa:	6422                	ld	s0,8(sp)
+    11fc:	0141                	addi	sp,sp,16
+    11fe:	8082                	ret
 
-0000000000001228 <malloc>:
+0000000000001200 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
-    1228:	7139                	addi	sp,sp,-64
-    122a:	fc06                	sd	ra,56(sp)
-    122c:	f822                	sd	s0,48(sp)
-    122e:	f426                	sd	s1,40(sp)
-    1230:	f04a                	sd	s2,32(sp)
-    1232:	ec4e                	sd	s3,24(sp)
-    1234:	e852                	sd	s4,16(sp)
-    1236:	e456                	sd	s5,8(sp)
-    1238:	e05a                	sd	s6,0(sp)
-    123a:	0080                	addi	s0,sp,64
+    1200:	7139                	addi	sp,sp,-64
+    1202:	fc06                	sd	ra,56(sp)
+    1204:	f822                	sd	s0,48(sp)
+    1206:	f426                	sd	s1,40(sp)
+    1208:	f04a                	sd	s2,32(sp)
+    120a:	ec4e                	sd	s3,24(sp)
+    120c:	e852                	sd	s4,16(sp)
+    120e:	e456                	sd	s5,8(sp)
+    1210:	e05a                	sd	s6,0(sp)
+    1212:	0080                	addi	s0,sp,64
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    123c:	02051493          	slli	s1,a0,0x20
-    1240:	9081                	srli	s1,s1,0x20
-    1242:	04bd                	addi	s1,s1,15
-    1244:	8091                	srli	s1,s1,0x4
-    1246:	0014899b          	addiw	s3,s1,1
-    124a:	0485                	addi	s1,s1,1
+    1214:	02051493          	slli	s1,a0,0x20
+    1218:	9081                	srli	s1,s1,0x20
+    121a:	04bd                	addi	s1,s1,15
+    121c:	8091                	srli	s1,s1,0x4
+    121e:	0014899b          	addiw	s3,s1,1
+    1222:	0485                	addi	s1,s1,1
   if((prevp = freep) == 0){
-    124c:	00000517          	auipc	a0,0x0
-    1250:	23453503          	ld	a0,564(a0) # 1480 <freep>
-    1254:	c515                	beqz	a0,1280 <malloc+0x58>
+    1224:	00000517          	auipc	a0,0x0
+    1228:	23453503          	ld	a0,564(a0) # 1458 <freep>
+    122c:	c515                	beqz	a0,1258 <malloc+0x58>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    1256:	611c                	ld	a5,0(a0)
+    122e:	611c                	ld	a5,0(a0)
     if(p->s.size >= nunits){
-    1258:	4798                	lw	a4,8(a5)
-    125a:	02977f63          	bgeu	a4,s1,1298 <malloc+0x70>
-    125e:	8a4e                	mv	s4,s3
-    1260:	0009871b          	sext.w	a4,s3
-    1264:	6685                	lui	a3,0x1
-    1266:	00d77363          	bgeu	a4,a3,126c <malloc+0x44>
-    126a:	6a05                	lui	s4,0x1
-    126c:	000a0b1b          	sext.w	s6,s4
+    1230:	4798                	lw	a4,8(a5)
+    1232:	02977f63          	bgeu	a4,s1,1270 <malloc+0x70>
+    1236:	8a4e                	mv	s4,s3
+    1238:	0009871b          	sext.w	a4,s3
+    123c:	6685                	lui	a3,0x1
+    123e:	00d77363          	bgeu	a4,a3,1244 <malloc+0x44>
+    1242:	6a05                	lui	s4,0x1
+    1244:	000a0b1b          	sext.w	s6,s4
   p = sbrk(nu * sizeof(Header));
-    1270:	004a1a1b          	slliw	s4,s4,0x4
+    1248:	004a1a1b          	slliw	s4,s4,0x4
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
-    1274:	00000917          	auipc	s2,0x0
-    1278:	20c90913          	addi	s2,s2,524 # 1480 <freep>
+    124c:	00000917          	auipc	s2,0x0
+    1250:	20c90913          	addi	s2,s2,524 # 1458 <freep>
   if(p == (char*)-1)
-    127c:	5afd                	li	s5,-1
-    127e:	a88d                	j	12f0 <malloc+0xc8>
+    1254:	5afd                	li	s5,-1
+    1256:	a88d                	j	12c8 <malloc+0xc8>
     base.s.ptr = freep = prevp = &base;
-    1280:	00000797          	auipc	a5,0x0
-    1284:	27078793          	addi	a5,a5,624 # 14f0 <base>
-    1288:	00000717          	auipc	a4,0x0
-    128c:	1ef73c23          	sd	a5,504(a4) # 1480 <freep>
-    1290:	e39c                	sd	a5,0(a5)
+    1258:	00000797          	auipc	a5,0x0
+    125c:	27078793          	addi	a5,a5,624 # 14c8 <base>
+    1260:	00000717          	auipc	a4,0x0
+    1264:	1ef73c23          	sd	a5,504(a4) # 1458 <freep>
+    1268:	e39c                	sd	a5,0(a5)
     base.s.size = 0;
-    1292:	0007a423          	sw	zero,8(a5)
+    126a:	0007a423          	sw	zero,8(a5)
     if(p->s.size >= nunits){
-    1296:	b7e1                	j	125e <malloc+0x36>
+    126e:	b7e1                	j	1236 <malloc+0x36>
       if(p->s.size == nunits)
-    1298:	02e48b63          	beq	s1,a4,12ce <malloc+0xa6>
+    1270:	02e48b63          	beq	s1,a4,12a6 <malloc+0xa6>
         p->s.size -= nunits;
-    129c:	4137073b          	subw	a4,a4,s3
-    12a0:	c798                	sw	a4,8(a5)
+    1274:	4137073b          	subw	a4,a4,s3
+    1278:	c798                	sw	a4,8(a5)
         p += p->s.size;
-    12a2:	1702                	slli	a4,a4,0x20
-    12a4:	9301                	srli	a4,a4,0x20
-    12a6:	0712                	slli	a4,a4,0x4
-    12a8:	97ba                	add	a5,a5,a4
+    127a:	1702                	slli	a4,a4,0x20
+    127c:	9301                	srli	a4,a4,0x20
+    127e:	0712                	slli	a4,a4,0x4
+    1280:	97ba                	add	a5,a5,a4
         p->s.size = nunits;
-    12aa:	0137a423          	sw	s3,8(a5)
+    1282:	0137a423          	sw	s3,8(a5)
       freep = prevp;
-    12ae:	00000717          	auipc	a4,0x0
-    12b2:	1ca73923          	sd	a0,466(a4) # 1480 <freep>
+    1286:	00000717          	auipc	a4,0x0
+    128a:	1ca73923          	sd	a0,466(a4) # 1458 <freep>
       return (void*)(p + 1);
-    12b6:	01078513          	addi	a0,a5,16
+    128e:	01078513          	addi	a0,a5,16
       if((p = morecore(nunits)) == 0)
         return 0;
   }
 }
-    12ba:	70e2                	ld	ra,56(sp)
-    12bc:	7442                	ld	s0,48(sp)
-    12be:	74a2                	ld	s1,40(sp)
-    12c0:	7902                	ld	s2,32(sp)
-    12c2:	69e2                	ld	s3,24(sp)
-    12c4:	6a42                	ld	s4,16(sp)
-    12c6:	6aa2                	ld	s5,8(sp)
-    12c8:	6b02                	ld	s6,0(sp)
-    12ca:	6121                	addi	sp,sp,64
-    12cc:	8082                	ret
+    1292:	70e2                	ld	ra,56(sp)
+    1294:	7442                	ld	s0,48(sp)
+    1296:	74a2                	ld	s1,40(sp)
+    1298:	7902                	ld	s2,32(sp)
+    129a:	69e2                	ld	s3,24(sp)
+    129c:	6a42                	ld	s4,16(sp)
+    129e:	6aa2                	ld	s5,8(sp)
+    12a0:	6b02                	ld	s6,0(sp)
+    12a2:	6121                	addi	sp,sp,64
+    12a4:	8082                	ret
         prevp->s.ptr = p->s.ptr;
-    12ce:	6398                	ld	a4,0(a5)
-    12d0:	e118                	sd	a4,0(a0)
-    12d2:	bff1                	j	12ae <malloc+0x86>
+    12a6:	6398                	ld	a4,0(a5)
+    12a8:	e118                	sd	a4,0(a0)
+    12aa:	bff1                	j	1286 <malloc+0x86>
   hp->s.size = nu;
-    12d4:	01652423          	sw	s6,8(a0)
+    12ac:	01652423          	sw	s6,8(a0)
   free((void*)(hp + 1));
-    12d8:	0541                	addi	a0,a0,16
-    12da:	00000097          	auipc	ra,0x0
-    12de:	ec6080e7          	jalr	-314(ra) # 11a0 <free>
+    12b0:	0541                	addi	a0,a0,16
+    12b2:	00000097          	auipc	ra,0x0
+    12b6:	ec6080e7          	jalr	-314(ra) # 1178 <free>
   return freep;
-    12e2:	00093503          	ld	a0,0(s2)
+    12ba:	00093503          	ld	a0,0(s2)
       if((p = morecore(nunits)) == 0)
-    12e6:	d971                	beqz	a0,12ba <malloc+0x92>
+    12be:	d971                	beqz	a0,1292 <malloc+0x92>
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    12e8:	611c                	ld	a5,0(a0)
+    12c0:	611c                	ld	a5,0(a0)
     if(p->s.size >= nunits){
-    12ea:	4798                	lw	a4,8(a5)
-    12ec:	fa9776e3          	bgeu	a4,s1,1298 <malloc+0x70>
+    12c2:	4798                	lw	a4,8(a5)
+    12c4:	fa9776e3          	bgeu	a4,s1,1270 <malloc+0x70>
     if(p == freep)
-    12f0:	00093703          	ld	a4,0(s2)
-    12f4:	853e                	mv	a0,a5
-    12f6:	fef719e3          	bne	a4,a5,12e8 <malloc+0xc0>
+    12c8:	00093703          	ld	a4,0(s2)
+    12cc:	853e                	mv	a0,a5
+    12ce:	fef719e3          	bne	a4,a5,12c0 <malloc+0xc0>
   p = sbrk(nu * sizeof(Header));
-    12fa:	8552                	mv	a0,s4
-    12fc:	00000097          	auipc	ra,0x0
-    1300:	b56080e7          	jalr	-1194(ra) # e52 <sbrk>
+    12d2:	8552                	mv	a0,s4
+    12d4:	00000097          	auipc	ra,0x0
+    12d8:	b7e080e7          	jalr	-1154(ra) # e52 <sbrk>
   if(p == (char*)-1)
-    1304:	fd5518e3          	bne	a0,s5,12d4 <malloc+0xac>
+    12dc:	fd5518e3          	bne	a0,s5,12ac <malloc+0xac>
         return 0;
-    1308:	4501                	li	a0,0
-    130a:	bf45                	j	12ba <malloc+0x92>
+    12e0:	4501                	li	a0,0
+    12e2:	bf45                	j	1292 <malloc+0x92>
diff --git a/user/sh.o b/user/sh.o
index 8643794..1991348 100644
Binary files a/user/sh.o and b/user/sh.o differ
diff --git a/user/sh.sym b/user/sh.sym
index 8a0835c..590437a 100644
--- a/user/sh.sym
+++ b/user/sh.sym
@@ -1,8 +1,8 @@
 0000000000000000 .text
-0000000000001310 .rodata
-0000000000001470 .sdata
-0000000000001480 .sbss
-0000000000001488 .bss
+00000000000012e8 .rodata
+0000000000001448 .sdata
+0000000000001458 .sbss
+0000000000001460 .bss
 0000000000000000 .comment
 0000000000000000 .debug_aranges
 0000000000000000 .debug_info
@@ -13,75 +13,70 @@
 0000000000000000 .debug_loc
 0000000000000000 .debug_ranges
 0000000000000000 sh.c
-0000000000001488 buf.1143
+0000000000001460 buf.1133
 0000000000000000 ulib.c
 0000000000000000 printf.c
-0000000000000e92 putc
-0000000000000eb4 printint
-0000000000001458 digits
+0000000000000e6a putc
+0000000000000e8c printint
+0000000000001430 digits
 0000000000000000 umalloc.c
-0000000000001480 freep
-00000000000014f0 base
+0000000000001458 freep
+00000000000014c8 base
 0000000000000b54 strcpy
-000000000000116a printf
-0000000000001c69 __global_pointer$
+0000000000001142 printf
+0000000000001c41 __global_pointer$
 0000000000000d14 memmove
 0000000000000e12 mknod
 0000000000000276 execcmd
 0000000000000c10 gets
-0000000000001470 __SDATA_BEGIN__
+0000000000001448 __SDATA_BEGIN__
 0000000000000e4a getpid
 0000000000000786 parsepipe
 00000000000009d8 parsecmd
 0000000000000daa memcpy
 00000000000003a0 backcmd
-0000000000000e7a print_stats
 0000000000000518 peek
 0000000000000582 parseredirs
 00000000000003dc gettoken
-0000000000001228 malloc
+0000000000001200 malloc
 0000000000000e5a sleep
-0000000000001478 whitespace
+0000000000001450 whitespace
 000000000000007a fork1
 0000000000000940 nulterminate
 0000000000000dda pipe
 0000000000000000 getcmd
 0000000000000dea write
 0000000000000e22 fstat
-000000000000113c fprintf
+0000000000001114 fprintf
 0000000000000dfa kill
-0000000000000f5e vprintf
+0000000000000f36 vprintf
 0000000000000e3a chdir
 00000000000007f4 parseline
 00000000000000a8 runcmd
-0000000000000e6a pause_system
 000000000000089c parseblock
 0000000000000e02 exec
 0000000000000dd2 wait
-0000000000001470 symbols
+0000000000001448 symbols
 0000000000000de2 read
 000000000000067e parseexec
 0000000000000e1a unlink
-0000000000000e8a set_cpu
 0000000000000054 panic
-0000000000000e82 get_cpu
 0000000000000d70 memcmp
 0000000000000dc2 fork
-0000000000000e72 kill_system
-0000000000001500 __BSS_END__
+00000000000014d8 __BSS_END__
 0000000000000e52 sbrk
 0000000000000e62 uptime
-000000000000147e __bss_start
+0000000000001456 __bss_start
 0000000000000bc6 memset
 0000000000000a60 main
 0000000000000b70 strcmp
 0000000000000e42 dup
 0000000000000314 pipecmd
 00000000000002ac redircmd
-0000000000001469 __DATA_BEGIN__
+0000000000001441 __DATA_BEGIN__
 0000000000000c84 stat
-000000000000147e _edata
-0000000000001500 _end
+0000000000001456 _edata
+00000000000014d8 _end
 0000000000000e2a link
 0000000000000dca exit
 0000000000000cca atoi
@@ -91,4 +86,4 @@
 0000000000000e32 mkdir
 0000000000000df2 close
 000000000000035a listcmd
-00000000000011a0 free
+0000000000001178 free
diff --git a/user/stressfs.asm b/user/stressfs.asm
index 1839132..39dbd95 100644
--- a/user/stressfs.asm
+++ b/user/stressfs.asm
@@ -20,7 +20,7 @@ main(int argc, char *argv[])
   int fd, i;
   char path[] = "stressfs0";
   16:	00001797          	auipc	a5,0x1
-  1a:	8e278793          	addi	a5,a5,-1822 # 8f8 <malloc+0x118>
+  1a:	8ba78793          	addi	a5,a5,-1862 # 8d0 <malloc+0x118>
   1e:	6398                	ld	a4,0(a5)
   20:	fce43823          	sd	a4,-48(s0)
   24:	0087d783          	lhu	a5,8(a5)
@@ -29,9 +29,9 @@ main(int argc, char *argv[])
 
   printf("stressfs starting\n");
   2c:	00001517          	auipc	a0,0x1
-  30:	89c50513          	addi	a0,a0,-1892 # 8c8 <malloc+0xe8>
+  30:	87450513          	addi	a0,a0,-1932 # 8a0 <malloc+0xe8>
   34:	00000097          	auipc	ra,0x0
-  38:	6ee080e7          	jalr	1774(ra) # 722 <printf>
+  38:	6c6080e7          	jalr	1734(ra) # 6fa <printf>
   memset(data, 'a', sizeof(data));
   3c:	20000613          	li	a2,512
   40:	06100593          	li	a1,97
@@ -54,9 +54,9 @@ main(int argc, char *argv[])
   printf("write %d\n", i);
   66:	85a6                	mv	a1,s1
   68:	00001517          	auipc	a0,0x1
-  6c:	87850513          	addi	a0,a0,-1928 # 8e0 <malloc+0x100>
+  6c:	85050513          	addi	a0,a0,-1968 # 8b8 <malloc+0x100>
   70:	00000097          	auipc	ra,0x0
-  74:	6b2080e7          	jalr	1714(ra) # 722 <printf>
+  74:	68a080e7          	jalr	1674(ra) # 6fa <printf>
 
   path[8] += i;
   78:	fd844783          	lbu	a5,-40(s0)
@@ -87,9 +87,9 @@ main(int argc, char *argv[])
 
   printf("read\n");
   b6:	00001517          	auipc	a0,0x1
-  ba:	83a50513          	addi	a0,a0,-1990 # 8f0 <malloc+0x110>
+  ba:	81250513          	addi	a0,a0,-2030 # 8c8 <malloc+0x110>
   be:	00000097          	auipc	ra,0x0
-  c2:	664080e7          	jalr	1636(ra) # 722 <printf>
+  c2:	63c080e7          	jalr	1596(ra) # 6fa <printf>
 
   fd = open(path, O_RDONLY);
   c6:	4581                	li	a1,0
@@ -760,696 +760,646 @@ uptime:
  ret
  420:	8082                	ret
 
-0000000000000422 <pause_system>:
-.global pause_system
-pause_system:
- li a7, SYS_pause_system
- 422:	48d9                	li	a7,22
- ecall
- 424:	00000073          	ecall
- ret
- 428:	8082                	ret
-
-000000000000042a <kill_system>:
-.global kill_system
-kill_system:
- li a7, SYS_kill_system
- 42a:	48dd                	li	a7,23
- ecall
- 42c:	00000073          	ecall
- ret
- 430:	8082                	ret
-
-0000000000000432 <print_stats>:
-.global print_stats
-print_stats:
- li a7, SYS_print_stats
- 432:	48e1                	li	a7,24
- ecall
- 434:	00000073          	ecall
- ret
- 438:	8082                	ret
-
-000000000000043a <get_cpu>:
-.global get_cpu
-get_cpu:
- li a7, SYS_get_cpu
- 43a:	48e5                	li	a7,25
- ecall
- 43c:	00000073          	ecall
- ret
- 440:	8082                	ret
-
-0000000000000442 <set_cpu>:
-.global set_cpu
-set_cpu:
- li a7, SYS_set_cpu
- 442:	48e9                	li	a7,26
- ecall
- 444:	00000073          	ecall
- ret
- 448:	8082                	ret
-
-000000000000044a <putc>:
+0000000000000422 <putc>:
 
 static char digits[] = "0123456789ABCDEF";
 
 static void
 putc(int fd, char c)
 {
- 44a:	1101                	addi	sp,sp,-32
- 44c:	ec06                	sd	ra,24(sp)
- 44e:	e822                	sd	s0,16(sp)
- 450:	1000                	addi	s0,sp,32
- 452:	feb407a3          	sb	a1,-17(s0)
+ 422:	1101                	addi	sp,sp,-32
+ 424:	ec06                	sd	ra,24(sp)
+ 426:	e822                	sd	s0,16(sp)
+ 428:	1000                	addi	s0,sp,32
+ 42a:	feb407a3          	sb	a1,-17(s0)
   write(fd, &c, 1);
- 456:	4605                	li	a2,1
- 458:	fef40593          	addi	a1,s0,-17
- 45c:	00000097          	auipc	ra,0x0
- 460:	f46080e7          	jalr	-186(ra) # 3a2 <write>
+ 42e:	4605                	li	a2,1
+ 430:	fef40593          	addi	a1,s0,-17
+ 434:	00000097          	auipc	ra,0x0
+ 438:	f6e080e7          	jalr	-146(ra) # 3a2 <write>
 }
- 464:	60e2                	ld	ra,24(sp)
- 466:	6442                	ld	s0,16(sp)
- 468:	6105                	addi	sp,sp,32
- 46a:	8082                	ret
+ 43c:	60e2                	ld	ra,24(sp)
+ 43e:	6442                	ld	s0,16(sp)
+ 440:	6105                	addi	sp,sp,32
+ 442:	8082                	ret
 
-000000000000046c <printint>:
+0000000000000444 <printint>:
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 46c:	7139                	addi	sp,sp,-64
- 46e:	fc06                	sd	ra,56(sp)
- 470:	f822                	sd	s0,48(sp)
- 472:	f426                	sd	s1,40(sp)
- 474:	f04a                	sd	s2,32(sp)
- 476:	ec4e                	sd	s3,24(sp)
- 478:	0080                	addi	s0,sp,64
- 47a:	84aa                	mv	s1,a0
+ 444:	7139                	addi	sp,sp,-64
+ 446:	fc06                	sd	ra,56(sp)
+ 448:	f822                	sd	s0,48(sp)
+ 44a:	f426                	sd	s1,40(sp)
+ 44c:	f04a                	sd	s2,32(sp)
+ 44e:	ec4e                	sd	s3,24(sp)
+ 450:	0080                	addi	s0,sp,64
+ 452:	84aa                	mv	s1,a0
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 47c:	c299                	beqz	a3,482 <printint+0x16>
- 47e:	0805c863          	bltz	a1,50e <printint+0xa2>
+ 454:	c299                	beqz	a3,45a <printint+0x16>
+ 456:	0805c863          	bltz	a1,4e6 <printint+0xa2>
     neg = 1;
     x = -xx;
   } else {
     x = xx;
- 482:	2581                	sext.w	a1,a1
+ 45a:	2581                	sext.w	a1,a1
   neg = 0;
- 484:	4881                	li	a7,0
- 486:	fc040693          	addi	a3,s0,-64
+ 45c:	4881                	li	a7,0
+ 45e:	fc040693          	addi	a3,s0,-64
   }
 
   i = 0;
- 48a:	4701                	li	a4,0
+ 462:	4701                	li	a4,0
   do{
     buf[i++] = digits[x % base];
- 48c:	2601                	sext.w	a2,a2
- 48e:	00000517          	auipc	a0,0x0
- 492:	48250513          	addi	a0,a0,1154 # 910 <digits>
- 496:	883a                	mv	a6,a4
- 498:	2705                	addiw	a4,a4,1
- 49a:	02c5f7bb          	remuw	a5,a1,a2
- 49e:	1782                	slli	a5,a5,0x20
- 4a0:	9381                	srli	a5,a5,0x20
- 4a2:	97aa                	add	a5,a5,a0
- 4a4:	0007c783          	lbu	a5,0(a5)
- 4a8:	00f68023          	sb	a5,0(a3)
+ 464:	2601                	sext.w	a2,a2
+ 466:	00000517          	auipc	a0,0x0
+ 46a:	48250513          	addi	a0,a0,1154 # 8e8 <digits>
+ 46e:	883a                	mv	a6,a4
+ 470:	2705                	addiw	a4,a4,1
+ 472:	02c5f7bb          	remuw	a5,a1,a2
+ 476:	1782                	slli	a5,a5,0x20
+ 478:	9381                	srli	a5,a5,0x20
+ 47a:	97aa                	add	a5,a5,a0
+ 47c:	0007c783          	lbu	a5,0(a5)
+ 480:	00f68023          	sb	a5,0(a3)
   }while((x /= base) != 0);
- 4ac:	0005879b          	sext.w	a5,a1
- 4b0:	02c5d5bb          	divuw	a1,a1,a2
- 4b4:	0685                	addi	a3,a3,1
- 4b6:	fec7f0e3          	bgeu	a5,a2,496 <printint+0x2a>
+ 484:	0005879b          	sext.w	a5,a1
+ 488:	02c5d5bb          	divuw	a1,a1,a2
+ 48c:	0685                	addi	a3,a3,1
+ 48e:	fec7f0e3          	bgeu	a5,a2,46e <printint+0x2a>
   if(neg)
- 4ba:	00088b63          	beqz	a7,4d0 <printint+0x64>
+ 492:	00088b63          	beqz	a7,4a8 <printint+0x64>
     buf[i++] = '-';
- 4be:	fd040793          	addi	a5,s0,-48
- 4c2:	973e                	add	a4,a4,a5
- 4c4:	02d00793          	li	a5,45
- 4c8:	fef70823          	sb	a5,-16(a4)
- 4cc:	0028071b          	addiw	a4,a6,2
+ 496:	fd040793          	addi	a5,s0,-48
+ 49a:	973e                	add	a4,a4,a5
+ 49c:	02d00793          	li	a5,45
+ 4a0:	fef70823          	sb	a5,-16(a4)
+ 4a4:	0028071b          	addiw	a4,a6,2
 
   while(--i >= 0)
- 4d0:	02e05863          	blez	a4,500 <printint+0x94>
- 4d4:	fc040793          	addi	a5,s0,-64
- 4d8:	00e78933          	add	s2,a5,a4
- 4dc:	fff78993          	addi	s3,a5,-1
- 4e0:	99ba                	add	s3,s3,a4
- 4e2:	377d                	addiw	a4,a4,-1
- 4e4:	1702                	slli	a4,a4,0x20
- 4e6:	9301                	srli	a4,a4,0x20
- 4e8:	40e989b3          	sub	s3,s3,a4
+ 4a8:	02e05863          	blez	a4,4d8 <printint+0x94>
+ 4ac:	fc040793          	addi	a5,s0,-64
+ 4b0:	00e78933          	add	s2,a5,a4
+ 4b4:	fff78993          	addi	s3,a5,-1
+ 4b8:	99ba                	add	s3,s3,a4
+ 4ba:	377d                	addiw	a4,a4,-1
+ 4bc:	1702                	slli	a4,a4,0x20
+ 4be:	9301                	srli	a4,a4,0x20
+ 4c0:	40e989b3          	sub	s3,s3,a4
     putc(fd, buf[i]);
- 4ec:	fff94583          	lbu	a1,-1(s2)
- 4f0:	8526                	mv	a0,s1
- 4f2:	00000097          	auipc	ra,0x0
- 4f6:	f58080e7          	jalr	-168(ra) # 44a <putc>
+ 4c4:	fff94583          	lbu	a1,-1(s2)
+ 4c8:	8526                	mv	a0,s1
+ 4ca:	00000097          	auipc	ra,0x0
+ 4ce:	f58080e7          	jalr	-168(ra) # 422 <putc>
   while(--i >= 0)
- 4fa:	197d                	addi	s2,s2,-1
- 4fc:	ff3918e3          	bne	s2,s3,4ec <printint+0x80>
+ 4d2:	197d                	addi	s2,s2,-1
+ 4d4:	ff3918e3          	bne	s2,s3,4c4 <printint+0x80>
 }
- 500:	70e2                	ld	ra,56(sp)
- 502:	7442                	ld	s0,48(sp)
- 504:	74a2                	ld	s1,40(sp)
- 506:	7902                	ld	s2,32(sp)
- 508:	69e2                	ld	s3,24(sp)
- 50a:	6121                	addi	sp,sp,64
- 50c:	8082                	ret
+ 4d8:	70e2                	ld	ra,56(sp)
+ 4da:	7442                	ld	s0,48(sp)
+ 4dc:	74a2                	ld	s1,40(sp)
+ 4de:	7902                	ld	s2,32(sp)
+ 4e0:	69e2                	ld	s3,24(sp)
+ 4e2:	6121                	addi	sp,sp,64
+ 4e4:	8082                	ret
     x = -xx;
- 50e:	40b005bb          	negw	a1,a1
+ 4e6:	40b005bb          	negw	a1,a1
     neg = 1;
- 512:	4885                	li	a7,1
+ 4ea:	4885                	li	a7,1
     x = -xx;
- 514:	bf8d                	j	486 <printint+0x1a>
+ 4ec:	bf8d                	j	45e <printint+0x1a>
 
-0000000000000516 <vprintf>:
+00000000000004ee <vprintf>:
 }
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 vprintf(int fd, const char *fmt, va_list ap)
 {
- 516:	7119                	addi	sp,sp,-128
- 518:	fc86                	sd	ra,120(sp)
- 51a:	f8a2                	sd	s0,112(sp)
- 51c:	f4a6                	sd	s1,104(sp)
- 51e:	f0ca                	sd	s2,96(sp)
- 520:	ecce                	sd	s3,88(sp)
- 522:	e8d2                	sd	s4,80(sp)
- 524:	e4d6                	sd	s5,72(sp)
- 526:	e0da                	sd	s6,64(sp)
- 528:	fc5e                	sd	s7,56(sp)
- 52a:	f862                	sd	s8,48(sp)
- 52c:	f466                	sd	s9,40(sp)
- 52e:	f06a                	sd	s10,32(sp)
- 530:	ec6e                	sd	s11,24(sp)
- 532:	0100                	addi	s0,sp,128
+ 4ee:	7119                	addi	sp,sp,-128
+ 4f0:	fc86                	sd	ra,120(sp)
+ 4f2:	f8a2                	sd	s0,112(sp)
+ 4f4:	f4a6                	sd	s1,104(sp)
+ 4f6:	f0ca                	sd	s2,96(sp)
+ 4f8:	ecce                	sd	s3,88(sp)
+ 4fa:	e8d2                	sd	s4,80(sp)
+ 4fc:	e4d6                	sd	s5,72(sp)
+ 4fe:	e0da                	sd	s6,64(sp)
+ 500:	fc5e                	sd	s7,56(sp)
+ 502:	f862                	sd	s8,48(sp)
+ 504:	f466                	sd	s9,40(sp)
+ 506:	f06a                	sd	s10,32(sp)
+ 508:	ec6e                	sd	s11,24(sp)
+ 50a:	0100                	addi	s0,sp,128
   char *s;
   int c, i, state;
 
   state = 0;
   for(i = 0; fmt[i]; i++){
- 534:	0005c903          	lbu	s2,0(a1)
- 538:	18090f63          	beqz	s2,6d6 <vprintf+0x1c0>
- 53c:	8aaa                	mv	s5,a0
- 53e:	8b32                	mv	s6,a2
- 540:	00158493          	addi	s1,a1,1
+ 50c:	0005c903          	lbu	s2,0(a1)
+ 510:	18090f63          	beqz	s2,6ae <vprintf+0x1c0>
+ 514:	8aaa                	mv	s5,a0
+ 516:	8b32                	mv	s6,a2
+ 518:	00158493          	addi	s1,a1,1
   state = 0;
- 544:	4981                	li	s3,0
+ 51c:	4981                	li	s3,0
       if(c == '%'){
         state = '%';
       } else {
         putc(fd, c);
       }
     } else if(state == '%'){
- 546:	02500a13          	li	s4,37
+ 51e:	02500a13          	li	s4,37
       if(c == 'd'){
- 54a:	06400c13          	li	s8,100
+ 522:	06400c13          	li	s8,100
         printint(fd, va_arg(ap, int), 10, 1);
       } else if(c == 'l') {
- 54e:	06c00c93          	li	s9,108
+ 526:	06c00c93          	li	s9,108
         printint(fd, va_arg(ap, uint64), 10, 0);
       } else if(c == 'x') {
- 552:	07800d13          	li	s10,120
+ 52a:	07800d13          	li	s10,120
         printint(fd, va_arg(ap, int), 16, 0);
       } else if(c == 'p') {
- 556:	07000d93          	li	s11,112
+ 52e:	07000d93          	li	s11,112
     putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
- 55a:	00000b97          	auipc	s7,0x0
- 55e:	3b6b8b93          	addi	s7,s7,950 # 910 <digits>
- 562:	a839                	j	580 <vprintf+0x6a>
+ 532:	00000b97          	auipc	s7,0x0
+ 536:	3b6b8b93          	addi	s7,s7,950 # 8e8 <digits>
+ 53a:	a839                	j	558 <vprintf+0x6a>
         putc(fd, c);
- 564:	85ca                	mv	a1,s2
- 566:	8556                	mv	a0,s5
- 568:	00000097          	auipc	ra,0x0
- 56c:	ee2080e7          	jalr	-286(ra) # 44a <putc>
- 570:	a019                	j	576 <vprintf+0x60>
+ 53c:	85ca                	mv	a1,s2
+ 53e:	8556                	mv	a0,s5
+ 540:	00000097          	auipc	ra,0x0
+ 544:	ee2080e7          	jalr	-286(ra) # 422 <putc>
+ 548:	a019                	j	54e <vprintf+0x60>
     } else if(state == '%'){
- 572:	01498f63          	beq	s3,s4,590 <vprintf+0x7a>
+ 54a:	01498f63          	beq	s3,s4,568 <vprintf+0x7a>
   for(i = 0; fmt[i]; i++){
- 576:	0485                	addi	s1,s1,1
- 578:	fff4c903          	lbu	s2,-1(s1)
- 57c:	14090d63          	beqz	s2,6d6 <vprintf+0x1c0>
+ 54e:	0485                	addi	s1,s1,1
+ 550:	fff4c903          	lbu	s2,-1(s1)
+ 554:	14090d63          	beqz	s2,6ae <vprintf+0x1c0>
     c = fmt[i] & 0xff;
- 580:	0009079b          	sext.w	a5,s2
+ 558:	0009079b          	sext.w	a5,s2
     if(state == 0){
- 584:	fe0997e3          	bnez	s3,572 <vprintf+0x5c>
+ 55c:	fe0997e3          	bnez	s3,54a <vprintf+0x5c>
       if(c == '%'){
- 588:	fd479ee3          	bne	a5,s4,564 <vprintf+0x4e>
+ 560:	fd479ee3          	bne	a5,s4,53c <vprintf+0x4e>
         state = '%';
- 58c:	89be                	mv	s3,a5
- 58e:	b7e5                	j	576 <vprintf+0x60>
+ 564:	89be                	mv	s3,a5
+ 566:	b7e5                	j	54e <vprintf+0x60>
       if(c == 'd'){
- 590:	05878063          	beq	a5,s8,5d0 <vprintf+0xba>
+ 568:	05878063          	beq	a5,s8,5a8 <vprintf+0xba>
       } else if(c == 'l') {
- 594:	05978c63          	beq	a5,s9,5ec <vprintf+0xd6>
+ 56c:	05978c63          	beq	a5,s9,5c4 <vprintf+0xd6>
       } else if(c == 'x') {
- 598:	07a78863          	beq	a5,s10,608 <vprintf+0xf2>
+ 570:	07a78863          	beq	a5,s10,5e0 <vprintf+0xf2>
       } else if(c == 'p') {
- 59c:	09b78463          	beq	a5,s11,624 <vprintf+0x10e>
+ 574:	09b78463          	beq	a5,s11,5fc <vprintf+0x10e>
         printptr(fd, va_arg(ap, uint64));
       } else if(c == 's'){
- 5a0:	07300713          	li	a4,115
- 5a4:	0ce78663          	beq	a5,a4,670 <vprintf+0x15a>
+ 578:	07300713          	li	a4,115
+ 57c:	0ce78663          	beq	a5,a4,648 <vprintf+0x15a>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 5a8:	06300713          	li	a4,99
- 5ac:	0ee78e63          	beq	a5,a4,6a8 <vprintf+0x192>
+ 580:	06300713          	li	a4,99
+ 584:	0ee78e63          	beq	a5,a4,680 <vprintf+0x192>
         putc(fd, va_arg(ap, uint));
       } else if(c == '%'){
- 5b0:	11478863          	beq	a5,s4,6c0 <vprintf+0x1aa>
+ 588:	11478863          	beq	a5,s4,698 <vprintf+0x1aa>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
- 5b4:	85d2                	mv	a1,s4
- 5b6:	8556                	mv	a0,s5
- 5b8:	00000097          	auipc	ra,0x0
- 5bc:	e92080e7          	jalr	-366(ra) # 44a <putc>
+ 58c:	85d2                	mv	a1,s4
+ 58e:	8556                	mv	a0,s5
+ 590:	00000097          	auipc	ra,0x0
+ 594:	e92080e7          	jalr	-366(ra) # 422 <putc>
         putc(fd, c);
- 5c0:	85ca                	mv	a1,s2
- 5c2:	8556                	mv	a0,s5
- 5c4:	00000097          	auipc	ra,0x0
- 5c8:	e86080e7          	jalr	-378(ra) # 44a <putc>
+ 598:	85ca                	mv	a1,s2
+ 59a:	8556                	mv	a0,s5
+ 59c:	00000097          	auipc	ra,0x0
+ 5a0:	e86080e7          	jalr	-378(ra) # 422 <putc>
       }
       state = 0;
- 5cc:	4981                	li	s3,0
- 5ce:	b765                	j	576 <vprintf+0x60>
+ 5a4:	4981                	li	s3,0
+ 5a6:	b765                	j	54e <vprintf+0x60>
         printint(fd, va_arg(ap, int), 10, 1);
- 5d0:	008b0913          	addi	s2,s6,8
- 5d4:	4685                	li	a3,1
- 5d6:	4629                	li	a2,10
- 5d8:	000b2583          	lw	a1,0(s6)
- 5dc:	8556                	mv	a0,s5
- 5de:	00000097          	auipc	ra,0x0
- 5e2:	e8e080e7          	jalr	-370(ra) # 46c <printint>
- 5e6:	8b4a                	mv	s6,s2
+ 5a8:	008b0913          	addi	s2,s6,8
+ 5ac:	4685                	li	a3,1
+ 5ae:	4629                	li	a2,10
+ 5b0:	000b2583          	lw	a1,0(s6)
+ 5b4:	8556                	mv	a0,s5
+ 5b6:	00000097          	auipc	ra,0x0
+ 5ba:	e8e080e7          	jalr	-370(ra) # 444 <printint>
+ 5be:	8b4a                	mv	s6,s2
       state = 0;
- 5e8:	4981                	li	s3,0
- 5ea:	b771                	j	576 <vprintf+0x60>
+ 5c0:	4981                	li	s3,0
+ 5c2:	b771                	j	54e <vprintf+0x60>
         printint(fd, va_arg(ap, uint64), 10, 0);
- 5ec:	008b0913          	addi	s2,s6,8
- 5f0:	4681                	li	a3,0
- 5f2:	4629                	li	a2,10
- 5f4:	000b2583          	lw	a1,0(s6)
- 5f8:	8556                	mv	a0,s5
- 5fa:	00000097          	auipc	ra,0x0
- 5fe:	e72080e7          	jalr	-398(ra) # 46c <printint>
- 602:	8b4a                	mv	s6,s2
+ 5c4:	008b0913          	addi	s2,s6,8
+ 5c8:	4681                	li	a3,0
+ 5ca:	4629                	li	a2,10
+ 5cc:	000b2583          	lw	a1,0(s6)
+ 5d0:	8556                	mv	a0,s5
+ 5d2:	00000097          	auipc	ra,0x0
+ 5d6:	e72080e7          	jalr	-398(ra) # 444 <printint>
+ 5da:	8b4a                	mv	s6,s2
       state = 0;
- 604:	4981                	li	s3,0
- 606:	bf85                	j	576 <vprintf+0x60>
+ 5dc:	4981                	li	s3,0
+ 5de:	bf85                	j	54e <vprintf+0x60>
         printint(fd, va_arg(ap, int), 16, 0);
- 608:	008b0913          	addi	s2,s6,8
- 60c:	4681                	li	a3,0
- 60e:	4641                	li	a2,16
- 610:	000b2583          	lw	a1,0(s6)
- 614:	8556                	mv	a0,s5
- 616:	00000097          	auipc	ra,0x0
- 61a:	e56080e7          	jalr	-426(ra) # 46c <printint>
- 61e:	8b4a                	mv	s6,s2
+ 5e0:	008b0913          	addi	s2,s6,8
+ 5e4:	4681                	li	a3,0
+ 5e6:	4641                	li	a2,16
+ 5e8:	000b2583          	lw	a1,0(s6)
+ 5ec:	8556                	mv	a0,s5
+ 5ee:	00000097          	auipc	ra,0x0
+ 5f2:	e56080e7          	jalr	-426(ra) # 444 <printint>
+ 5f6:	8b4a                	mv	s6,s2
       state = 0;
- 620:	4981                	li	s3,0
- 622:	bf91                	j	576 <vprintf+0x60>
+ 5f8:	4981                	li	s3,0
+ 5fa:	bf91                	j	54e <vprintf+0x60>
         printptr(fd, va_arg(ap, uint64));
- 624:	008b0793          	addi	a5,s6,8
- 628:	f8f43423          	sd	a5,-120(s0)
- 62c:	000b3983          	ld	s3,0(s6)
+ 5fc:	008b0793          	addi	a5,s6,8
+ 600:	f8f43423          	sd	a5,-120(s0)
+ 604:	000b3983          	ld	s3,0(s6)
   putc(fd, '0');
- 630:	03000593          	li	a1,48
- 634:	8556                	mv	a0,s5
- 636:	00000097          	auipc	ra,0x0
- 63a:	e14080e7          	jalr	-492(ra) # 44a <putc>
+ 608:	03000593          	li	a1,48
+ 60c:	8556                	mv	a0,s5
+ 60e:	00000097          	auipc	ra,0x0
+ 612:	e14080e7          	jalr	-492(ra) # 422 <putc>
   putc(fd, 'x');
- 63e:	85ea                	mv	a1,s10
- 640:	8556                	mv	a0,s5
- 642:	00000097          	auipc	ra,0x0
- 646:	e08080e7          	jalr	-504(ra) # 44a <putc>
- 64a:	4941                	li	s2,16
+ 616:	85ea                	mv	a1,s10
+ 618:	8556                	mv	a0,s5
+ 61a:	00000097          	auipc	ra,0x0
+ 61e:	e08080e7          	jalr	-504(ra) # 422 <putc>
+ 622:	4941                	li	s2,16
     putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
- 64c:	03c9d793          	srli	a5,s3,0x3c
- 650:	97de                	add	a5,a5,s7
- 652:	0007c583          	lbu	a1,0(a5)
- 656:	8556                	mv	a0,s5
- 658:	00000097          	auipc	ra,0x0
- 65c:	df2080e7          	jalr	-526(ra) # 44a <putc>
+ 624:	03c9d793          	srli	a5,s3,0x3c
+ 628:	97de                	add	a5,a5,s7
+ 62a:	0007c583          	lbu	a1,0(a5)
+ 62e:	8556                	mv	a0,s5
+ 630:	00000097          	auipc	ra,0x0
+ 634:	df2080e7          	jalr	-526(ra) # 422 <putc>
   for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
- 660:	0992                	slli	s3,s3,0x4
- 662:	397d                	addiw	s2,s2,-1
- 664:	fe0914e3          	bnez	s2,64c <vprintf+0x136>
+ 638:	0992                	slli	s3,s3,0x4
+ 63a:	397d                	addiw	s2,s2,-1
+ 63c:	fe0914e3          	bnez	s2,624 <vprintf+0x136>
         printptr(fd, va_arg(ap, uint64));
- 668:	f8843b03          	ld	s6,-120(s0)
+ 640:	f8843b03          	ld	s6,-120(s0)
       state = 0;
- 66c:	4981                	li	s3,0
- 66e:	b721                	j	576 <vprintf+0x60>
+ 644:	4981                	li	s3,0
+ 646:	b721                	j	54e <vprintf+0x60>
         s = va_arg(ap, char*);
- 670:	008b0993          	addi	s3,s6,8
- 674:	000b3903          	ld	s2,0(s6)
+ 648:	008b0993          	addi	s3,s6,8
+ 64c:	000b3903          	ld	s2,0(s6)
         if(s == 0)
- 678:	02090163          	beqz	s2,69a <vprintf+0x184>
+ 650:	02090163          	beqz	s2,672 <vprintf+0x184>
         while(*s != 0){
- 67c:	00094583          	lbu	a1,0(s2)
- 680:	c9a1                	beqz	a1,6d0 <vprintf+0x1ba>
+ 654:	00094583          	lbu	a1,0(s2)
+ 658:	c9a1                	beqz	a1,6a8 <vprintf+0x1ba>
           putc(fd, *s);
- 682:	8556                	mv	a0,s5
- 684:	00000097          	auipc	ra,0x0
- 688:	dc6080e7          	jalr	-570(ra) # 44a <putc>
+ 65a:	8556                	mv	a0,s5
+ 65c:	00000097          	auipc	ra,0x0
+ 660:	dc6080e7          	jalr	-570(ra) # 422 <putc>
           s++;
- 68c:	0905                	addi	s2,s2,1
+ 664:	0905                	addi	s2,s2,1
         while(*s != 0){
- 68e:	00094583          	lbu	a1,0(s2)
- 692:	f9e5                	bnez	a1,682 <vprintf+0x16c>
+ 666:	00094583          	lbu	a1,0(s2)
+ 66a:	f9e5                	bnez	a1,65a <vprintf+0x16c>
         s = va_arg(ap, char*);
- 694:	8b4e                	mv	s6,s3
+ 66c:	8b4e                	mv	s6,s3
       state = 0;
- 696:	4981                	li	s3,0
- 698:	bdf9                	j	576 <vprintf+0x60>
+ 66e:	4981                	li	s3,0
+ 670:	bdf9                	j	54e <vprintf+0x60>
           s = "(null)";
- 69a:	00000917          	auipc	s2,0x0
- 69e:	26e90913          	addi	s2,s2,622 # 908 <malloc+0x128>
+ 672:	00000917          	auipc	s2,0x0
+ 676:	26e90913          	addi	s2,s2,622 # 8e0 <malloc+0x128>
         while(*s != 0){
- 6a2:	02800593          	li	a1,40
- 6a6:	bff1                	j	682 <vprintf+0x16c>
+ 67a:	02800593          	li	a1,40
+ 67e:	bff1                	j	65a <vprintf+0x16c>
         putc(fd, va_arg(ap, uint));
- 6a8:	008b0913          	addi	s2,s6,8
- 6ac:	000b4583          	lbu	a1,0(s6)
- 6b0:	8556                	mv	a0,s5
- 6b2:	00000097          	auipc	ra,0x0
- 6b6:	d98080e7          	jalr	-616(ra) # 44a <putc>
- 6ba:	8b4a                	mv	s6,s2
+ 680:	008b0913          	addi	s2,s6,8
+ 684:	000b4583          	lbu	a1,0(s6)
+ 688:	8556                	mv	a0,s5
+ 68a:	00000097          	auipc	ra,0x0
+ 68e:	d98080e7          	jalr	-616(ra) # 422 <putc>
+ 692:	8b4a                	mv	s6,s2
       state = 0;
- 6bc:	4981                	li	s3,0
- 6be:	bd65                	j	576 <vprintf+0x60>
+ 694:	4981                	li	s3,0
+ 696:	bd65                	j	54e <vprintf+0x60>
         putc(fd, c);
- 6c0:	85d2                	mv	a1,s4
- 6c2:	8556                	mv	a0,s5
- 6c4:	00000097          	auipc	ra,0x0
- 6c8:	d86080e7          	jalr	-634(ra) # 44a <putc>
+ 698:	85d2                	mv	a1,s4
+ 69a:	8556                	mv	a0,s5
+ 69c:	00000097          	auipc	ra,0x0
+ 6a0:	d86080e7          	jalr	-634(ra) # 422 <putc>
       state = 0;
- 6cc:	4981                	li	s3,0
- 6ce:	b565                	j	576 <vprintf+0x60>
+ 6a4:	4981                	li	s3,0
+ 6a6:	b565                	j	54e <vprintf+0x60>
         s = va_arg(ap, char*);
- 6d0:	8b4e                	mv	s6,s3
+ 6a8:	8b4e                	mv	s6,s3
       state = 0;
- 6d2:	4981                	li	s3,0
- 6d4:	b54d                	j	576 <vprintf+0x60>
+ 6aa:	4981                	li	s3,0
+ 6ac:	b54d                	j	54e <vprintf+0x60>
     }
   }
 }
- 6d6:	70e6                	ld	ra,120(sp)
- 6d8:	7446                	ld	s0,112(sp)
- 6da:	74a6                	ld	s1,104(sp)
- 6dc:	7906                	ld	s2,96(sp)
- 6de:	69e6                	ld	s3,88(sp)
- 6e0:	6a46                	ld	s4,80(sp)
- 6e2:	6aa6                	ld	s5,72(sp)
- 6e4:	6b06                	ld	s6,64(sp)
- 6e6:	7be2                	ld	s7,56(sp)
- 6e8:	7c42                	ld	s8,48(sp)
- 6ea:	7ca2                	ld	s9,40(sp)
- 6ec:	7d02                	ld	s10,32(sp)
- 6ee:	6de2                	ld	s11,24(sp)
- 6f0:	6109                	addi	sp,sp,128
- 6f2:	8082                	ret
-
-00000000000006f4 <fprintf>:
+ 6ae:	70e6                	ld	ra,120(sp)
+ 6b0:	7446                	ld	s0,112(sp)
+ 6b2:	74a6                	ld	s1,104(sp)
+ 6b4:	7906                	ld	s2,96(sp)
+ 6b6:	69e6                	ld	s3,88(sp)
+ 6b8:	6a46                	ld	s4,80(sp)
+ 6ba:	6aa6                	ld	s5,72(sp)
+ 6bc:	6b06                	ld	s6,64(sp)
+ 6be:	7be2                	ld	s7,56(sp)
+ 6c0:	7c42                	ld	s8,48(sp)
+ 6c2:	7ca2                	ld	s9,40(sp)
+ 6c4:	7d02                	ld	s10,32(sp)
+ 6c6:	6de2                	ld	s11,24(sp)
+ 6c8:	6109                	addi	sp,sp,128
+ 6ca:	8082                	ret
+
+00000000000006cc <fprintf>:
 
 void
 fprintf(int fd, const char *fmt, ...)
 {
- 6f4:	715d                	addi	sp,sp,-80
- 6f6:	ec06                	sd	ra,24(sp)
- 6f8:	e822                	sd	s0,16(sp)
- 6fa:	1000                	addi	s0,sp,32
- 6fc:	e010                	sd	a2,0(s0)
- 6fe:	e414                	sd	a3,8(s0)
- 700:	e818                	sd	a4,16(s0)
- 702:	ec1c                	sd	a5,24(s0)
- 704:	03043023          	sd	a6,32(s0)
- 708:	03143423          	sd	a7,40(s0)
+ 6cc:	715d                	addi	sp,sp,-80
+ 6ce:	ec06                	sd	ra,24(sp)
+ 6d0:	e822                	sd	s0,16(sp)
+ 6d2:	1000                	addi	s0,sp,32
+ 6d4:	e010                	sd	a2,0(s0)
+ 6d6:	e414                	sd	a3,8(s0)
+ 6d8:	e818                	sd	a4,16(s0)
+ 6da:	ec1c                	sd	a5,24(s0)
+ 6dc:	03043023          	sd	a6,32(s0)
+ 6e0:	03143423          	sd	a7,40(s0)
   va_list ap;
 
   va_start(ap, fmt);
- 70c:	fe843423          	sd	s0,-24(s0)
+ 6e4:	fe843423          	sd	s0,-24(s0)
   vprintf(fd, fmt, ap);
- 710:	8622                	mv	a2,s0
- 712:	00000097          	auipc	ra,0x0
- 716:	e04080e7          	jalr	-508(ra) # 516 <vprintf>
+ 6e8:	8622                	mv	a2,s0
+ 6ea:	00000097          	auipc	ra,0x0
+ 6ee:	e04080e7          	jalr	-508(ra) # 4ee <vprintf>
 }
- 71a:	60e2                	ld	ra,24(sp)
- 71c:	6442                	ld	s0,16(sp)
- 71e:	6161                	addi	sp,sp,80
- 720:	8082                	ret
+ 6f2:	60e2                	ld	ra,24(sp)
+ 6f4:	6442                	ld	s0,16(sp)
+ 6f6:	6161                	addi	sp,sp,80
+ 6f8:	8082                	ret
 
-0000000000000722 <printf>:
+00000000000006fa <printf>:
 
 void
 printf(const char *fmt, ...)
 {
- 722:	711d                	addi	sp,sp,-96
- 724:	ec06                	sd	ra,24(sp)
- 726:	e822                	sd	s0,16(sp)
- 728:	1000                	addi	s0,sp,32
- 72a:	e40c                	sd	a1,8(s0)
- 72c:	e810                	sd	a2,16(s0)
- 72e:	ec14                	sd	a3,24(s0)
- 730:	f018                	sd	a4,32(s0)
- 732:	f41c                	sd	a5,40(s0)
- 734:	03043823          	sd	a6,48(s0)
- 738:	03143c23          	sd	a7,56(s0)
+ 6fa:	711d                	addi	sp,sp,-96
+ 6fc:	ec06                	sd	ra,24(sp)
+ 6fe:	e822                	sd	s0,16(sp)
+ 700:	1000                	addi	s0,sp,32
+ 702:	e40c                	sd	a1,8(s0)
+ 704:	e810                	sd	a2,16(s0)
+ 706:	ec14                	sd	a3,24(s0)
+ 708:	f018                	sd	a4,32(s0)
+ 70a:	f41c                	sd	a5,40(s0)
+ 70c:	03043823          	sd	a6,48(s0)
+ 710:	03143c23          	sd	a7,56(s0)
   va_list ap;
 
   va_start(ap, fmt);
- 73c:	00840613          	addi	a2,s0,8
- 740:	fec43423          	sd	a2,-24(s0)
+ 714:	00840613          	addi	a2,s0,8
+ 718:	fec43423          	sd	a2,-24(s0)
   vprintf(1, fmt, ap);
- 744:	85aa                	mv	a1,a0
- 746:	4505                	li	a0,1
- 748:	00000097          	auipc	ra,0x0
- 74c:	dce080e7          	jalr	-562(ra) # 516 <vprintf>
+ 71c:	85aa                	mv	a1,a0
+ 71e:	4505                	li	a0,1
+ 720:	00000097          	auipc	ra,0x0
+ 724:	dce080e7          	jalr	-562(ra) # 4ee <vprintf>
 }
- 750:	60e2                	ld	ra,24(sp)
- 752:	6442                	ld	s0,16(sp)
- 754:	6125                	addi	sp,sp,96
- 756:	8082                	ret
+ 728:	60e2                	ld	ra,24(sp)
+ 72a:	6442                	ld	s0,16(sp)
+ 72c:	6125                	addi	sp,sp,96
+ 72e:	8082                	ret
 
-0000000000000758 <free>:
+0000000000000730 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 758:	1141                	addi	sp,sp,-16
- 75a:	e422                	sd	s0,8(sp)
- 75c:	0800                	addi	s0,sp,16
+ 730:	1141                	addi	sp,sp,-16
+ 732:	e422                	sd	s0,8(sp)
+ 734:	0800                	addi	s0,sp,16
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
- 75e:	ff050693          	addi	a3,a0,-16
+ 736:	ff050693          	addi	a3,a0,-16
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 762:	00000797          	auipc	a5,0x0
- 766:	1c67b783          	ld	a5,454(a5) # 928 <freep>
- 76a:	a805                	j	79a <free+0x42>
+ 73a:	00000797          	auipc	a5,0x0
+ 73e:	1c67b783          	ld	a5,454(a5) # 900 <freep>
+ 742:	a805                	j	772 <free+0x42>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
       break;
   if(bp + bp->s.size == p->s.ptr){
     bp->s.size += p->s.ptr->s.size;
- 76c:	4618                	lw	a4,8(a2)
- 76e:	9db9                	addw	a1,a1,a4
- 770:	feb52c23          	sw	a1,-8(a0)
+ 744:	4618                	lw	a4,8(a2)
+ 746:	9db9                	addw	a1,a1,a4
+ 748:	feb52c23          	sw	a1,-8(a0)
     bp->s.ptr = p->s.ptr->s.ptr;
- 774:	6398                	ld	a4,0(a5)
- 776:	6318                	ld	a4,0(a4)
- 778:	fee53823          	sd	a4,-16(a0)
- 77c:	a091                	j	7c0 <free+0x68>
+ 74c:	6398                	ld	a4,0(a5)
+ 74e:	6318                	ld	a4,0(a4)
+ 750:	fee53823          	sd	a4,-16(a0)
+ 754:	a091                	j	798 <free+0x68>
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
     p->s.size += bp->s.size;
- 77e:	ff852703          	lw	a4,-8(a0)
- 782:	9e39                	addw	a2,a2,a4
- 784:	c790                	sw	a2,8(a5)
+ 756:	ff852703          	lw	a4,-8(a0)
+ 75a:	9e39                	addw	a2,a2,a4
+ 75c:	c790                	sw	a2,8(a5)
     p->s.ptr = bp->s.ptr;
- 786:	ff053703          	ld	a4,-16(a0)
- 78a:	e398                	sd	a4,0(a5)
- 78c:	a099                	j	7d2 <free+0x7a>
+ 75e:	ff053703          	ld	a4,-16(a0)
+ 762:	e398                	sd	a4,0(a5)
+ 764:	a099                	j	7aa <free+0x7a>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 78e:	6398                	ld	a4,0(a5)
- 790:	00e7e463          	bltu	a5,a4,798 <free+0x40>
- 794:	00e6ea63          	bltu	a3,a4,7a8 <free+0x50>
+ 766:	6398                	ld	a4,0(a5)
+ 768:	00e7e463          	bltu	a5,a4,770 <free+0x40>
+ 76c:	00e6ea63          	bltu	a3,a4,780 <free+0x50>
 {
- 798:	87ba                	mv	a5,a4
+ 770:	87ba                	mv	a5,a4
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 79a:	fed7fae3          	bgeu	a5,a3,78e <free+0x36>
- 79e:	6398                	ld	a4,0(a5)
- 7a0:	00e6e463          	bltu	a3,a4,7a8 <free+0x50>
+ 772:	fed7fae3          	bgeu	a5,a3,766 <free+0x36>
+ 776:	6398                	ld	a4,0(a5)
+ 778:	00e6e463          	bltu	a3,a4,780 <free+0x50>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 7a4:	fee7eae3          	bltu	a5,a4,798 <free+0x40>
+ 77c:	fee7eae3          	bltu	a5,a4,770 <free+0x40>
   if(bp + bp->s.size == p->s.ptr){
- 7a8:	ff852583          	lw	a1,-8(a0)
- 7ac:	6390                	ld	a2,0(a5)
- 7ae:	02059713          	slli	a4,a1,0x20
- 7b2:	9301                	srli	a4,a4,0x20
- 7b4:	0712                	slli	a4,a4,0x4
- 7b6:	9736                	add	a4,a4,a3
- 7b8:	fae60ae3          	beq	a2,a4,76c <free+0x14>
+ 780:	ff852583          	lw	a1,-8(a0)
+ 784:	6390                	ld	a2,0(a5)
+ 786:	02059713          	slli	a4,a1,0x20
+ 78a:	9301                	srli	a4,a4,0x20
+ 78c:	0712                	slli	a4,a4,0x4
+ 78e:	9736                	add	a4,a4,a3
+ 790:	fae60ae3          	beq	a2,a4,744 <free+0x14>
     bp->s.ptr = p->s.ptr;
- 7bc:	fec53823          	sd	a2,-16(a0)
+ 794:	fec53823          	sd	a2,-16(a0)
   if(p + p->s.size == bp){
- 7c0:	4790                	lw	a2,8(a5)
- 7c2:	02061713          	slli	a4,a2,0x20
- 7c6:	9301                	srli	a4,a4,0x20
- 7c8:	0712                	slli	a4,a4,0x4
- 7ca:	973e                	add	a4,a4,a5
- 7cc:	fae689e3          	beq	a3,a4,77e <free+0x26>
+ 798:	4790                	lw	a2,8(a5)
+ 79a:	02061713          	slli	a4,a2,0x20
+ 79e:	9301                	srli	a4,a4,0x20
+ 7a0:	0712                	slli	a4,a4,0x4
+ 7a2:	973e                	add	a4,a4,a5
+ 7a4:	fae689e3          	beq	a3,a4,756 <free+0x26>
   } else
     p->s.ptr = bp;
- 7d0:	e394                	sd	a3,0(a5)
+ 7a8:	e394                	sd	a3,0(a5)
   freep = p;
- 7d2:	00000717          	auipc	a4,0x0
- 7d6:	14f73b23          	sd	a5,342(a4) # 928 <freep>
+ 7aa:	00000717          	auipc	a4,0x0
+ 7ae:	14f73b23          	sd	a5,342(a4) # 900 <freep>
 }
- 7da:	6422                	ld	s0,8(sp)
- 7dc:	0141                	addi	sp,sp,16
- 7de:	8082                	ret
+ 7b2:	6422                	ld	s0,8(sp)
+ 7b4:	0141                	addi	sp,sp,16
+ 7b6:	8082                	ret
 
-00000000000007e0 <malloc>:
+00000000000007b8 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 7e0:	7139                	addi	sp,sp,-64
- 7e2:	fc06                	sd	ra,56(sp)
- 7e4:	f822                	sd	s0,48(sp)
- 7e6:	f426                	sd	s1,40(sp)
- 7e8:	f04a                	sd	s2,32(sp)
- 7ea:	ec4e                	sd	s3,24(sp)
- 7ec:	e852                	sd	s4,16(sp)
- 7ee:	e456                	sd	s5,8(sp)
- 7f0:	e05a                	sd	s6,0(sp)
- 7f2:	0080                	addi	s0,sp,64
+ 7b8:	7139                	addi	sp,sp,-64
+ 7ba:	fc06                	sd	ra,56(sp)
+ 7bc:	f822                	sd	s0,48(sp)
+ 7be:	f426                	sd	s1,40(sp)
+ 7c0:	f04a                	sd	s2,32(sp)
+ 7c2:	ec4e                	sd	s3,24(sp)
+ 7c4:	e852                	sd	s4,16(sp)
+ 7c6:	e456                	sd	s5,8(sp)
+ 7c8:	e05a                	sd	s6,0(sp)
+ 7ca:	0080                	addi	s0,sp,64
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 7f4:	02051493          	slli	s1,a0,0x20
- 7f8:	9081                	srli	s1,s1,0x20
- 7fa:	04bd                	addi	s1,s1,15
- 7fc:	8091                	srli	s1,s1,0x4
- 7fe:	0014899b          	addiw	s3,s1,1
- 802:	0485                	addi	s1,s1,1
+ 7cc:	02051493          	slli	s1,a0,0x20
+ 7d0:	9081                	srli	s1,s1,0x20
+ 7d2:	04bd                	addi	s1,s1,15
+ 7d4:	8091                	srli	s1,s1,0x4
+ 7d6:	0014899b          	addiw	s3,s1,1
+ 7da:	0485                	addi	s1,s1,1
   if((prevp = freep) == 0){
- 804:	00000517          	auipc	a0,0x0
- 808:	12453503          	ld	a0,292(a0) # 928 <freep>
- 80c:	c515                	beqz	a0,838 <malloc+0x58>
+ 7dc:	00000517          	auipc	a0,0x0
+ 7e0:	12453503          	ld	a0,292(a0) # 900 <freep>
+ 7e4:	c515                	beqz	a0,810 <malloc+0x58>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 80e:	611c                	ld	a5,0(a0)
+ 7e6:	611c                	ld	a5,0(a0)
     if(p->s.size >= nunits){
- 810:	4798                	lw	a4,8(a5)
- 812:	02977f63          	bgeu	a4,s1,850 <malloc+0x70>
- 816:	8a4e                	mv	s4,s3
- 818:	0009871b          	sext.w	a4,s3
- 81c:	6685                	lui	a3,0x1
- 81e:	00d77363          	bgeu	a4,a3,824 <malloc+0x44>
- 822:	6a05                	lui	s4,0x1
- 824:	000a0b1b          	sext.w	s6,s4
+ 7e8:	4798                	lw	a4,8(a5)
+ 7ea:	02977f63          	bgeu	a4,s1,828 <malloc+0x70>
+ 7ee:	8a4e                	mv	s4,s3
+ 7f0:	0009871b          	sext.w	a4,s3
+ 7f4:	6685                	lui	a3,0x1
+ 7f6:	00d77363          	bgeu	a4,a3,7fc <malloc+0x44>
+ 7fa:	6a05                	lui	s4,0x1
+ 7fc:	000a0b1b          	sext.w	s6,s4
   p = sbrk(nu * sizeof(Header));
- 828:	004a1a1b          	slliw	s4,s4,0x4
+ 800:	004a1a1b          	slliw	s4,s4,0x4
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 82c:	00000917          	auipc	s2,0x0
- 830:	0fc90913          	addi	s2,s2,252 # 928 <freep>
+ 804:	00000917          	auipc	s2,0x0
+ 808:	0fc90913          	addi	s2,s2,252 # 900 <freep>
   if(p == (char*)-1)
- 834:	5afd                	li	s5,-1
- 836:	a88d                	j	8a8 <malloc+0xc8>
+ 80c:	5afd                	li	s5,-1
+ 80e:	a88d                	j	880 <malloc+0xc8>
     base.s.ptr = freep = prevp = &base;
- 838:	00000797          	auipc	a5,0x0
- 83c:	0f878793          	addi	a5,a5,248 # 930 <base>
- 840:	00000717          	auipc	a4,0x0
- 844:	0ef73423          	sd	a5,232(a4) # 928 <freep>
- 848:	e39c                	sd	a5,0(a5)
+ 810:	00000797          	auipc	a5,0x0
+ 814:	0f878793          	addi	a5,a5,248 # 908 <base>
+ 818:	00000717          	auipc	a4,0x0
+ 81c:	0ef73423          	sd	a5,232(a4) # 900 <freep>
+ 820:	e39c                	sd	a5,0(a5)
     base.s.size = 0;
- 84a:	0007a423          	sw	zero,8(a5)
+ 822:	0007a423          	sw	zero,8(a5)
     if(p->s.size >= nunits){
- 84e:	b7e1                	j	816 <malloc+0x36>
+ 826:	b7e1                	j	7ee <malloc+0x36>
       if(p->s.size == nunits)
- 850:	02e48b63          	beq	s1,a4,886 <malloc+0xa6>
+ 828:	02e48b63          	beq	s1,a4,85e <malloc+0xa6>
         p->s.size -= nunits;
- 854:	4137073b          	subw	a4,a4,s3
- 858:	c798                	sw	a4,8(a5)
+ 82c:	4137073b          	subw	a4,a4,s3
+ 830:	c798                	sw	a4,8(a5)
         p += p->s.size;
- 85a:	1702                	slli	a4,a4,0x20
- 85c:	9301                	srli	a4,a4,0x20
- 85e:	0712                	slli	a4,a4,0x4
- 860:	97ba                	add	a5,a5,a4
+ 832:	1702                	slli	a4,a4,0x20
+ 834:	9301                	srli	a4,a4,0x20
+ 836:	0712                	slli	a4,a4,0x4
+ 838:	97ba                	add	a5,a5,a4
         p->s.size = nunits;
- 862:	0137a423          	sw	s3,8(a5)
+ 83a:	0137a423          	sw	s3,8(a5)
       freep = prevp;
- 866:	00000717          	auipc	a4,0x0
- 86a:	0ca73123          	sd	a0,194(a4) # 928 <freep>
+ 83e:	00000717          	auipc	a4,0x0
+ 842:	0ca73123          	sd	a0,194(a4) # 900 <freep>
       return (void*)(p + 1);
- 86e:	01078513          	addi	a0,a5,16
+ 846:	01078513          	addi	a0,a5,16
       if((p = morecore(nunits)) == 0)
         return 0;
   }
 }
- 872:	70e2                	ld	ra,56(sp)
- 874:	7442                	ld	s0,48(sp)
- 876:	74a2                	ld	s1,40(sp)
- 878:	7902                	ld	s2,32(sp)
- 87a:	69e2                	ld	s3,24(sp)
- 87c:	6a42                	ld	s4,16(sp)
- 87e:	6aa2                	ld	s5,8(sp)
- 880:	6b02                	ld	s6,0(sp)
- 882:	6121                	addi	sp,sp,64
- 884:	8082                	ret
+ 84a:	70e2                	ld	ra,56(sp)
+ 84c:	7442                	ld	s0,48(sp)
+ 84e:	74a2                	ld	s1,40(sp)
+ 850:	7902                	ld	s2,32(sp)
+ 852:	69e2                	ld	s3,24(sp)
+ 854:	6a42                	ld	s4,16(sp)
+ 856:	6aa2                	ld	s5,8(sp)
+ 858:	6b02                	ld	s6,0(sp)
+ 85a:	6121                	addi	sp,sp,64
+ 85c:	8082                	ret
         prevp->s.ptr = p->s.ptr;
- 886:	6398                	ld	a4,0(a5)
- 888:	e118                	sd	a4,0(a0)
- 88a:	bff1                	j	866 <malloc+0x86>
+ 85e:	6398                	ld	a4,0(a5)
+ 860:	e118                	sd	a4,0(a0)
+ 862:	bff1                	j	83e <malloc+0x86>
   hp->s.size = nu;
- 88c:	01652423          	sw	s6,8(a0)
+ 864:	01652423          	sw	s6,8(a0)
   free((void*)(hp + 1));
- 890:	0541                	addi	a0,a0,16
- 892:	00000097          	auipc	ra,0x0
- 896:	ec6080e7          	jalr	-314(ra) # 758 <free>
+ 868:	0541                	addi	a0,a0,16
+ 86a:	00000097          	auipc	ra,0x0
+ 86e:	ec6080e7          	jalr	-314(ra) # 730 <free>
   return freep;
- 89a:	00093503          	ld	a0,0(s2)
+ 872:	00093503          	ld	a0,0(s2)
       if((p = morecore(nunits)) == 0)
- 89e:	d971                	beqz	a0,872 <malloc+0x92>
+ 876:	d971                	beqz	a0,84a <malloc+0x92>
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 8a0:	611c                	ld	a5,0(a0)
+ 878:	611c                	ld	a5,0(a0)
     if(p->s.size >= nunits){
- 8a2:	4798                	lw	a4,8(a5)
- 8a4:	fa9776e3          	bgeu	a4,s1,850 <malloc+0x70>
+ 87a:	4798                	lw	a4,8(a5)
+ 87c:	fa9776e3          	bgeu	a4,s1,828 <malloc+0x70>
     if(p == freep)
- 8a8:	00093703          	ld	a4,0(s2)
- 8ac:	853e                	mv	a0,a5
- 8ae:	fef719e3          	bne	a4,a5,8a0 <malloc+0xc0>
+ 880:	00093703          	ld	a4,0(s2)
+ 884:	853e                	mv	a0,a5
+ 886:	fef719e3          	bne	a4,a5,878 <malloc+0xc0>
   p = sbrk(nu * sizeof(Header));
- 8b2:	8552                	mv	a0,s4
- 8b4:	00000097          	auipc	ra,0x0
- 8b8:	b56080e7          	jalr	-1194(ra) # 40a <sbrk>
+ 88a:	8552                	mv	a0,s4
+ 88c:	00000097          	auipc	ra,0x0
+ 890:	b7e080e7          	jalr	-1154(ra) # 40a <sbrk>
   if(p == (char*)-1)
- 8bc:	fd5518e3          	bne	a0,s5,88c <malloc+0xac>
+ 894:	fd5518e3          	bne	a0,s5,864 <malloc+0xac>
         return 0;
- 8c0:	4501                	li	a0,0
- 8c2:	bf45                	j	872 <malloc+0x92>
+ 898:	4501                	li	a0,0
+ 89a:	bf45                	j	84a <malloc+0x92>
diff --git a/user/stressfs.o b/user/stressfs.o
index f38eeda..95f05d0 100644
Binary files a/user/stressfs.o and b/user/stressfs.o differ
diff --git a/user/stressfs.sym b/user/stressfs.sym
index c07ece0..abb8a5e 100644
--- a/user/stressfs.sym
+++ b/user/stressfs.sym
@@ -1,7 +1,7 @@
 0000000000000000 .text
-00000000000008c8 .rodata
-0000000000000928 .sbss
-0000000000000930 .bss
+00000000000008a0 .rodata
+0000000000000900 .sbss
+0000000000000908 .bss
 0000000000000000 .comment
 0000000000000000 .debug_aranges
 0000000000000000 .debug_info
@@ -14,53 +14,48 @@
 0000000000000000 stressfs.c
 0000000000000000 ulib.c
 0000000000000000 printf.c
-000000000000044a putc
-000000000000046c printint
-0000000000000910 digits
+0000000000000422 putc
+0000000000000444 printint
+00000000000008e8 digits
 0000000000000000 umalloc.c
-0000000000000928 freep
-0000000000000930 base
+0000000000000900 freep
+0000000000000908 base
 000000000000010c strcpy
-0000000000000722 printf
-0000000000001121 __global_pointer$
+00000000000006fa printf
+00000000000010f9 __global_pointer$
 00000000000002cc memmove
 00000000000003ca mknod
 00000000000001c8 gets
-0000000000000921 __SDATA_BEGIN__
+00000000000008f9 __SDATA_BEGIN__
 0000000000000402 getpid
 0000000000000362 memcpy
-0000000000000432 print_stats
-00000000000007e0 malloc
+00000000000007b8 malloc
 0000000000000412 sleep
 0000000000000392 pipe
 00000000000003a2 write
 00000000000003da fstat
-00000000000006f4 fprintf
+00000000000006cc fprintf
 00000000000003b2 kill
-0000000000000516 vprintf
+00000000000004ee vprintf
 00000000000003f2 chdir
-0000000000000422 pause_system
 00000000000003ba exec
 000000000000038a wait
 000000000000039a read
 00000000000003d2 unlink
-0000000000000442 set_cpu
-000000000000043a get_cpu
 0000000000000328 memcmp
 000000000000037a fork
-000000000000042a kill_system
-0000000000000940 __BSS_END__
+0000000000000918 __BSS_END__
 000000000000040a sbrk
 000000000000041a uptime
-0000000000000921 __bss_start
+00000000000008f9 __bss_start
 000000000000017e memset
 0000000000000000 main
 0000000000000128 strcmp
 00000000000003fa dup
-0000000000000921 __DATA_BEGIN__
+00000000000008f9 __DATA_BEGIN__
 000000000000023c stat
-0000000000000921 _edata
-0000000000000940 _end
+00000000000008f9 _edata
+0000000000000918 _end
 00000000000003e2 link
 0000000000000382 exit
 0000000000000282 atoi
@@ -69,4 +64,4 @@
 00000000000001a4 strchr
 00000000000003ea mkdir
 00000000000003aa close
-0000000000000758 free
+0000000000000730 free
diff --git a/user/syscall.asm b/user/syscall.asm
deleted file mode 100644
index 7822f69..0000000
--- a/user/syscall.asm
+++ /dev/null
@@ -1,1520 +0,0 @@
-
-user/_syscall:     file format elf64-littleriscv
-
-
-Disassembly of section .text:
-
-0000000000000000 <pause_system_dem>:
-#include "kernel/fcntl.h"
-#include "kernel/syscall.h"
-#include "kernel/memlayout.h"
-#include "kernel/riscv.h"
-
-void pause_system_dem(int interval, int pause_seconds, int loop_size) {
-   0:	715d                	addi	sp,sp,-80
-   2:	e486                	sd	ra,72(sp)
-   4:	e0a2                	sd	s0,64(sp)
-   6:	fc26                	sd	s1,56(sp)
-   8:	f84a                	sd	s2,48(sp)
-   a:	f44e                	sd	s3,40(sp)
-   c:	f052                	sd	s4,32(sp)
-   e:	ec56                	sd	s5,24(sp)
-  10:	e85a                	sd	s6,16(sp)
-  12:	e45e                	sd	s7,8(sp)
-  14:	0880                	addi	s0,sp,80
-  16:	8a2a                	mv	s4,a0
-  18:	8b2e                	mv	s6,a1
-  1a:	8932                	mv	s2,a2
-    int pid = getpid();
-  1c:	00000097          	auipc	ra,0x0
-  20:	442080e7          	jalr	1090(ra) # 45e <getpid>
-    for (int i = 0; i < loop_size; i++) {
-  24:	05205b63          	blez	s2,7a <pause_system_dem+0x7a>
-  28:	8aaa                	mv	s5,a0
-        if (i % interval == 0 && pid == getpid()) {
-            printf("pause system %d/%d completed.\n", i, loop_size);
-        }
-        if (i == loop_size / 2) {
-  2a:	01f9599b          	srliw	s3,s2,0x1f
-  2e:	012989bb          	addw	s3,s3,s2
-  32:	4019d99b          	sraiw	s3,s3,0x1
-    for (int i = 0; i < loop_size; i++) {
-  36:	4481                	li	s1,0
-            printf("pause system %d/%d completed.\n", i, loop_size);
-  38:	00001b97          	auipc	s7,0x1
-  3c:	8e8b8b93          	addi	s7,s7,-1816 # 920 <malloc+0xe4>
-  40:	a031                	j	4c <pause_system_dem+0x4c>
-        if (i == loop_size / 2) {
-  42:	02998663          	beq	s3,s1,6e <pause_system_dem+0x6e>
-    for (int i = 0; i < loop_size; i++) {
-  46:	2485                	addiw	s1,s1,1
-  48:	02990963          	beq	s2,s1,7a <pause_system_dem+0x7a>
-        if (i % interval == 0 && pid == getpid()) {
-  4c:	0344e7bb          	remw	a5,s1,s4
-  50:	fbed                	bnez	a5,42 <pause_system_dem+0x42>
-  52:	00000097          	auipc	ra,0x0
-  56:	40c080e7          	jalr	1036(ra) # 45e <getpid>
-  5a:	ff5514e3          	bne	a0,s5,42 <pause_system_dem+0x42>
-            printf("pause system %d/%d completed.\n", i, loop_size);
-  5e:	864a                	mv	a2,s2
-  60:	85a6                	mv	a1,s1
-  62:	855e                	mv	a0,s7
-  64:	00000097          	auipc	ra,0x0
-  68:	71a080e7          	jalr	1818(ra) # 77e <printf>
-  6c:	bfd9                	j	42 <pause_system_dem+0x42>
-            pause_system(pause_seconds);
-  6e:	855a                	mv	a0,s6
-  70:	00000097          	auipc	ra,0x0
-  74:	40e080e7          	jalr	1038(ra) # 47e <pause_system>
-  78:	b7f9                	j	46 <pause_system_dem+0x46>
-        }
-    }
-    printf("\n");
-  7a:	00001517          	auipc	a0,0x1
-  7e:	8c650513          	addi	a0,a0,-1850 # 940 <malloc+0x104>
-  82:	00000097          	auipc	ra,0x0
-  86:	6fc080e7          	jalr	1788(ra) # 77e <printf>
-}
-  8a:	60a6                	ld	ra,72(sp)
-  8c:	6406                	ld	s0,64(sp)
-  8e:	74e2                	ld	s1,56(sp)
-  90:	7942                	ld	s2,48(sp)
-  92:	79a2                	ld	s3,40(sp)
-  94:	7a02                	ld	s4,32(sp)
-  96:	6ae2                	ld	s5,24(sp)
-  98:	6b42                	ld	s6,16(sp)
-  9a:	6ba2                	ld	s7,8(sp)
-  9c:	6161                	addi	sp,sp,80
-  9e:	8082                	ret
-
-00000000000000a0 <kill_system_dem>:
-
-void kill_system_dem(int interval, int loop_size) {
-  a0:	7139                	addi	sp,sp,-64
-  a2:	fc06                	sd	ra,56(sp)
-  a4:	f822                	sd	s0,48(sp)
-  a6:	f426                	sd	s1,40(sp)
-  a8:	f04a                	sd	s2,32(sp)
-  aa:	ec4e                	sd	s3,24(sp)
-  ac:	e852                	sd	s4,16(sp)
-  ae:	e456                	sd	s5,8(sp)
-  b0:	e05a                	sd	s6,0(sp)
-  b2:	0080                	addi	s0,sp,64
-  b4:	8a2a                	mv	s4,a0
-  b6:	892e                	mv	s2,a1
-    int pid = getpid();
-  b8:	00000097          	auipc	ra,0x0
-  bc:	3a6080e7          	jalr	934(ra) # 45e <getpid>
-    for (int i = 0; i < loop_size; i++) {
-  c0:	05205a63          	blez	s2,114 <kill_system_dem+0x74>
-  c4:	8aaa                	mv	s5,a0
-        if (i % interval == 0 && pid == getpid()) {
-            printf("kill system %d/%d completed.\n", i, loop_size);
-        }
-        if (i == loop_size / 2) {
-  c6:	01f9599b          	srliw	s3,s2,0x1f
-  ca:	012989bb          	addw	s3,s3,s2
-  ce:	4019d99b          	sraiw	s3,s3,0x1
-    for (int i = 0; i < loop_size; i++) {
-  d2:	4481                	li	s1,0
-            printf("kill system %d/%d completed.\n", i, loop_size);
-  d4:	00001b17          	auipc	s6,0x1
-  d8:	874b0b13          	addi	s6,s6,-1932 # 948 <malloc+0x10c>
-  dc:	a031                	j	e8 <kill_system_dem+0x48>
-        if (i == loop_size / 2) {
-  de:	02998663          	beq	s3,s1,10a <kill_system_dem+0x6a>
-    for (int i = 0; i < loop_size; i++) {
-  e2:	2485                	addiw	s1,s1,1
-  e4:	02990863          	beq	s2,s1,114 <kill_system_dem+0x74>
-        if (i % interval == 0 && pid == getpid()) {
-  e8:	0344e7bb          	remw	a5,s1,s4
-  ec:	fbed                	bnez	a5,de <kill_system_dem+0x3e>
-  ee:	00000097          	auipc	ra,0x0
-  f2:	370080e7          	jalr	880(ra) # 45e <getpid>
-  f6:	ff5514e3          	bne	a0,s5,de <kill_system_dem+0x3e>
-            printf("kill system %d/%d completed.\n", i, loop_size);
-  fa:	864a                	mv	a2,s2
-  fc:	85a6                	mv	a1,s1
-  fe:	855a                	mv	a0,s6
- 100:	00000097          	auipc	ra,0x0
- 104:	67e080e7          	jalr	1662(ra) # 77e <printf>
- 108:	bfd9                	j	de <kill_system_dem+0x3e>
-            kill_system();
- 10a:	00000097          	auipc	ra,0x0
- 10e:	37c080e7          	jalr	892(ra) # 486 <kill_system>
- 112:	bfc1                	j	e2 <kill_system_dem+0x42>
-        }
-    }
-    printf("\n");
- 114:	00001517          	auipc	a0,0x1
- 118:	82c50513          	addi	a0,a0,-2004 # 940 <malloc+0x104>
- 11c:	00000097          	auipc	ra,0x0
- 120:	662080e7          	jalr	1634(ra) # 77e <printf>
-}
- 124:	70e2                	ld	ra,56(sp)
- 126:	7442                	ld	s0,48(sp)
- 128:	74a2                	ld	s1,40(sp)
- 12a:	7902                	ld	s2,32(sp)
- 12c:	69e2                	ld	s3,24(sp)
- 12e:	6a42                	ld	s4,16(sp)
- 130:	6aa2                	ld	s5,8(sp)
- 132:	6b02                	ld	s6,0(sp)
- 134:	6121                	addi	sp,sp,64
- 136:	8082                	ret
-
-0000000000000138 <main>:
-
-
-int
-main(int argc, char *argv[])
-{
- 138:	1141                	addi	sp,sp,-16
- 13a:	e406                	sd	ra,8(sp)
- 13c:	e022                	sd	s0,0(sp)
- 13e:	0800                	addi	s0,sp,16
-    pause_system_dem(10, 10, 100);
- 140:	06400613          	li	a2,100
- 144:	45a9                	li	a1,10
- 146:	4529                	li	a0,10
- 148:	00000097          	auipc	ra,0x0
- 14c:	eb8080e7          	jalr	-328(ra) # 0 <pause_system_dem>
-    kill_system_dem(10, 100);
- 150:	06400593          	li	a1,100
- 154:	4529                	li	a0,10
- 156:	00000097          	auipc	ra,0x0
- 15a:	f4a080e7          	jalr	-182(ra) # a0 <kill_system_dem>
-    exit(0);
- 15e:	4501                	li	a0,0
- 160:	00000097          	auipc	ra,0x0
- 164:	27e080e7          	jalr	638(ra) # 3de <exit>
-
-0000000000000168 <strcpy>:
-#include "kernel/fcntl.h"
-#include "user/user.h"
-
-char*
-strcpy(char *s, const char *t)
-{
- 168:	1141                	addi	sp,sp,-16
- 16a:	e422                	sd	s0,8(sp)
- 16c:	0800                	addi	s0,sp,16
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
- 16e:	87aa                	mv	a5,a0
- 170:	0585                	addi	a1,a1,1
- 172:	0785                	addi	a5,a5,1
- 174:	fff5c703          	lbu	a4,-1(a1)
- 178:	fee78fa3          	sb	a4,-1(a5)
- 17c:	fb75                	bnez	a4,170 <strcpy+0x8>
-    ;
-  return os;
-}
- 17e:	6422                	ld	s0,8(sp)
- 180:	0141                	addi	sp,sp,16
- 182:	8082                	ret
-
-0000000000000184 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
- 184:	1141                	addi	sp,sp,-16
- 186:	e422                	sd	s0,8(sp)
- 188:	0800                	addi	s0,sp,16
-  while(*p && *p == *q)
- 18a:	00054783          	lbu	a5,0(a0)
- 18e:	cb91                	beqz	a5,1a2 <strcmp+0x1e>
- 190:	0005c703          	lbu	a4,0(a1)
- 194:	00f71763          	bne	a4,a5,1a2 <strcmp+0x1e>
-    p++, q++;
- 198:	0505                	addi	a0,a0,1
- 19a:	0585                	addi	a1,a1,1
-  while(*p && *p == *q)
- 19c:	00054783          	lbu	a5,0(a0)
- 1a0:	fbe5                	bnez	a5,190 <strcmp+0xc>
-  return (uchar)*p - (uchar)*q;
- 1a2:	0005c503          	lbu	a0,0(a1)
-}
- 1a6:	40a7853b          	subw	a0,a5,a0
- 1aa:	6422                	ld	s0,8(sp)
- 1ac:	0141                	addi	sp,sp,16
- 1ae:	8082                	ret
-
-00000000000001b0 <strlen>:
-
-uint
-strlen(const char *s)
-{
- 1b0:	1141                	addi	sp,sp,-16
- 1b2:	e422                	sd	s0,8(sp)
- 1b4:	0800                	addi	s0,sp,16
-  int n;
-
-  for(n = 0; s[n]; n++)
- 1b6:	00054783          	lbu	a5,0(a0)
- 1ba:	cf91                	beqz	a5,1d6 <strlen+0x26>
- 1bc:	0505                	addi	a0,a0,1
- 1be:	87aa                	mv	a5,a0
- 1c0:	4685                	li	a3,1
- 1c2:	9e89                	subw	a3,a3,a0
- 1c4:	00f6853b          	addw	a0,a3,a5
- 1c8:	0785                	addi	a5,a5,1
- 1ca:	fff7c703          	lbu	a4,-1(a5)
- 1ce:	fb7d                	bnez	a4,1c4 <strlen+0x14>
-    ;
-  return n;
-}
- 1d0:	6422                	ld	s0,8(sp)
- 1d2:	0141                	addi	sp,sp,16
- 1d4:	8082                	ret
-  for(n = 0; s[n]; n++)
- 1d6:	4501                	li	a0,0
- 1d8:	bfe5                	j	1d0 <strlen+0x20>
-
-00000000000001da <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 1da:	1141                	addi	sp,sp,-16
- 1dc:	e422                	sd	s0,8(sp)
- 1de:	0800                	addi	s0,sp,16
-  char *cdst = (char *) dst;
-  int i;
-  for(i = 0; i < n; i++){
- 1e0:	ce09                	beqz	a2,1fa <memset+0x20>
- 1e2:	87aa                	mv	a5,a0
- 1e4:	fff6071b          	addiw	a4,a2,-1
- 1e8:	1702                	slli	a4,a4,0x20
- 1ea:	9301                	srli	a4,a4,0x20
- 1ec:	0705                	addi	a4,a4,1
- 1ee:	972a                	add	a4,a4,a0
-    cdst[i] = c;
- 1f0:	00b78023          	sb	a1,0(a5)
-  for(i = 0; i < n; i++){
- 1f4:	0785                	addi	a5,a5,1
- 1f6:	fee79de3          	bne	a5,a4,1f0 <memset+0x16>
-  }
-  return dst;
-}
- 1fa:	6422                	ld	s0,8(sp)
- 1fc:	0141                	addi	sp,sp,16
- 1fe:	8082                	ret
-
-0000000000000200 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 200:	1141                	addi	sp,sp,-16
- 202:	e422                	sd	s0,8(sp)
- 204:	0800                	addi	s0,sp,16
-  for(; *s; s++)
- 206:	00054783          	lbu	a5,0(a0)
- 20a:	cb99                	beqz	a5,220 <strchr+0x20>
-    if(*s == c)
- 20c:	00f58763          	beq	a1,a5,21a <strchr+0x1a>
-  for(; *s; s++)
- 210:	0505                	addi	a0,a0,1
- 212:	00054783          	lbu	a5,0(a0)
- 216:	fbfd                	bnez	a5,20c <strchr+0xc>
-      return (char*)s;
-  return 0;
- 218:	4501                	li	a0,0
-}
- 21a:	6422                	ld	s0,8(sp)
- 21c:	0141                	addi	sp,sp,16
- 21e:	8082                	ret
-  return 0;
- 220:	4501                	li	a0,0
- 222:	bfe5                	j	21a <strchr+0x1a>
-
-0000000000000224 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 224:	711d                	addi	sp,sp,-96
- 226:	ec86                	sd	ra,88(sp)
- 228:	e8a2                	sd	s0,80(sp)
- 22a:	e4a6                	sd	s1,72(sp)
- 22c:	e0ca                	sd	s2,64(sp)
- 22e:	fc4e                	sd	s3,56(sp)
- 230:	f852                	sd	s4,48(sp)
- 232:	f456                	sd	s5,40(sp)
- 234:	f05a                	sd	s6,32(sp)
- 236:	ec5e                	sd	s7,24(sp)
- 238:	1080                	addi	s0,sp,96
- 23a:	8baa                	mv	s7,a0
- 23c:	8a2e                	mv	s4,a1
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 23e:	892a                	mv	s2,a0
- 240:	4481                	li	s1,0
-    cc = read(0, &c, 1);
-    if(cc < 1)
-      break;
-    buf[i++] = c;
-    if(c == '\n' || c == '\r')
- 242:	4aa9                	li	s5,10
- 244:	4b35                	li	s6,13
-  for(i=0; i+1 < max; ){
- 246:	89a6                	mv	s3,s1
- 248:	2485                	addiw	s1,s1,1
- 24a:	0344d863          	bge	s1,s4,27a <gets+0x56>
-    cc = read(0, &c, 1);
- 24e:	4605                	li	a2,1
- 250:	faf40593          	addi	a1,s0,-81
- 254:	4501                	li	a0,0
- 256:	00000097          	auipc	ra,0x0
- 25a:	1a0080e7          	jalr	416(ra) # 3f6 <read>
-    if(cc < 1)
- 25e:	00a05e63          	blez	a0,27a <gets+0x56>
-    buf[i++] = c;
- 262:	faf44783          	lbu	a5,-81(s0)
- 266:	00f90023          	sb	a5,0(s2)
-    if(c == '\n' || c == '\r')
- 26a:	01578763          	beq	a5,s5,278 <gets+0x54>
- 26e:	0905                	addi	s2,s2,1
- 270:	fd679be3          	bne	a5,s6,246 <gets+0x22>
-  for(i=0; i+1 < max; ){
- 274:	89a6                	mv	s3,s1
- 276:	a011                	j	27a <gets+0x56>
- 278:	89a6                	mv	s3,s1
-      break;
-  }
-  buf[i] = '\0';
- 27a:	99de                	add	s3,s3,s7
- 27c:	00098023          	sb	zero,0(s3)
-  return buf;
-}
- 280:	855e                	mv	a0,s7
- 282:	60e6                	ld	ra,88(sp)
- 284:	6446                	ld	s0,80(sp)
- 286:	64a6                	ld	s1,72(sp)
- 288:	6906                	ld	s2,64(sp)
- 28a:	79e2                	ld	s3,56(sp)
- 28c:	7a42                	ld	s4,48(sp)
- 28e:	7aa2                	ld	s5,40(sp)
- 290:	7b02                	ld	s6,32(sp)
- 292:	6be2                	ld	s7,24(sp)
- 294:	6125                	addi	sp,sp,96
- 296:	8082                	ret
-
-0000000000000298 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 298:	1101                	addi	sp,sp,-32
- 29a:	ec06                	sd	ra,24(sp)
- 29c:	e822                	sd	s0,16(sp)
- 29e:	e426                	sd	s1,8(sp)
- 2a0:	e04a                	sd	s2,0(sp)
- 2a2:	1000                	addi	s0,sp,32
- 2a4:	892e                	mv	s2,a1
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 2a6:	4581                	li	a1,0
- 2a8:	00000097          	auipc	ra,0x0
- 2ac:	176080e7          	jalr	374(ra) # 41e <open>
-  if(fd < 0)
- 2b0:	02054563          	bltz	a0,2da <stat+0x42>
- 2b4:	84aa                	mv	s1,a0
-    return -1;
-  r = fstat(fd, st);
- 2b6:	85ca                	mv	a1,s2
- 2b8:	00000097          	auipc	ra,0x0
- 2bc:	17e080e7          	jalr	382(ra) # 436 <fstat>
- 2c0:	892a                	mv	s2,a0
-  close(fd);
- 2c2:	8526                	mv	a0,s1
- 2c4:	00000097          	auipc	ra,0x0
- 2c8:	142080e7          	jalr	322(ra) # 406 <close>
-  return r;
-}
- 2cc:	854a                	mv	a0,s2
- 2ce:	60e2                	ld	ra,24(sp)
- 2d0:	6442                	ld	s0,16(sp)
- 2d2:	64a2                	ld	s1,8(sp)
- 2d4:	6902                	ld	s2,0(sp)
- 2d6:	6105                	addi	sp,sp,32
- 2d8:	8082                	ret
-    return -1;
- 2da:	597d                	li	s2,-1
- 2dc:	bfc5                	j	2cc <stat+0x34>
-
-00000000000002de <atoi>:
-
-int
-atoi(const char *s)
-{
- 2de:	1141                	addi	sp,sp,-16
- 2e0:	e422                	sd	s0,8(sp)
- 2e2:	0800                	addi	s0,sp,16
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 2e4:	00054603          	lbu	a2,0(a0)
- 2e8:	fd06079b          	addiw	a5,a2,-48
- 2ec:	0ff7f793          	andi	a5,a5,255
- 2f0:	4725                	li	a4,9
- 2f2:	02f76963          	bltu	a4,a5,324 <atoi+0x46>
- 2f6:	86aa                	mv	a3,a0
-  n = 0;
- 2f8:	4501                	li	a0,0
-  while('0' <= *s && *s <= '9')
- 2fa:	45a5                	li	a1,9
-    n = n*10 + *s++ - '0';
- 2fc:	0685                	addi	a3,a3,1
- 2fe:	0025179b          	slliw	a5,a0,0x2
- 302:	9fa9                	addw	a5,a5,a0
- 304:	0017979b          	slliw	a5,a5,0x1
- 308:	9fb1                	addw	a5,a5,a2
- 30a:	fd07851b          	addiw	a0,a5,-48
-  while('0' <= *s && *s <= '9')
- 30e:	0006c603          	lbu	a2,0(a3)
- 312:	fd06071b          	addiw	a4,a2,-48
- 316:	0ff77713          	andi	a4,a4,255
- 31a:	fee5f1e3          	bgeu	a1,a4,2fc <atoi+0x1e>
-  return n;
-}
- 31e:	6422                	ld	s0,8(sp)
- 320:	0141                	addi	sp,sp,16
- 322:	8082                	ret
-  n = 0;
- 324:	4501                	li	a0,0
- 326:	bfe5                	j	31e <atoi+0x40>
-
-0000000000000328 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 328:	1141                	addi	sp,sp,-16
- 32a:	e422                	sd	s0,8(sp)
- 32c:	0800                	addi	s0,sp,16
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  if (src > dst) {
- 32e:	02b57663          	bgeu	a0,a1,35a <memmove+0x32>
-    while(n-- > 0)
- 332:	02c05163          	blez	a2,354 <memmove+0x2c>
- 336:	fff6079b          	addiw	a5,a2,-1
- 33a:	1782                	slli	a5,a5,0x20
- 33c:	9381                	srli	a5,a5,0x20
- 33e:	0785                	addi	a5,a5,1
- 340:	97aa                	add	a5,a5,a0
-  dst = vdst;
- 342:	872a                	mv	a4,a0
-      *dst++ = *src++;
- 344:	0585                	addi	a1,a1,1
- 346:	0705                	addi	a4,a4,1
- 348:	fff5c683          	lbu	a3,-1(a1)
- 34c:	fed70fa3          	sb	a3,-1(a4)
-    while(n-- > 0)
- 350:	fee79ae3          	bne	a5,a4,344 <memmove+0x1c>
-    src += n;
-    while(n-- > 0)
-      *--dst = *--src;
-  }
-  return vdst;
-}
- 354:	6422                	ld	s0,8(sp)
- 356:	0141                	addi	sp,sp,16
- 358:	8082                	ret
-    dst += n;
- 35a:	00c50733          	add	a4,a0,a2
-    src += n;
- 35e:	95b2                	add	a1,a1,a2
-    while(n-- > 0)
- 360:	fec05ae3          	blez	a2,354 <memmove+0x2c>
- 364:	fff6079b          	addiw	a5,a2,-1
- 368:	1782                	slli	a5,a5,0x20
- 36a:	9381                	srli	a5,a5,0x20
- 36c:	fff7c793          	not	a5,a5
- 370:	97ba                	add	a5,a5,a4
-      *--dst = *--src;
- 372:	15fd                	addi	a1,a1,-1
- 374:	177d                	addi	a4,a4,-1
- 376:	0005c683          	lbu	a3,0(a1)
- 37a:	00d70023          	sb	a3,0(a4)
-    while(n-- > 0)
- 37e:	fee79ae3          	bne	a5,a4,372 <memmove+0x4a>
- 382:	bfc9                	j	354 <memmove+0x2c>
-
-0000000000000384 <memcmp>:
-
-int
-memcmp(const void *s1, const void *s2, uint n)
-{
- 384:	1141                	addi	sp,sp,-16
- 386:	e422                	sd	s0,8(sp)
- 388:	0800                	addi	s0,sp,16
-  const char *p1 = s1, *p2 = s2;
-  while (n-- > 0) {
- 38a:	ca05                	beqz	a2,3ba <memcmp+0x36>
- 38c:	fff6069b          	addiw	a3,a2,-1
- 390:	1682                	slli	a3,a3,0x20
- 392:	9281                	srli	a3,a3,0x20
- 394:	0685                	addi	a3,a3,1
- 396:	96aa                	add	a3,a3,a0
-    if (*p1 != *p2) {
- 398:	00054783          	lbu	a5,0(a0)
- 39c:	0005c703          	lbu	a4,0(a1)
- 3a0:	00e79863          	bne	a5,a4,3b0 <memcmp+0x2c>
-      return *p1 - *p2;
-    }
-    p1++;
- 3a4:	0505                	addi	a0,a0,1
-    p2++;
- 3a6:	0585                	addi	a1,a1,1
-  while (n-- > 0) {
- 3a8:	fed518e3          	bne	a0,a3,398 <memcmp+0x14>
-  }
-  return 0;
- 3ac:	4501                	li	a0,0
- 3ae:	a019                	j	3b4 <memcmp+0x30>
-      return *p1 - *p2;
- 3b0:	40e7853b          	subw	a0,a5,a4
-}
- 3b4:	6422                	ld	s0,8(sp)
- 3b6:	0141                	addi	sp,sp,16
- 3b8:	8082                	ret
-  return 0;
- 3ba:	4501                	li	a0,0
- 3bc:	bfe5                	j	3b4 <memcmp+0x30>
-
-00000000000003be <memcpy>:
-
-void *
-memcpy(void *dst, const void *src, uint n)
-{
- 3be:	1141                	addi	sp,sp,-16
- 3c0:	e406                	sd	ra,8(sp)
- 3c2:	e022                	sd	s0,0(sp)
- 3c4:	0800                	addi	s0,sp,16
-  return memmove(dst, src, n);
- 3c6:	00000097          	auipc	ra,0x0
- 3ca:	f62080e7          	jalr	-158(ra) # 328 <memmove>
-}
- 3ce:	60a2                	ld	ra,8(sp)
- 3d0:	6402                	ld	s0,0(sp)
- 3d2:	0141                	addi	sp,sp,16
- 3d4:	8082                	ret
-
-00000000000003d6 <fork>:
-# generated by usys.pl - do not edit
-#include "kernel/syscall.h"
-.global fork
-fork:
- li a7, SYS_fork
- 3d6:	4885                	li	a7,1
- ecall
- 3d8:	00000073          	ecall
- ret
- 3dc:	8082                	ret
-
-00000000000003de <exit>:
-.global exit
-exit:
- li a7, SYS_exit
- 3de:	4889                	li	a7,2
- ecall
- 3e0:	00000073          	ecall
- ret
- 3e4:	8082                	ret
-
-00000000000003e6 <wait>:
-.global wait
-wait:
- li a7, SYS_wait
- 3e6:	488d                	li	a7,3
- ecall
- 3e8:	00000073          	ecall
- ret
- 3ec:	8082                	ret
-
-00000000000003ee <pipe>:
-.global pipe
-pipe:
- li a7, SYS_pipe
- 3ee:	4891                	li	a7,4
- ecall
- 3f0:	00000073          	ecall
- ret
- 3f4:	8082                	ret
-
-00000000000003f6 <read>:
-.global read
-read:
- li a7, SYS_read
- 3f6:	4895                	li	a7,5
- ecall
- 3f8:	00000073          	ecall
- ret
- 3fc:	8082                	ret
-
-00000000000003fe <write>:
-.global write
-write:
- li a7, SYS_write
- 3fe:	48c1                	li	a7,16
- ecall
- 400:	00000073          	ecall
- ret
- 404:	8082                	ret
-
-0000000000000406 <close>:
-.global close
-close:
- li a7, SYS_close
- 406:	48d5                	li	a7,21
- ecall
- 408:	00000073          	ecall
- ret
- 40c:	8082                	ret
-
-000000000000040e <kill>:
-.global kill
-kill:
- li a7, SYS_kill
- 40e:	4899                	li	a7,6
- ecall
- 410:	00000073          	ecall
- ret
- 414:	8082                	ret
-
-0000000000000416 <exec>:
-.global exec
-exec:
- li a7, SYS_exec
- 416:	489d                	li	a7,7
- ecall
- 418:	00000073          	ecall
- ret
- 41c:	8082                	ret
-
-000000000000041e <open>:
-.global open
-open:
- li a7, SYS_open
- 41e:	48bd                	li	a7,15
- ecall
- 420:	00000073          	ecall
- ret
- 424:	8082                	ret
-
-0000000000000426 <mknod>:
-.global mknod
-mknod:
- li a7, SYS_mknod
- 426:	48c5                	li	a7,17
- ecall
- 428:	00000073          	ecall
- ret
- 42c:	8082                	ret
-
-000000000000042e <unlink>:
-.global unlink
-unlink:
- li a7, SYS_unlink
- 42e:	48c9                	li	a7,18
- ecall
- 430:	00000073          	ecall
- ret
- 434:	8082                	ret
-
-0000000000000436 <fstat>:
-.global fstat
-fstat:
- li a7, SYS_fstat
- 436:	48a1                	li	a7,8
- ecall
- 438:	00000073          	ecall
- ret
- 43c:	8082                	ret
-
-000000000000043e <link>:
-.global link
-link:
- li a7, SYS_link
- 43e:	48cd                	li	a7,19
- ecall
- 440:	00000073          	ecall
- ret
- 444:	8082                	ret
-
-0000000000000446 <mkdir>:
-.global mkdir
-mkdir:
- li a7, SYS_mkdir
- 446:	48d1                	li	a7,20
- ecall
- 448:	00000073          	ecall
- ret
- 44c:	8082                	ret
-
-000000000000044e <chdir>:
-.global chdir
-chdir:
- li a7, SYS_chdir
- 44e:	48a5                	li	a7,9
- ecall
- 450:	00000073          	ecall
- ret
- 454:	8082                	ret
-
-0000000000000456 <dup>:
-.global dup
-dup:
- li a7, SYS_dup
- 456:	48a9                	li	a7,10
- ecall
- 458:	00000073          	ecall
- ret
- 45c:	8082                	ret
-
-000000000000045e <getpid>:
-.global getpid
-getpid:
- li a7, SYS_getpid
- 45e:	48ad                	li	a7,11
- ecall
- 460:	00000073          	ecall
- ret
- 464:	8082                	ret
-
-0000000000000466 <sbrk>:
-.global sbrk
-sbrk:
- li a7, SYS_sbrk
- 466:	48b1                	li	a7,12
- ecall
- 468:	00000073          	ecall
- ret
- 46c:	8082                	ret
-
-000000000000046e <sleep>:
-.global sleep
-sleep:
- li a7, SYS_sleep
- 46e:	48b5                	li	a7,13
- ecall
- 470:	00000073          	ecall
- ret
- 474:	8082                	ret
-
-0000000000000476 <uptime>:
-.global uptime
-uptime:
- li a7, SYS_uptime
- 476:	48b9                	li	a7,14
- ecall
- 478:	00000073          	ecall
- ret
- 47c:	8082                	ret
-
-000000000000047e <pause_system>:
-.global pause_system
-pause_system:
- li a7, SYS_pause_system
- 47e:	48d9                	li	a7,22
- ecall
- 480:	00000073          	ecall
- ret
- 484:	8082                	ret
-
-0000000000000486 <kill_system>:
-.global kill_system
-kill_system:
- li a7, SYS_kill_system
- 486:	48dd                	li	a7,23
- ecall
- 488:	00000073          	ecall
- ret
- 48c:	8082                	ret
-
-000000000000048e <print_stats>:
-.global print_stats
-print_stats:
- li a7, SYS_print_stats
- 48e:	48e1                	li	a7,24
- ecall
- 490:	00000073          	ecall
- ret
- 494:	8082                	ret
-
-0000000000000496 <get_cpu>:
-.global get_cpu
-get_cpu:
- li a7, SYS_get_cpu
- 496:	48e5                	li	a7,25
- ecall
- 498:	00000073          	ecall
- ret
- 49c:	8082                	ret
-
-000000000000049e <set_cpu>:
-.global set_cpu
-set_cpu:
- li a7, SYS_set_cpu
- 49e:	48e9                	li	a7,26
- ecall
- 4a0:	00000073          	ecall
- ret
- 4a4:	8082                	ret
-
-00000000000004a6 <putc>:
-
-static char digits[] = "0123456789ABCDEF";
-
-static void
-putc(int fd, char c)
-{
- 4a6:	1101                	addi	sp,sp,-32
- 4a8:	ec06                	sd	ra,24(sp)
- 4aa:	e822                	sd	s0,16(sp)
- 4ac:	1000                	addi	s0,sp,32
- 4ae:	feb407a3          	sb	a1,-17(s0)
-  write(fd, &c, 1);
- 4b2:	4605                	li	a2,1
- 4b4:	fef40593          	addi	a1,s0,-17
- 4b8:	00000097          	auipc	ra,0x0
- 4bc:	f46080e7          	jalr	-186(ra) # 3fe <write>
-}
- 4c0:	60e2                	ld	ra,24(sp)
- 4c2:	6442                	ld	s0,16(sp)
- 4c4:	6105                	addi	sp,sp,32
- 4c6:	8082                	ret
-
-00000000000004c8 <printint>:
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 4c8:	7139                	addi	sp,sp,-64
- 4ca:	fc06                	sd	ra,56(sp)
- 4cc:	f822                	sd	s0,48(sp)
- 4ce:	f426                	sd	s1,40(sp)
- 4d0:	f04a                	sd	s2,32(sp)
- 4d2:	ec4e                	sd	s3,24(sp)
- 4d4:	0080                	addi	s0,sp,64
- 4d6:	84aa                	mv	s1,a0
-  char buf[16];
-  int i, neg;
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
- 4d8:	c299                	beqz	a3,4de <printint+0x16>
- 4da:	0805c863          	bltz	a1,56a <printint+0xa2>
-    neg = 1;
-    x = -xx;
-  } else {
-    x = xx;
- 4de:	2581                	sext.w	a1,a1
-  neg = 0;
- 4e0:	4881                	li	a7,0
- 4e2:	fc040693          	addi	a3,s0,-64
-  }
-
-  i = 0;
- 4e6:	4701                	li	a4,0
-  do{
-    buf[i++] = digits[x % base];
- 4e8:	2601                	sext.w	a2,a2
- 4ea:	00000517          	auipc	a0,0x0
- 4ee:	48650513          	addi	a0,a0,1158 # 970 <digits>
- 4f2:	883a                	mv	a6,a4
- 4f4:	2705                	addiw	a4,a4,1
- 4f6:	02c5f7bb          	remuw	a5,a1,a2
- 4fa:	1782                	slli	a5,a5,0x20
- 4fc:	9381                	srli	a5,a5,0x20
- 4fe:	97aa                	add	a5,a5,a0
- 500:	0007c783          	lbu	a5,0(a5)
- 504:	00f68023          	sb	a5,0(a3)
-  }while((x /= base) != 0);
- 508:	0005879b          	sext.w	a5,a1
- 50c:	02c5d5bb          	divuw	a1,a1,a2
- 510:	0685                	addi	a3,a3,1
- 512:	fec7f0e3          	bgeu	a5,a2,4f2 <printint+0x2a>
-  if(neg)
- 516:	00088b63          	beqz	a7,52c <printint+0x64>
-    buf[i++] = '-';
- 51a:	fd040793          	addi	a5,s0,-48
- 51e:	973e                	add	a4,a4,a5
- 520:	02d00793          	li	a5,45
- 524:	fef70823          	sb	a5,-16(a4)
- 528:	0028071b          	addiw	a4,a6,2
-
-  while(--i >= 0)
- 52c:	02e05863          	blez	a4,55c <printint+0x94>
- 530:	fc040793          	addi	a5,s0,-64
- 534:	00e78933          	add	s2,a5,a4
- 538:	fff78993          	addi	s3,a5,-1
- 53c:	99ba                	add	s3,s3,a4
- 53e:	377d                	addiw	a4,a4,-1
- 540:	1702                	slli	a4,a4,0x20
- 542:	9301                	srli	a4,a4,0x20
- 544:	40e989b3          	sub	s3,s3,a4
-    putc(fd, buf[i]);
- 548:	fff94583          	lbu	a1,-1(s2)
- 54c:	8526                	mv	a0,s1
- 54e:	00000097          	auipc	ra,0x0
- 552:	f58080e7          	jalr	-168(ra) # 4a6 <putc>
-  while(--i >= 0)
- 556:	197d                	addi	s2,s2,-1
- 558:	ff3918e3          	bne	s2,s3,548 <printint+0x80>
-}
- 55c:	70e2                	ld	ra,56(sp)
- 55e:	7442                	ld	s0,48(sp)
- 560:	74a2                	ld	s1,40(sp)
- 562:	7902                	ld	s2,32(sp)
- 564:	69e2                	ld	s3,24(sp)
- 566:	6121                	addi	sp,sp,64
- 568:	8082                	ret
-    x = -xx;
- 56a:	40b005bb          	negw	a1,a1
-    neg = 1;
- 56e:	4885                	li	a7,1
-    x = -xx;
- 570:	bf8d                	j	4e2 <printint+0x1a>
-
-0000000000000572 <vprintf>:
-}
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-vprintf(int fd, const char *fmt, va_list ap)
-{
- 572:	7119                	addi	sp,sp,-128
- 574:	fc86                	sd	ra,120(sp)
- 576:	f8a2                	sd	s0,112(sp)
- 578:	f4a6                	sd	s1,104(sp)
- 57a:	f0ca                	sd	s2,96(sp)
- 57c:	ecce                	sd	s3,88(sp)
- 57e:	e8d2                	sd	s4,80(sp)
- 580:	e4d6                	sd	s5,72(sp)
- 582:	e0da                	sd	s6,64(sp)
- 584:	fc5e                	sd	s7,56(sp)
- 586:	f862                	sd	s8,48(sp)
- 588:	f466                	sd	s9,40(sp)
- 58a:	f06a                	sd	s10,32(sp)
- 58c:	ec6e                	sd	s11,24(sp)
- 58e:	0100                	addi	s0,sp,128
-  char *s;
-  int c, i, state;
-
-  state = 0;
-  for(i = 0; fmt[i]; i++){
- 590:	0005c903          	lbu	s2,0(a1)
- 594:	18090f63          	beqz	s2,732 <vprintf+0x1c0>
- 598:	8aaa                	mv	s5,a0
- 59a:	8b32                	mv	s6,a2
- 59c:	00158493          	addi	s1,a1,1
-  state = 0;
- 5a0:	4981                	li	s3,0
-      if(c == '%'){
-        state = '%';
-      } else {
-        putc(fd, c);
-      }
-    } else if(state == '%'){
- 5a2:	02500a13          	li	s4,37
-      if(c == 'd'){
- 5a6:	06400c13          	li	s8,100
-        printint(fd, va_arg(ap, int), 10, 1);
-      } else if(c == 'l') {
- 5aa:	06c00c93          	li	s9,108
-        printint(fd, va_arg(ap, uint64), 10, 0);
-      } else if(c == 'x') {
- 5ae:	07800d13          	li	s10,120
-        printint(fd, va_arg(ap, int), 16, 0);
-      } else if(c == 'p') {
- 5b2:	07000d93          	li	s11,112
-    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
- 5b6:	00000b97          	auipc	s7,0x0
- 5ba:	3bab8b93          	addi	s7,s7,954 # 970 <digits>
- 5be:	a839                	j	5dc <vprintf+0x6a>
-        putc(fd, c);
- 5c0:	85ca                	mv	a1,s2
- 5c2:	8556                	mv	a0,s5
- 5c4:	00000097          	auipc	ra,0x0
- 5c8:	ee2080e7          	jalr	-286(ra) # 4a6 <putc>
- 5cc:	a019                	j	5d2 <vprintf+0x60>
-    } else if(state == '%'){
- 5ce:	01498f63          	beq	s3,s4,5ec <vprintf+0x7a>
-  for(i = 0; fmt[i]; i++){
- 5d2:	0485                	addi	s1,s1,1
- 5d4:	fff4c903          	lbu	s2,-1(s1)
- 5d8:	14090d63          	beqz	s2,732 <vprintf+0x1c0>
-    c = fmt[i] & 0xff;
- 5dc:	0009079b          	sext.w	a5,s2
-    if(state == 0){
- 5e0:	fe0997e3          	bnez	s3,5ce <vprintf+0x5c>
-      if(c == '%'){
- 5e4:	fd479ee3          	bne	a5,s4,5c0 <vprintf+0x4e>
-        state = '%';
- 5e8:	89be                	mv	s3,a5
- 5ea:	b7e5                	j	5d2 <vprintf+0x60>
-      if(c == 'd'){
- 5ec:	05878063          	beq	a5,s8,62c <vprintf+0xba>
-      } else if(c == 'l') {
- 5f0:	05978c63          	beq	a5,s9,648 <vprintf+0xd6>
-      } else if(c == 'x') {
- 5f4:	07a78863          	beq	a5,s10,664 <vprintf+0xf2>
-      } else if(c == 'p') {
- 5f8:	09b78463          	beq	a5,s11,680 <vprintf+0x10e>
-        printptr(fd, va_arg(ap, uint64));
-      } else if(c == 's'){
- 5fc:	07300713          	li	a4,115
- 600:	0ce78663          	beq	a5,a4,6cc <vprintf+0x15a>
-          s = "(null)";
-        while(*s != 0){
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 604:	06300713          	li	a4,99
- 608:	0ee78e63          	beq	a5,a4,704 <vprintf+0x192>
-        putc(fd, va_arg(ap, uint));
-      } else if(c == '%'){
- 60c:	11478863          	beq	a5,s4,71c <vprintf+0x1aa>
-        putc(fd, c);
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
- 610:	85d2                	mv	a1,s4
- 612:	8556                	mv	a0,s5
- 614:	00000097          	auipc	ra,0x0
- 618:	e92080e7          	jalr	-366(ra) # 4a6 <putc>
-        putc(fd, c);
- 61c:	85ca                	mv	a1,s2
- 61e:	8556                	mv	a0,s5
- 620:	00000097          	auipc	ra,0x0
- 624:	e86080e7          	jalr	-378(ra) # 4a6 <putc>
-      }
-      state = 0;
- 628:	4981                	li	s3,0
- 62a:	b765                	j	5d2 <vprintf+0x60>
-        printint(fd, va_arg(ap, int), 10, 1);
- 62c:	008b0913          	addi	s2,s6,8
- 630:	4685                	li	a3,1
- 632:	4629                	li	a2,10
- 634:	000b2583          	lw	a1,0(s6)
- 638:	8556                	mv	a0,s5
- 63a:	00000097          	auipc	ra,0x0
- 63e:	e8e080e7          	jalr	-370(ra) # 4c8 <printint>
- 642:	8b4a                	mv	s6,s2
-      state = 0;
- 644:	4981                	li	s3,0
- 646:	b771                	j	5d2 <vprintf+0x60>
-        printint(fd, va_arg(ap, uint64), 10, 0);
- 648:	008b0913          	addi	s2,s6,8
- 64c:	4681                	li	a3,0
- 64e:	4629                	li	a2,10
- 650:	000b2583          	lw	a1,0(s6)
- 654:	8556                	mv	a0,s5
- 656:	00000097          	auipc	ra,0x0
- 65a:	e72080e7          	jalr	-398(ra) # 4c8 <printint>
- 65e:	8b4a                	mv	s6,s2
-      state = 0;
- 660:	4981                	li	s3,0
- 662:	bf85                	j	5d2 <vprintf+0x60>
-        printint(fd, va_arg(ap, int), 16, 0);
- 664:	008b0913          	addi	s2,s6,8
- 668:	4681                	li	a3,0
- 66a:	4641                	li	a2,16
- 66c:	000b2583          	lw	a1,0(s6)
- 670:	8556                	mv	a0,s5
- 672:	00000097          	auipc	ra,0x0
- 676:	e56080e7          	jalr	-426(ra) # 4c8 <printint>
- 67a:	8b4a                	mv	s6,s2
-      state = 0;
- 67c:	4981                	li	s3,0
- 67e:	bf91                	j	5d2 <vprintf+0x60>
-        printptr(fd, va_arg(ap, uint64));
- 680:	008b0793          	addi	a5,s6,8
- 684:	f8f43423          	sd	a5,-120(s0)
- 688:	000b3983          	ld	s3,0(s6)
-  putc(fd, '0');
- 68c:	03000593          	li	a1,48
- 690:	8556                	mv	a0,s5
- 692:	00000097          	auipc	ra,0x0
- 696:	e14080e7          	jalr	-492(ra) # 4a6 <putc>
-  putc(fd, 'x');
- 69a:	85ea                	mv	a1,s10
- 69c:	8556                	mv	a0,s5
- 69e:	00000097          	auipc	ra,0x0
- 6a2:	e08080e7          	jalr	-504(ra) # 4a6 <putc>
- 6a6:	4941                	li	s2,16
-    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
- 6a8:	03c9d793          	srli	a5,s3,0x3c
- 6ac:	97de                	add	a5,a5,s7
- 6ae:	0007c583          	lbu	a1,0(a5)
- 6b2:	8556                	mv	a0,s5
- 6b4:	00000097          	auipc	ra,0x0
- 6b8:	df2080e7          	jalr	-526(ra) # 4a6 <putc>
-  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
- 6bc:	0992                	slli	s3,s3,0x4
- 6be:	397d                	addiw	s2,s2,-1
- 6c0:	fe0914e3          	bnez	s2,6a8 <vprintf+0x136>
-        printptr(fd, va_arg(ap, uint64));
- 6c4:	f8843b03          	ld	s6,-120(s0)
-      state = 0;
- 6c8:	4981                	li	s3,0
- 6ca:	b721                	j	5d2 <vprintf+0x60>
-        s = va_arg(ap, char*);
- 6cc:	008b0993          	addi	s3,s6,8
- 6d0:	000b3903          	ld	s2,0(s6)
-        if(s == 0)
- 6d4:	02090163          	beqz	s2,6f6 <vprintf+0x184>
-        while(*s != 0){
- 6d8:	00094583          	lbu	a1,0(s2)
- 6dc:	c9a1                	beqz	a1,72c <vprintf+0x1ba>
-          putc(fd, *s);
- 6de:	8556                	mv	a0,s5
- 6e0:	00000097          	auipc	ra,0x0
- 6e4:	dc6080e7          	jalr	-570(ra) # 4a6 <putc>
-          s++;
- 6e8:	0905                	addi	s2,s2,1
-        while(*s != 0){
- 6ea:	00094583          	lbu	a1,0(s2)
- 6ee:	f9e5                	bnez	a1,6de <vprintf+0x16c>
-        s = va_arg(ap, char*);
- 6f0:	8b4e                	mv	s6,s3
-      state = 0;
- 6f2:	4981                	li	s3,0
- 6f4:	bdf9                	j	5d2 <vprintf+0x60>
-          s = "(null)";
- 6f6:	00000917          	auipc	s2,0x0
- 6fa:	27290913          	addi	s2,s2,626 # 968 <malloc+0x12c>
-        while(*s != 0){
- 6fe:	02800593          	li	a1,40
- 702:	bff1                	j	6de <vprintf+0x16c>
-        putc(fd, va_arg(ap, uint));
- 704:	008b0913          	addi	s2,s6,8
- 708:	000b4583          	lbu	a1,0(s6)
- 70c:	8556                	mv	a0,s5
- 70e:	00000097          	auipc	ra,0x0
- 712:	d98080e7          	jalr	-616(ra) # 4a6 <putc>
- 716:	8b4a                	mv	s6,s2
-      state = 0;
- 718:	4981                	li	s3,0
- 71a:	bd65                	j	5d2 <vprintf+0x60>
-        putc(fd, c);
- 71c:	85d2                	mv	a1,s4
- 71e:	8556                	mv	a0,s5
- 720:	00000097          	auipc	ra,0x0
- 724:	d86080e7          	jalr	-634(ra) # 4a6 <putc>
-      state = 0;
- 728:	4981                	li	s3,0
- 72a:	b565                	j	5d2 <vprintf+0x60>
-        s = va_arg(ap, char*);
- 72c:	8b4e                	mv	s6,s3
-      state = 0;
- 72e:	4981                	li	s3,0
- 730:	b54d                	j	5d2 <vprintf+0x60>
-    }
-  }
-}
- 732:	70e6                	ld	ra,120(sp)
- 734:	7446                	ld	s0,112(sp)
- 736:	74a6                	ld	s1,104(sp)
- 738:	7906                	ld	s2,96(sp)
- 73a:	69e6                	ld	s3,88(sp)
- 73c:	6a46                	ld	s4,80(sp)
- 73e:	6aa6                	ld	s5,72(sp)
- 740:	6b06                	ld	s6,64(sp)
- 742:	7be2                	ld	s7,56(sp)
- 744:	7c42                	ld	s8,48(sp)
- 746:	7ca2                	ld	s9,40(sp)
- 748:	7d02                	ld	s10,32(sp)
- 74a:	6de2                	ld	s11,24(sp)
- 74c:	6109                	addi	sp,sp,128
- 74e:	8082                	ret
-
-0000000000000750 <fprintf>:
-
-void
-fprintf(int fd, const char *fmt, ...)
-{
- 750:	715d                	addi	sp,sp,-80
- 752:	ec06                	sd	ra,24(sp)
- 754:	e822                	sd	s0,16(sp)
- 756:	1000                	addi	s0,sp,32
- 758:	e010                	sd	a2,0(s0)
- 75a:	e414                	sd	a3,8(s0)
- 75c:	e818                	sd	a4,16(s0)
- 75e:	ec1c                	sd	a5,24(s0)
- 760:	03043023          	sd	a6,32(s0)
- 764:	03143423          	sd	a7,40(s0)
-  va_list ap;
-
-  va_start(ap, fmt);
- 768:	fe843423          	sd	s0,-24(s0)
-  vprintf(fd, fmt, ap);
- 76c:	8622                	mv	a2,s0
- 76e:	00000097          	auipc	ra,0x0
- 772:	e04080e7          	jalr	-508(ra) # 572 <vprintf>
-}
- 776:	60e2                	ld	ra,24(sp)
- 778:	6442                	ld	s0,16(sp)
- 77a:	6161                	addi	sp,sp,80
- 77c:	8082                	ret
-
-000000000000077e <printf>:
-
-void
-printf(const char *fmt, ...)
-{
- 77e:	711d                	addi	sp,sp,-96
- 780:	ec06                	sd	ra,24(sp)
- 782:	e822                	sd	s0,16(sp)
- 784:	1000                	addi	s0,sp,32
- 786:	e40c                	sd	a1,8(s0)
- 788:	e810                	sd	a2,16(s0)
- 78a:	ec14                	sd	a3,24(s0)
- 78c:	f018                	sd	a4,32(s0)
- 78e:	f41c                	sd	a5,40(s0)
- 790:	03043823          	sd	a6,48(s0)
- 794:	03143c23          	sd	a7,56(s0)
-  va_list ap;
-
-  va_start(ap, fmt);
- 798:	00840613          	addi	a2,s0,8
- 79c:	fec43423          	sd	a2,-24(s0)
-  vprintf(1, fmt, ap);
- 7a0:	85aa                	mv	a1,a0
- 7a2:	4505                	li	a0,1
- 7a4:	00000097          	auipc	ra,0x0
- 7a8:	dce080e7          	jalr	-562(ra) # 572 <vprintf>
-}
- 7ac:	60e2                	ld	ra,24(sp)
- 7ae:	6442                	ld	s0,16(sp)
- 7b0:	6125                	addi	sp,sp,96
- 7b2:	8082                	ret
-
-00000000000007b4 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 7b4:	1141                	addi	sp,sp,-16
- 7b6:	e422                	sd	s0,8(sp)
- 7b8:	0800                	addi	s0,sp,16
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
- 7ba:	ff050693          	addi	a3,a0,-16
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 7be:	00000797          	auipc	a5,0x0
- 7c2:	1ca7b783          	ld	a5,458(a5) # 988 <freep>
- 7c6:	a805                	j	7f6 <free+0x42>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-      break;
-  if(bp + bp->s.size == p->s.ptr){
-    bp->s.size += p->s.ptr->s.size;
- 7c8:	4618                	lw	a4,8(a2)
- 7ca:	9db9                	addw	a1,a1,a4
- 7cc:	feb52c23          	sw	a1,-8(a0)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 7d0:	6398                	ld	a4,0(a5)
- 7d2:	6318                	ld	a4,0(a4)
- 7d4:	fee53823          	sd	a4,-16(a0)
- 7d8:	a091                	j	81c <free+0x68>
-  } else
-    bp->s.ptr = p->s.ptr;
-  if(p + p->s.size == bp){
-    p->s.size += bp->s.size;
- 7da:	ff852703          	lw	a4,-8(a0)
- 7de:	9e39                	addw	a2,a2,a4
- 7e0:	c790                	sw	a2,8(a5)
-    p->s.ptr = bp->s.ptr;
- 7e2:	ff053703          	ld	a4,-16(a0)
- 7e6:	e398                	sd	a4,0(a5)
- 7e8:	a099                	j	82e <free+0x7a>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 7ea:	6398                	ld	a4,0(a5)
- 7ec:	00e7e463          	bltu	a5,a4,7f4 <free+0x40>
- 7f0:	00e6ea63          	bltu	a3,a4,804 <free+0x50>
-{
- 7f4:	87ba                	mv	a5,a4
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 7f6:	fed7fae3          	bgeu	a5,a3,7ea <free+0x36>
- 7fa:	6398                	ld	a4,0(a5)
- 7fc:	00e6e463          	bltu	a3,a4,804 <free+0x50>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 800:	fee7eae3          	bltu	a5,a4,7f4 <free+0x40>
-  if(bp + bp->s.size == p->s.ptr){
- 804:	ff852583          	lw	a1,-8(a0)
- 808:	6390                	ld	a2,0(a5)
- 80a:	02059713          	slli	a4,a1,0x20
- 80e:	9301                	srli	a4,a4,0x20
- 810:	0712                	slli	a4,a4,0x4
- 812:	9736                	add	a4,a4,a3
- 814:	fae60ae3          	beq	a2,a4,7c8 <free+0x14>
-    bp->s.ptr = p->s.ptr;
- 818:	fec53823          	sd	a2,-16(a0)
-  if(p + p->s.size == bp){
- 81c:	4790                	lw	a2,8(a5)
- 81e:	02061713          	slli	a4,a2,0x20
- 822:	9301                	srli	a4,a4,0x20
- 824:	0712                	slli	a4,a4,0x4
- 826:	973e                	add	a4,a4,a5
- 828:	fae689e3          	beq	a3,a4,7da <free+0x26>
-  } else
-    p->s.ptr = bp;
- 82c:	e394                	sd	a3,0(a5)
-  freep = p;
- 82e:	00000717          	auipc	a4,0x0
- 832:	14f73d23          	sd	a5,346(a4) # 988 <freep>
-}
- 836:	6422                	ld	s0,8(sp)
- 838:	0141                	addi	sp,sp,16
- 83a:	8082                	ret
-
-000000000000083c <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
- 83c:	7139                	addi	sp,sp,-64
- 83e:	fc06                	sd	ra,56(sp)
- 840:	f822                	sd	s0,48(sp)
- 842:	f426                	sd	s1,40(sp)
- 844:	f04a                	sd	s2,32(sp)
- 846:	ec4e                	sd	s3,24(sp)
- 848:	e852                	sd	s4,16(sp)
- 84a:	e456                	sd	s5,8(sp)
- 84c:	e05a                	sd	s6,0(sp)
- 84e:	0080                	addi	s0,sp,64
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 850:	02051493          	slli	s1,a0,0x20
- 854:	9081                	srli	s1,s1,0x20
- 856:	04bd                	addi	s1,s1,15
- 858:	8091                	srli	s1,s1,0x4
- 85a:	0014899b          	addiw	s3,s1,1
- 85e:	0485                	addi	s1,s1,1
-  if((prevp = freep) == 0){
- 860:	00000517          	auipc	a0,0x0
- 864:	12853503          	ld	a0,296(a0) # 988 <freep>
- 868:	c515                	beqz	a0,894 <malloc+0x58>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 86a:	611c                	ld	a5,0(a0)
-    if(p->s.size >= nunits){
- 86c:	4798                	lw	a4,8(a5)
- 86e:	02977f63          	bgeu	a4,s1,8ac <malloc+0x70>
- 872:	8a4e                	mv	s4,s3
- 874:	0009871b          	sext.w	a4,s3
- 878:	6685                	lui	a3,0x1
- 87a:	00d77363          	bgeu	a4,a3,880 <malloc+0x44>
- 87e:	6a05                	lui	s4,0x1
- 880:	000a0b1b          	sext.w	s6,s4
-  p = sbrk(nu * sizeof(Header));
- 884:	004a1a1b          	slliw	s4,s4,0x4
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
- 888:	00000917          	auipc	s2,0x0
- 88c:	10090913          	addi	s2,s2,256 # 988 <freep>
-  if(p == (char*)-1)
- 890:	5afd                	li	s5,-1
- 892:	a88d                	j	904 <malloc+0xc8>
-    base.s.ptr = freep = prevp = &base;
- 894:	00000797          	auipc	a5,0x0
- 898:	0fc78793          	addi	a5,a5,252 # 990 <base>
- 89c:	00000717          	auipc	a4,0x0
- 8a0:	0ef73623          	sd	a5,236(a4) # 988 <freep>
- 8a4:	e39c                	sd	a5,0(a5)
-    base.s.size = 0;
- 8a6:	0007a423          	sw	zero,8(a5)
-    if(p->s.size >= nunits){
- 8aa:	b7e1                	j	872 <malloc+0x36>
-      if(p->s.size == nunits)
- 8ac:	02e48b63          	beq	s1,a4,8e2 <malloc+0xa6>
-        p->s.size -= nunits;
- 8b0:	4137073b          	subw	a4,a4,s3
- 8b4:	c798                	sw	a4,8(a5)
-        p += p->s.size;
- 8b6:	1702                	slli	a4,a4,0x20
- 8b8:	9301                	srli	a4,a4,0x20
- 8ba:	0712                	slli	a4,a4,0x4
- 8bc:	97ba                	add	a5,a5,a4
-        p->s.size = nunits;
- 8be:	0137a423          	sw	s3,8(a5)
-      freep = prevp;
- 8c2:	00000717          	auipc	a4,0x0
- 8c6:	0ca73323          	sd	a0,198(a4) # 988 <freep>
-      return (void*)(p + 1);
- 8ca:	01078513          	addi	a0,a5,16
-      if((p = morecore(nunits)) == 0)
-        return 0;
-  }
-}
- 8ce:	70e2                	ld	ra,56(sp)
- 8d0:	7442                	ld	s0,48(sp)
- 8d2:	74a2                	ld	s1,40(sp)
- 8d4:	7902                	ld	s2,32(sp)
- 8d6:	69e2                	ld	s3,24(sp)
- 8d8:	6a42                	ld	s4,16(sp)
- 8da:	6aa2                	ld	s5,8(sp)
- 8dc:	6b02                	ld	s6,0(sp)
- 8de:	6121                	addi	sp,sp,64
- 8e0:	8082                	ret
-        prevp->s.ptr = p->s.ptr;
- 8e2:	6398                	ld	a4,0(a5)
- 8e4:	e118                	sd	a4,0(a0)
- 8e6:	bff1                	j	8c2 <malloc+0x86>
-  hp->s.size = nu;
- 8e8:	01652423          	sw	s6,8(a0)
-  free((void*)(hp + 1));
- 8ec:	0541                	addi	a0,a0,16
- 8ee:	00000097          	auipc	ra,0x0
- 8f2:	ec6080e7          	jalr	-314(ra) # 7b4 <free>
-  return freep;
- 8f6:	00093503          	ld	a0,0(s2)
-      if((p = morecore(nunits)) == 0)
- 8fa:	d971                	beqz	a0,8ce <malloc+0x92>
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 8fc:	611c                	ld	a5,0(a0)
-    if(p->s.size >= nunits){
- 8fe:	4798                	lw	a4,8(a5)
- 900:	fa9776e3          	bgeu	a4,s1,8ac <malloc+0x70>
-    if(p == freep)
- 904:	00093703          	ld	a4,0(s2)
- 908:	853e                	mv	a0,a5
- 90a:	fef719e3          	bne	a4,a5,8fc <malloc+0xc0>
-  p = sbrk(nu * sizeof(Header));
- 90e:	8552                	mv	a0,s4
- 910:	00000097          	auipc	ra,0x0
- 914:	b56080e7          	jalr	-1194(ra) # 466 <sbrk>
-  if(p == (char*)-1)
- 918:	fd5518e3          	bne	a0,s5,8e8 <malloc+0xac>
-        return 0;
- 91c:	4501                	li	a0,0
- 91e:	bf45                	j	8ce <malloc+0x92>
diff --git a/user/syscall.c b/user/syscall.c
deleted file mode 100644
index 1893ca8..0000000
--- a/user/syscall.c
+++ /dev/null
@@ -1,44 +0,0 @@
-#include "kernel/param.h"
-#include "kernel/types.h"
-#include "kernel/stat.h"
-#include "user/user.h"
-#include "kernel/fs.h"
-#include "kernel/fcntl.h"
-#include "kernel/syscall.h"
-#include "kernel/memlayout.h"
-#include "kernel/riscv.h"
-
-void pause_system_dem(int interval, int pause_seconds, int loop_size) {
-    int pid = getpid();
-    for (int i = 0; i < loop_size; i++) {
-        if (i % interval == 0 && pid == getpid()) {
-            printf("pause system %d/%d completed.\n", i, loop_size);
-        }
-        if (i == loop_size / 2) {
-            pause_system(pause_seconds);
-        }
-    }
-    printf("\n");
-}
-
-void kill_system_dem(int interval, int loop_size) {
-    int pid = getpid();
-    for (int i = 0; i < loop_size; i++) {
-        if (i % interval == 0 && pid == getpid()) {
-            printf("kill system %d/%d completed.\n", i, loop_size);
-        }
-        if (i == loop_size / 2) {
-            kill_system();
-        }
-    }
-    printf("\n");
-}
-
-
-int
-main(int argc, char *argv[])
-{
-    pause_system_dem(10, 10, 100);
-    kill_system_dem(10, 100);
-    exit(0);
-}
\ No newline at end of file
diff --git a/user/syscall.d b/user/syscall.d
deleted file mode 100644
index b8ad844..0000000
--- a/user/syscall.d
+++ /dev/null
@@ -1,3 +0,0 @@
-user/syscall.o: user/syscall.c kernel/param.h kernel/types.h \
- kernel/stat.h user/user.h kernel/fs.h kernel/fcntl.h kernel/syscall.h \
- kernel/memlayout.h kernel/riscv.h
diff --git a/user/syscall.o b/user/syscall.o
deleted file mode 100644
index e05f3dc..0000000
Binary files a/user/syscall.o and /dev/null differ
diff --git a/user/syscall.sym b/user/syscall.sym
deleted file mode 100644
index ded88a8..0000000
--- a/user/syscall.sym
+++ /dev/null
@@ -1,74 +0,0 @@
-0000000000000000 .text
-0000000000000920 .rodata
-0000000000000988 .sbss
-0000000000000990 .bss
-0000000000000000 .comment
-0000000000000000 .debug_aranges
-0000000000000000 .debug_info
-0000000000000000 .debug_abbrev
-0000000000000000 .debug_line
-0000000000000000 .debug_frame
-0000000000000000 .debug_str
-0000000000000000 .debug_loc
-0000000000000000 .debug_ranges
-0000000000000000 syscall.c
-0000000000000000 ulib.c
-0000000000000000 printf.c
-00000000000004a6 putc
-00000000000004c8 printint
-0000000000000970 digits
-0000000000000000 umalloc.c
-0000000000000988 freep
-0000000000000990 base
-0000000000000168 strcpy
-000000000000077e printf
-0000000000001181 __global_pointer$
-0000000000000328 memmove
-0000000000000426 mknod
-0000000000000224 gets
-0000000000000981 __SDATA_BEGIN__
-000000000000045e getpid
-00000000000003be memcpy
-000000000000048e print_stats
-000000000000083c malloc
-000000000000046e sleep
-00000000000000a0 kill_system_dem
-0000000000000000 pause_system_dem
-00000000000003ee pipe
-00000000000003fe write
-0000000000000436 fstat
-0000000000000750 fprintf
-000000000000040e kill
-0000000000000572 vprintf
-000000000000044e chdir
-000000000000047e pause_system
-0000000000000416 exec
-00000000000003e6 wait
-00000000000003f6 read
-000000000000042e unlink
-000000000000049e set_cpu
-0000000000000496 get_cpu
-0000000000000384 memcmp
-00000000000003d6 fork
-0000000000000486 kill_system
-00000000000009a0 __BSS_END__
-0000000000000466 sbrk
-0000000000000476 uptime
-0000000000000981 __bss_start
-00000000000001da memset
-0000000000000138 main
-0000000000000184 strcmp
-0000000000000456 dup
-0000000000000981 __DATA_BEGIN__
-0000000000000298 stat
-0000000000000981 _edata
-00000000000009a0 _end
-000000000000043e link
-00000000000003de exit
-00000000000002de atoi
-00000000000001b0 strlen
-000000000000041e open
-0000000000000200 strchr
-0000000000000446 mkdir
-0000000000000406 close
-00000000000007b4 free
diff --git a/user/user.h b/user/user.h
index 8b7d3b1..b71ecda 100644
--- a/user/user.h
+++ b/user/user.h
@@ -23,11 +23,6 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
-int pause_system(int);
-int kill_system(void);
-int print_stats(void);
-int set_cpu(int cpu_num);
-int get_cpu(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usertests.asm b/user/usertests.asm
index df3fe2a..fef4ee7 100644
--- a/user/usertests.asm
+++ b/user/usertests.asm
@@ -52,9 +52,9 @@ copyinstr1(char *s)
       printf("open(%p) returned %d, not -1\n", addr, fd);
       3c:	862a                	mv	a2,a0
       3e:	00006517          	auipc	a0,0x6
-      42:	0ba50513          	addi	a0,a0,186 # 60f8 <malloc+0x448>
+      42:	09250513          	addi	a0,a0,146 # 60d0 <malloc+0x448>
       46:	00006097          	auipc	ra,0x6
-      4a:	bac080e7          	jalr	-1108(ra) # 5bf2 <printf>
+      4a:	b84080e7          	jalr	-1148(ra) # 5bca <printf>
       exit(1);
       4e:	4505                	li	a0,1
       50:	00006097          	auipc	ra,0x6
@@ -68,9 +68,9 @@ bsstest(char *s)
 
   for(i = 0; i < sizeof(uninit); i++){
       58:	00009797          	auipc	a5,0x9
-      5c:	65078793          	addi	a5,a5,1616 # 96a8 <uninit>
+      5c:	62878793          	addi	a5,a5,1576 # 9680 <uninit>
       60:	0000c697          	auipc	a3,0xc
-      64:	d5868693          	addi	a3,a3,-680 # bdb8 <buf>
+      64:	d3068693          	addi	a3,a3,-720 # bd90 <buf>
     if(uninit[i] != '\0'){
       68:	0007c703          	lbu	a4,0(a5)
       6c:	e709                	bnez	a4,76 <bsstest+0x1e>
@@ -86,9 +86,9 @@ bsstest(char *s)
       printf("%s: bss test failed\n", s);
       7e:	85aa                	mv	a1,a0
       80:	00006517          	auipc	a0,0x6
-      84:	09850513          	addi	a0,a0,152 # 6118 <malloc+0x468>
+      84:	07050513          	addi	a0,a0,112 # 60f0 <malloc+0x468>
       88:	00006097          	auipc	ra,0x6
-      8c:	b6a080e7          	jalr	-1174(ra) # 5bf2 <printf>
+      8c:	b42080e7          	jalr	-1214(ra) # 5bca <printf>
       exit(1);
       90:	4505                	li	a0,1
       92:	00005097          	auipc	ra,0x5
@@ -105,7 +105,7 @@ bsstest(char *s)
   fd = open("echo", 0);
       a6:	4581                	li	a1,0
       a8:	00006517          	auipc	a0,0x6
-      ac:	08850513          	addi	a0,a0,136 # 6130 <malloc+0x480>
+      ac:	06050513          	addi	a0,a0,96 # 6108 <malloc+0x480>
       b0:	00005097          	auipc	ra,0x5
       b4:	7e2080e7          	jalr	2018(ra) # 5892 <open>
   if(fd < 0){
@@ -116,7 +116,7 @@ bsstest(char *s)
   fd = open("doesnotexist", 0);
       c4:	4581                	li	a1,0
       c6:	00006517          	auipc	a0,0x6
-      ca:	08a50513          	addi	a0,a0,138 # 6150 <malloc+0x4a0>
+      ca:	06250513          	addi	a0,a0,98 # 6128 <malloc+0x4a0>
       ce:	00005097          	auipc	ra,0x5
       d2:	7c4080e7          	jalr	1988(ra) # 5892 <open>
   if(fd >= 0){
@@ -130,9 +130,9 @@ bsstest(char *s)
     printf("%s: open echo failed!\n", s);
       e4:	85a6                	mv	a1,s1
       e6:	00006517          	auipc	a0,0x6
-      ea:	05250513          	addi	a0,a0,82 # 6138 <malloc+0x488>
+      ea:	02a50513          	addi	a0,a0,42 # 6110 <malloc+0x488>
       ee:	00006097          	auipc	ra,0x6
-      f2:	b04080e7          	jalr	-1276(ra) # 5bf2 <printf>
+      f2:	adc080e7          	jalr	-1316(ra) # 5bca <printf>
     exit(1);
       f6:	4505                	li	a0,1
       f8:	00005097          	auipc	ra,0x5
@@ -140,9 +140,9 @@ bsstest(char *s)
     printf("%s: open doesnotexist succeeded!\n", s);
      100:	85a6                	mv	a1,s1
      102:	00006517          	auipc	a0,0x6
-     106:	05e50513          	addi	a0,a0,94 # 6160 <malloc+0x4b0>
+     106:	03650513          	addi	a0,a0,54 # 6138 <malloc+0x4b0>
      10a:	00006097          	auipc	ra,0x6
-     10e:	ae8080e7          	jalr	-1304(ra) # 5bf2 <printf>
+     10e:	ac0080e7          	jalr	-1344(ra) # 5bca <printf>
     exit(1);
      112:	4505                	li	a0,1
      114:	00005097          	auipc	ra,0x5
@@ -160,33 +160,33 @@ bsstest(char *s)
      12a:	89aa                	mv	s3,a0
   unlink("truncfile");
      12c:	00006517          	auipc	a0,0x6
-     130:	05c50513          	addi	a0,a0,92 # 6188 <malloc+0x4d8>
+     130:	03450513          	addi	a0,a0,52 # 6160 <malloc+0x4d8>
      134:	00005097          	auipc	ra,0x5
      138:	76e080e7          	jalr	1902(ra) # 58a2 <unlink>
   int fd1 = open("truncfile", O_CREATE|O_TRUNC|O_WRONLY);
      13c:	60100593          	li	a1,1537
      140:	00006517          	auipc	a0,0x6
-     144:	04850513          	addi	a0,a0,72 # 6188 <malloc+0x4d8>
+     144:	02050513          	addi	a0,a0,32 # 6160 <malloc+0x4d8>
      148:	00005097          	auipc	ra,0x5
      14c:	74a080e7          	jalr	1866(ra) # 5892 <open>
      150:	84aa                	mv	s1,a0
   write(fd1, "abcd", 4);
      152:	4611                	li	a2,4
      154:	00006597          	auipc	a1,0x6
-     158:	04458593          	addi	a1,a1,68 # 6198 <malloc+0x4e8>
+     158:	01c58593          	addi	a1,a1,28 # 6170 <malloc+0x4e8>
      15c:	00005097          	auipc	ra,0x5
      160:	716080e7          	jalr	1814(ra) # 5872 <write>
   int fd2 = open("truncfile", O_TRUNC|O_WRONLY);
      164:	40100593          	li	a1,1025
      168:	00006517          	auipc	a0,0x6
-     16c:	02050513          	addi	a0,a0,32 # 6188 <malloc+0x4d8>
+     16c:	ff850513          	addi	a0,a0,-8 # 6160 <malloc+0x4d8>
      170:	00005097          	auipc	ra,0x5
      174:	722080e7          	jalr	1826(ra) # 5892 <open>
      178:	892a                	mv	s2,a0
   int n = write(fd1, "x", 1);
      17a:	4605                	li	a2,1
      17c:	00006597          	auipc	a1,0x6
-     180:	02458593          	addi	a1,a1,36 # 61a0 <malloc+0x4f0>
+     180:	ffc58593          	addi	a1,a1,-4 # 6178 <malloc+0x4f0>
      184:	8526                	mv	a0,s1
      186:	00005097          	auipc	ra,0x5
      18a:	6ec080e7          	jalr	1772(ra) # 5872 <write>
@@ -195,7 +195,7 @@ bsstest(char *s)
      190:	02f51b63          	bne	a0,a5,1c6 <truncate2+0xaa>
   unlink("truncfile");
      194:	00006517          	auipc	a0,0x6
-     198:	ff450513          	addi	a0,a0,-12 # 6188 <malloc+0x4d8>
+     198:	fcc50513          	addi	a0,a0,-52 # 6160 <malloc+0x4d8>
      19c:	00005097          	auipc	ra,0x5
      1a0:	706080e7          	jalr	1798(ra) # 58a2 <unlink>
   close(fd1);
@@ -218,9 +218,9 @@ bsstest(char *s)
      1c6:	862a                	mv	a2,a0
      1c8:	85ce                	mv	a1,s3
      1ca:	00006517          	auipc	a0,0x6
-     1ce:	fde50513          	addi	a0,a0,-34 # 61a8 <malloc+0x4f8>
+     1ce:	fb650513          	addi	a0,a0,-74 # 6180 <malloc+0x4f8>
      1d2:	00006097          	auipc	ra,0x6
-     1d6:	a20080e7          	jalr	-1504(ra) # 5bf2 <printf>
+     1d6:	9f8080e7          	jalr	-1544(ra) # 5bca <printf>
     exit(1);
      1da:	4505                	li	a0,1
      1dc:	00005097          	auipc	ra,0x5
@@ -298,17 +298,17 @@ bsstest(char *s)
      27a:	8baa                	mv	s7,a0
   unlink("bigwrite");
      27c:	00006517          	auipc	a0,0x6
-     280:	cfc50513          	addi	a0,a0,-772 # 5f78 <malloc+0x2c8>
+     280:	cd450513          	addi	a0,a0,-812 # 5f50 <malloc+0x2c8>
      284:	00005097          	auipc	ra,0x5
      288:	61e080e7          	jalr	1566(ra) # 58a2 <unlink>
   for(sz = 499; sz < (MAXOPBLOCKS+2)*BSIZE; sz += 471){
      28c:	1f300493          	li	s1,499
     fd = open("bigwrite", O_CREATE | O_RDWR);
      290:	00006a97          	auipc	s5,0x6
-     294:	ce8a8a93          	addi	s5,s5,-792 # 5f78 <malloc+0x2c8>
+     294:	cc0a8a93          	addi	s5,s5,-832 # 5f50 <malloc+0x2c8>
       int cc = write(fd, buf, sz);
      298:	0000ca17          	auipc	s4,0xc
-     29c:	b20a0a13          	addi	s4,s4,-1248 # bdb8 <buf>
+     29c:	af8a0a13          	addi	s4,s4,-1288 # bd90 <buf>
   for(sz = 499; sz < (MAXOPBLOCKS+2)*BSIZE; sz += 471){
      2a0:	6b0d                	lui	s6,0x3
      2a2:	1c9b0b13          	addi	s6,s6,457 # 31c9 <dirtest+0x8f>
@@ -362,9 +362,9 @@ bsstest(char *s)
       printf("%s: cannot create bigwrite\n", s);
      310:	85de                	mv	a1,s7
      312:	00006517          	auipc	a0,0x6
-     316:	ebe50513          	addi	a0,a0,-322 # 61d0 <malloc+0x520>
+     316:	e9650513          	addi	a0,a0,-362 # 61a8 <malloc+0x520>
      31a:	00006097          	auipc	ra,0x6
-     31e:	8d8080e7          	jalr	-1832(ra) # 5bf2 <printf>
+     31e:	8b0080e7          	jalr	-1872(ra) # 5bca <printf>
       exit(1);
      322:	4505                	li	a0,1
      324:	00005097          	auipc	ra,0x5
@@ -377,9 +377,9 @@ bsstest(char *s)
      332:	8626                	mv	a2,s1
      334:	85de                	mv	a1,s7
      336:	00006517          	auipc	a0,0x6
-     33a:	eba50513          	addi	a0,a0,-326 # 61f0 <malloc+0x540>
+     33a:	e9250513          	addi	a0,a0,-366 # 61c8 <malloc+0x540>
      33e:	00006097          	auipc	ra,0x6
-     342:	8b4080e7          	jalr	-1868(ra) # 5bf2 <printf>
+     342:	88c080e7          	jalr	-1908(ra) # 5bca <printf>
         exit(1);
      346:	4505                	li	a0,1
      348:	00005097          	auipc	ra,0x5
@@ -405,7 +405,7 @@ bsstest(char *s)
      36e:	fc040913          	addi	s2,s0,-64
     int fd = open("copyin1", O_CREATE|O_WRONLY);
      372:	00006a17          	auipc	s4,0x6
-     376:	e96a0a13          	addi	s4,s4,-362 # 6208 <malloc+0x558>
+     376:	e6ea0a13          	addi	s4,s4,-402 # 61e0 <malloc+0x558>
     uint64 addr = addrs[ai];
      37a:	00093983          	ld	s3,0(s2)
     int fd = open("copyin1", O_CREATE|O_WRONLY);
@@ -475,9 +475,9 @@ bsstest(char *s)
      41c:	8082                	ret
       printf("open(copyin1) failed\n");
      41e:	00006517          	auipc	a0,0x6
-     422:	df250513          	addi	a0,a0,-526 # 6210 <malloc+0x560>
+     422:	dca50513          	addi	a0,a0,-566 # 61e8 <malloc+0x560>
      426:	00005097          	auipc	ra,0x5
-     42a:	7cc080e7          	jalr	1996(ra) # 5bf2 <printf>
+     42a:	7a4080e7          	jalr	1956(ra) # 5bca <printf>
       exit(1);
      42e:	4505                	li	a0,1
      430:	00005097          	auipc	ra,0x5
@@ -486,9 +486,9 @@ bsstest(char *s)
      438:	862a                	mv	a2,a0
      43a:	85ce                	mv	a1,s3
      43c:	00006517          	auipc	a0,0x6
-     440:	dec50513          	addi	a0,a0,-532 # 6228 <malloc+0x578>
+     440:	dc450513          	addi	a0,a0,-572 # 6200 <malloc+0x578>
      444:	00005097          	auipc	ra,0x5
-     448:	7ae080e7          	jalr	1966(ra) # 5bf2 <printf>
+     448:	786080e7          	jalr	1926(ra) # 5bca <printf>
       exit(1);
      44c:	4505                	li	a0,1
      44e:	00005097          	auipc	ra,0x5
@@ -497,18 +497,18 @@ bsstest(char *s)
      456:	862a                	mv	a2,a0
      458:	85ce                	mv	a1,s3
      45a:	00006517          	auipc	a0,0x6
-     45e:	dfe50513          	addi	a0,a0,-514 # 6258 <malloc+0x5a8>
+     45e:	dd650513          	addi	a0,a0,-554 # 6230 <malloc+0x5a8>
      462:	00005097          	auipc	ra,0x5
-     466:	790080e7          	jalr	1936(ra) # 5bf2 <printf>
+     466:	768080e7          	jalr	1896(ra) # 5bca <printf>
       exit(1);
      46a:	4505                	li	a0,1
      46c:	00005097          	auipc	ra,0x5
      470:	3e6080e7          	jalr	998(ra) # 5852 <exit>
       printf("pipe() failed\n");
      474:	00006517          	auipc	a0,0x6
-     478:	e1450513          	addi	a0,a0,-492 # 6288 <malloc+0x5d8>
+     478:	dec50513          	addi	a0,a0,-532 # 6260 <malloc+0x5d8>
      47c:	00005097          	auipc	ra,0x5
-     480:	776080e7          	jalr	1910(ra) # 5bf2 <printf>
+     480:	74e080e7          	jalr	1870(ra) # 5bca <printf>
       exit(1);
      484:	4505                	li	a0,1
      486:	00005097          	auipc	ra,0x5
@@ -517,9 +517,9 @@ bsstest(char *s)
      48e:	862a                	mv	a2,a0
      490:	85ce                	mv	a1,s3
      492:	00006517          	auipc	a0,0x6
-     496:	e0650513          	addi	a0,a0,-506 # 6298 <malloc+0x5e8>
+     496:	dde50513          	addi	a0,a0,-546 # 6270 <malloc+0x5e8>
      49a:	00005097          	auipc	ra,0x5
-     49e:	758080e7          	jalr	1880(ra) # 5bf2 <printf>
+     49e:	730080e7          	jalr	1840(ra) # 5bca <printf>
       exit(1);
      4a2:	4505                	li	a0,1
      4a4:	00005097          	auipc	ra,0x5
@@ -546,10 +546,10 @@ bsstest(char *s)
      4cc:	fb040913          	addi	s2,s0,-80
     int fd = open("README", 0);
      4d0:	00006a17          	auipc	s4,0x6
-     4d4:	df8a0a13          	addi	s4,s4,-520 # 62c8 <malloc+0x618>
+     4d4:	dd0a0a13          	addi	s4,s4,-560 # 62a0 <malloc+0x618>
     n = write(fds[1], "x", 1);
      4d8:	00006a97          	auipc	s5,0x6
-     4dc:	cc8a8a93          	addi	s5,s5,-824 # 61a0 <malloc+0x4f0>
+     4dc:	ca0a8a93          	addi	s5,s5,-864 # 6178 <malloc+0x4f0>
     uint64 addr = addrs[ai];
      4e0:	00093983          	ld	s3,0(s2)
     int fd = open("README", 0);
@@ -617,9 +617,9 @@ bsstest(char *s)
      57c:	8082                	ret
       printf("open(README) failed\n");
      57e:	00006517          	auipc	a0,0x6
-     582:	d5250513          	addi	a0,a0,-686 # 62d0 <malloc+0x620>
+     582:	d2a50513          	addi	a0,a0,-726 # 62a8 <malloc+0x620>
      586:	00005097          	auipc	ra,0x5
-     58a:	66c080e7          	jalr	1644(ra) # 5bf2 <printf>
+     58a:	644080e7          	jalr	1604(ra) # 5bca <printf>
       exit(1);
      58e:	4505                	li	a0,1
      590:	00005097          	auipc	ra,0x5
@@ -628,27 +628,27 @@ bsstest(char *s)
      598:	862a                	mv	a2,a0
      59a:	85ce                	mv	a1,s3
      59c:	00006517          	auipc	a0,0x6
-     5a0:	d4c50513          	addi	a0,a0,-692 # 62e8 <malloc+0x638>
+     5a0:	d2450513          	addi	a0,a0,-732 # 62c0 <malloc+0x638>
      5a4:	00005097          	auipc	ra,0x5
-     5a8:	64e080e7          	jalr	1614(ra) # 5bf2 <printf>
+     5a8:	626080e7          	jalr	1574(ra) # 5bca <printf>
       exit(1);
      5ac:	4505                	li	a0,1
      5ae:	00005097          	auipc	ra,0x5
      5b2:	2a4080e7          	jalr	676(ra) # 5852 <exit>
       printf("pipe() failed\n");
      5b6:	00006517          	auipc	a0,0x6
-     5ba:	cd250513          	addi	a0,a0,-814 # 6288 <malloc+0x5d8>
+     5ba:	caa50513          	addi	a0,a0,-854 # 6260 <malloc+0x5d8>
      5be:	00005097          	auipc	ra,0x5
-     5c2:	634080e7          	jalr	1588(ra) # 5bf2 <printf>
+     5c2:	60c080e7          	jalr	1548(ra) # 5bca <printf>
       exit(1);
      5c6:	4505                	li	a0,1
      5c8:	00005097          	auipc	ra,0x5
      5cc:	28a080e7          	jalr	650(ra) # 5852 <exit>
       printf("pipe write failed\n");
      5d0:	00006517          	auipc	a0,0x6
-     5d4:	d4850513          	addi	a0,a0,-696 # 6318 <malloc+0x668>
+     5d4:	d2050513          	addi	a0,a0,-736 # 62f0 <malloc+0x668>
      5d8:	00005097          	auipc	ra,0x5
-     5dc:	61a080e7          	jalr	1562(ra) # 5bf2 <printf>
+     5dc:	5f2080e7          	jalr	1522(ra) # 5bca <printf>
       exit(1);
      5e0:	4505                	li	a0,1
      5e2:	00005097          	auipc	ra,0x5
@@ -657,9 +657,9 @@ bsstest(char *s)
      5ea:	862a                	mv	a2,a0
      5ec:	85ce                	mv	a1,s3
      5ee:	00006517          	auipc	a0,0x6
-     5f2:	d4250513          	addi	a0,a0,-702 # 6330 <malloc+0x680>
+     5f2:	d1a50513          	addi	a0,a0,-742 # 6308 <malloc+0x680>
      5f6:	00005097          	auipc	ra,0x5
-     5fa:	5fc080e7          	jalr	1532(ra) # 5bf2 <printf>
+     5fa:	5d4080e7          	jalr	1492(ra) # 5bca <printf>
       exit(1);
      5fe:	4505                	li	a0,1
      600:	00005097          	auipc	ra,0x5
@@ -679,20 +679,20 @@ bsstest(char *s)
      61a:	8aaa                	mv	s5,a0
   unlink("truncfile");
      61c:	00006517          	auipc	a0,0x6
-     620:	b6c50513          	addi	a0,a0,-1172 # 6188 <malloc+0x4d8>
+     620:	b4450513          	addi	a0,a0,-1212 # 6160 <malloc+0x4d8>
      624:	00005097          	auipc	ra,0x5
      628:	27e080e7          	jalr	638(ra) # 58a2 <unlink>
   int fd1 = open("truncfile", O_CREATE|O_WRONLY|O_TRUNC);
      62c:	60100593          	li	a1,1537
      630:	00006517          	auipc	a0,0x6
-     634:	b5850513          	addi	a0,a0,-1192 # 6188 <malloc+0x4d8>
+     634:	b3050513          	addi	a0,a0,-1232 # 6160 <malloc+0x4d8>
      638:	00005097          	auipc	ra,0x5
      63c:	25a080e7          	jalr	602(ra) # 5892 <open>
      640:	84aa                	mv	s1,a0
   write(fd1, "abcd", 4);
      642:	4611                	li	a2,4
      644:	00006597          	auipc	a1,0x6
-     648:	b5458593          	addi	a1,a1,-1196 # 6198 <malloc+0x4e8>
+     648:	b2c58593          	addi	a1,a1,-1236 # 6170 <malloc+0x4e8>
      64c:	00005097          	auipc	ra,0x5
      650:	226080e7          	jalr	550(ra) # 5872 <write>
   close(fd1);
@@ -702,7 +702,7 @@ bsstest(char *s)
   int fd2 = open("truncfile", O_RDONLY);
      65e:	4581                	li	a1,0
      660:	00006517          	auipc	a0,0x6
-     664:	b2850513          	addi	a0,a0,-1240 # 6188 <malloc+0x4d8>
+     664:	b0050513          	addi	a0,a0,-1280 # 6160 <malloc+0x4d8>
      668:	00005097          	auipc	ra,0x5
      66c:	22a080e7          	jalr	554(ra) # 5892 <open>
      670:	84aa                	mv	s1,a0
@@ -717,14 +717,14 @@ bsstest(char *s)
   fd1 = open("truncfile", O_WRONLY|O_TRUNC);
      688:	40100593          	li	a1,1025
      68c:	00006517          	auipc	a0,0x6
-     690:	afc50513          	addi	a0,a0,-1284 # 6188 <malloc+0x4d8>
+     690:	ad450513          	addi	a0,a0,-1324 # 6160 <malloc+0x4d8>
      694:	00005097          	auipc	ra,0x5
      698:	1fe080e7          	jalr	510(ra) # 5892 <open>
      69c:	89aa                	mv	s3,a0
   int fd3 = open("truncfile", O_RDONLY);
      69e:	4581                	li	a1,0
      6a0:	00006517          	auipc	a0,0x6
-     6a4:	ae850513          	addi	a0,a0,-1304 # 6188 <malloc+0x4d8>
+     6a4:	ac050513          	addi	a0,a0,-1344 # 6160 <malloc+0x4d8>
      6a8:	00005097          	auipc	ra,0x5
      6ac:	1ea080e7          	jalr	490(ra) # 5892 <open>
      6b0:	892a                	mv	s2,a0
@@ -748,7 +748,7 @@ bsstest(char *s)
   write(fd1, "abcdef", 6);
      6dc:	4619                	li	a2,6
      6de:	00006597          	auipc	a1,0x6
-     6e2:	ce258593          	addi	a1,a1,-798 # 63c0 <malloc+0x710>
+     6e2:	cba58593          	addi	a1,a1,-838 # 6398 <malloc+0x710>
      6e6:	854e                	mv	a0,s3
      6e8:	00005097          	auipc	ra,0x5
      6ec:	18a080e7          	jalr	394(ra) # 5872 <write>
@@ -772,7 +772,7 @@ bsstest(char *s)
      71c:	0ef51063          	bne	a0,a5,7fc <truncate1+0x1f4>
   unlink("truncfile");
      720:	00006517          	auipc	a0,0x6
-     724:	a6850513          	addi	a0,a0,-1432 # 6188 <malloc+0x4d8>
+     724:	a4050513          	addi	a0,a0,-1472 # 6160 <malloc+0x4d8>
      728:	00005097          	auipc	ra,0x5
      72c:	17a080e7          	jalr	378(ra) # 58a2 <unlink>
   close(fd1);
@@ -801,9 +801,9 @@ bsstest(char *s)
      760:	862a                	mv	a2,a0
      762:	85d6                	mv	a1,s5
      764:	00006517          	auipc	a0,0x6
-     768:	bfc50513          	addi	a0,a0,-1028 # 6360 <malloc+0x6b0>
+     768:	bd450513          	addi	a0,a0,-1068 # 6338 <malloc+0x6b0>
      76c:	00005097          	auipc	ra,0x5
-     770:	486080e7          	jalr	1158(ra) # 5bf2 <printf>
+     770:	45e080e7          	jalr	1118(ra) # 5bca <printf>
     exit(1);
      774:	4505                	li	a0,1
      776:	00005097          	auipc	ra,0x5
@@ -811,16 +811,16 @@ bsstest(char *s)
     printf("aaa fd3=%d\n", fd3);
      77e:	85ca                	mv	a1,s2
      780:	00006517          	auipc	a0,0x6
-     784:	c0050513          	addi	a0,a0,-1024 # 6380 <malloc+0x6d0>
+     784:	bd850513          	addi	a0,a0,-1064 # 6358 <malloc+0x6d0>
      788:	00005097          	auipc	ra,0x5
-     78c:	46a080e7          	jalr	1130(ra) # 5bf2 <printf>
+     78c:	442080e7          	jalr	1090(ra) # 5bca <printf>
     printf("%s: read %d bytes, wanted 0\n", s, n);
      790:	8652                	mv	a2,s4
      792:	85d6                	mv	a1,s5
      794:	00006517          	auipc	a0,0x6
-     798:	bfc50513          	addi	a0,a0,-1028 # 6390 <malloc+0x6e0>
+     798:	bd450513          	addi	a0,a0,-1068 # 6368 <malloc+0x6e0>
      79c:	00005097          	auipc	ra,0x5
-     7a0:	456080e7          	jalr	1110(ra) # 5bf2 <printf>
+     7a0:	42e080e7          	jalr	1070(ra) # 5bca <printf>
     exit(1);
      7a4:	4505                	li	a0,1
      7a6:	00005097          	auipc	ra,0x5
@@ -828,16 +828,16 @@ bsstest(char *s)
     printf("bbb fd2=%d\n", fd2);
      7ae:	85a6                	mv	a1,s1
      7b0:	00006517          	auipc	a0,0x6
-     7b4:	c0050513          	addi	a0,a0,-1024 # 63b0 <malloc+0x700>
+     7b4:	bd850513          	addi	a0,a0,-1064 # 6388 <malloc+0x700>
      7b8:	00005097          	auipc	ra,0x5
-     7bc:	43a080e7          	jalr	1082(ra) # 5bf2 <printf>
+     7bc:	412080e7          	jalr	1042(ra) # 5bca <printf>
     printf("%s: read %d bytes, wanted 0\n", s, n);
      7c0:	8652                	mv	a2,s4
      7c2:	85d6                	mv	a1,s5
      7c4:	00006517          	auipc	a0,0x6
-     7c8:	bcc50513          	addi	a0,a0,-1076 # 6390 <malloc+0x6e0>
+     7c8:	ba450513          	addi	a0,a0,-1116 # 6368 <malloc+0x6e0>
      7cc:	00005097          	auipc	ra,0x5
-     7d0:	426080e7          	jalr	1062(ra) # 5bf2 <printf>
+     7d0:	3fe080e7          	jalr	1022(ra) # 5bca <printf>
     exit(1);
      7d4:	4505                	li	a0,1
      7d6:	00005097          	auipc	ra,0x5
@@ -846,9 +846,9 @@ bsstest(char *s)
      7de:	862a                	mv	a2,a0
      7e0:	85d6                	mv	a1,s5
      7e2:	00006517          	auipc	a0,0x6
-     7e6:	be650513          	addi	a0,a0,-1050 # 63c8 <malloc+0x718>
+     7e6:	bbe50513          	addi	a0,a0,-1090 # 63a0 <malloc+0x718>
      7ea:	00005097          	auipc	ra,0x5
-     7ee:	408080e7          	jalr	1032(ra) # 5bf2 <printf>
+     7ee:	3e0080e7          	jalr	992(ra) # 5bca <printf>
     exit(1);
      7f2:	4505                	li	a0,1
      7f4:	00005097          	auipc	ra,0x5
@@ -857,9 +857,9 @@ bsstest(char *s)
      7fc:	862a                	mv	a2,a0
      7fe:	85d6                	mv	a1,s5
      800:	00006517          	auipc	a0,0x6
-     804:	be850513          	addi	a0,a0,-1048 # 63e8 <malloc+0x738>
+     804:	bc050513          	addi	a0,a0,-1088 # 63c0 <malloc+0x738>
      808:	00005097          	auipc	ra,0x5
-     80c:	3ea080e7          	jalr	1002(ra) # 5bf2 <printf>
+     80c:	3c2080e7          	jalr	962(ra) # 5bca <printf>
     exit(1);
      810:	4505                	li	a0,1
      812:	00005097          	auipc	ra,0x5
@@ -881,7 +881,7 @@ bsstest(char *s)
   fd = open("small", O_CREATE|O_RDWR);
      830:	20200593          	li	a1,514
      834:	00006517          	auipc	a0,0x6
-     838:	bd450513          	addi	a0,a0,-1068 # 6408 <malloc+0x758>
+     838:	bac50513          	addi	a0,a0,-1108 # 63e0 <malloc+0x758>
      83c:	00005097          	auipc	ra,0x5
      840:	056080e7          	jalr	86(ra) # 5892 <open>
   if(fd < 0){
@@ -890,10 +890,10 @@ bsstest(char *s)
      84a:	4481                	li	s1,0
     if(write(fd, "aaaaaaaaaa", SZ) != SZ){
      84c:	00006997          	auipc	s3,0x6
-     850:	be498993          	addi	s3,s3,-1052 # 6430 <malloc+0x780>
+     850:	bbc98993          	addi	s3,s3,-1092 # 6408 <malloc+0x780>
     if(write(fd, "bbbbbbbbbb", SZ) != SZ){
      854:	00006a97          	auipc	s5,0x6
-     858:	c14a8a93          	addi	s5,s5,-1004 # 6468 <malloc+0x7b8>
+     858:	beca8a93          	addi	s5,s5,-1044 # 6440 <malloc+0x7b8>
   for(i = 0; i < N; i++){
      85c:	06400a13          	li	s4,100
     if(write(fd, "aaaaaaaaaa", SZ) != SZ){
@@ -922,7 +922,7 @@ bsstest(char *s)
   fd = open("small", O_RDONLY);
      898:	4581                	li	a1,0
      89a:	00006517          	auipc	a0,0x6
-     89e:	b6e50513          	addi	a0,a0,-1170 # 6408 <malloc+0x758>
+     89e:	b4650513          	addi	a0,a0,-1210 # 63e0 <malloc+0x758>
      8a2:	00005097          	auipc	ra,0x5
      8a6:	ff0080e7          	jalr	-16(ra) # 5892 <open>
      8aa:	84aa                	mv	s1,a0
@@ -931,7 +931,7 @@ bsstest(char *s)
   i = read(fd, buf, N*SZ*2);
      8b0:	7d000613          	li	a2,2000
      8b4:	0000b597          	auipc	a1,0xb
-     8b8:	50458593          	addi	a1,a1,1284 # bdb8 <buf>
+     8b8:	4dc58593          	addi	a1,a1,1244 # bd90 <buf>
      8bc:	00005097          	auipc	ra,0x5
      8c0:	fae080e7          	jalr	-82(ra) # 586a <read>
   if(i != N*SZ*2){
@@ -943,7 +943,7 @@ bsstest(char *s)
      8d2:	fac080e7          	jalr	-84(ra) # 587a <close>
   if(unlink("small") < 0){
      8d6:	00006517          	auipc	a0,0x6
-     8da:	b3250513          	addi	a0,a0,-1230 # 6408 <malloc+0x758>
+     8da:	b0a50513          	addi	a0,a0,-1270 # 63e0 <malloc+0x758>
      8de:	00005097          	auipc	ra,0x5
      8e2:	fc4080e7          	jalr	-60(ra) # 58a2 <unlink>
      8e6:	0a054463          	bltz	a0,98e <writetest+0x174>
@@ -961,9 +961,9 @@ bsstest(char *s)
     printf("%s: error: creat small failed!\n", s);
      8fe:	85da                	mv	a1,s6
      900:	00006517          	auipc	a0,0x6
-     904:	b1050513          	addi	a0,a0,-1264 # 6410 <malloc+0x760>
+     904:	ae850513          	addi	a0,a0,-1304 # 63e8 <malloc+0x760>
      908:	00005097          	auipc	ra,0x5
-     90c:	2ea080e7          	jalr	746(ra) # 5bf2 <printf>
+     90c:	2c2080e7          	jalr	706(ra) # 5bca <printf>
     exit(1);
      910:	4505                	li	a0,1
      912:	00005097          	auipc	ra,0x5
@@ -972,9 +972,9 @@ bsstest(char *s)
      91a:	8626                	mv	a2,s1
      91c:	85da                	mv	a1,s6
      91e:	00006517          	auipc	a0,0x6
-     922:	b2250513          	addi	a0,a0,-1246 # 6440 <malloc+0x790>
+     922:	afa50513          	addi	a0,a0,-1286 # 6418 <malloc+0x790>
      926:	00005097          	auipc	ra,0x5
-     92a:	2cc080e7          	jalr	716(ra) # 5bf2 <printf>
+     92a:	2a4080e7          	jalr	676(ra) # 5bca <printf>
       exit(1);
      92e:	4505                	li	a0,1
      930:	00005097          	auipc	ra,0x5
@@ -983,9 +983,9 @@ bsstest(char *s)
      938:	8626                	mv	a2,s1
      93a:	85da                	mv	a1,s6
      93c:	00006517          	auipc	a0,0x6
-     940:	b3c50513          	addi	a0,a0,-1220 # 6478 <malloc+0x7c8>
+     940:	b1450513          	addi	a0,a0,-1260 # 6450 <malloc+0x7c8>
      944:	00005097          	auipc	ra,0x5
-     948:	2ae080e7          	jalr	686(ra) # 5bf2 <printf>
+     948:	286080e7          	jalr	646(ra) # 5bca <printf>
       exit(1);
      94c:	4505                	li	a0,1
      94e:	00005097          	auipc	ra,0x5
@@ -993,9 +993,9 @@ bsstest(char *s)
     printf("%s: error: open small failed!\n", s);
      956:	85da                	mv	a1,s6
      958:	00006517          	auipc	a0,0x6
-     95c:	b4850513          	addi	a0,a0,-1208 # 64a0 <malloc+0x7f0>
+     95c:	b2050513          	addi	a0,a0,-1248 # 6478 <malloc+0x7f0>
      960:	00005097          	auipc	ra,0x5
-     964:	292080e7          	jalr	658(ra) # 5bf2 <printf>
+     964:	26a080e7          	jalr	618(ra) # 5bca <printf>
     exit(1);
      968:	4505                	li	a0,1
      96a:	00005097          	auipc	ra,0x5
@@ -1003,9 +1003,9 @@ bsstest(char *s)
     printf("%s: read failed\n", s);
      972:	85da                	mv	a1,s6
      974:	00006517          	auipc	a0,0x6
-     978:	b4c50513          	addi	a0,a0,-1204 # 64c0 <malloc+0x810>
+     978:	b2450513          	addi	a0,a0,-1244 # 6498 <malloc+0x810>
      97c:	00005097          	auipc	ra,0x5
-     980:	276080e7          	jalr	630(ra) # 5bf2 <printf>
+     980:	24e080e7          	jalr	590(ra) # 5bca <printf>
     exit(1);
      984:	4505                	li	a0,1
      986:	00005097          	auipc	ra,0x5
@@ -1013,9 +1013,9 @@ bsstest(char *s)
     printf("%s: unlink small failed\n", s);
      98e:	85da                	mv	a1,s6
      990:	00006517          	auipc	a0,0x6
-     994:	b4850513          	addi	a0,a0,-1208 # 64d8 <malloc+0x828>
+     994:	b2050513          	addi	a0,a0,-1248 # 64b0 <malloc+0x828>
      998:	00005097          	auipc	ra,0x5
-     99c:	25a080e7          	jalr	602(ra) # 5bf2 <printf>
+     99c:	232080e7          	jalr	562(ra) # 5bca <printf>
     exit(1);
      9a0:	4505                	li	a0,1
      9a2:	00005097          	auipc	ra,0x5
@@ -1036,7 +1036,7 @@ bsstest(char *s)
   fd = open("big", O_CREATE|O_RDWR);
      9be:	20200593          	li	a1,514
      9c2:	00006517          	auipc	a0,0x6
-     9c6:	b3650513          	addi	a0,a0,-1226 # 64f8 <malloc+0x848>
+     9c6:	b0e50513          	addi	a0,a0,-1266 # 64d0 <malloc+0x848>
      9ca:	00005097          	auipc	ra,0x5
      9ce:	ec8080e7          	jalr	-312(ra) # 5892 <open>
      9d2:	89aa                	mv	s3,a0
@@ -1044,7 +1044,7 @@ bsstest(char *s)
      9d4:	4481                	li	s1,0
     ((int*)buf)[0] = i;
      9d6:	0000b917          	auipc	s2,0xb
-     9da:	3e290913          	addi	s2,s2,994 # bdb8 <buf>
+     9da:	3ba90913          	addi	s2,s2,954 # bd90 <buf>
   for(i = 0; i < MAXFILE; i++){
      9de:	10c00a13          	li	s4,268
   if(fd < 0){
@@ -1069,7 +1069,7 @@ bsstest(char *s)
   fd = open("big", O_RDONLY);
      a12:	4581                	li	a1,0
      a14:	00006517          	auipc	a0,0x6
-     a18:	ae450513          	addi	a0,a0,-1308 # 64f8 <malloc+0x848>
+     a18:	abc50513          	addi	a0,a0,-1348 # 64d0 <malloc+0x848>
      a1c:	00005097          	auipc	ra,0x5
      a20:	e76080e7          	jalr	-394(ra) # 5892 <open>
      a24:	89aa                	mv	s3,a0
@@ -1077,7 +1077,7 @@ bsstest(char *s)
      a26:	4481                	li	s1,0
     i = read(fd, buf, BSIZE);
      a28:	0000b917          	auipc	s2,0xb
-     a2c:	39090913          	addi	s2,s2,912 # bdb8 <buf>
+     a2c:	36890913          	addi	s2,s2,872 # bd90 <buf>
   if(fd < 0){
      a30:	06054263          	bltz	a0,a94 <writebig+0xea>
     i = read(fd, buf, BSIZE);
@@ -1101,9 +1101,9 @@ bsstest(char *s)
     printf("%s: error: creat big failed!\n", s);
      a5a:	85d6                	mv	a1,s5
      a5c:	00006517          	auipc	a0,0x6
-     a60:	aa450513          	addi	a0,a0,-1372 # 6500 <malloc+0x850>
+     a60:	a7c50513          	addi	a0,a0,-1412 # 64d8 <malloc+0x850>
      a64:	00005097          	auipc	ra,0x5
-     a68:	18e080e7          	jalr	398(ra) # 5bf2 <printf>
+     a68:	166080e7          	jalr	358(ra) # 5bca <printf>
     exit(1);
      a6c:	4505                	li	a0,1
      a6e:	00005097          	auipc	ra,0x5
@@ -1112,9 +1112,9 @@ bsstest(char *s)
      a76:	8626                	mv	a2,s1
      a78:	85d6                	mv	a1,s5
      a7a:	00006517          	auipc	a0,0x6
-     a7e:	aa650513          	addi	a0,a0,-1370 # 6520 <malloc+0x870>
+     a7e:	a7e50513          	addi	a0,a0,-1410 # 64f8 <malloc+0x870>
      a82:	00005097          	auipc	ra,0x5
-     a86:	170080e7          	jalr	368(ra) # 5bf2 <printf>
+     a86:	148080e7          	jalr	328(ra) # 5bca <printf>
       exit(1);
      a8a:	4505                	li	a0,1
      a8c:	00005097          	auipc	ra,0x5
@@ -1122,9 +1122,9 @@ bsstest(char *s)
     printf("%s: error: open big failed!\n", s);
      a94:	85d6                	mv	a1,s5
      a96:	00006517          	auipc	a0,0x6
-     a9a:	ab250513          	addi	a0,a0,-1358 # 6548 <malloc+0x898>
+     a9a:	a8a50513          	addi	a0,a0,-1398 # 6520 <malloc+0x898>
      a9e:	00005097          	auipc	ra,0x5
-     aa2:	154080e7          	jalr	340(ra) # 5bf2 <printf>
+     aa2:	12c080e7          	jalr	300(ra) # 5bca <printf>
     exit(1);
      aa6:	4505                	li	a0,1
      aa8:	00005097          	auipc	ra,0x5
@@ -1138,7 +1138,7 @@ bsstest(char *s)
      abe:	dc0080e7          	jalr	-576(ra) # 587a <close>
   if(unlink("big") < 0){
      ac2:	00006517          	auipc	a0,0x6
-     ac6:	a3650513          	addi	a0,a0,-1482 # 64f8 <malloc+0x848>
+     ac6:	a0e50513          	addi	a0,a0,-1522 # 64d0 <malloc+0x848>
      aca:	00005097          	auipc	ra,0x5
      ace:	dd8080e7          	jalr	-552(ra) # 58a2 <unlink>
      ad2:	06054963          	bltz	a0,b44 <writebig+0x19a>
@@ -1156,9 +1156,9 @@ bsstest(char *s)
      ae8:	10b00613          	li	a2,267
      aec:	85d6                	mv	a1,s5
      aee:	00006517          	auipc	a0,0x6
-     af2:	a7a50513          	addi	a0,a0,-1414 # 6568 <malloc+0x8b8>
+     af2:	a5250513          	addi	a0,a0,-1454 # 6540 <malloc+0x8b8>
      af6:	00005097          	auipc	ra,0x5
-     afa:	0fc080e7          	jalr	252(ra) # 5bf2 <printf>
+     afa:	0d4080e7          	jalr	212(ra) # 5bca <printf>
         exit(1);
      afe:	4505                	li	a0,1
      b00:	00005097          	auipc	ra,0x5
@@ -1167,9 +1167,9 @@ bsstest(char *s)
      b08:	862a                	mv	a2,a0
      b0a:	85d6                	mv	a1,s5
      b0c:	00006517          	auipc	a0,0x6
-     b10:	a8450513          	addi	a0,a0,-1404 # 6590 <malloc+0x8e0>
+     b10:	a5c50513          	addi	a0,a0,-1444 # 6568 <malloc+0x8e0>
      b14:	00005097          	auipc	ra,0x5
-     b18:	0de080e7          	jalr	222(ra) # 5bf2 <printf>
+     b18:	0b6080e7          	jalr	182(ra) # 5bca <printf>
       exit(1);
      b1c:	4505                	li	a0,1
      b1e:	00005097          	auipc	ra,0x5
@@ -1178,9 +1178,9 @@ bsstest(char *s)
      b26:	8626                	mv	a2,s1
      b28:	85d6                	mv	a1,s5
      b2a:	00006517          	auipc	a0,0x6
-     b2e:	a7e50513          	addi	a0,a0,-1410 # 65a8 <malloc+0x8f8>
+     b2e:	a5650513          	addi	a0,a0,-1450 # 6580 <malloc+0x8f8>
      b32:	00005097          	auipc	ra,0x5
-     b36:	0c0080e7          	jalr	192(ra) # 5bf2 <printf>
+     b36:	098080e7          	jalr	152(ra) # 5bca <printf>
       exit(1);
      b3a:	4505                	li	a0,1
      b3c:	00005097          	auipc	ra,0x5
@@ -1188,9 +1188,9 @@ bsstest(char *s)
     printf("%s: unlink big failed\n", s);
      b44:	85d6                	mv	a1,s5
      b46:	00006517          	auipc	a0,0x6
-     b4a:	a8a50513          	addi	a0,a0,-1398 # 65d0 <malloc+0x920>
+     b4a:	a6250513          	addi	a0,a0,-1438 # 65a8 <malloc+0x920>
      b4e:	00005097          	auipc	ra,0x5
-     b52:	0a4080e7          	jalr	164(ra) # 5bf2 <printf>
+     b52:	07c080e7          	jalr	124(ra) # 5bca <printf>
     exit(1);
      b56:	4505                	li	a0,1
      b58:	00005097          	auipc	ra,0x5
@@ -1209,7 +1209,7 @@ bsstest(char *s)
   fd = open("unlinkread", O_CREATE | O_RDWR);
      b70:	20200593          	li	a1,514
      b74:	00005517          	auipc	a0,0x5
-     b78:	39450513          	addi	a0,a0,916 # 5f08 <malloc+0x258>
+     b78:	36c50513          	addi	a0,a0,876 # 5ee0 <malloc+0x258>
      b7c:	00005097          	auipc	ra,0x5
      b80:	d16080e7          	jalr	-746(ra) # 5892 <open>
   if(fd < 0){
@@ -1218,7 +1218,7 @@ bsstest(char *s)
   write(fd, "hello", SZ);
      b8a:	4615                	li	a2,5
      b8c:	00006597          	auipc	a1,0x6
-     b90:	a7c58593          	addi	a1,a1,-1412 # 6608 <malloc+0x958>
+     b90:	a5458593          	addi	a1,a1,-1452 # 65e0 <malloc+0x958>
      b94:	00005097          	auipc	ra,0x5
      b98:	cde080e7          	jalr	-802(ra) # 5872 <write>
   close(fd);
@@ -1228,7 +1228,7 @@ bsstest(char *s)
   fd = open("unlinkread", O_RDWR);
      ba6:	4589                	li	a1,2
      ba8:	00005517          	auipc	a0,0x5
-     bac:	36050513          	addi	a0,a0,864 # 5f08 <malloc+0x258>
+     bac:	33850513          	addi	a0,a0,824 # 5ee0 <malloc+0x258>
      bb0:	00005097          	auipc	ra,0x5
      bb4:	ce2080e7          	jalr	-798(ra) # 5892 <open>
      bb8:	84aa                	mv	s1,a0
@@ -1236,21 +1236,21 @@ bsstest(char *s)
      bba:	0c054863          	bltz	a0,c8a <unlinkread+0x12a>
   if(unlink("unlinkread") != 0){
      bbe:	00005517          	auipc	a0,0x5
-     bc2:	34a50513          	addi	a0,a0,842 # 5f08 <malloc+0x258>
+     bc2:	32250513          	addi	a0,a0,802 # 5ee0 <malloc+0x258>
      bc6:	00005097          	auipc	ra,0x5
      bca:	cdc080e7          	jalr	-804(ra) # 58a2 <unlink>
      bce:	ed61                	bnez	a0,ca6 <unlinkread+0x146>
   fd1 = open("unlinkread", O_CREATE | O_RDWR);
      bd0:	20200593          	li	a1,514
      bd4:	00005517          	auipc	a0,0x5
-     bd8:	33450513          	addi	a0,a0,820 # 5f08 <malloc+0x258>
+     bd8:	30c50513          	addi	a0,a0,780 # 5ee0 <malloc+0x258>
      bdc:	00005097          	auipc	ra,0x5
      be0:	cb6080e7          	jalr	-842(ra) # 5892 <open>
      be4:	892a                	mv	s2,a0
   write(fd1, "yyy", 3);
      be6:	460d                	li	a2,3
      be8:	00006597          	auipc	a1,0x6
-     bec:	a6858593          	addi	a1,a1,-1432 # 6650 <malloc+0x9a0>
+     bec:	a4058593          	addi	a1,a1,-1472 # 6628 <malloc+0x9a0>
      bf0:	00005097          	auipc	ra,0x5
      bf4:	c82080e7          	jalr	-894(ra) # 5872 <write>
   close(fd1);
@@ -1260,7 +1260,7 @@ bsstest(char *s)
   if(read(fd, buf, sizeof(buf)) != SZ){
      c02:	660d                	lui	a2,0x3
      c04:	0000b597          	auipc	a1,0xb
-     c08:	1b458593          	addi	a1,a1,436 # bdb8 <buf>
+     c08:	18c58593          	addi	a1,a1,396 # bd90 <buf>
      c0c:	8526                	mv	a0,s1
      c0e:	00005097          	auipc	ra,0x5
      c12:	c5c080e7          	jalr	-932(ra) # 586a <read>
@@ -1268,13 +1268,13 @@ bsstest(char *s)
      c18:	0af51563          	bne	a0,a5,cc2 <unlinkread+0x162>
   if(buf[0] != 'h'){
      c1c:	0000b717          	auipc	a4,0xb
-     c20:	19c74703          	lbu	a4,412(a4) # bdb8 <buf>
+     c20:	17474703          	lbu	a4,372(a4) # bd90 <buf>
      c24:	06800793          	li	a5,104
      c28:	0af71b63          	bne	a4,a5,cde <unlinkread+0x17e>
   if(write(fd, buf, 10) != 10){
      c2c:	4629                	li	a2,10
      c2e:	0000b597          	auipc	a1,0xb
-     c32:	18a58593          	addi	a1,a1,394 # bdb8 <buf>
+     c32:	16258593          	addi	a1,a1,354 # bd90 <buf>
      c36:	8526                	mv	a0,s1
      c38:	00005097          	auipc	ra,0x5
      c3c:	c3a080e7          	jalr	-966(ra) # 5872 <write>
@@ -1286,7 +1286,7 @@ bsstest(char *s)
      c4c:	c32080e7          	jalr	-974(ra) # 587a <close>
   unlink("unlinkread");
      c50:	00005517          	auipc	a0,0x5
-     c54:	2b850513          	addi	a0,a0,696 # 5f08 <malloc+0x258>
+     c54:	29050513          	addi	a0,a0,656 # 5ee0 <malloc+0x258>
      c58:	00005097          	auipc	ra,0x5
      c5c:	c4a080e7          	jalr	-950(ra) # 58a2 <unlink>
 }
@@ -1300,9 +1300,9 @@ bsstest(char *s)
     printf("%s: create unlinkread failed\n", s);
      c6e:	85ce                	mv	a1,s3
      c70:	00006517          	auipc	a0,0x6
-     c74:	97850513          	addi	a0,a0,-1672 # 65e8 <malloc+0x938>
+     c74:	95050513          	addi	a0,a0,-1712 # 65c0 <malloc+0x938>
      c78:	00005097          	auipc	ra,0x5
-     c7c:	f7a080e7          	jalr	-134(ra) # 5bf2 <printf>
+     c7c:	f52080e7          	jalr	-174(ra) # 5bca <printf>
     exit(1);
      c80:	4505                	li	a0,1
      c82:	00005097          	auipc	ra,0x5
@@ -1310,9 +1310,9 @@ bsstest(char *s)
     printf("%s: open unlinkread failed\n", s);
      c8a:	85ce                	mv	a1,s3
      c8c:	00006517          	auipc	a0,0x6
-     c90:	98450513          	addi	a0,a0,-1660 # 6610 <malloc+0x960>
+     c90:	95c50513          	addi	a0,a0,-1700 # 65e8 <malloc+0x960>
      c94:	00005097          	auipc	ra,0x5
-     c98:	f5e080e7          	jalr	-162(ra) # 5bf2 <printf>
+     c98:	f36080e7          	jalr	-202(ra) # 5bca <printf>
     exit(1);
      c9c:	4505                	li	a0,1
      c9e:	00005097          	auipc	ra,0x5
@@ -1320,9 +1320,9 @@ bsstest(char *s)
     printf("%s: unlink unlinkread failed\n", s);
      ca6:	85ce                	mv	a1,s3
      ca8:	00006517          	auipc	a0,0x6
-     cac:	98850513          	addi	a0,a0,-1656 # 6630 <malloc+0x980>
+     cac:	96050513          	addi	a0,a0,-1696 # 6608 <malloc+0x980>
      cb0:	00005097          	auipc	ra,0x5
-     cb4:	f42080e7          	jalr	-190(ra) # 5bf2 <printf>
+     cb4:	f1a080e7          	jalr	-230(ra) # 5bca <printf>
     exit(1);
      cb8:	4505                	li	a0,1
      cba:	00005097          	auipc	ra,0x5
@@ -1330,9 +1330,9 @@ bsstest(char *s)
     printf("%s: unlinkread read failed", s);
      cc2:	85ce                	mv	a1,s3
      cc4:	00006517          	auipc	a0,0x6
-     cc8:	99450513          	addi	a0,a0,-1644 # 6658 <malloc+0x9a8>
+     cc8:	96c50513          	addi	a0,a0,-1684 # 6630 <malloc+0x9a8>
      ccc:	00005097          	auipc	ra,0x5
-     cd0:	f26080e7          	jalr	-218(ra) # 5bf2 <printf>
+     cd0:	efe080e7          	jalr	-258(ra) # 5bca <printf>
     exit(1);
      cd4:	4505                	li	a0,1
      cd6:	00005097          	auipc	ra,0x5
@@ -1340,9 +1340,9 @@ bsstest(char *s)
     printf("%s: unlinkread wrong data\n", s);
      cde:	85ce                	mv	a1,s3
      ce0:	00006517          	auipc	a0,0x6
-     ce4:	99850513          	addi	a0,a0,-1640 # 6678 <malloc+0x9c8>
+     ce4:	97050513          	addi	a0,a0,-1680 # 6650 <malloc+0x9c8>
      ce8:	00005097          	auipc	ra,0x5
-     cec:	f0a080e7          	jalr	-246(ra) # 5bf2 <printf>
+     cec:	ee2080e7          	jalr	-286(ra) # 5bca <printf>
     exit(1);
      cf0:	4505                	li	a0,1
      cf2:	00005097          	auipc	ra,0x5
@@ -1350,9 +1350,9 @@ bsstest(char *s)
     printf("%s: unlinkread write failed\n", s);
      cfa:	85ce                	mv	a1,s3
      cfc:	00006517          	auipc	a0,0x6
-     d00:	99c50513          	addi	a0,a0,-1636 # 6698 <malloc+0x9e8>
+     d00:	97450513          	addi	a0,a0,-1676 # 6670 <malloc+0x9e8>
      d04:	00005097          	auipc	ra,0x5
-     d08:	eee080e7          	jalr	-274(ra) # 5bf2 <printf>
+     d08:	ec6080e7          	jalr	-314(ra) # 5bca <printf>
     exit(1);
      d0c:	4505                	li	a0,1
      d0e:	00005097          	auipc	ra,0x5
@@ -1369,18 +1369,18 @@ bsstest(char *s)
      d22:	892a                	mv	s2,a0
   unlink("lf1");
      d24:	00006517          	auipc	a0,0x6
-     d28:	99450513          	addi	a0,a0,-1644 # 66b8 <malloc+0xa08>
+     d28:	96c50513          	addi	a0,a0,-1684 # 6690 <malloc+0xa08>
      d2c:	00005097          	auipc	ra,0x5
      d30:	b76080e7          	jalr	-1162(ra) # 58a2 <unlink>
   unlink("lf2");
      d34:	00006517          	auipc	a0,0x6
-     d38:	98c50513          	addi	a0,a0,-1652 # 66c0 <malloc+0xa10>
+     d38:	96450513          	addi	a0,a0,-1692 # 6698 <malloc+0xa10>
      d3c:	00005097          	auipc	ra,0x5
      d40:	b66080e7          	jalr	-1178(ra) # 58a2 <unlink>
   fd = open("lf1", O_CREATE|O_RDWR);
      d44:	20200593          	li	a1,514
      d48:	00006517          	auipc	a0,0x6
-     d4c:	97050513          	addi	a0,a0,-1680 # 66b8 <malloc+0xa08>
+     d4c:	94850513          	addi	a0,a0,-1720 # 6690 <malloc+0xa08>
      d50:	00005097          	auipc	ra,0x5
      d54:	b42080e7          	jalr	-1214(ra) # 5892 <open>
   if(fd < 0){
@@ -1389,7 +1389,7 @@ bsstest(char *s)
   if(write(fd, "hello", SZ) != SZ){
      d5e:	4615                	li	a2,5
      d60:	00006597          	auipc	a1,0x6
-     d64:	8a858593          	addi	a1,a1,-1880 # 6608 <malloc+0x958>
+     d64:	88058593          	addi	a1,a1,-1920 # 65e0 <malloc+0x958>
      d68:	00005097          	auipc	ra,0x5
      d6c:	b0a080e7          	jalr	-1270(ra) # 5872 <write>
      d70:	4795                	li	a5,5
@@ -1400,28 +1400,28 @@ bsstest(char *s)
      d7c:	b02080e7          	jalr	-1278(ra) # 587a <close>
   if(link("lf1", "lf2") < 0){
      d80:	00006597          	auipc	a1,0x6
-     d84:	94058593          	addi	a1,a1,-1728 # 66c0 <malloc+0xa10>
+     d84:	91858593          	addi	a1,a1,-1768 # 6698 <malloc+0xa10>
      d88:	00006517          	auipc	a0,0x6
-     d8c:	93050513          	addi	a0,a0,-1744 # 66b8 <malloc+0xa08>
+     d8c:	90850513          	addi	a0,a0,-1784 # 6690 <malloc+0xa08>
      d90:	00005097          	auipc	ra,0x5
      d94:	b22080e7          	jalr	-1246(ra) # 58b2 <link>
      d98:	10054363          	bltz	a0,e9e <linktest+0x188>
   unlink("lf1");
      d9c:	00006517          	auipc	a0,0x6
-     da0:	91c50513          	addi	a0,a0,-1764 # 66b8 <malloc+0xa08>
+     da0:	8f450513          	addi	a0,a0,-1804 # 6690 <malloc+0xa08>
      da4:	00005097          	auipc	ra,0x5
      da8:	afe080e7          	jalr	-1282(ra) # 58a2 <unlink>
   if(open("lf1", 0) >= 0){
      dac:	4581                	li	a1,0
      dae:	00006517          	auipc	a0,0x6
-     db2:	90a50513          	addi	a0,a0,-1782 # 66b8 <malloc+0xa08>
+     db2:	8e250513          	addi	a0,a0,-1822 # 6690 <malloc+0xa08>
      db6:	00005097          	auipc	ra,0x5
      dba:	adc080e7          	jalr	-1316(ra) # 5892 <open>
      dbe:	0e055e63          	bgez	a0,eba <linktest+0x1a4>
   fd = open("lf2", 0);
      dc2:	4581                	li	a1,0
      dc4:	00006517          	auipc	a0,0x6
-     dc8:	8fc50513          	addi	a0,a0,-1796 # 66c0 <malloc+0xa10>
+     dc8:	8d450513          	addi	a0,a0,-1836 # 6698 <malloc+0xa10>
      dcc:	00005097          	auipc	ra,0x5
      dd0:	ac6080e7          	jalr	-1338(ra) # 5892 <open>
      dd4:	84aa                	mv	s1,a0
@@ -1430,7 +1430,7 @@ bsstest(char *s)
   if(read(fd, buf, sizeof(buf)) != SZ){
      dda:	660d                	lui	a2,0x3
      ddc:	0000b597          	auipc	a1,0xb
-     de0:	fdc58593          	addi	a1,a1,-36 # bdb8 <buf>
+     de0:	fb458593          	addi	a1,a1,-76 # bd90 <buf>
      de4:	00005097          	auipc	ra,0x5
      de8:	a86080e7          	jalr	-1402(ra) # 586a <read>
      dec:	4795                	li	a5,5
@@ -1441,29 +1441,29 @@ bsstest(char *s)
      df8:	a86080e7          	jalr	-1402(ra) # 587a <close>
   if(link("lf2", "lf2") >= 0){
      dfc:	00006597          	auipc	a1,0x6
-     e00:	8c458593          	addi	a1,a1,-1852 # 66c0 <malloc+0xa10>
+     e00:	89c58593          	addi	a1,a1,-1892 # 6698 <malloc+0xa10>
      e04:	852e                	mv	a0,a1
      e06:	00005097          	auipc	ra,0x5
      e0a:	aac080e7          	jalr	-1364(ra) # 58b2 <link>
      e0e:	10055063          	bgez	a0,f0e <linktest+0x1f8>
   unlink("lf2");
      e12:	00006517          	auipc	a0,0x6
-     e16:	8ae50513          	addi	a0,a0,-1874 # 66c0 <malloc+0xa10>
+     e16:	88650513          	addi	a0,a0,-1914 # 6698 <malloc+0xa10>
      e1a:	00005097          	auipc	ra,0x5
      e1e:	a88080e7          	jalr	-1400(ra) # 58a2 <unlink>
   if(link("lf2", "lf1") >= 0){
      e22:	00006597          	auipc	a1,0x6
-     e26:	89658593          	addi	a1,a1,-1898 # 66b8 <malloc+0xa08>
+     e26:	86e58593          	addi	a1,a1,-1938 # 6690 <malloc+0xa08>
      e2a:	00006517          	auipc	a0,0x6
-     e2e:	89650513          	addi	a0,a0,-1898 # 66c0 <malloc+0xa10>
+     e2e:	86e50513          	addi	a0,a0,-1938 # 6698 <malloc+0xa10>
      e32:	00005097          	auipc	ra,0x5
      e36:	a80080e7          	jalr	-1408(ra) # 58b2 <link>
      e3a:	0e055863          	bgez	a0,f2a <linktest+0x214>
   if(link(".", "lf1") >= 0){
      e3e:	00006597          	auipc	a1,0x6
-     e42:	87a58593          	addi	a1,a1,-1926 # 66b8 <malloc+0xa08>
+     e42:	85258593          	addi	a1,a1,-1966 # 6690 <malloc+0xa08>
      e46:	00006517          	auipc	a0,0x6
-     e4a:	98250513          	addi	a0,a0,-1662 # 67c8 <malloc+0xb18>
+     e4a:	95a50513          	addi	a0,a0,-1702 # 67a0 <malloc+0xb18>
      e4e:	00005097          	auipc	ra,0x5
      e52:	a64080e7          	jalr	-1436(ra) # 58b2 <link>
      e56:	0e055863          	bgez	a0,f46 <linktest+0x230>
@@ -1477,9 +1477,9 @@ bsstest(char *s)
     printf("%s: create lf1 failed\n", s);
      e66:	85ca                	mv	a1,s2
      e68:	00006517          	auipc	a0,0x6
-     e6c:	86050513          	addi	a0,a0,-1952 # 66c8 <malloc+0xa18>
+     e6c:	83850513          	addi	a0,a0,-1992 # 66a0 <malloc+0xa18>
      e70:	00005097          	auipc	ra,0x5
-     e74:	d82080e7          	jalr	-638(ra) # 5bf2 <printf>
+     e74:	d5a080e7          	jalr	-678(ra) # 5bca <printf>
     exit(1);
      e78:	4505                	li	a0,1
      e7a:	00005097          	auipc	ra,0x5
@@ -1487,9 +1487,9 @@ bsstest(char *s)
     printf("%s: write lf1 failed\n", s);
      e82:	85ca                	mv	a1,s2
      e84:	00006517          	auipc	a0,0x6
-     e88:	85c50513          	addi	a0,a0,-1956 # 66e0 <malloc+0xa30>
+     e88:	83450513          	addi	a0,a0,-1996 # 66b8 <malloc+0xa30>
      e8c:	00005097          	auipc	ra,0x5
-     e90:	d66080e7          	jalr	-666(ra) # 5bf2 <printf>
+     e90:	d3e080e7          	jalr	-706(ra) # 5bca <printf>
     exit(1);
      e94:	4505                	li	a0,1
      e96:	00005097          	auipc	ra,0x5
@@ -1497,9 +1497,9 @@ bsstest(char *s)
     printf("%s: link lf1 lf2 failed\n", s);
      e9e:	85ca                	mv	a1,s2
      ea0:	00006517          	auipc	a0,0x6
-     ea4:	85850513          	addi	a0,a0,-1960 # 66f8 <malloc+0xa48>
+     ea4:	83050513          	addi	a0,a0,-2000 # 66d0 <malloc+0xa48>
      ea8:	00005097          	auipc	ra,0x5
-     eac:	d4a080e7          	jalr	-694(ra) # 5bf2 <printf>
+     eac:	d22080e7          	jalr	-734(ra) # 5bca <printf>
     exit(1);
      eb0:	4505                	li	a0,1
      eb2:	00005097          	auipc	ra,0x5
@@ -1507,9 +1507,9 @@ bsstest(char *s)
     printf("%s: unlinked lf1 but it is still there!\n", s);
      eba:	85ca                	mv	a1,s2
      ebc:	00006517          	auipc	a0,0x6
-     ec0:	85c50513          	addi	a0,a0,-1956 # 6718 <malloc+0xa68>
+     ec0:	83450513          	addi	a0,a0,-1996 # 66f0 <malloc+0xa68>
      ec4:	00005097          	auipc	ra,0x5
-     ec8:	d2e080e7          	jalr	-722(ra) # 5bf2 <printf>
+     ec8:	d06080e7          	jalr	-762(ra) # 5bca <printf>
     exit(1);
      ecc:	4505                	li	a0,1
      ece:	00005097          	auipc	ra,0x5
@@ -1517,9 +1517,9 @@ bsstest(char *s)
     printf("%s: open lf2 failed\n", s);
      ed6:	85ca                	mv	a1,s2
      ed8:	00006517          	auipc	a0,0x6
-     edc:	87050513          	addi	a0,a0,-1936 # 6748 <malloc+0xa98>
+     edc:	84850513          	addi	a0,a0,-1976 # 6720 <malloc+0xa98>
      ee0:	00005097          	auipc	ra,0x5
-     ee4:	d12080e7          	jalr	-750(ra) # 5bf2 <printf>
+     ee4:	cea080e7          	jalr	-790(ra) # 5bca <printf>
     exit(1);
      ee8:	4505                	li	a0,1
      eea:	00005097          	auipc	ra,0x5
@@ -1527,9 +1527,9 @@ bsstest(char *s)
     printf("%s: read lf2 failed\n", s);
      ef2:	85ca                	mv	a1,s2
      ef4:	00006517          	auipc	a0,0x6
-     ef8:	86c50513          	addi	a0,a0,-1940 # 6760 <malloc+0xab0>
+     ef8:	84450513          	addi	a0,a0,-1980 # 6738 <malloc+0xab0>
      efc:	00005097          	auipc	ra,0x5
-     f00:	cf6080e7          	jalr	-778(ra) # 5bf2 <printf>
+     f00:	cce080e7          	jalr	-818(ra) # 5bca <printf>
     exit(1);
      f04:	4505                	li	a0,1
      f06:	00005097          	auipc	ra,0x5
@@ -1537,9 +1537,9 @@ bsstest(char *s)
     printf("%s: link lf2 lf2 succeeded! oops\n", s);
      f0e:	85ca                	mv	a1,s2
      f10:	00006517          	auipc	a0,0x6
-     f14:	86850513          	addi	a0,a0,-1944 # 6778 <malloc+0xac8>
+     f14:	84050513          	addi	a0,a0,-1984 # 6750 <malloc+0xac8>
      f18:	00005097          	auipc	ra,0x5
-     f1c:	cda080e7          	jalr	-806(ra) # 5bf2 <printf>
+     f1c:	cb2080e7          	jalr	-846(ra) # 5bca <printf>
     exit(1);
      f20:	4505                	li	a0,1
      f22:	00005097          	auipc	ra,0x5
@@ -1547,9 +1547,9 @@ bsstest(char *s)
     printf("%s: link non-existent succeeded! oops\n", s);
      f2a:	85ca                	mv	a1,s2
      f2c:	00006517          	auipc	a0,0x6
-     f30:	87450513          	addi	a0,a0,-1932 # 67a0 <malloc+0xaf0>
+     f30:	84c50513          	addi	a0,a0,-1972 # 6778 <malloc+0xaf0>
      f34:	00005097          	auipc	ra,0x5
-     f38:	cbe080e7          	jalr	-834(ra) # 5bf2 <printf>
+     f38:	c96080e7          	jalr	-874(ra) # 5bca <printf>
     exit(1);
      f3c:	4505                	li	a0,1
      f3e:	00005097          	auipc	ra,0x5
@@ -1557,9 +1557,9 @@ bsstest(char *s)
     printf("%s: link . lf1 succeeded! oops\n", s);
      f46:	85ca                	mv	a1,s2
      f48:	00006517          	auipc	a0,0x6
-     f4c:	88850513          	addi	a0,a0,-1912 # 67d0 <malloc+0xb20>
+     f4c:	86050513          	addi	a0,a0,-1952 # 67a8 <malloc+0xb20>
      f50:	00005097          	auipc	ra,0x5
-     f54:	ca2080e7          	jalr	-862(ra) # 5bf2 <printf>
+     f54:	c7a080e7          	jalr	-902(ra) # 5bca <printf>
     exit(1);
      f58:	4505                	li	a0,1
      f5a:	00005097          	auipc	ra,0x5
@@ -1580,13 +1580,13 @@ bsstest(char *s)
      f76:	89aa                	mv	s3,a0
   unlink("bd");
      f78:	00006517          	auipc	a0,0x6
-     f7c:	87850513          	addi	a0,a0,-1928 # 67f0 <malloc+0xb40>
+     f7c:	85050513          	addi	a0,a0,-1968 # 67c8 <malloc+0xb40>
      f80:	00005097          	auipc	ra,0x5
      f84:	922080e7          	jalr	-1758(ra) # 58a2 <unlink>
   fd = open("bd", O_CREATE);
      f88:	20000593          	li	a1,512
      f8c:	00006517          	auipc	a0,0x6
-     f90:	86450513          	addi	a0,a0,-1948 # 67f0 <malloc+0xb40>
+     f90:	83c50513          	addi	a0,a0,-1988 # 67c8 <malloc+0xb40>
      f94:	00005097          	auipc	ra,0x5
      f98:	8fe080e7          	jalr	-1794(ra) # 5892 <open>
   if(fd < 0){
@@ -1600,7 +1600,7 @@ bsstest(char *s)
      faa:	07800a93          	li	s5,120
     if(link("bd", name) != 0){
      fae:	00006a17          	auipc	s4,0x6
-     fb2:	842a0a13          	addi	s4,s4,-1982 # 67f0 <malloc+0xb40>
+     fb2:	81aa0a13          	addi	s4,s4,-2022 # 67c8 <malloc+0xb40>
   for(i = 0; i < N; i++){
      fb6:	1f400b13          	li	s6,500
     name[0] = 'x';
@@ -1631,7 +1631,7 @@ bsstest(char *s)
      ffc:	fb691fe3          	bne	s2,s6,fba <bigdir+0x58>
   unlink("bd");
     1000:	00005517          	auipc	a0,0x5
-    1004:	7f050513          	addi	a0,a0,2032 # 67f0 <malloc+0xb40>
+    1004:	7c850513          	addi	a0,a0,1992 # 67c8 <malloc+0xb40>
     1008:	00005097          	auipc	ra,0x5
     100c:	89a080e7          	jalr	-1894(ra) # 58a2 <unlink>
     name[0] = 'x';
@@ -1676,9 +1676,9 @@ bsstest(char *s)
     printf("%s: bigdir create failed\n", s);
     106e:	85ce                	mv	a1,s3
     1070:	00005517          	auipc	a0,0x5
-    1074:	78850513          	addi	a0,a0,1928 # 67f8 <malloc+0xb48>
+    1074:	76050513          	addi	a0,a0,1888 # 67d0 <malloc+0xb48>
     1078:	00005097          	auipc	ra,0x5
-    107c:	b7a080e7          	jalr	-1158(ra) # 5bf2 <printf>
+    107c:	b52080e7          	jalr	-1198(ra) # 5bca <printf>
     exit(1);
     1080:	4505                	li	a0,1
     1082:	00004097          	auipc	ra,0x4
@@ -1687,9 +1687,9 @@ bsstest(char *s)
     108a:	fb040613          	addi	a2,s0,-80
     108e:	85ce                	mv	a1,s3
     1090:	00005517          	auipc	a0,0x5
-    1094:	78850513          	addi	a0,a0,1928 # 6818 <malloc+0xb68>
+    1094:	76050513          	addi	a0,a0,1888 # 67f0 <malloc+0xb68>
     1098:	00005097          	auipc	ra,0x5
-    109c:	b5a080e7          	jalr	-1190(ra) # 5bf2 <printf>
+    109c:	b32080e7          	jalr	-1230(ra) # 5bca <printf>
       exit(1);
     10a0:	4505                	li	a0,1
     10a2:	00004097          	auipc	ra,0x4
@@ -1697,9 +1697,9 @@ bsstest(char *s)
       printf("%s: bigdir unlink failed", s);
     10aa:	85ce                	mv	a1,s3
     10ac:	00005517          	auipc	a0,0x5
-    10b0:	78c50513          	addi	a0,a0,1932 # 6838 <malloc+0xb88>
+    10b0:	76450513          	addi	a0,a0,1892 # 6810 <malloc+0xb88>
     10b4:	00005097          	auipc	ra,0x5
-    10b8:	b3e080e7          	jalr	-1218(ra) # 5bf2 <printf>
+    10b8:	b16080e7          	jalr	-1258(ra) # 5bca <printf>
       exit(1);
     10bc:	4505                	li	a0,1
     10be:	00004097          	auipc	ra,0x4
@@ -1722,7 +1722,7 @@ bsstest(char *s)
     10dc:	4481                	li	s1,0
     if(link("nosuchfile", (char*)p) != -1){
     10de:	00005997          	auipc	s3,0x5
-    10e2:	77a98993          	addi	s3,s3,1914 # 6858 <malloc+0xba8>
+    10e2:	75298993          	addi	s3,s3,1874 # 6830 <malloc+0xba8>
     10e6:	597d                	li	s2,-1
   for(p = 0; p <= (uint)hi; p += PGSIZE){
     10e8:	6a85                	lui	s5,0x1
@@ -1750,9 +1750,9 @@ bsstest(char *s)
       printf("%s: link should not succeed\n", s);
     1118:	85da                	mv	a1,s6
     111a:	00005517          	auipc	a0,0x5
-    111e:	74e50513          	addi	a0,a0,1870 # 6868 <malloc+0xbb8>
+    111e:	72650513          	addi	a0,a0,1830 # 6840 <malloc+0xbb8>
     1122:	00005097          	auipc	ra,0x5
-    1126:	ad0080e7          	jalr	-1328(ra) # 5bf2 <printf>
+    1126:	aa8080e7          	jalr	-1368(ra) # 5bca <printf>
       exit(1);
     112a:	4505                	li	a0,1
     112c:	00004097          	auipc	ra,0x4
@@ -1775,7 +1775,7 @@ pgbug(char *s)
     113e:	fc043c23          	sd	zero,-40(s0)
   exec((char*)0xeaeb0b5b00002f5e, argv);
     1142:	00007497          	auipc	s1,0x7
-    1146:	44e4b483          	ld	s1,1102(s1) # 8590 <__SDATA_BEGIN__>
+    1146:	4264b483          	ld	s1,1062(s1) # 8568 <__SDATA_BEGIN__>
     114a:	fd840593          	addi	a1,s0,-40
     114e:	8526                	mv	a0,s1
     1150:	00004097          	auipc	ra,0x4
@@ -1806,7 +1806,7 @@ badarg(char *s)
     1176:	ec4e                	sd	s3,24(sp)
     1178:	0080                	addi	s0,sp,64
     117a:	64b1                	lui	s1,0xc
-    117c:	35048493          	addi	s1,s1,848 # c350 <buf+0x598>
+    117c:	35048493          	addi	s1,s1,848 # c350 <buf+0x5c0>
   for(int i = 0; i < 50000; i++){
     char *argv[2];
     argv[0] = (char*)0xffffffff;
@@ -1815,7 +1815,7 @@ badarg(char *s)
     argv[1] = 0;
     exec("echo", argv);
     1186:	00005997          	auipc	s3,0x5
-    118a:	faa98993          	addi	s3,s3,-86 # 6130 <malloc+0x480>
+    118a:	f8298993          	addi	s3,s3,-126 # 6108 <malloc+0x480>
     argv[0] = (char*)0xffffffff;
     118e:	fd243023          	sd	s2,-64(s0)
     argv[1] = 0;
@@ -1877,7 +1877,7 @@ badarg(char *s)
     120c:	0ef51b63          	bne	a0,a5,1302 <copyinstr2+0x150>
   char *args[] = { "xx", 0 };
     1210:	00007797          	auipc	a5,0x7
-    1214:	84078793          	addi	a5,a5,-1984 # 7a50 <malloc+0x1da0>
+    1214:	81878793          	addi	a5,a5,-2024 # 7a28 <malloc+0x1da0>
     1218:	f4f43c23          	sd	a5,-168(s0)
     121c:	f6043023          	sd	zero,-160(s0)
   ret = exec(b, args);
@@ -1896,9 +1896,9 @@ badarg(char *s)
   if(pid == 0){
     1242:	12051463          	bnez	a0,136a <copyinstr2+0x1b8>
     1246:	00007797          	auipc	a5,0x7
-    124a:	45a78793          	addi	a5,a5,1114 # 86a0 <big.1280>
+    124a:	43278793          	addi	a5,a5,1074 # 8678 <big.1270>
     124e:	00008697          	auipc	a3,0x8
-    1252:	45268693          	addi	a3,a3,1106 # 96a0 <__global_pointer$+0x910>
+    1252:	42a68693          	addi	a3,a3,1066 # 9678 <__global_pointer$+0x910>
       big[i] = 'x';
     1256:	07800713          	li	a4,120
     125a:	00e78023          	sb	a4,0(a5)
@@ -1907,10 +1907,10 @@ badarg(char *s)
     1260:	fed79de3          	bne	a5,a3,125a <copyinstr2+0xa8>
     big[PGSIZE] = '\0';
     1264:	00008797          	auipc	a5,0x8
-    1268:	42078e23          	sb	zero,1084(a5) # 96a0 <__global_pointer$+0x910>
+    1268:	40078a23          	sb	zero,1044(a5) # 9678 <__global_pointer$+0x910>
     char *args2[] = { big, big, big, 0 };
     126c:	00007797          	auipc	a5,0x7
-    1270:	ef478793          	addi	a5,a5,-268 # 8160 <malloc+0x24b0>
+    1270:	ecc78793          	addi	a5,a5,-308 # 8138 <malloc+0x24b0>
     1274:	6390                	ld	a2,0(a5)
     1276:	6794                	ld	a3,8(a5)
     1278:	6b98                	ld	a4,16(a5)
@@ -1922,7 +1922,7 @@ badarg(char *s)
     ret = exec("echo", args2);
     128c:	f3040593          	addi	a1,s0,-208
     1290:	00005517          	auipc	a0,0x5
-    1294:	ea050513          	addi	a0,a0,-352 # 6130 <malloc+0x480>
+    1294:	e7850513          	addi	a0,a0,-392 # 6108 <malloc+0x480>
     1298:	00004097          	auipc	ra,0x4
     129c:	5f2080e7          	jalr	1522(ra) # 588a <exec>
     if(ret != -1){
@@ -1931,9 +1931,9 @@ badarg(char *s)
       printf("exec(echo, BIG) returned %d, not -1\n", fd);
     12a6:	55fd                	li	a1,-1
     12a8:	00005517          	auipc	a0,0x5
-    12ac:	66850513          	addi	a0,a0,1640 # 6910 <malloc+0xc60>
+    12ac:	64050513          	addi	a0,a0,1600 # 68e8 <malloc+0xc60>
     12b0:	00005097          	auipc	ra,0x5
-    12b4:	942080e7          	jalr	-1726(ra) # 5bf2 <printf>
+    12b4:	91a080e7          	jalr	-1766(ra) # 5bca <printf>
       exit(1);
     12b8:	4505                	li	a0,1
     12ba:	00004097          	auipc	ra,0x4
@@ -1942,9 +1942,9 @@ badarg(char *s)
     12c2:	862a                	mv	a2,a0
     12c4:	f6840593          	addi	a1,s0,-152
     12c8:	00005517          	auipc	a0,0x5
-    12cc:	5c050513          	addi	a0,a0,1472 # 6888 <malloc+0xbd8>
+    12cc:	59850513          	addi	a0,a0,1432 # 6860 <malloc+0xbd8>
     12d0:	00005097          	auipc	ra,0x5
-    12d4:	922080e7          	jalr	-1758(ra) # 5bf2 <printf>
+    12d4:	8fa080e7          	jalr	-1798(ra) # 5bca <printf>
     exit(1);
     12d8:	4505                	li	a0,1
     12da:	00004097          	auipc	ra,0x4
@@ -1953,9 +1953,9 @@ badarg(char *s)
     12e2:	862a                	mv	a2,a0
     12e4:	f6840593          	addi	a1,s0,-152
     12e8:	00005517          	auipc	a0,0x5
-    12ec:	5c050513          	addi	a0,a0,1472 # 68a8 <malloc+0xbf8>
+    12ec:	59850513          	addi	a0,a0,1432 # 6880 <malloc+0xbf8>
     12f0:	00005097          	auipc	ra,0x5
-    12f4:	902080e7          	jalr	-1790(ra) # 5bf2 <printf>
+    12f4:	8da080e7          	jalr	-1830(ra) # 5bca <printf>
     exit(1);
     12f8:	4505                	li	a0,1
     12fa:	00004097          	auipc	ra,0x4
@@ -1965,9 +1965,9 @@ badarg(char *s)
     1304:	f6840613          	addi	a2,s0,-152
     1308:	85b2                	mv	a1,a2
     130a:	00005517          	auipc	a0,0x5
-    130e:	5be50513          	addi	a0,a0,1470 # 68c8 <malloc+0xc18>
+    130e:	59650513          	addi	a0,a0,1430 # 68a0 <malloc+0xc18>
     1312:	00005097          	auipc	ra,0x5
-    1316:	8e0080e7          	jalr	-1824(ra) # 5bf2 <printf>
+    1316:	8b8080e7          	jalr	-1864(ra) # 5bca <printf>
     exit(1);
     131a:	4505                	li	a0,1
     131c:	00004097          	auipc	ra,0x4
@@ -1976,18 +1976,18 @@ badarg(char *s)
     1324:	567d                	li	a2,-1
     1326:	f6840593          	addi	a1,s0,-152
     132a:	00005517          	auipc	a0,0x5
-    132e:	5c650513          	addi	a0,a0,1478 # 68f0 <malloc+0xc40>
+    132e:	59e50513          	addi	a0,a0,1438 # 68c8 <malloc+0xc40>
     1332:	00005097          	auipc	ra,0x5
-    1336:	8c0080e7          	jalr	-1856(ra) # 5bf2 <printf>
+    1336:	898080e7          	jalr	-1896(ra) # 5bca <printf>
     exit(1);
     133a:	4505                	li	a0,1
     133c:	00004097          	auipc	ra,0x4
     1340:	516080e7          	jalr	1302(ra) # 5852 <exit>
     printf("fork failed\n");
     1344:	00006517          	auipc	a0,0x6
-    1348:	a4450513          	addi	a0,a0,-1468 # 6d88 <malloc+0x10d8>
+    1348:	a1c50513          	addi	a0,a0,-1508 # 6d60 <malloc+0x10d8>
     134c:	00005097          	auipc	ra,0x5
-    1350:	8a6080e7          	jalr	-1882(ra) # 5bf2 <printf>
+    1350:	87e080e7          	jalr	-1922(ra) # 5bca <printf>
     exit(1);
     1354:	4505                	li	a0,1
     1356:	00004097          	auipc	ra,0x4
@@ -2013,9 +2013,9 @@ badarg(char *s)
     138c:	8082                	ret
     printf("exec(echo, BIG) succeeded, should have failed\n");
     138e:	00005517          	auipc	a0,0x5
-    1392:	5aa50513          	addi	a0,a0,1450 # 6938 <malloc+0xc88>
+    1392:	58250513          	addi	a0,a0,1410 # 6910 <malloc+0xc88>
     1396:	00005097          	auipc	ra,0x5
-    139a:	85c080e7          	jalr	-1956(ra) # 5bf2 <printf>
+    139a:	834080e7          	jalr	-1996(ra) # 5bca <printf>
     exit(1);
     139e:	4505                	li	a0,1
     13a0:	00004097          	auipc	ra,0x4
@@ -2036,7 +2036,7 @@ badarg(char *s)
   close(open("truncfile", O_CREATE|O_TRUNC|O_WRONLY));
     13bc:	60100593          	li	a1,1537
     13c0:	00005517          	auipc	a0,0x5
-    13c4:	dc850513          	addi	a0,a0,-568 # 6188 <malloc+0x4d8>
+    13c4:	da050513          	addi	a0,a0,-608 # 6160 <malloc+0x4d8>
     13c8:	00004097          	auipc	ra,0x4
     13cc:	4ca080e7          	jalr	1226(ra) # 5892 <open>
     13d0:	00004097          	auipc	ra,0x4
@@ -2051,10 +2051,10 @@ badarg(char *s)
     13e6:	06400993          	li	s3,100
       int fd = open("truncfile", O_WRONLY);
     13ea:	00005a17          	auipc	s4,0x5
-    13ee:	d9ea0a13          	addi	s4,s4,-610 # 6188 <malloc+0x4d8>
+    13ee:	d76a0a13          	addi	s4,s4,-650 # 6160 <malloc+0x4d8>
       int n = write(fd, "1234567890", 10);
     13f2:	00005a97          	auipc	s5,0x5
-    13f6:	5a6a8a93          	addi	s5,s5,1446 # 6998 <malloc+0xce8>
+    13f6:	57ea8a93          	addi	s5,s5,1406 # 6970 <malloc+0xce8>
       int fd = open("truncfile", O_WRONLY);
     13fa:	4585                	li	a1,1
     13fc:	8552                	mv	a0,s4
@@ -2100,9 +2100,9 @@ badarg(char *s)
     printf("%s: fork failed\n", s);
     1460:	85ca                	mv	a1,s2
     1462:	00005517          	auipc	a0,0x5
-    1466:	50650513          	addi	a0,a0,1286 # 6968 <malloc+0xcb8>
+    1466:	4de50513          	addi	a0,a0,1246 # 6940 <malloc+0xcb8>
     146a:	00004097          	auipc	ra,0x4
-    146e:	788080e7          	jalr	1928(ra) # 5bf2 <printf>
+    146e:	760080e7          	jalr	1888(ra) # 5bca <printf>
     exit(1);
     1472:	4505                	li	a0,1
     1474:	00004097          	auipc	ra,0x4
@@ -2110,9 +2110,9 @@ badarg(char *s)
         printf("%s: open failed\n", s);
     147c:	85ca                	mv	a1,s2
     147e:	00005517          	auipc	a0,0x5
-    1482:	50250513          	addi	a0,a0,1282 # 6980 <malloc+0xcd0>
+    1482:	4da50513          	addi	a0,a0,1242 # 6958 <malloc+0xcd0>
     1486:	00004097          	auipc	ra,0x4
-    148a:	76c080e7          	jalr	1900(ra) # 5bf2 <printf>
+    148a:	744080e7          	jalr	1860(ra) # 5bca <printf>
         exit(1);
     148e:	4505                	li	a0,1
     1490:	00004097          	auipc	ra,0x4
@@ -2121,9 +2121,9 @@ badarg(char *s)
     1498:	862a                	mv	a2,a0
     149a:	85ca                	mv	a1,s2
     149c:	00005517          	auipc	a0,0x5
-    14a0:	50c50513          	addi	a0,a0,1292 # 69a8 <malloc+0xcf8>
+    14a0:	4e450513          	addi	a0,a0,1252 # 6980 <malloc+0xcf8>
     14a4:	00004097          	auipc	ra,0x4
-    14a8:	74e080e7          	jalr	1870(ra) # 5bf2 <printf>
+    14a8:	726080e7          	jalr	1830(ra) # 5bca <printf>
         exit(1);
     14ac:	4505                	li	a0,1
     14ae:	00004097          	auipc	ra,0x4
@@ -2131,10 +2131,10 @@ badarg(char *s)
     14b6:	09600993          	li	s3,150
     int fd = open("truncfile", O_CREATE|O_WRONLY|O_TRUNC);
     14ba:	00005a17          	auipc	s4,0x5
-    14be:	ccea0a13          	addi	s4,s4,-818 # 6188 <malloc+0x4d8>
+    14be:	ca6a0a13          	addi	s4,s4,-858 # 6160 <malloc+0x4d8>
     int n = write(fd, "xxx", 3);
     14c2:	00005a97          	auipc	s5,0x5
-    14c6:	506a8a93          	addi	s5,s5,1286 # 69c8 <malloc+0xd18>
+    14c6:	4dea8a93          	addi	s5,s5,1246 # 69a0 <malloc+0xd18>
     int fd = open("truncfile", O_CREATE|O_WRONLY|O_TRUNC);
     14ca:	60100593          	li	a1,1537
     14ce:	8552                	mv	a0,s4
@@ -2164,7 +2164,7 @@ badarg(char *s)
     1508:	356080e7          	jalr	854(ra) # 585a <wait>
   unlink("truncfile");
     150c:	00005517          	auipc	a0,0x5
-    1510:	c7c50513          	addi	a0,a0,-900 # 6188 <malloc+0x4d8>
+    1510:	c5450513          	addi	a0,a0,-940 # 6160 <malloc+0x4d8>
     1514:	00004097          	auipc	ra,0x4
     1518:	38e080e7          	jalr	910(ra) # 58a2 <unlink>
   exit(xstatus);
@@ -2174,9 +2174,9 @@ badarg(char *s)
       printf("%s: open failed\n", s);
     1528:	85ca                	mv	a1,s2
     152a:	00005517          	auipc	a0,0x5
-    152e:	45650513          	addi	a0,a0,1110 # 6980 <malloc+0xcd0>
+    152e:	42e50513          	addi	a0,a0,1070 # 6958 <malloc+0xcd0>
     1532:	00004097          	auipc	ra,0x4
-    1536:	6c0080e7          	jalr	1728(ra) # 5bf2 <printf>
+    1536:	698080e7          	jalr	1688(ra) # 5bca <printf>
       exit(1);
     153a:	4505                	li	a0,1
     153c:	00004097          	auipc	ra,0x4
@@ -2185,9 +2185,9 @@ badarg(char *s)
     1544:	862a                	mv	a2,a0
     1546:	85ca                	mv	a1,s2
     1548:	00005517          	auipc	a0,0x5
-    154c:	48850513          	addi	a0,a0,1160 # 69d0 <malloc+0xd20>
+    154c:	46050513          	addi	a0,a0,1120 # 69a8 <malloc+0xd20>
     1550:	00004097          	auipc	ra,0x4
-    1554:	6a2080e7          	jalr	1698(ra) # 5bf2 <printf>
+    1554:	67a080e7          	jalr	1658(ra) # 5bca <printf>
       exit(1);
     1558:	4505                	li	a0,1
     155a:	00004097          	auipc	ra,0x4
@@ -2204,15 +2204,15 @@ badarg(char *s)
     156e:	892a                	mv	s2,a0
   char *echoargv[] = { "echo", "OK", 0 };
     1570:	00005797          	auipc	a5,0x5
-    1574:	bc078793          	addi	a5,a5,-1088 # 6130 <malloc+0x480>
+    1574:	b9878793          	addi	a5,a5,-1128 # 6108 <malloc+0x480>
     1578:	fcf43023          	sd	a5,-64(s0)
     157c:	00005797          	auipc	a5,0x5
-    1580:	47478793          	addi	a5,a5,1140 # 69f0 <malloc+0xd40>
+    1580:	44c78793          	addi	a5,a5,1100 # 69c8 <malloc+0xd40>
     1584:	fcf43423          	sd	a5,-56(s0)
     1588:	fc043823          	sd	zero,-48(s0)
   unlink("echo-ok");
     158c:	00005517          	auipc	a0,0x5
-    1590:	46c50513          	addi	a0,a0,1132 # 69f8 <malloc+0xd48>
+    1590:	44450513          	addi	a0,a0,1092 # 69d0 <malloc+0xd48>
     1594:	00004097          	auipc	ra,0x4
     1598:	30e080e7          	jalr	782(ra) # 58a2 <unlink>
   pid = fork();
@@ -2230,7 +2230,7 @@ badarg(char *s)
     fd = open("echo-ok", O_CREATE|O_WRONLY);
     15b6:	20100593          	li	a1,513
     15ba:	00005517          	auipc	a0,0x5
-    15be:	43e50513          	addi	a0,a0,1086 # 69f8 <malloc+0xd48>
+    15be:	41650513          	addi	a0,a0,1046 # 69d0 <malloc+0xd48>
     15c2:	00004097          	auipc	ra,0x4
     15c6:	2d0080e7          	jalr	720(ra) # 5892 <open>
     if(fd < 0) {
@@ -2241,9 +2241,9 @@ badarg(char *s)
       printf("%s: wrong fd\n", s);
     15d4:	85ca                	mv	a1,s2
     15d6:	00005517          	auipc	a0,0x5
-    15da:	44250513          	addi	a0,a0,1090 # 6a18 <malloc+0xd68>
+    15da:	41a50513          	addi	a0,a0,1050 # 69f0 <malloc+0xd68>
     15de:	00004097          	auipc	ra,0x4
-    15e2:	614080e7          	jalr	1556(ra) # 5bf2 <printf>
+    15e2:	5ec080e7          	jalr	1516(ra) # 5bca <printf>
       exit(1);
     15e6:	4505                	li	a0,1
     15e8:	00004097          	auipc	ra,0x4
@@ -2251,9 +2251,9 @@ badarg(char *s)
      printf("%s: fork failed\n", s);
     15f0:	85ca                	mv	a1,s2
     15f2:	00005517          	auipc	a0,0x5
-    15f6:	37650513          	addi	a0,a0,886 # 6968 <malloc+0xcb8>
+    15f6:	34e50513          	addi	a0,a0,846 # 6940 <malloc+0xcb8>
     15fa:	00004097          	auipc	ra,0x4
-    15fe:	5f8080e7          	jalr	1528(ra) # 5bf2 <printf>
+    15fe:	5d0080e7          	jalr	1488(ra) # 5bca <printf>
      exit(1);
     1602:	4505                	li	a0,1
     1604:	00004097          	auipc	ra,0x4
@@ -2261,9 +2261,9 @@ badarg(char *s)
       printf("%s: create failed\n", s);
     160c:	85ca                	mv	a1,s2
     160e:	00005517          	auipc	a0,0x5
-    1612:	3f250513          	addi	a0,a0,1010 # 6a00 <malloc+0xd50>
+    1612:	3ca50513          	addi	a0,a0,970 # 69d8 <malloc+0xd50>
     1616:	00004097          	auipc	ra,0x4
-    161a:	5dc080e7          	jalr	1500(ra) # 5bf2 <printf>
+    161a:	5b4080e7          	jalr	1460(ra) # 5bca <printf>
       exit(1);
     161e:	4505                	li	a0,1
     1620:	00004097          	auipc	ra,0x4
@@ -2271,7 +2271,7 @@ badarg(char *s)
     if(exec("echo", echoargv) < 0){
     1628:	fc040593          	addi	a1,s0,-64
     162c:	00005517          	auipc	a0,0x5
-    1630:	b0450513          	addi	a0,a0,-1276 # 6130 <malloc+0x480>
+    1630:	adc50513          	addi	a0,a0,-1316 # 6108 <malloc+0x480>
     1634:	00004097          	auipc	ra,0x4
     1638:	256080e7          	jalr	598(ra) # 588a <exec>
     163c:	02054163          	bltz	a0,165e <exectest+0xfc>
@@ -2289,9 +2289,9 @@ badarg(char *s)
       printf("%s: exec echo failed\n", s);
     165e:	85ca                	mv	a1,s2
     1660:	00005517          	auipc	a0,0x5
-    1664:	3c850513          	addi	a0,a0,968 # 6a28 <malloc+0xd78>
+    1664:	3a050513          	addi	a0,a0,928 # 6a00 <malloc+0xd78>
     1668:	00004097          	auipc	ra,0x4
-    166c:	58a080e7          	jalr	1418(ra) # 5bf2 <printf>
+    166c:	562080e7          	jalr	1378(ra) # 5bca <printf>
       exit(1);
     1670:	4505                	li	a0,1
     1672:	00004097          	auipc	ra,0x4
@@ -2299,14 +2299,14 @@ badarg(char *s)
     printf("%s: wait failed!\n", s);
     167a:	85ca                	mv	a1,s2
     167c:	00005517          	auipc	a0,0x5
-    1680:	3c450513          	addi	a0,a0,964 # 6a40 <malloc+0xd90>
+    1680:	39c50513          	addi	a0,a0,924 # 6a18 <malloc+0xd90>
     1684:	00004097          	auipc	ra,0x4
-    1688:	56e080e7          	jalr	1390(ra) # 5bf2 <printf>
+    1688:	546080e7          	jalr	1350(ra) # 5bca <printf>
     168c:	b7d1                	j	1650 <exectest+0xee>
   fd = open("echo-ok", O_RDONLY);
     168e:	4581                	li	a1,0
     1690:	00005517          	auipc	a0,0x5
-    1694:	36850513          	addi	a0,a0,872 # 69f8 <malloc+0xd48>
+    1694:	34050513          	addi	a0,a0,832 # 69d0 <malloc+0xd48>
     1698:	00004097          	auipc	ra,0x4
     169c:	1fa080e7          	jalr	506(ra) # 5892 <open>
   if(fd < 0) {
@@ -2321,9 +2321,9 @@ badarg(char *s)
     printf("%s: read failed\n", s);
     16b8:	85ca                	mv	a1,s2
     16ba:	00005517          	auipc	a0,0x5
-    16be:	e0650513          	addi	a0,a0,-506 # 64c0 <malloc+0x810>
+    16be:	dde50513          	addi	a0,a0,-546 # 6498 <malloc+0x810>
     16c2:	00004097          	auipc	ra,0x4
-    16c6:	530080e7          	jalr	1328(ra) # 5bf2 <printf>
+    16c6:	508080e7          	jalr	1288(ra) # 5bca <printf>
     exit(1);
     16ca:	4505                	li	a0,1
     16cc:	00004097          	auipc	ra,0x4
@@ -2331,16 +2331,16 @@ badarg(char *s)
     printf("%s: open failed\n", s);
     16d4:	85ca                	mv	a1,s2
     16d6:	00005517          	auipc	a0,0x5
-    16da:	2aa50513          	addi	a0,a0,682 # 6980 <malloc+0xcd0>
+    16da:	28250513          	addi	a0,a0,642 # 6958 <malloc+0xcd0>
     16de:	00004097          	auipc	ra,0x4
-    16e2:	514080e7          	jalr	1300(ra) # 5bf2 <printf>
+    16e2:	4ec080e7          	jalr	1260(ra) # 5bca <printf>
     exit(1);
     16e6:	4505                	li	a0,1
     16e8:	00004097          	auipc	ra,0x4
     16ec:	16a080e7          	jalr	362(ra) # 5852 <exit>
   unlink("echo-ok");
     16f0:	00005517          	auipc	a0,0x5
-    16f4:	30850513          	addi	a0,a0,776 # 69f8 <malloc+0xd48>
+    16f4:	2e050513          	addi	a0,a0,736 # 69d0 <malloc+0xd48>
     16f8:	00004097          	auipc	ra,0x4
     16fc:	1aa080e7          	jalr	426(ra) # 58a2 <unlink>
   if(buf[0] == 'O' && buf[1] == 'K')
@@ -2353,9 +2353,9 @@ badarg(char *s)
     printf("%s: wrong output\n", s);
     1718:	85ca                	mv	a1,s2
     171a:	00005517          	auipc	a0,0x5
-    171e:	33e50513          	addi	a0,a0,830 # 6a58 <malloc+0xda8>
+    171e:	31650513          	addi	a0,a0,790 # 6a30 <malloc+0xda8>
     1722:	00004097          	auipc	ra,0x4
-    1726:	4d0080e7          	jalr	1232(ra) # 5bf2 <printf>
+    1726:	4a8080e7          	jalr	1192(ra) # 5bca <printf>
     exit(1);
     172a:	4505                	li	a0,1
     172c:	00004097          	auipc	ra,0x4
@@ -2403,7 +2403,7 @@ badarg(char *s)
     1784:	4985                	li	s3,1
     while((n = read(fds[0], buf, cc)) > 0){
     1786:	0000aa97          	auipc	s5,0xa
-    178a:	632a8a93          	addi	s5,s5,1586 # bdb8 <buf>
+    178a:	60aa8a93          	addi	s5,s5,1546 # bd90 <buf>
       if(cc > sizeof(buf))
     178e:	6b0d                	lui	s6,0x3
     while((n = read(fds[0], buf, cc)) > 0){
@@ -2415,7 +2415,7 @@ badarg(char *s)
     17a0:	10a05263          	blez	a0,18a4 <pipe1+0x166>
       for(i = 0; i < n; i++){
     17a4:	0000a717          	auipc	a4,0xa
-    17a8:	61470713          	addi	a4,a4,1556 # bdb8 <buf>
+    17a8:	5ec70713          	addi	a4,a4,1516 # bd90 <buf>
     17ac:	00a4863b          	addw	a2,s1,a0
         if((buf[i] & 0xff) != (seq++ & 0xff)){
     17b0:	00074683          	lbu	a3,0(a4)
@@ -2440,9 +2440,9 @@ badarg(char *s)
     printf("%s: pipe() failed\n", s);
     17da:	85ca                	mv	a1,s2
     17dc:	00005517          	auipc	a0,0x5
-    17e0:	29450513          	addi	a0,a0,660 # 6a70 <malloc+0xdc0>
+    17e0:	26c50513          	addi	a0,a0,620 # 6a48 <malloc+0xdc0>
     17e4:	00004097          	auipc	ra,0x4
-    17e8:	40e080e7          	jalr	1038(ra) # 5bf2 <printf>
+    17e8:	3e6080e7          	jalr	998(ra) # 5bca <printf>
     exit(1);
     17ec:	4505                	li	a0,1
     17ee:	00004097          	auipc	ra,0x4
@@ -2453,7 +2453,7 @@ badarg(char *s)
     17fe:	080080e7          	jalr	128(ra) # 587a <close>
     for(n = 0; n < N; n++){
     1802:	0000ab17          	auipc	s6,0xa
-    1806:	5b6b0b13          	addi	s6,s6,1462 # bdb8 <buf>
+    1806:	58eb0b13          	addi	s6,s6,1422 # bd90 <buf>
     180a:	416004bb          	negw	s1,s6
     180e:	0ff4f493          	andi	s1,s1,255
     1812:	409b0993          	addi	s3,s6,1033
@@ -2490,9 +2490,9 @@ badarg(char *s)
         printf("%s: pipe1 oops 1\n", s);
     1860:	85ca                	mv	a1,s2
     1862:	00005517          	auipc	a0,0x5
-    1866:	22650513          	addi	a0,a0,550 # 6a88 <malloc+0xdd8>
+    1866:	1fe50513          	addi	a0,a0,510 # 6a60 <malloc+0xdd8>
     186a:	00004097          	auipc	ra,0x4
-    186e:	388080e7          	jalr	904(ra) # 5bf2 <printf>
+    186e:	360080e7          	jalr	864(ra) # 5bca <printf>
         exit(1);
     1872:	4505                	li	a0,1
     1874:	00004097          	auipc	ra,0x4
@@ -2500,9 +2500,9 @@ badarg(char *s)
           printf("%s: pipe1 oops 2\n", s);
     187c:	85ca                	mv	a1,s2
     187e:	00005517          	auipc	a0,0x5
-    1882:	22250513          	addi	a0,a0,546 # 6aa0 <malloc+0xdf0>
+    1882:	1fa50513          	addi	a0,a0,506 # 6a78 <malloc+0xdf0>
     1886:	00004097          	auipc	ra,0x4
-    188a:	36c080e7          	jalr	876(ra) # 5bf2 <printf>
+    188a:	344080e7          	jalr	836(ra) # 5bca <printf>
 }
     188e:	60e6                	ld	ra,88(sp)
     1890:	6446                	ld	s0,80(sp)
@@ -2522,9 +2522,9 @@ badarg(char *s)
       printf("%s: pipe1 oops 3 total %d\n", total);
     18ae:	85d2                	mv	a1,s4
     18b0:	00005517          	auipc	a0,0x5
-    18b4:	20850513          	addi	a0,a0,520 # 6ab8 <malloc+0xe08>
+    18b4:	1e050513          	addi	a0,a0,480 # 6a90 <malloc+0xe08>
     18b8:	00004097          	auipc	ra,0x4
-    18bc:	33a080e7          	jalr	826(ra) # 5bf2 <printf>
+    18bc:	312080e7          	jalr	786(ra) # 5bca <printf>
       exit(1);
     18c0:	4505                	li	a0,1
     18c2:	00004097          	auipc	ra,0x4
@@ -2544,9 +2544,9 @@ badarg(char *s)
     printf("%s: fork() failed\n", s);
     18ee:	85ca                	mv	a1,s2
     18f0:	00005517          	auipc	a0,0x5
-    18f4:	1e850513          	addi	a0,a0,488 # 6ad8 <malloc+0xe28>
+    18f4:	1c050513          	addi	a0,a0,448 # 6ab0 <malloc+0xe28>
     18f8:	00004097          	auipc	ra,0x4
-    18fc:	2fa080e7          	jalr	762(ra) # 5bf2 <printf>
+    18fc:	2d2080e7          	jalr	722(ra) # 5bca <printf>
     exit(1);
     1900:	4505                	li	a0,1
     1902:	00004097          	auipc	ra,0x4
@@ -2597,9 +2597,9 @@ badarg(char *s)
       printf("%s: fork failed\n", s);
     1960:	85d2                	mv	a1,s4
     1962:	00005517          	auipc	a0,0x5
-    1966:	00650513          	addi	a0,a0,6 # 6968 <malloc+0xcb8>
+    1966:	fde50513          	addi	a0,a0,-34 # 6940 <malloc+0xcb8>
     196a:	00004097          	auipc	ra,0x4
-    196e:	288080e7          	jalr	648(ra) # 5bf2 <printf>
+    196e:	260080e7          	jalr	608(ra) # 5bca <printf>
       exit(1);
     1972:	4505                	li	a0,1
     1974:	00004097          	auipc	ra,0x4
@@ -2607,9 +2607,9 @@ badarg(char *s)
         printf("%s: wait wrong pid\n", s);
     197c:	85d2                	mv	a1,s4
     197e:	00005517          	auipc	a0,0x5
-    1982:	17250513          	addi	a0,a0,370 # 6af0 <malloc+0xe40>
+    1982:	14a50513          	addi	a0,a0,330 # 6ac8 <malloc+0xe40>
     1986:	00004097          	auipc	ra,0x4
-    198a:	26c080e7          	jalr	620(ra) # 5bf2 <printf>
+    198a:	244080e7          	jalr	580(ra) # 5bca <printf>
         exit(1);
     198e:	4505                	li	a0,1
     1990:	00004097          	auipc	ra,0x4
@@ -2617,9 +2617,9 @@ badarg(char *s)
         printf("%s: wait wrong exit status\n", s);
     1998:	85d2                	mv	a1,s4
     199a:	00005517          	auipc	a0,0x5
-    199e:	16e50513          	addi	a0,a0,366 # 6b08 <malloc+0xe58>
+    199e:	14650513          	addi	a0,a0,326 # 6ae0 <malloc+0xe58>
     19a2:	00004097          	auipc	ra,0x4
-    19a6:	250080e7          	jalr	592(ra) # 5bf2 <printf>
+    19a6:	228080e7          	jalr	552(ra) # 5bca <printf>
         exit(1);
     19aa:	4505                	li	a0,1
     19ac:	00004097          	auipc	ra,0x4
@@ -2674,9 +2674,9 @@ badarg(char *s)
       printf("%s: fork failed\n", s);
     1a10:	85ca                	mv	a1,s2
     1a12:	00005517          	auipc	a0,0x5
-    1a16:	f5650513          	addi	a0,a0,-170 # 6968 <malloc+0xcb8>
+    1a16:	f2e50513          	addi	a0,a0,-210 # 6940 <malloc+0xcb8>
     1a1a:	00004097          	auipc	ra,0x4
-    1a1e:	1d8080e7          	jalr	472(ra) # 5bf2 <printf>
+    1a1e:	1b0080e7          	jalr	432(ra) # 5bca <printf>
       exit(1);
     1a22:	4505                	li	a0,1
     1a24:	00004097          	auipc	ra,0x4
@@ -2687,9 +2687,9 @@ badarg(char *s)
         printf("%s: fork failed\n", s);
     1a34:	85ca                	mv	a1,s2
     1a36:	00005517          	auipc	a0,0x5
-    1a3a:	f3250513          	addi	a0,a0,-206 # 6968 <malloc+0xcb8>
+    1a3a:	f0a50513          	addi	a0,a0,-246 # 6940 <malloc+0xcb8>
     1a3e:	00004097          	auipc	ra,0x4
-    1a42:	1b4080e7          	jalr	436(ra) # 5bf2 <printf>
+    1a42:	18c080e7          	jalr	396(ra) # 5bca <printf>
         exit(1);
     1a46:	4505                	li	a0,1
     1a48:	00004097          	auipc	ra,0x4
@@ -2743,9 +2743,9 @@ badarg(char *s)
       printf("%s: fork failed", s);
     1aae:	85a6                	mv	a1,s1
     1ab0:	00005517          	auipc	a0,0x5
-    1ab4:	07850513          	addi	a0,a0,120 # 6b28 <malloc+0xe78>
+    1ab4:	05050513          	addi	a0,a0,80 # 6b00 <malloc+0xe78>
     1ab8:	00004097          	auipc	ra,0x4
-    1abc:	13a080e7          	jalr	314(ra) # 5bf2 <printf>
+    1abc:	112080e7          	jalr	274(ra) # 5bca <printf>
       exit(1);
     1ac0:	4505                	li	a0,1
     1ac2:	00004097          	auipc	ra,0x4
@@ -2780,9 +2780,9 @@ badarg(char *s)
       printf("%s: fork in child failed", s);
     1b06:	85a6                	mv	a1,s1
     1b08:	00005517          	auipc	a0,0x5
-    1b0c:	03050513          	addi	a0,a0,48 # 6b38 <malloc+0xe88>
+    1b0c:	00850513          	addi	a0,a0,8 # 6b10 <malloc+0xe88>
     1b10:	00004097          	auipc	ra,0x4
-    1b14:	0e2080e7          	jalr	226(ra) # 5bf2 <printf>
+    1b14:	0ba080e7          	jalr	186(ra) # 5bca <printf>
       exit(1);
     1b18:	4505                	li	a0,1
     1b1a:	00004097          	auipc	ra,0x4
@@ -2816,9 +2816,9 @@ badarg(char *s)
     1b52:	d04080e7          	jalr	-764(ra) # 5852 <exit>
       printf("fork failed\n");
     1b56:	00005517          	auipc	a0,0x5
-    1b5a:	23250513          	addi	a0,a0,562 # 6d88 <malloc+0x10d8>
+    1b5a:	20a50513          	addi	a0,a0,522 # 6d60 <malloc+0x10d8>
     1b5e:	00004097          	auipc	ra,0x4
-    1b62:	094080e7          	jalr	148(ra) # 5bf2 <printf>
+    1b62:	06c080e7          	jalr	108(ra) # 5bca <printf>
       exit(1);
     1b66:	4505                	li	a0,1
     1b68:	00004097          	auipc	ra,0x4
@@ -2890,9 +2890,9 @@ badarg(char *s)
       printf("fork failed\n", s);
     1bf2:	85e6                	mv	a1,s9
     1bf4:	00005517          	auipc	a0,0x5
-    1bf8:	19450513          	addi	a0,a0,404 # 6d88 <malloc+0x10d8>
+    1bf8:	16c50513          	addi	a0,a0,364 # 6d60 <malloc+0x10d8>
     1bfc:	00004097          	auipc	ra,0x4
-    1c00:	ff6080e7          	jalr	-10(ra) # 5bf2 <printf>
+    1c00:	fce080e7          	jalr	-50(ra) # 5bca <printf>
       exit(1);
     1c04:	4505                	li	a0,1
     1c06:	00004097          	auipc	ra,0x4
@@ -2908,9 +2908,9 @@ badarg(char *s)
           printf("%s: create failed\n", s);
     1c1e:	85e6                	mv	a1,s9
     1c20:	00005517          	auipc	a0,0x5
-    1c24:	de050513          	addi	a0,a0,-544 # 6a00 <malloc+0xd50>
+    1c24:	db850513          	addi	a0,a0,-584 # 69d8 <malloc+0xd50>
     1c28:	00004097          	auipc	ra,0x4
-    1c2c:	fca080e7          	jalr	-54(ra) # 5bf2 <printf>
+    1c2c:	fa2080e7          	jalr	-94(ra) # 5bca <printf>
           exit(1);
     1c30:	4505                	li	a0,1
     1c32:	00004097          	auipc	ra,0x4
@@ -2949,9 +2949,9 @@ badarg(char *s)
             printf("%s: unlink failed\n", s);
     1c90:	85e6                	mv	a1,s9
     1c92:	00005517          	auipc	a0,0x5
-    1c96:	ec650513          	addi	a0,a0,-314 # 6b58 <malloc+0xea8>
+    1c96:	e9e50513          	addi	a0,a0,-354 # 6b30 <malloc+0xea8>
     1c9a:	00004097          	auipc	ra,0x4
-    1c9e:	f58080e7          	jalr	-168(ra) # 5bf2 <printf>
+    1c9e:	f30080e7          	jalr	-208(ra) # 5bca <printf>
             exit(1);
     1ca2:	4505                	li	a0,1
     1ca4:	00004097          	auipc	ra,0x4
@@ -2968,9 +2968,9 @@ badarg(char *s)
     1cc0:	f8040613          	addi	a2,s0,-128
     1cc4:	85e6                	mv	a1,s9
     1cc6:	00005517          	auipc	a0,0x5
-    1cca:	eaa50513          	addi	a0,a0,-342 # 6b70 <malloc+0xec0>
+    1cca:	e8250513          	addi	a0,a0,-382 # 6b48 <malloc+0xec0>
     1cce:	00004097          	auipc	ra,0x4
-    1cd2:	f24080e7          	jalr	-220(ra) # 5bf2 <printf>
+    1cd2:	efc080e7          	jalr	-260(ra) # 5bca <printf>
         exit(1);
     1cd6:	4505                	li	a0,1
     1cd8:	00004097          	auipc	ra,0x4
@@ -3008,9 +3008,9 @@ badarg(char *s)
     1d26:	f8040613          	addi	a2,s0,-128
     1d2a:	85e6                	mv	a1,s9
     1d2c:	00005517          	auipc	a0,0x5
-    1d30:	e6c50513          	addi	a0,a0,-404 # 6b98 <malloc+0xee8>
+    1d30:	e4450513          	addi	a0,a0,-444 # 6b70 <malloc+0xee8>
     1d34:	00004097          	auipc	ra,0x4
-    1d38:	ebe080e7          	jalr	-322(ra) # 5bf2 <printf>
+    1d38:	e96080e7          	jalr	-362(ra) # 5bca <printf>
         exit(1);
     1d3c:	4505                	li	a0,1
     1d3e:	00004097          	auipc	ra,0x4
@@ -3085,7 +3085,7 @@ badarg(char *s)
     1dca:	84aa                	mv	s1,a0
   unlink("x");
     1dcc:	00004517          	auipc	a0,0x4
-    1dd0:	3d450513          	addi	a0,a0,980 # 61a0 <malloc+0x4f0>
+    1dd0:	3ac50513          	addi	a0,a0,940 # 6178 <malloc+0x4f0>
     1dd4:	00004097          	auipc	ra,0x4
     1dd8:	ace080e7          	jalr	-1330(ra) # 58a2 <unlink>
   pid = fork();
@@ -3110,17 +3110,17 @@ badarg(char *s)
     1e06:	4b05                	li	s6,1
       unlink("x");
     1e08:	00004a97          	auipc	s5,0x4
-    1e0c:	398a8a93          	addi	s5,s5,920 # 61a0 <malloc+0x4f0>
+    1e0c:	370a8a93          	addi	s5,s5,880 # 6178 <malloc+0x4f0>
       link("cat", "x");
     1e10:	00005b97          	auipc	s7,0x5
-    1e14:	db0b8b93          	addi	s7,s7,-592 # 6bc0 <malloc+0xf10>
+    1e14:	d88b8b93          	addi	s7,s7,-632 # 6b98 <malloc+0xf10>
     1e18:	a091                	j	1e5c <linkunlink+0xac>
     printf("%s: fork failed\n", s);
     1e1a:	85a6                	mv	a1,s1
     1e1c:	00005517          	auipc	a0,0x5
-    1e20:	b4c50513          	addi	a0,a0,-1204 # 6968 <malloc+0xcb8>
+    1e20:	b2450513          	addi	a0,a0,-1244 # 6940 <malloc+0xcb8>
     1e24:	00004097          	auipc	ra,0x4
-    1e28:	dce080e7          	jalr	-562(ra) # 5bf2 <printf>
+    1e28:	da6080e7          	jalr	-602(ra) # 5bca <printf>
     exit(1);
     1e2c:	4505                	li	a0,1
     1e2e:	00004097          	auipc	ra,0x4
@@ -3227,9 +3227,9 @@ badarg(char *s)
     1f06:	950080e7          	jalr	-1712(ra) # 5852 <exit>
       printf("fork failed\n");
     1f0a:	00005517          	auipc	a0,0x5
-    1f0e:	e7e50513          	addi	a0,a0,-386 # 6d88 <malloc+0x10d8>
+    1f0e:	e5650513          	addi	a0,a0,-426 # 6d60 <malloc+0x10d8>
     1f12:	00004097          	auipc	ra,0x4
-    1f16:	ce0080e7          	jalr	-800(ra) # 5bf2 <printf>
+    1f16:	cb8080e7          	jalr	-840(ra) # 5bca <printf>
       exit(1);
     1f1a:	4505                	li	a0,1
     1f1c:	00004097          	auipc	ra,0x4
@@ -3249,7 +3249,7 @@ badarg(char *s)
     1f44:	4b79                	li	s6,30
           int cc = write(fd, buf, sz);
     1f46:	0000ab97          	auipc	s7,0xa
-    1f4a:	e72b8b93          	addi	s7,s7,-398 # bdb8 <buf>
+    1f4a:	e4ab8b93          	addi	s7,s7,-438 # bd90 <buf>
         for(int i = 0; i < ci+1; i++){
     1f4e:	8a26                	mv	s4,s1
     1f50:	02094e63          	bltz	s2,1f8c <manywrites+0xda>
@@ -3295,9 +3295,9 @@ badarg(char *s)
     1fb4:	fa840613          	addi	a2,s0,-88
     1fb8:	85d6                	mv	a1,s5
     1fba:	00005517          	auipc	a0,0x5
-    1fbe:	c0e50513          	addi	a0,a0,-1010 # 6bc8 <malloc+0xf18>
+    1fbe:	be650513          	addi	a0,a0,-1050 # 6ba0 <malloc+0xf18>
     1fc2:	00004097          	auipc	ra,0x4
-    1fc6:	c30080e7          	jalr	-976(ra) # 5bf2 <printf>
+    1fc6:	c08080e7          	jalr	-1016(ra) # 5bca <printf>
             exit(1);
     1fca:	4505                	li	a0,1
     1fcc:	00004097          	auipc	ra,0x4
@@ -3307,9 +3307,9 @@ badarg(char *s)
     1fd6:	660d                	lui	a2,0x3
     1fd8:	85d6                	mv	a1,s5
     1fda:	00004517          	auipc	a0,0x4
-    1fde:	21650513          	addi	a0,a0,534 # 61f0 <malloc+0x540>
+    1fde:	1ee50513          	addi	a0,a0,494 # 61c8 <malloc+0x540>
     1fe2:	00004097          	auipc	ra,0x4
-    1fe6:	c10080e7          	jalr	-1008(ra) # 5bf2 <printf>
+    1fe6:	be8080e7          	jalr	-1048(ra) # 5bca <printf>
             exit(1);
     1fea:	4505                	li	a0,1
     1fec:	00004097          	auipc	ra,0x4
@@ -3344,9 +3344,9 @@ badarg(char *s)
     printf("%s: fork claimed to work 1000 times!\n", s);
     2026:	85ce                	mv	a1,s3
     2028:	00005517          	auipc	a0,0x5
-    202c:	bd050513          	addi	a0,a0,-1072 # 6bf8 <malloc+0xf48>
+    202c:	ba850513          	addi	a0,a0,-1112 # 6bd0 <malloc+0xf48>
     2030:	00004097          	auipc	ra,0x4
-    2034:	bc2080e7          	jalr	-1086(ra) # 5bf2 <printf>
+    2034:	b9a080e7          	jalr	-1126(ra) # 5bca <printf>
     exit(1);
     2038:	4505                	li	a0,1
     203a:	00004097          	auipc	ra,0x4
@@ -3386,9 +3386,9 @@ badarg(char *s)
     printf("%s: no fork at all!\n", s);
     2088:	85ce                	mv	a1,s3
     208a:	00005517          	auipc	a0,0x5
-    208e:	b5650513          	addi	a0,a0,-1194 # 6be0 <malloc+0xf30>
+    208e:	b2e50513          	addi	a0,a0,-1234 # 6bb8 <malloc+0xf30>
     2092:	00004097          	auipc	ra,0x4
-    2096:	b60080e7          	jalr	-1184(ra) # 5bf2 <printf>
+    2096:	b38080e7          	jalr	-1224(ra) # 5bca <printf>
     exit(1);
     209a:	4505                	li	a0,1
     209c:	00003097          	auipc	ra,0x3
@@ -3396,9 +3396,9 @@ badarg(char *s)
       printf("%s: wait stopped early\n", s);
     20a4:	85ce                	mv	a1,s3
     20a6:	00005517          	auipc	a0,0x5
-    20aa:	b7a50513          	addi	a0,a0,-1158 # 6c20 <malloc+0xf70>
+    20aa:	b5250513          	addi	a0,a0,-1198 # 6bf8 <malloc+0xf70>
     20ae:	00004097          	auipc	ra,0x4
-    20b2:	b44080e7          	jalr	-1212(ra) # 5bf2 <printf>
+    20b2:	b1c080e7          	jalr	-1252(ra) # 5bca <printf>
       exit(1);
     20b6:	4505                	li	a0,1
     20b8:	00003097          	auipc	ra,0x3
@@ -3406,9 +3406,9 @@ badarg(char *s)
     printf("%s: wait got too many\n", s);
     20c0:	85ce                	mv	a1,s3
     20c2:	00005517          	auipc	a0,0x5
-    20c6:	b7650513          	addi	a0,a0,-1162 # 6c38 <malloc+0xf88>
+    20c6:	b4e50513          	addi	a0,a0,-1202 # 6c10 <malloc+0xf88>
     20ca:	00004097          	auipc	ra,0x4
-    20ce:	b28080e7          	jalr	-1240(ra) # 5bf2 <printf>
+    20ce:	b00080e7          	jalr	-1280(ra) # 5bca <printf>
     exit(1);
     20d2:	4505                	li	a0,1
     20d4:	00003097          	auipc	ra,0x3
@@ -3433,10 +3433,10 @@ badarg(char *s)
     20f4:	5afd                	li	s5,-1
   for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
     20f6:	69b1                	lui	s3,0xc
-    20f8:	35098993          	addi	s3,s3,848 # c350 <buf+0x598>
+    20f8:	35098993          	addi	s3,s3,848 # c350 <buf+0x5c0>
     20fc:	1003d937          	lui	s2,0x1003d
     2100:	090e                	slli	s2,s2,0x3
-    2102:	48090913          	addi	s2,s2,1152 # 1003d480 <__BSS_END__+0x1002e6b8>
+    2102:	48090913          	addi	s2,s2,1152 # 1003d480 <__BSS_END__+0x1002e6e0>
     pid = fork();
     2106:	00003097          	auipc	ra,0x3
     210a:	744080e7          	jalr	1860(ra) # 584a <fork>
@@ -3466,10 +3466,10 @@ badarg(char *s)
     213e:	8082                	ret
       printf("%s: fork failed\n", s);
     2140:	85d2                	mv	a1,s4
-    2142:	00005517          	auipc	a0,0x5
-    2146:	82650513          	addi	a0,a0,-2010 # 6968 <malloc+0xcb8>
+    2142:	00004517          	auipc	a0,0x4
+    2146:	7fe50513          	addi	a0,a0,2046 # 6940 <malloc+0xcb8>
     214a:	00004097          	auipc	ra,0x4
-    214e:	aa8080e7          	jalr	-1368(ra) # 5bf2 <printf>
+    214e:	a80080e7          	jalr	-1408(ra) # 5bca <printf>
       exit(1);
     2152:	4505                	li	a0,1
     2154:	00003097          	auipc	ra,0x3
@@ -3479,9 +3479,9 @@ badarg(char *s)
     2160:	8626                	mv	a2,s1
     2162:	85d2                	mv	a1,s4
     2164:	00005517          	auipc	a0,0x5
-    2168:	aec50513          	addi	a0,a0,-1300 # 6c50 <malloc+0xfa0>
+    2168:	ac450513          	addi	a0,a0,-1340 # 6c28 <malloc+0xfa0>
     216c:	00004097          	auipc	ra,0x4
-    2170:	a86080e7          	jalr	-1402(ra) # 5bf2 <printf>
+    2170:	a5e080e7          	jalr	-1442(ra) # 5bca <printf>
       exit(1);
     2174:	4505                	li	a0,1
     2176:	00003097          	auipc	ra,0x3
@@ -3539,9 +3539,9 @@ badarg(char *s)
       printf("%s: fork failed\n", s);
     21e4:	85ca                	mv	a1,s2
     21e6:	00004517          	auipc	a0,0x4
-    21ea:	78250513          	addi	a0,a0,1922 # 6968 <malloc+0xcb8>
+    21ea:	75a50513          	addi	a0,a0,1882 # 6940 <malloc+0xcb8>
     21ee:	00004097          	auipc	ra,0x4
-    21f2:	a04080e7          	jalr	-1532(ra) # 5bf2 <printf>
+    21f2:	9dc080e7          	jalr	-1572(ra) # 5bca <printf>
       exit(1);
     21f6:	4505                	li	a0,1
     21f8:	00003097          	auipc	ra,0x3
@@ -3554,9 +3554,9 @@ badarg(char *s)
     220c:	fd843603          	ld	a2,-40(s0)
     2210:	85ca                	mv	a1,s2
     2212:	00005517          	auipc	a0,0x5
-    2216:	a5e50513          	addi	a0,a0,-1442 # 6c70 <malloc+0xfc0>
+    2216:	a3650513          	addi	a0,a0,-1482 # 6c48 <malloc+0xfc0>
     221a:	00004097          	auipc	ra,0x4
-    221e:	9d8080e7          	jalr	-1576(ra) # 5bf2 <printf>
+    221e:	9b0080e7          	jalr	-1616(ra) # 5bca <printf>
       exit(1);
     2222:	4505                	li	a0,1
     2224:	00003097          	auipc	ra,0x3
@@ -3576,7 +3576,7 @@ badarg(char *s)
     2240:	84aa                	mv	s1,a0
   unlink("bigarg-ok");
     2242:	00005517          	auipc	a0,0x5
-    2246:	a4650513          	addi	a0,a0,-1466 # 6c88 <malloc+0xfd8>
+    2246:	a1e50513          	addi	a0,a0,-1506 # 6c60 <malloc+0xfd8>
     224a:	00003097          	auipc	ra,0x3
     224e:	658080e7          	jalr	1624(ra) # 58a2 <unlink>
   pid = fork();
@@ -3596,7 +3596,7 @@ badarg(char *s)
   fd = open("bigarg-ok", 0);
     2272:	4581                	li	a1,0
     2274:	00005517          	auipc	a0,0x5
-    2278:	a1450513          	addi	a0,a0,-1516 # 6c88 <malloc+0xfd8>
+    2278:	9ec50513          	addi	a0,a0,-1556 # 6c60 <malloc+0xfd8>
     227c:	00003097          	auipc	ra,0x3
     2280:	616080e7          	jalr	1558(ra) # 5892 <open>
   if(fd < 0){
@@ -3611,29 +3611,29 @@ badarg(char *s)
     2296:	6145                	addi	sp,sp,48
     2298:	8082                	ret
     229a:	00006797          	auipc	a5,0x6
-    229e:	30678793          	addi	a5,a5,774 # 85a0 <args.1869>
+    229e:	2de78793          	addi	a5,a5,734 # 8578 <args.1859>
     22a2:	00006697          	auipc	a3,0x6
-    22a6:	3f668693          	addi	a3,a3,1014 # 8698 <args.1869+0xf8>
+    22a6:	3ce68693          	addi	a3,a3,974 # 8670 <args.1859+0xf8>
       args[i] = "bigargs test: failed\n                                                                                                                                                                                                       ";
     22aa:	00005717          	auipc	a4,0x5
-    22ae:	9ee70713          	addi	a4,a4,-1554 # 6c98 <malloc+0xfe8>
+    22ae:	9c670713          	addi	a4,a4,-1594 # 6c70 <malloc+0xfe8>
     22b2:	e398                	sd	a4,0(a5)
     for(i = 0; i < MAXARG-1; i++)
     22b4:	07a1                	addi	a5,a5,8
     22b6:	fed79ee3          	bne	a5,a3,22b2 <bigargtest+0x7c>
     args[MAXARG-1] = 0;
     22ba:	00006597          	auipc	a1,0x6
-    22be:	2e658593          	addi	a1,a1,742 # 85a0 <args.1869>
+    22be:	2be58593          	addi	a1,a1,702 # 8578 <args.1859>
     22c2:	0e05bc23          	sd	zero,248(a1)
     exec("echo", args);
     22c6:	00004517          	auipc	a0,0x4
-    22ca:	e6a50513          	addi	a0,a0,-406 # 6130 <malloc+0x480>
+    22ca:	e4250513          	addi	a0,a0,-446 # 6108 <malloc+0x480>
     22ce:	00003097          	auipc	ra,0x3
     22d2:	5bc080e7          	jalr	1468(ra) # 588a <exec>
     fd = open("bigarg-ok", O_CREATE);
     22d6:	20000593          	li	a1,512
     22da:	00005517          	auipc	a0,0x5
-    22de:	9ae50513          	addi	a0,a0,-1618 # 6c88 <malloc+0xfd8>
+    22de:	98650513          	addi	a0,a0,-1658 # 6c60 <malloc+0xfd8>
     22e2:	00003097          	auipc	ra,0x3
     22e6:	5b0080e7          	jalr	1456(ra) # 5892 <open>
     close(fd);
@@ -3646,9 +3646,9 @@ badarg(char *s)
     printf("%s: bigargtest: fork failed\n", s);
     22fc:	85a6                	mv	a1,s1
     22fe:	00005517          	auipc	a0,0x5
-    2302:	a7a50513          	addi	a0,a0,-1414 # 6d78 <malloc+0x10c8>
+    2302:	a5250513          	addi	a0,a0,-1454 # 6d50 <malloc+0x10c8>
     2306:	00004097          	auipc	ra,0x4
-    230a:	8ec080e7          	jalr	-1812(ra) # 5bf2 <printf>
+    230a:	8c4080e7          	jalr	-1852(ra) # 5bca <printf>
     exit(1);
     230e:	4505                	li	a0,1
     2310:	00003097          	auipc	ra,0x3
@@ -3659,9 +3659,9 @@ badarg(char *s)
     printf("%s: bigarg test failed!\n", s);
     2320:	85a6                	mv	a1,s1
     2322:	00005517          	auipc	a0,0x5
-    2326:	a7650513          	addi	a0,a0,-1418 # 6d98 <malloc+0x10e8>
+    2326:	a4e50513          	addi	a0,a0,-1458 # 6d70 <malloc+0x10e8>
     232a:	00004097          	auipc	ra,0x4
-    232e:	8c8080e7          	jalr	-1848(ra) # 5bf2 <printf>
+    232e:	8a0080e7          	jalr	-1888(ra) # 5bca <printf>
     exit(1);
     2332:	4505                	li	a0,1
     2334:	00003097          	auipc	ra,0x3
@@ -3703,12 +3703,12 @@ r_sp()
     printf("%s: stacktest: read below stack %p\n", s, *sp);
     2376:	77fd                	lui	a5,0xfffff
     2378:	97ba                	add	a5,a5,a4
-    237a:	0007c603          	lbu	a2,0(a5) # fffffffffffff000 <__BSS_END__+0xffffffffffff0238>
+    237a:	0007c603          	lbu	a2,0(a5) # fffffffffffff000 <__BSS_END__+0xffffffffffff0260>
     237e:	85a6                	mv	a1,s1
     2380:	00005517          	auipc	a0,0x5
-    2384:	a3850513          	addi	a0,a0,-1480 # 6db8 <malloc+0x1108>
+    2384:	a1050513          	addi	a0,a0,-1520 # 6d90 <malloc+0x1108>
     2388:	00004097          	auipc	ra,0x4
-    238c:	86a080e7          	jalr	-1942(ra) # 5bf2 <printf>
+    238c:	842080e7          	jalr	-1982(ra) # 5bca <printf>
     exit(1);
     2390:	4505                	li	a0,1
     2392:	00003097          	auipc	ra,0x3
@@ -3716,9 +3716,9 @@ r_sp()
     printf("%s: fork failed\n", s);
     239a:	85a6                	mv	a1,s1
     239c:	00004517          	auipc	a0,0x4
-    23a0:	5cc50513          	addi	a0,a0,1484 # 6968 <malloc+0xcb8>
+    23a0:	5a450513          	addi	a0,a0,1444 # 6940 <malloc+0xcb8>
     23a4:	00004097          	auipc	ra,0x4
-    23a8:	84e080e7          	jalr	-1970(ra) # 5bf2 <printf>
+    23a8:	826080e7          	jalr	-2010(ra) # 5bca <printf>
     exit(1);
     23ac:	4505                	li	a0,1
     23ae:	00003097          	auipc	ra,0x3
@@ -3783,7 +3783,7 @@ r_sp()
     2432:	08f51e63          	bne	a0,a5,24ce <copyinstr3+0x10e>
   char *args[] = { "xx", 0 };
     2436:	00005797          	auipc	a5,0x5
-    243a:	61a78793          	addi	a5,a5,1562 # 7a50 <malloc+0x1da0>
+    243a:	5f278793          	addi	a5,a5,1522 # 7a28 <malloc+0x1da0>
     243e:	fcf43823          	sd	a5,-48(s0)
     2442:	fc043c23          	sd	zero,-40(s0)
   ret = exec(b, args);
@@ -3809,9 +3809,9 @@ r_sp()
     2476:	b7bd                	j	23e4 <copyinstr3+0x24>
     printf("oops\n");
     2478:	00005517          	auipc	a0,0x5
-    247c:	96850513          	addi	a0,a0,-1688 # 6de0 <malloc+0x1130>
+    247c:	94050513          	addi	a0,a0,-1728 # 6db8 <malloc+0x1130>
     2480:	00003097          	auipc	ra,0x3
-    2484:	772080e7          	jalr	1906(ra) # 5bf2 <printf>
+    2484:	74a080e7          	jalr	1866(ra) # 5bca <printf>
     exit(1);
     2488:	4505                	li	a0,1
     248a:	00003097          	auipc	ra,0x3
@@ -3820,9 +3820,9 @@ r_sp()
     2492:	862a                	mv	a2,a0
     2494:	85a6                	mv	a1,s1
     2496:	00004517          	auipc	a0,0x4
-    249a:	3f250513          	addi	a0,a0,1010 # 6888 <malloc+0xbd8>
+    249a:	3ca50513          	addi	a0,a0,970 # 6860 <malloc+0xbd8>
     249e:	00003097          	auipc	ra,0x3
-    24a2:	754080e7          	jalr	1876(ra) # 5bf2 <printf>
+    24a2:	72c080e7          	jalr	1836(ra) # 5bca <printf>
     exit(1);
     24a6:	4505                	li	a0,1
     24a8:	00003097          	auipc	ra,0x3
@@ -3831,9 +3831,9 @@ r_sp()
     24b0:	862a                	mv	a2,a0
     24b2:	85a6                	mv	a1,s1
     24b4:	00004517          	auipc	a0,0x4
-    24b8:	3f450513          	addi	a0,a0,1012 # 68a8 <malloc+0xbf8>
+    24b8:	3cc50513          	addi	a0,a0,972 # 6880 <malloc+0xbf8>
     24bc:	00003097          	auipc	ra,0x3
-    24c0:	736080e7          	jalr	1846(ra) # 5bf2 <printf>
+    24c0:	70e080e7          	jalr	1806(ra) # 5bca <printf>
     exit(1);
     24c4:	4505                	li	a0,1
     24c6:	00003097          	auipc	ra,0x3
@@ -3843,9 +3843,9 @@ r_sp()
     24d0:	8626                	mv	a2,s1
     24d2:	85a6                	mv	a1,s1
     24d4:	00004517          	auipc	a0,0x4
-    24d8:	3f450513          	addi	a0,a0,1012 # 68c8 <malloc+0xc18>
+    24d8:	3cc50513          	addi	a0,a0,972 # 68a0 <malloc+0xc18>
     24dc:	00003097          	auipc	ra,0x3
-    24e0:	716080e7          	jalr	1814(ra) # 5bf2 <printf>
+    24e0:	6ee080e7          	jalr	1774(ra) # 5bca <printf>
     exit(1);
     24e4:	4505                	li	a0,1
     24e6:	00003097          	auipc	ra,0x3
@@ -3854,9 +3854,9 @@ r_sp()
     24ee:	567d                	li	a2,-1
     24f0:	85a6                	mv	a1,s1
     24f2:	00004517          	auipc	a0,0x4
-    24f6:	3fe50513          	addi	a0,a0,1022 # 68f0 <malloc+0xc40>
+    24f6:	3d650513          	addi	a0,a0,982 # 68c8 <malloc+0xc40>
     24fa:	00003097          	auipc	ra,0x3
-    24fe:	6f8080e7          	jalr	1784(ra) # 5bf2 <printf>
+    24fe:	6d0080e7          	jalr	1744(ra) # 5bca <printf>
     exit(1);
     2502:	4505                	li	a0,1
     2504:	00003097          	auipc	ra,0x3
@@ -3887,7 +3887,7 @@ r_sp()
   fd = open("rwsbrk", O_CREATE|O_WRONLY);
     253a:	20100593          	li	a1,513
     253e:	00004517          	auipc	a0,0x4
-    2542:	8e250513          	addi	a0,a0,-1822 # 5e20 <malloc+0x170>
+    2542:	8ba50513          	addi	a0,a0,-1862 # 5df8 <malloc+0x170>
     2546:	00003097          	auipc	ra,0x3
     254a:	34c080e7          	jalr	844(ra) # 5892 <open>
     254e:	892a                	mv	s2,a0
@@ -3907,36 +3907,36 @@ r_sp()
     printf("write(fd, %p, 1024) returned %d, not -1\n", a+4096, n);
     256e:	85a6                	mv	a1,s1
     2570:	00005517          	auipc	a0,0x5
-    2574:	8c850513          	addi	a0,a0,-1848 # 6e38 <malloc+0x1188>
+    2574:	8a050513          	addi	a0,a0,-1888 # 6e10 <malloc+0x1188>
     2578:	00003097          	auipc	ra,0x3
-    257c:	67a080e7          	jalr	1658(ra) # 5bf2 <printf>
+    257c:	652080e7          	jalr	1618(ra) # 5bca <printf>
     exit(1);
     2580:	4505                	li	a0,1
     2582:	00003097          	auipc	ra,0x3
     2586:	2d0080e7          	jalr	720(ra) # 5852 <exit>
     printf("sbrk(rwsbrk) failed\n");
     258a:	00005517          	auipc	a0,0x5
-    258e:	85e50513          	addi	a0,a0,-1954 # 6de8 <malloc+0x1138>
+    258e:	83650513          	addi	a0,a0,-1994 # 6dc0 <malloc+0x1138>
     2592:	00003097          	auipc	ra,0x3
-    2596:	660080e7          	jalr	1632(ra) # 5bf2 <printf>
+    2596:	638080e7          	jalr	1592(ra) # 5bca <printf>
     exit(1);
     259a:	4505                	li	a0,1
     259c:	00003097          	auipc	ra,0x3
     25a0:	2b6080e7          	jalr	694(ra) # 5852 <exit>
     printf("sbrk(rwsbrk) shrink failed\n");
     25a4:	00005517          	auipc	a0,0x5
-    25a8:	85c50513          	addi	a0,a0,-1956 # 6e00 <malloc+0x1150>
+    25a8:	83450513          	addi	a0,a0,-1996 # 6dd8 <malloc+0x1150>
     25ac:	00003097          	auipc	ra,0x3
-    25b0:	646080e7          	jalr	1606(ra) # 5bf2 <printf>
+    25b0:	61e080e7          	jalr	1566(ra) # 5bca <printf>
     exit(1);
     25b4:	4505                	li	a0,1
     25b6:	00003097          	auipc	ra,0x3
     25ba:	29c080e7          	jalr	668(ra) # 5852 <exit>
     printf("open(rwsbrk) failed\n");
     25be:	00005517          	auipc	a0,0x5
-    25c2:	86250513          	addi	a0,a0,-1950 # 6e20 <malloc+0x1170>
+    25c2:	83a50513          	addi	a0,a0,-1990 # 6df8 <malloc+0x1170>
     25c6:	00003097          	auipc	ra,0x3
-    25ca:	62c080e7          	jalr	1580(ra) # 5bf2 <printf>
+    25ca:	604080e7          	jalr	1540(ra) # 5bca <printf>
     exit(1);
     25ce:	4505                	li	a0,1
     25d0:	00003097          	auipc	ra,0x3
@@ -3947,13 +3947,13 @@ r_sp()
     25de:	2a0080e7          	jalr	672(ra) # 587a <close>
   unlink("rwsbrk");
     25e2:	00004517          	auipc	a0,0x4
-    25e6:	83e50513          	addi	a0,a0,-1986 # 5e20 <malloc+0x170>
+    25e6:	81650513          	addi	a0,a0,-2026 # 5df8 <malloc+0x170>
     25ea:	00003097          	auipc	ra,0x3
     25ee:	2b8080e7          	jalr	696(ra) # 58a2 <unlink>
   fd = open("README", O_RDONLY);
     25f2:	4581                	li	a1,0
     25f4:	00004517          	auipc	a0,0x4
-    25f8:	cd450513          	addi	a0,a0,-812 # 62c8 <malloc+0x618>
+    25f8:	cac50513          	addi	a0,a0,-852 # 62a0 <malloc+0x618>
     25fc:	00003097          	auipc	ra,0x3
     2600:	296080e7          	jalr	662(ra) # 5892 <open>
     2604:	892a                	mv	s2,a0
@@ -3970,18 +3970,18 @@ r_sp()
     printf("read(fd, %p, 10) returned %d, not -1\n", a+4096, n);
     261c:	85a6                	mv	a1,s1
     261e:	00005517          	auipc	a0,0x5
-    2622:	84a50513          	addi	a0,a0,-1974 # 6e68 <malloc+0x11b8>
+    2622:	82250513          	addi	a0,a0,-2014 # 6e40 <malloc+0x11b8>
     2626:	00003097          	auipc	ra,0x3
-    262a:	5cc080e7          	jalr	1484(ra) # 5bf2 <printf>
+    262a:	5a4080e7          	jalr	1444(ra) # 5bca <printf>
     exit(1);
     262e:	4505                	li	a0,1
     2630:	00003097          	auipc	ra,0x3
     2634:	222080e7          	jalr	546(ra) # 5852 <exit>
     printf("open(rwsbrk) failed\n");
     2638:	00004517          	auipc	a0,0x4
-    263c:	7e850513          	addi	a0,a0,2024 # 6e20 <malloc+0x1170>
+    263c:	7c050513          	addi	a0,a0,1984 # 6df8 <malloc+0x1170>
     2640:	00003097          	auipc	ra,0x3
-    2644:	5b2080e7          	jalr	1458(ra) # 5bf2 <printf>
+    2644:	58a080e7          	jalr	1418(ra) # 5bca <printf>
     exit(1);
     2648:	4505                	li	a0,1
     264a:	00003097          	auipc	ra,0x3
@@ -4029,7 +4029,7 @@ r_sp()
     for(b = a; b < a+TOOMUCH; b += 4096){
     26a4:	6705                	lui	a4,0x1
       *b = 99;
-    26a6:	00d50023          	sb	a3,0(a0) # 40000000 <__BSS_END__+0x3fff1238>
+    26a6:	00d50023          	sb	a3,0(a0) # 40000000 <__BSS_END__+0x3fff1260>
     for(b = a; b < a+TOOMUCH; b += 4096){
     26aa:	953a                	add	a0,a0,a4
     26ac:	fef51de3          	bne	a0,a5,26a6 <sbrkbasic+0x40>
@@ -4039,9 +4039,9 @@ r_sp()
     26b6:	1a0080e7          	jalr	416(ra) # 5852 <exit>
     printf("fork failed in sbrkbasic\n");
     26ba:	00004517          	auipc	a0,0x4
-    26be:	7d650513          	addi	a0,a0,2006 # 6e90 <malloc+0x11e0>
+    26be:	7ae50513          	addi	a0,a0,1966 # 6e68 <malloc+0x11e0>
     26c2:	00003097          	auipc	ra,0x3
-    26c6:	530080e7          	jalr	1328(ra) # 5bf2 <printf>
+    26c6:	508080e7          	jalr	1288(ra) # 5bca <printf>
     exit(1);
     26ca:	4505                	li	a0,1
     26cc:	00003097          	auipc	ra,0x3
@@ -4074,9 +4074,9 @@ r_sp()
     printf("%s: too much memory allocated!\n", s);
     270c:	85d2                	mv	a1,s4
     270e:	00004517          	auipc	a0,0x4
-    2712:	7a250513          	addi	a0,a0,1954 # 6eb0 <malloc+0x1200>
+    2712:	77a50513          	addi	a0,a0,1914 # 6e88 <malloc+0x1200>
     2716:	00003097          	auipc	ra,0x3
-    271a:	4dc080e7          	jalr	1244(ra) # 5bf2 <printf>
+    271a:	4b4080e7          	jalr	1204(ra) # 5bca <printf>
     exit(1);
     271e:	4505                	li	a0,1
     2720:	00003097          	auipc	ra,0x3
@@ -4116,9 +4116,9 @@ r_sp()
     printf("%s: sbrk test failed post-fork\n", s);
     276e:	85d2                	mv	a1,s4
     2770:	00004517          	auipc	a0,0x4
-    2774:	7a050513          	addi	a0,a0,1952 # 6f10 <malloc+0x1260>
+    2774:	77850513          	addi	a0,a0,1912 # 6ee8 <malloc+0x1260>
     2778:	00003097          	auipc	ra,0x3
-    277c:	47a080e7          	jalr	1146(ra) # 5bf2 <printf>
+    277c:	452080e7          	jalr	1106(ra) # 5bca <printf>
     exit(1);
     2780:	4505                	li	a0,1
     2782:	00003097          	auipc	ra,0x3
@@ -4129,9 +4129,9 @@ r_sp()
     278e:	864a                	mv	a2,s2
     2790:	85d2                	mv	a1,s4
     2792:	00004517          	auipc	a0,0x4
-    2796:	73e50513          	addi	a0,a0,1854 # 6ed0 <malloc+0x1220>
+    2796:	71650513          	addi	a0,a0,1814 # 6ea8 <malloc+0x1220>
     279a:	00003097          	auipc	ra,0x3
-    279e:	458080e7          	jalr	1112(ra) # 5bf2 <printf>
+    279e:	430080e7          	jalr	1072(ra) # 5bca <printf>
       exit(1);
     27a2:	4505                	li	a0,1
     27a4:	00003097          	auipc	ra,0x3
@@ -4139,9 +4139,9 @@ r_sp()
     printf("%s: sbrk test fork failed\n", s);
     27ac:	85d2                	mv	a1,s4
     27ae:	00004517          	auipc	a0,0x4
-    27b2:	74250513          	addi	a0,a0,1858 # 6ef0 <malloc+0x1240>
+    27b2:	71a50513          	addi	a0,a0,1818 # 6ec8 <malloc+0x1240>
     27b6:	00003097          	auipc	ra,0x3
-    27ba:	43c080e7          	jalr	1084(ra) # 5bf2 <printf>
+    27ba:	414080e7          	jalr	1044(ra) # 5bca <printf>
     exit(1);
     27be:	4505                	li	a0,1
     27c0:	00003097          	auipc	ra,0x3
@@ -4208,7 +4208,7 @@ r_sp()
   *lastaddr = 99;
     2848:	064007b7          	lui	a5,0x6400
     284c:	06300713          	li	a4,99
-    2850:	fee78fa3          	sb	a4,-1(a5) # 63fffff <__BSS_END__+0x63f1237>
+    2850:	fee78fa3          	sb	a4,-1(a5) # 63fffff <__BSS_END__+0x63f125f>
   a = sbrk(0);
     2854:	4501                	li	a0,0
     2856:	00003097          	auipc	ra,0x3
@@ -4249,7 +4249,7 @@ r_sp()
     28ac:	0af51163          	bne	a0,a5,294e <sbrkmuch+0x160>
   if(*lastaddr == 99){
     28b0:	064007b7          	lui	a5,0x6400
-    28b4:	fff7c703          	lbu	a4,-1(a5) # 63fffff <__BSS_END__+0x63f1237>
+    28b4:	fff7c703          	lbu	a4,-1(a5) # 63fffff <__BSS_END__+0x63f125f>
     28b8:	06300793          	li	a5,99
     28bc:	0af70963          	beq	a4,a5,296e <sbrkmuch+0x180>
   a = sbrk(0);
@@ -4278,9 +4278,9 @@ r_sp()
     printf("%s: sbrk test failed to grow big address space; enough phys mem?\n", s);
     28f6:	85ce                	mv	a1,s3
     28f8:	00004517          	auipc	a0,0x4
-    28fc:	63850513          	addi	a0,a0,1592 # 6f30 <malloc+0x1280>
+    28fc:	61050513          	addi	a0,a0,1552 # 6f08 <malloc+0x1280>
     2900:	00003097          	auipc	ra,0x3
-    2904:	2f2080e7          	jalr	754(ra) # 5bf2 <printf>
+    2904:	2ca080e7          	jalr	714(ra) # 5bca <printf>
     exit(1);
     2908:	4505                	li	a0,1
     290a:	00003097          	auipc	ra,0x3
@@ -4288,9 +4288,9 @@ r_sp()
     printf("%s: sbrk could not deallocate\n", s);
     2912:	85ce                	mv	a1,s3
     2914:	00004517          	auipc	a0,0x4
-    2918:	66450513          	addi	a0,a0,1636 # 6f78 <malloc+0x12c8>
+    2918:	63c50513          	addi	a0,a0,1596 # 6f50 <malloc+0x12c8>
     291c:	00003097          	auipc	ra,0x3
-    2920:	2d6080e7          	jalr	726(ra) # 5bf2 <printf>
+    2920:	2ae080e7          	jalr	686(ra) # 5bca <printf>
     exit(1);
     2924:	4505                	li	a0,1
     2926:	00003097          	auipc	ra,0x3
@@ -4300,9 +4300,9 @@ r_sp()
     2930:	8626                	mv	a2,s1
     2932:	85ce                	mv	a1,s3
     2934:	00004517          	auipc	a0,0x4
-    2938:	66450513          	addi	a0,a0,1636 # 6f98 <malloc+0x12e8>
+    2938:	63c50513          	addi	a0,a0,1596 # 6f70 <malloc+0x12e8>
     293c:	00003097          	auipc	ra,0x3
-    2940:	2b6080e7          	jalr	694(ra) # 5bf2 <printf>
+    2940:	28e080e7          	jalr	654(ra) # 5bca <printf>
     exit(1);
     2944:	4505                	li	a0,1
     2946:	00003097          	auipc	ra,0x3
@@ -4312,9 +4312,9 @@ r_sp()
     2950:	8626                	mv	a2,s1
     2952:	85ce                	mv	a1,s3
     2954:	00004517          	auipc	a0,0x4
-    2958:	68450513          	addi	a0,a0,1668 # 6fd8 <malloc+0x1328>
+    2958:	65c50513          	addi	a0,a0,1628 # 6fb0 <malloc+0x1328>
     295c:	00003097          	auipc	ra,0x3
-    2960:	296080e7          	jalr	662(ra) # 5bf2 <printf>
+    2960:	26e080e7          	jalr	622(ra) # 5bca <printf>
     exit(1);
     2964:	4505                	li	a0,1
     2966:	00003097          	auipc	ra,0x3
@@ -4322,9 +4322,9 @@ r_sp()
     printf("%s: sbrk de-allocation didn't really deallocate\n", s);
     296e:	85ce                	mv	a1,s3
     2970:	00004517          	auipc	a0,0x4
-    2974:	69850513          	addi	a0,a0,1688 # 7008 <malloc+0x1358>
+    2974:	67050513          	addi	a0,a0,1648 # 6fe0 <malloc+0x1358>
     2978:	00003097          	auipc	ra,0x3
-    297c:	27a080e7          	jalr	634(ra) # 5bf2 <printf>
+    297c:	252080e7          	jalr	594(ra) # 5bca <printf>
     exit(1);
     2980:	4505                	li	a0,1
     2982:	00003097          	auipc	ra,0x3
@@ -4334,9 +4334,9 @@ r_sp()
     298c:	8626                	mv	a2,s1
     298e:	85ce                	mv	a1,s3
     2990:	00004517          	auipc	a0,0x4
-    2994:	6b050513          	addi	a0,a0,1712 # 7040 <malloc+0x1390>
+    2994:	68850513          	addi	a0,a0,1672 # 7018 <malloc+0x1390>
     2998:	00003097          	auipc	ra,0x3
-    299c:	25a080e7          	jalr	602(ra) # 5bf2 <printf>
+    299c:	232080e7          	jalr	562(ra) # 5bca <printf>
     exit(1);
     29a0:	4505                	li	a0,1
     29a2:	00003097          	auipc	ra,0x3
@@ -4360,13 +4360,13 @@ r_sp()
   fd = open("sbrk", O_CREATE|O_WRONLY);
     29c6:	20100593          	li	a1,513
     29ca:	00004517          	auipc	a0,0x4
-    29ce:	69e50513          	addi	a0,a0,1694 # 7068 <malloc+0x13b8>
+    29ce:	67650513          	addi	a0,a0,1654 # 7040 <malloc+0x13b8>
     29d2:	00003097          	auipc	ra,0x3
     29d6:	ec0080e7          	jalr	-320(ra) # 5892 <open>
     29da:	84aa                	mv	s1,a0
   unlink("sbrk");
     29dc:	00004517          	auipc	a0,0x4
-    29e0:	68c50513          	addi	a0,a0,1676 # 7068 <malloc+0x13b8>
+    29e0:	66450513          	addi	a0,a0,1636 # 7040 <malloc+0x13b8>
     29e4:	00003097          	auipc	ra,0x3
     29e8:	ebe080e7          	jalr	-322(ra) # 58a2 <unlink>
   if(fd < 0)  {
@@ -4401,9 +4401,9 @@ r_sp()
     printf("%s: open sbrk failed\n", s);
     2a2e:	85ce                	mv	a1,s3
     2a30:	00004517          	auipc	a0,0x4
-    2a34:	64050513          	addi	a0,a0,1600 # 7070 <malloc+0x13c0>
+    2a34:	61850513          	addi	a0,a0,1560 # 7048 <malloc+0x13c0>
     2a38:	00003097          	auipc	ra,0x3
-    2a3c:	1ba080e7          	jalr	442(ra) # 5bf2 <printf>
+    2a3c:	192080e7          	jalr	402(ra) # 5bca <printf>
     exit(1);
     2a40:	4505                	li	a0,1
     2a42:	00003097          	auipc	ra,0x3
@@ -4411,9 +4411,9 @@ r_sp()
     printf("%s: write sbrk failed\n", s);
     2a4a:	85ce                	mv	a1,s3
     2a4c:	00004517          	auipc	a0,0x4
-    2a50:	63c50513          	addi	a0,a0,1596 # 7088 <malloc+0x13d8>
+    2a50:	61450513          	addi	a0,a0,1556 # 7060 <malloc+0x13d8>
     2a54:	00003097          	auipc	ra,0x3
-    2a58:	19e080e7          	jalr	414(ra) # 5bf2 <printf>
+    2a58:	176080e7          	jalr	374(ra) # 5bca <printf>
     exit(1);
     2a5c:	4505                	li	a0,1
     2a5e:	00003097          	auipc	ra,0x3
@@ -4421,9 +4421,9 @@ r_sp()
     printf("%s: pipe() failed\n", s);
     2a66:	85ce                	mv	a1,s3
     2a68:	00004517          	auipc	a0,0x4
-    2a6c:	00850513          	addi	a0,a0,8 # 6a70 <malloc+0xdc0>
+    2a6c:	fe050513          	addi	a0,a0,-32 # 6a48 <malloc+0xdc0>
     2a70:	00003097          	auipc	ra,0x3
-    2a74:	182080e7          	jalr	386(ra) # 5bf2 <printf>
+    2a74:	15a080e7          	jalr	346(ra) # 5bca <printf>
     exit(1);
     2a78:	4505                	li	a0,1
     2a7a:	00003097          	auipc	ra,0x3
@@ -4441,7 +4441,7 @@ r_sp()
   fd = open("init", O_RDONLY);
     2a90:	4581                	li	a1,0
     2a92:	00004517          	auipc	a0,0x4
-    2a96:	60e50513          	addi	a0,a0,1550 # 70a0 <malloc+0x13f0>
+    2a96:	5e650513          	addi	a0,a0,1510 # 7078 <malloc+0x13f0>
     2a9a:	00003097          	auipc	ra,0x3
     2a9e:	df8080e7          	jalr	-520(ra) # 5892 <open>
   if (fd < 0) {
@@ -4470,9 +4470,9 @@ r_sp()
     printf("%s: open failed\n", s);
     2ad8:	85ca                	mv	a1,s2
     2ada:	00004517          	auipc	a0,0x4
-    2ade:	ea650513          	addi	a0,a0,-346 # 6980 <malloc+0xcd0>
+    2ade:	e7e50513          	addi	a0,a0,-386 # 6958 <malloc+0xcd0>
     2ae2:	00003097          	auipc	ra,0x3
-    2ae6:	110080e7          	jalr	272(ra) # 5bf2 <printf>
+    2ae6:	0e8080e7          	jalr	232(ra) # 5bca <printf>
     exit(1);
     2aea:	4505                	li	a0,1
     2aec:	00003097          	auipc	ra,0x3
@@ -4504,9 +4504,9 @@ r_sp()
     2b24:	d32080e7          	jalr	-718(ra) # 5852 <exit>
     printf("fork failed\n");
     2b28:	00004517          	auipc	a0,0x4
-    2b2c:	26050513          	addi	a0,a0,608 # 6d88 <malloc+0x10d8>
+    2b2c:	23850513          	addi	a0,a0,568 # 6d60 <malloc+0x10d8>
     2b30:	00003097          	auipc	ra,0x3
-    2b34:	0c2080e7          	jalr	194(ra) # 5bf2 <printf>
+    2b34:	09a080e7          	jalr	154(ra) # 5bca <printf>
     exit(1);
     2b38:	4505                	li	a0,1
     2b3a:	00003097          	auipc	ra,0x3
@@ -4537,9 +4537,9 @@ r_sp()
     2b7a:	cdc080e7          	jalr	-804(ra) # 5852 <exit>
     printf("fork failed\n");
     2b7e:	00004517          	auipc	a0,0x4
-    2b82:	20a50513          	addi	a0,a0,522 # 6d88 <malloc+0x10d8>
+    2b82:	1e250513          	addi	a0,a0,482 # 6d60 <malloc+0x10d8>
     2b86:	00003097          	auipc	ra,0x3
-    2b8a:	06c080e7          	jalr	108(ra) # 5bf2 <printf>
+    2b8a:	044080e7          	jalr	68(ra) # 5bca <printf>
     exit(1);
     2b8e:	4505                	li	a0,1
     2b90:	00003097          	auipc	ra,0x3
@@ -4573,9 +4573,9 @@ r_sp()
     2bda:	c7c080e7          	jalr	-900(ra) # 5852 <exit>
     printf("fork failed\n");
     2bde:	00004517          	auipc	a0,0x4
-    2be2:	1aa50513          	addi	a0,a0,426 # 6d88 <malloc+0x10d8>
+    2be2:	18250513          	addi	a0,a0,386 # 6d60 <malloc+0x10d8>
     2be6:	00003097          	auipc	ra,0x3
-    2bea:	00c080e7          	jalr	12(ra) # 5bf2 <printf>
+    2bea:	fe4080e7          	jalr	-28(ra) # 5bca <printf>
     exit(1);
     2bee:	4505                	li	a0,1
     2bf0:	00003097          	auipc	ra,0x3
@@ -4696,7 +4696,7 @@ r_sp()
     2cf6:	00003097          	auipc	ra,0x3
     2cfa:	be4080e7          	jalr	-1052(ra) # 58da <sbrk>
   *(top-1) = *(top-1) + 1;
-    2cfe:	fff54783          	lbu	a5,-1(a0) # ffffffff7fffffff <__BSS_END__+0xffffffff7fff1237>
+    2cfe:	fff54783          	lbu	a5,-1(a0) # ffffffff7fffffff <__BSS_END__+0xffffffff7fff125f>
     2d02:	0785                	addi	a5,a5,1
     2d04:	0ff7f793          	andi	a5,a5,255
     2d08:	fef50fa3          	sb	a5,-1(a0)
@@ -4755,9 +4755,9 @@ execout(char *s)
     2d4e:	b08080e7          	jalr	-1272(ra) # 5852 <exit>
       printf("fork failed\n");
     2d52:	00004517          	auipc	a0,0x4
-    2d56:	03650513          	addi	a0,a0,54 # 6d88 <malloc+0x10d8>
+    2d56:	00e50513          	addi	a0,a0,14 # 6d60 <malloc+0x10d8>
     2d5a:	00003097          	auipc	ra,0x3
-    2d5e:	e98080e7          	jalr	-360(ra) # 5bf2 <printf>
+    2d5e:	e70080e7          	jalr	-400(ra) # 5bca <printf>
       exit(1);
     2d62:	4505                	li	a0,1
     2d64:	00003097          	auipc	ra,0x3
@@ -4793,10 +4793,10 @@ execout(char *s)
     2da2:	adc080e7          	jalr	-1316(ra) # 587a <close>
       char *args[] = { "echo", "x", 0 };
     2da6:	00003517          	auipc	a0,0x3
-    2daa:	38a50513          	addi	a0,a0,906 # 6130 <malloc+0x480>
+    2daa:	36250513          	addi	a0,a0,866 # 6108 <malloc+0x480>
     2dae:	faa43c23          	sd	a0,-72(s0)
     2db2:	00003797          	auipc	a5,0x3
-    2db6:	3ee78793          	addi	a5,a5,1006 # 61a0 <malloc+0x4f0>
+    2db6:	3c678793          	addi	a5,a5,966 # 6178 <malloc+0x4f0>
     2dba:	fcf43023          	sd	a5,-64(s0)
     2dbe:	fc043423          	sd	zero,-56(s0)
       exec("echo", args);
@@ -4818,20 +4818,20 @@ execout(char *s)
     2de2:	84aa                	mv	s1,a0
   if(mkdir("12345678901234") != 0){
     2de4:	00004517          	auipc	a0,0x4
-    2de8:	49450513          	addi	a0,a0,1172 # 7278 <malloc+0x15c8>
+    2de8:	46c50513          	addi	a0,a0,1132 # 7250 <malloc+0x15c8>
     2dec:	00003097          	auipc	ra,0x3
     2df0:	ace080e7          	jalr	-1330(ra) # 58ba <mkdir>
     2df4:	e165                	bnez	a0,2ed4 <fourteen+0xfc>
   if(mkdir("12345678901234/123456789012345") != 0){
     2df6:	00004517          	auipc	a0,0x4
-    2dfa:	2da50513          	addi	a0,a0,730 # 70d0 <malloc+0x1420>
+    2dfa:	2b250513          	addi	a0,a0,690 # 70a8 <malloc+0x1420>
     2dfe:	00003097          	auipc	ra,0x3
     2e02:	abc080e7          	jalr	-1348(ra) # 58ba <mkdir>
     2e06:	e56d                	bnez	a0,2ef0 <fourteen+0x118>
   fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);
     2e08:	20000593          	li	a1,512
     2e0c:	00004517          	auipc	a0,0x4
-    2e10:	31c50513          	addi	a0,a0,796 # 7128 <malloc+0x1478>
+    2e10:	2f450513          	addi	a0,a0,756 # 7100 <malloc+0x1478>
     2e14:	00003097          	auipc	ra,0x3
     2e18:	a7e080e7          	jalr	-1410(ra) # 5892 <open>
   if(fd < 0){
@@ -4842,7 +4842,7 @@ execout(char *s)
   fd = open("12345678901234/12345678901234/12345678901234", 0);
     2e28:	4581                	li	a1,0
     2e2a:	00004517          	auipc	a0,0x4
-    2e2e:	37650513          	addi	a0,a0,886 # 71a0 <malloc+0x14f0>
+    2e2e:	34e50513          	addi	a0,a0,846 # 7178 <malloc+0x14f0>
     2e32:	00003097          	auipc	ra,0x3
     2e36:	a60080e7          	jalr	-1440(ra) # 5892 <open>
   if(fd < 0){
@@ -4852,44 +4852,44 @@ execout(char *s)
     2e42:	a3c080e7          	jalr	-1476(ra) # 587a <close>
   if(mkdir("12345678901234/12345678901234") == 0){
     2e46:	00004517          	auipc	a0,0x4
-    2e4a:	3ca50513          	addi	a0,a0,970 # 7210 <malloc+0x1560>
+    2e4a:	3a250513          	addi	a0,a0,930 # 71e8 <malloc+0x1560>
     2e4e:	00003097          	auipc	ra,0x3
     2e52:	a6c080e7          	jalr	-1428(ra) # 58ba <mkdir>
     2e56:	c57d                	beqz	a0,2f44 <fourteen+0x16c>
   if(mkdir("123456789012345/12345678901234") == 0){
     2e58:	00004517          	auipc	a0,0x4
-    2e5c:	41050513          	addi	a0,a0,1040 # 7268 <malloc+0x15b8>
+    2e5c:	3e850513          	addi	a0,a0,1000 # 7240 <malloc+0x15b8>
     2e60:	00003097          	auipc	ra,0x3
     2e64:	a5a080e7          	jalr	-1446(ra) # 58ba <mkdir>
     2e68:	cd65                	beqz	a0,2f60 <fourteen+0x188>
   unlink("123456789012345/12345678901234");
     2e6a:	00004517          	auipc	a0,0x4
-    2e6e:	3fe50513          	addi	a0,a0,1022 # 7268 <malloc+0x15b8>
+    2e6e:	3d650513          	addi	a0,a0,982 # 7240 <malloc+0x15b8>
     2e72:	00003097          	auipc	ra,0x3
     2e76:	a30080e7          	jalr	-1488(ra) # 58a2 <unlink>
   unlink("12345678901234/12345678901234");
     2e7a:	00004517          	auipc	a0,0x4
-    2e7e:	39650513          	addi	a0,a0,918 # 7210 <malloc+0x1560>
+    2e7e:	36e50513          	addi	a0,a0,878 # 71e8 <malloc+0x1560>
     2e82:	00003097          	auipc	ra,0x3
     2e86:	a20080e7          	jalr	-1504(ra) # 58a2 <unlink>
   unlink("12345678901234/12345678901234/12345678901234");
     2e8a:	00004517          	auipc	a0,0x4
-    2e8e:	31650513          	addi	a0,a0,790 # 71a0 <malloc+0x14f0>
+    2e8e:	2ee50513          	addi	a0,a0,750 # 7178 <malloc+0x14f0>
     2e92:	00003097          	auipc	ra,0x3
     2e96:	a10080e7          	jalr	-1520(ra) # 58a2 <unlink>
   unlink("123456789012345/123456789012345/123456789012345");
     2e9a:	00004517          	auipc	a0,0x4
-    2e9e:	28e50513          	addi	a0,a0,654 # 7128 <malloc+0x1478>
+    2e9e:	26650513          	addi	a0,a0,614 # 7100 <malloc+0x1478>
     2ea2:	00003097          	auipc	ra,0x3
     2ea6:	a00080e7          	jalr	-1536(ra) # 58a2 <unlink>
   unlink("12345678901234/123456789012345");
     2eaa:	00004517          	auipc	a0,0x4
-    2eae:	22650513          	addi	a0,a0,550 # 70d0 <malloc+0x1420>
+    2eae:	1fe50513          	addi	a0,a0,510 # 70a8 <malloc+0x1420>
     2eb2:	00003097          	auipc	ra,0x3
     2eb6:	9f0080e7          	jalr	-1552(ra) # 58a2 <unlink>
   unlink("12345678901234");
     2eba:	00004517          	auipc	a0,0x4
-    2ebe:	3be50513          	addi	a0,a0,958 # 7278 <malloc+0x15c8>
+    2ebe:	39650513          	addi	a0,a0,918 # 7250 <malloc+0x15c8>
     2ec2:	00003097          	auipc	ra,0x3
     2ec6:	9e0080e7          	jalr	-1568(ra) # 58a2 <unlink>
 }
@@ -4901,9 +4901,9 @@ execout(char *s)
     printf("%s: mkdir 12345678901234 failed\n", s);
     2ed4:	85a6                	mv	a1,s1
     2ed6:	00004517          	auipc	a0,0x4
-    2eda:	1d250513          	addi	a0,a0,466 # 70a8 <malloc+0x13f8>
+    2eda:	1aa50513          	addi	a0,a0,426 # 7080 <malloc+0x13f8>
     2ede:	00003097          	auipc	ra,0x3
-    2ee2:	d14080e7          	jalr	-748(ra) # 5bf2 <printf>
+    2ee2:	cec080e7          	jalr	-788(ra) # 5bca <printf>
     exit(1);
     2ee6:	4505                	li	a0,1
     2ee8:	00003097          	auipc	ra,0x3
@@ -4911,9 +4911,9 @@ execout(char *s)
     printf("%s: mkdir 12345678901234/123456789012345 failed\n", s);
     2ef0:	85a6                	mv	a1,s1
     2ef2:	00004517          	auipc	a0,0x4
-    2ef6:	1fe50513          	addi	a0,a0,510 # 70f0 <malloc+0x1440>
+    2ef6:	1d650513          	addi	a0,a0,470 # 70c8 <malloc+0x1440>
     2efa:	00003097          	auipc	ra,0x3
-    2efe:	cf8080e7          	jalr	-776(ra) # 5bf2 <printf>
+    2efe:	cd0080e7          	jalr	-816(ra) # 5bca <printf>
     exit(1);
     2f02:	4505                	li	a0,1
     2f04:	00003097          	auipc	ra,0x3
@@ -4921,9 +4921,9 @@ execout(char *s)
     printf("%s: create 123456789012345/123456789012345/123456789012345 failed\n", s);
     2f0c:	85a6                	mv	a1,s1
     2f0e:	00004517          	auipc	a0,0x4
-    2f12:	24a50513          	addi	a0,a0,586 # 7158 <malloc+0x14a8>
+    2f12:	22250513          	addi	a0,a0,546 # 7130 <malloc+0x14a8>
     2f16:	00003097          	auipc	ra,0x3
-    2f1a:	cdc080e7          	jalr	-804(ra) # 5bf2 <printf>
+    2f1a:	cb4080e7          	jalr	-844(ra) # 5bca <printf>
     exit(1);
     2f1e:	4505                	li	a0,1
     2f20:	00003097          	auipc	ra,0x3
@@ -4931,9 +4931,9 @@ execout(char *s)
     printf("%s: open 12345678901234/12345678901234/12345678901234 failed\n", s);
     2f28:	85a6                	mv	a1,s1
     2f2a:	00004517          	auipc	a0,0x4
-    2f2e:	2a650513          	addi	a0,a0,678 # 71d0 <malloc+0x1520>
+    2f2e:	27e50513          	addi	a0,a0,638 # 71a8 <malloc+0x1520>
     2f32:	00003097          	auipc	ra,0x3
-    2f36:	cc0080e7          	jalr	-832(ra) # 5bf2 <printf>
+    2f36:	c98080e7          	jalr	-872(ra) # 5bca <printf>
     exit(1);
     2f3a:	4505                	li	a0,1
     2f3c:	00003097          	auipc	ra,0x3
@@ -4941,9 +4941,9 @@ execout(char *s)
     printf("%s: mkdir 12345678901234/12345678901234 succeeded!\n", s);
     2f44:	85a6                	mv	a1,s1
     2f46:	00004517          	auipc	a0,0x4
-    2f4a:	2ea50513          	addi	a0,a0,746 # 7230 <malloc+0x1580>
+    2f4a:	2c250513          	addi	a0,a0,706 # 7208 <malloc+0x1580>
     2f4e:	00003097          	auipc	ra,0x3
-    2f52:	ca4080e7          	jalr	-860(ra) # 5bf2 <printf>
+    2f52:	c7c080e7          	jalr	-900(ra) # 5bca <printf>
     exit(1);
     2f56:	4505                	li	a0,1
     2f58:	00003097          	auipc	ra,0x3
@@ -4951,9 +4951,9 @@ execout(char *s)
     printf("%s: mkdir 12345678901234/123456789012345 succeeded!\n", s);
     2f60:	85a6                	mv	a1,s1
     2f62:	00004517          	auipc	a0,0x4
-    2f66:	32650513          	addi	a0,a0,806 # 7288 <malloc+0x15d8>
+    2f66:	2fe50513          	addi	a0,a0,766 # 7260 <malloc+0x15d8>
     2f6a:	00003097          	auipc	ra,0x3
-    2f6e:	c88080e7          	jalr	-888(ra) # 5bf2 <printf>
+    2f6e:	c60080e7          	jalr	-928(ra) # 5bca <printf>
     exit(1);
     2f72:	4505                	li	a0,1
     2f74:	00003097          	auipc	ra,0x3
@@ -4969,25 +4969,25 @@ execout(char *s)
     2f86:	84aa                	mv	s1,a0
   if(mkdir("iputdir") < 0){
     2f88:	00004517          	auipc	a0,0x4
-    2f8c:	33850513          	addi	a0,a0,824 # 72c0 <malloc+0x1610>
+    2f8c:	31050513          	addi	a0,a0,784 # 7298 <malloc+0x1610>
     2f90:	00003097          	auipc	ra,0x3
     2f94:	92a080e7          	jalr	-1750(ra) # 58ba <mkdir>
     2f98:	04054563          	bltz	a0,2fe2 <iputtest+0x66>
   if(chdir("iputdir") < 0){
     2f9c:	00004517          	auipc	a0,0x4
-    2fa0:	32450513          	addi	a0,a0,804 # 72c0 <malloc+0x1610>
+    2fa0:	2fc50513          	addi	a0,a0,764 # 7298 <malloc+0x1610>
     2fa4:	00003097          	auipc	ra,0x3
     2fa8:	91e080e7          	jalr	-1762(ra) # 58c2 <chdir>
     2fac:	04054963          	bltz	a0,2ffe <iputtest+0x82>
   if(unlink("../iputdir") < 0){
     2fb0:	00004517          	auipc	a0,0x4
-    2fb4:	35050513          	addi	a0,a0,848 # 7300 <malloc+0x1650>
+    2fb4:	32850513          	addi	a0,a0,808 # 72d8 <malloc+0x1650>
     2fb8:	00003097          	auipc	ra,0x3
     2fbc:	8ea080e7          	jalr	-1814(ra) # 58a2 <unlink>
     2fc0:	04054d63          	bltz	a0,301a <iputtest+0x9e>
   if(chdir("/") < 0){
     2fc4:	00004517          	auipc	a0,0x4
-    2fc8:	36c50513          	addi	a0,a0,876 # 7330 <malloc+0x1680>
+    2fc8:	34450513          	addi	a0,a0,836 # 7308 <malloc+0x1680>
     2fcc:	00003097          	auipc	ra,0x3
     2fd0:	8f6080e7          	jalr	-1802(ra) # 58c2 <chdir>
     2fd4:	06054163          	bltz	a0,3036 <iputtest+0xba>
@@ -5000,9 +5000,9 @@ execout(char *s)
     printf("%s: mkdir failed\n", s);
     2fe2:	85a6                	mv	a1,s1
     2fe4:	00004517          	auipc	a0,0x4
-    2fe8:	2e450513          	addi	a0,a0,740 # 72c8 <malloc+0x1618>
+    2fe8:	2bc50513          	addi	a0,a0,700 # 72a0 <malloc+0x1618>
     2fec:	00003097          	auipc	ra,0x3
-    2ff0:	c06080e7          	jalr	-1018(ra) # 5bf2 <printf>
+    2ff0:	bde080e7          	jalr	-1058(ra) # 5bca <printf>
     exit(1);
     2ff4:	4505                	li	a0,1
     2ff6:	00003097          	auipc	ra,0x3
@@ -5010,9 +5010,9 @@ execout(char *s)
     printf("%s: chdir iputdir failed\n", s);
     2ffe:	85a6                	mv	a1,s1
     3000:	00004517          	auipc	a0,0x4
-    3004:	2e050513          	addi	a0,a0,736 # 72e0 <malloc+0x1630>
+    3004:	2b850513          	addi	a0,a0,696 # 72b8 <malloc+0x1630>
     3008:	00003097          	auipc	ra,0x3
-    300c:	bea080e7          	jalr	-1046(ra) # 5bf2 <printf>
+    300c:	bc2080e7          	jalr	-1086(ra) # 5bca <printf>
     exit(1);
     3010:	4505                	li	a0,1
     3012:	00003097          	auipc	ra,0x3
@@ -5020,9 +5020,9 @@ execout(char *s)
     printf("%s: unlink ../iputdir failed\n", s);
     301a:	85a6                	mv	a1,s1
     301c:	00004517          	auipc	a0,0x4
-    3020:	2f450513          	addi	a0,a0,756 # 7310 <malloc+0x1660>
+    3020:	2cc50513          	addi	a0,a0,716 # 72e8 <malloc+0x1660>
     3024:	00003097          	auipc	ra,0x3
-    3028:	bce080e7          	jalr	-1074(ra) # 5bf2 <printf>
+    3028:	ba6080e7          	jalr	-1114(ra) # 5bca <printf>
     exit(1);
     302c:	4505                	li	a0,1
     302e:	00003097          	auipc	ra,0x3
@@ -5030,9 +5030,9 @@ execout(char *s)
     printf("%s: chdir / failed\n", s);
     3036:	85a6                	mv	a1,s1
     3038:	00004517          	auipc	a0,0x4
-    303c:	30050513          	addi	a0,a0,768 # 7338 <malloc+0x1688>
+    303c:	2d850513          	addi	a0,a0,728 # 7310 <malloc+0x1688>
     3040:	00003097          	auipc	ra,0x3
-    3044:	bb2080e7          	jalr	-1102(ra) # 5bf2 <printf>
+    3044:	b8a080e7          	jalr	-1142(ra) # 5bca <printf>
     exit(1);
     3048:	4505                	li	a0,1
     304a:	00003097          	auipc	ra,0x3
@@ -5055,19 +5055,19 @@ execout(char *s)
     306a:	ed45                	bnez	a0,3122 <exitiputtest+0xd0>
     if(mkdir("iputdir") < 0){
     306c:	00004517          	auipc	a0,0x4
-    3070:	25450513          	addi	a0,a0,596 # 72c0 <malloc+0x1610>
+    3070:	22c50513          	addi	a0,a0,556 # 7298 <malloc+0x1610>
     3074:	00003097          	auipc	ra,0x3
     3078:	846080e7          	jalr	-1978(ra) # 58ba <mkdir>
     307c:	04054963          	bltz	a0,30ce <exitiputtest+0x7c>
     if(chdir("iputdir") < 0){
     3080:	00004517          	auipc	a0,0x4
-    3084:	24050513          	addi	a0,a0,576 # 72c0 <malloc+0x1610>
+    3084:	21850513          	addi	a0,a0,536 # 7298 <malloc+0x1610>
     3088:	00003097          	auipc	ra,0x3
     308c:	83a080e7          	jalr	-1990(ra) # 58c2 <chdir>
     3090:	04054d63          	bltz	a0,30ea <exitiputtest+0x98>
     if(unlink("../iputdir") < 0){
     3094:	00004517          	auipc	a0,0x4
-    3098:	26c50513          	addi	a0,a0,620 # 7300 <malloc+0x1650>
+    3098:	24450513          	addi	a0,a0,580 # 72d8 <malloc+0x1650>
     309c:	00003097          	auipc	ra,0x3
     30a0:	806080e7          	jalr	-2042(ra) # 58a2 <unlink>
     30a4:	06054163          	bltz	a0,3106 <exitiputtest+0xb4>
@@ -5078,9 +5078,9 @@ execout(char *s)
     printf("%s: fork failed\n", s);
     30b2:	85a6                	mv	a1,s1
     30b4:	00004517          	auipc	a0,0x4
-    30b8:	8b450513          	addi	a0,a0,-1868 # 6968 <malloc+0xcb8>
+    30b8:	88c50513          	addi	a0,a0,-1908 # 6940 <malloc+0xcb8>
     30bc:	00003097          	auipc	ra,0x3
-    30c0:	b36080e7          	jalr	-1226(ra) # 5bf2 <printf>
+    30c0:	b0e080e7          	jalr	-1266(ra) # 5bca <printf>
     exit(1);
     30c4:	4505                	li	a0,1
     30c6:	00002097          	auipc	ra,0x2
@@ -5088,9 +5088,9 @@ execout(char *s)
       printf("%s: mkdir failed\n", s);
     30ce:	85a6                	mv	a1,s1
     30d0:	00004517          	auipc	a0,0x4
-    30d4:	1f850513          	addi	a0,a0,504 # 72c8 <malloc+0x1618>
+    30d4:	1d050513          	addi	a0,a0,464 # 72a0 <malloc+0x1618>
     30d8:	00003097          	auipc	ra,0x3
-    30dc:	b1a080e7          	jalr	-1254(ra) # 5bf2 <printf>
+    30dc:	af2080e7          	jalr	-1294(ra) # 5bca <printf>
       exit(1);
     30e0:	4505                	li	a0,1
     30e2:	00002097          	auipc	ra,0x2
@@ -5098,9 +5098,9 @@ execout(char *s)
       printf("%s: child chdir failed\n", s);
     30ea:	85a6                	mv	a1,s1
     30ec:	00004517          	auipc	a0,0x4
-    30f0:	26450513          	addi	a0,a0,612 # 7350 <malloc+0x16a0>
+    30f0:	23c50513          	addi	a0,a0,572 # 7328 <malloc+0x16a0>
     30f4:	00003097          	auipc	ra,0x3
-    30f8:	afe080e7          	jalr	-1282(ra) # 5bf2 <printf>
+    30f8:	ad6080e7          	jalr	-1322(ra) # 5bca <printf>
       exit(1);
     30fc:	4505                	li	a0,1
     30fe:	00002097          	auipc	ra,0x2
@@ -5108,9 +5108,9 @@ execout(char *s)
       printf("%s: unlink ../iputdir failed\n", s);
     3106:	85a6                	mv	a1,s1
     3108:	00004517          	auipc	a0,0x4
-    310c:	20850513          	addi	a0,a0,520 # 7310 <malloc+0x1660>
+    310c:	1e050513          	addi	a0,a0,480 # 72e8 <malloc+0x1660>
     3110:	00003097          	auipc	ra,0x3
-    3114:	ae2080e7          	jalr	-1310(ra) # 5bf2 <printf>
+    3114:	aba080e7          	jalr	-1350(ra) # 5bca <printf>
       exit(1);
     3118:	4505                	li	a0,1
     311a:	00002097          	auipc	ra,0x2
@@ -5134,25 +5134,25 @@ execout(char *s)
     3144:	84aa                	mv	s1,a0
   if(mkdir("dir0") < 0){
     3146:	00004517          	auipc	a0,0x4
-    314a:	22250513          	addi	a0,a0,546 # 7368 <malloc+0x16b8>
+    314a:	1fa50513          	addi	a0,a0,506 # 7340 <malloc+0x16b8>
     314e:	00002097          	auipc	ra,0x2
     3152:	76c080e7          	jalr	1900(ra) # 58ba <mkdir>
     3156:	04054563          	bltz	a0,31a0 <dirtest+0x66>
   if(chdir("dir0") < 0){
     315a:	00004517          	auipc	a0,0x4
-    315e:	20e50513          	addi	a0,a0,526 # 7368 <malloc+0x16b8>
+    315e:	1e650513          	addi	a0,a0,486 # 7340 <malloc+0x16b8>
     3162:	00002097          	auipc	ra,0x2
     3166:	760080e7          	jalr	1888(ra) # 58c2 <chdir>
     316a:	04054963          	bltz	a0,31bc <dirtest+0x82>
   if(chdir("..") < 0){
     316e:	00004517          	auipc	a0,0x4
-    3172:	21a50513          	addi	a0,a0,538 # 7388 <malloc+0x16d8>
+    3172:	1f250513          	addi	a0,a0,498 # 7360 <malloc+0x16d8>
     3176:	00002097          	auipc	ra,0x2
     317a:	74c080e7          	jalr	1868(ra) # 58c2 <chdir>
     317e:	04054d63          	bltz	a0,31d8 <dirtest+0x9e>
   if(unlink("dir0") < 0){
     3182:	00004517          	auipc	a0,0x4
-    3186:	1e650513          	addi	a0,a0,486 # 7368 <malloc+0x16b8>
+    3186:	1be50513          	addi	a0,a0,446 # 7340 <malloc+0x16b8>
     318a:	00002097          	auipc	ra,0x2
     318e:	718080e7          	jalr	1816(ra) # 58a2 <unlink>
     3192:	06054163          	bltz	a0,31f4 <dirtest+0xba>
@@ -5165,9 +5165,9 @@ execout(char *s)
     printf("%s: mkdir failed\n", s);
     31a0:	85a6                	mv	a1,s1
     31a2:	00004517          	auipc	a0,0x4
-    31a6:	12650513          	addi	a0,a0,294 # 72c8 <malloc+0x1618>
+    31a6:	0fe50513          	addi	a0,a0,254 # 72a0 <malloc+0x1618>
     31aa:	00003097          	auipc	ra,0x3
-    31ae:	a48080e7          	jalr	-1464(ra) # 5bf2 <printf>
+    31ae:	a20080e7          	jalr	-1504(ra) # 5bca <printf>
     exit(1);
     31b2:	4505                	li	a0,1
     31b4:	00002097          	auipc	ra,0x2
@@ -5175,9 +5175,9 @@ execout(char *s)
     printf("%s: chdir dir0 failed\n", s);
     31bc:	85a6                	mv	a1,s1
     31be:	00004517          	auipc	a0,0x4
-    31c2:	1b250513          	addi	a0,a0,434 # 7370 <malloc+0x16c0>
+    31c2:	18a50513          	addi	a0,a0,394 # 7348 <malloc+0x16c0>
     31c6:	00003097          	auipc	ra,0x3
-    31ca:	a2c080e7          	jalr	-1492(ra) # 5bf2 <printf>
+    31ca:	a04080e7          	jalr	-1532(ra) # 5bca <printf>
     exit(1);
     31ce:	4505                	li	a0,1
     31d0:	00002097          	auipc	ra,0x2
@@ -5185,9 +5185,9 @@ execout(char *s)
     printf("%s: chdir .. failed\n", s);
     31d8:	85a6                	mv	a1,s1
     31da:	00004517          	auipc	a0,0x4
-    31de:	1b650513          	addi	a0,a0,438 # 7390 <malloc+0x16e0>
+    31de:	18e50513          	addi	a0,a0,398 # 7368 <malloc+0x16e0>
     31e2:	00003097          	auipc	ra,0x3
-    31e6:	a10080e7          	jalr	-1520(ra) # 5bf2 <printf>
+    31e6:	9e8080e7          	jalr	-1560(ra) # 5bca <printf>
     exit(1);
     31ea:	4505                	li	a0,1
     31ec:	00002097          	auipc	ra,0x2
@@ -5195,9 +5195,9 @@ execout(char *s)
     printf("%s: unlink dir0 failed\n", s);
     31f4:	85a6                	mv	a1,s1
     31f6:	00004517          	auipc	a0,0x4
-    31fa:	1b250513          	addi	a0,a0,434 # 73a8 <malloc+0x16f8>
+    31fa:	18a50513          	addi	a0,a0,394 # 7380 <malloc+0x16f8>
     31fe:	00003097          	auipc	ra,0x3
-    3202:	9f4080e7          	jalr	-1548(ra) # 5bf2 <printf>
+    3202:	9cc080e7          	jalr	-1588(ra) # 5bca <printf>
     exit(1);
     3206:	4505                	li	a0,1
     3208:	00002097          	auipc	ra,0x2
@@ -5214,19 +5214,19 @@ execout(char *s)
     321c:	892a                	mv	s2,a0
   unlink("ff");
     321e:	00004517          	auipc	a0,0x4
-    3222:	2d250513          	addi	a0,a0,722 # 74f0 <malloc+0x1840>
+    3222:	2aa50513          	addi	a0,a0,682 # 74c8 <malloc+0x1840>
     3226:	00002097          	auipc	ra,0x2
     322a:	67c080e7          	jalr	1660(ra) # 58a2 <unlink>
   if(mkdir("dd") != 0){
     322e:	00004517          	auipc	a0,0x4
-    3232:	19250513          	addi	a0,a0,402 # 73c0 <malloc+0x1710>
+    3232:	16a50513          	addi	a0,a0,362 # 7398 <malloc+0x1710>
     3236:	00002097          	auipc	ra,0x2
     323a:	684080e7          	jalr	1668(ra) # 58ba <mkdir>
     323e:	38051663          	bnez	a0,35ca <subdir+0x3ba>
   fd = open("dd/ff", O_CREATE | O_RDWR);
     3242:	20200593          	li	a1,514
     3246:	00004517          	auipc	a0,0x4
-    324a:	19a50513          	addi	a0,a0,410 # 73e0 <malloc+0x1730>
+    324a:	17250513          	addi	a0,a0,370 # 73b8 <malloc+0x1730>
     324e:	00002097          	auipc	ra,0x2
     3252:	644080e7          	jalr	1604(ra) # 5892 <open>
     3256:	84aa                	mv	s1,a0
@@ -5235,7 +5235,7 @@ execout(char *s)
   write(fd, "ff", 2);
     325c:	4609                	li	a2,2
     325e:	00004597          	auipc	a1,0x4
-    3262:	29258593          	addi	a1,a1,658 # 74f0 <malloc+0x1840>
+    3262:	26a58593          	addi	a1,a1,618 # 74c8 <malloc+0x1840>
     3266:	00002097          	auipc	ra,0x2
     326a:	60c080e7          	jalr	1548(ra) # 5872 <write>
   close(fd);
@@ -5244,20 +5244,20 @@ execout(char *s)
     3274:	60a080e7          	jalr	1546(ra) # 587a <close>
   if(unlink("dd") >= 0){
     3278:	00004517          	auipc	a0,0x4
-    327c:	14850513          	addi	a0,a0,328 # 73c0 <malloc+0x1710>
+    327c:	12050513          	addi	a0,a0,288 # 7398 <malloc+0x1710>
     3280:	00002097          	auipc	ra,0x2
     3284:	622080e7          	jalr	1570(ra) # 58a2 <unlink>
     3288:	36055d63          	bgez	a0,3602 <subdir+0x3f2>
   if(mkdir("/dd/dd") != 0){
     328c:	00004517          	auipc	a0,0x4
-    3290:	1ac50513          	addi	a0,a0,428 # 7438 <malloc+0x1788>
+    3290:	18450513          	addi	a0,a0,388 # 7410 <malloc+0x1788>
     3294:	00002097          	auipc	ra,0x2
     3298:	626080e7          	jalr	1574(ra) # 58ba <mkdir>
     329c:	38051163          	bnez	a0,361e <subdir+0x40e>
   fd = open("dd/dd/ff", O_CREATE | O_RDWR);
     32a0:	20200593          	li	a1,514
     32a4:	00004517          	auipc	a0,0x4
-    32a8:	1bc50513          	addi	a0,a0,444 # 7460 <malloc+0x17b0>
+    32a8:	19450513          	addi	a0,a0,404 # 7438 <malloc+0x17b0>
     32ac:	00002097          	auipc	ra,0x2
     32b0:	5e6080e7          	jalr	1510(ra) # 5892 <open>
     32b4:	84aa                	mv	s1,a0
@@ -5266,7 +5266,7 @@ execout(char *s)
   write(fd, "FF", 2);
     32ba:	4609                	li	a2,2
     32bc:	00004597          	auipc	a1,0x4
-    32c0:	1d458593          	addi	a1,a1,468 # 7490 <malloc+0x17e0>
+    32c0:	1ac58593          	addi	a1,a1,428 # 7468 <malloc+0x17e0>
     32c4:	00002097          	auipc	ra,0x2
     32c8:	5ae080e7          	jalr	1454(ra) # 5872 <write>
   close(fd);
@@ -5276,7 +5276,7 @@ execout(char *s)
   fd = open("dd/dd/../ff", 0);
     32d6:	4581                	li	a1,0
     32d8:	00004517          	auipc	a0,0x4
-    32dc:	1c050513          	addi	a0,a0,448 # 7498 <malloc+0x17e8>
+    32dc:	19850513          	addi	a0,a0,408 # 7470 <malloc+0x17e8>
     32e0:	00002097          	auipc	ra,0x2
     32e4:	5b2080e7          	jalr	1458(ra) # 5892 <open>
     32e8:	84aa                	mv	s1,a0
@@ -5285,14 +5285,14 @@ execout(char *s)
   cc = read(fd, buf, sizeof(buf));
     32ee:	660d                	lui	a2,0x3
     32f0:	00009597          	auipc	a1,0x9
-    32f4:	ac858593          	addi	a1,a1,-1336 # bdb8 <buf>
+    32f4:	aa058593          	addi	a1,a1,-1376 # bd90 <buf>
     32f8:	00002097          	auipc	ra,0x2
     32fc:	572080e7          	jalr	1394(ra) # 586a <read>
   if(cc != 2 || buf[0] != 'f'){
     3300:	4789                	li	a5,2
     3302:	36f51863          	bne	a0,a5,3672 <subdir+0x462>
     3306:	00009717          	auipc	a4,0x9
-    330a:	ab274703          	lbu	a4,-1358(a4) # bdb8 <buf>
+    330a:	a8a74703          	lbu	a4,-1398(a4) # bd90 <buf>
     330e:	06600793          	li	a5,102
     3312:	36f71063          	bne	a4,a5,3672 <subdir+0x462>
   close(fd);
@@ -5301,53 +5301,53 @@ execout(char *s)
     331c:	562080e7          	jalr	1378(ra) # 587a <close>
   if(link("dd/dd/ff", "dd/dd/ffff") != 0){
     3320:	00004597          	auipc	a1,0x4
-    3324:	1c858593          	addi	a1,a1,456 # 74e8 <malloc+0x1838>
+    3324:	1a058593          	addi	a1,a1,416 # 74c0 <malloc+0x1838>
     3328:	00004517          	auipc	a0,0x4
-    332c:	13850513          	addi	a0,a0,312 # 7460 <malloc+0x17b0>
+    332c:	11050513          	addi	a0,a0,272 # 7438 <malloc+0x17b0>
     3330:	00002097          	auipc	ra,0x2
     3334:	582080e7          	jalr	1410(ra) # 58b2 <link>
     3338:	34051b63          	bnez	a0,368e <subdir+0x47e>
   if(unlink("dd/dd/ff") != 0){
     333c:	00004517          	auipc	a0,0x4
-    3340:	12450513          	addi	a0,a0,292 # 7460 <malloc+0x17b0>
+    3340:	0fc50513          	addi	a0,a0,252 # 7438 <malloc+0x17b0>
     3344:	00002097          	auipc	ra,0x2
     3348:	55e080e7          	jalr	1374(ra) # 58a2 <unlink>
     334c:	34051f63          	bnez	a0,36aa <subdir+0x49a>
   if(open("dd/dd/ff", O_RDONLY) >= 0){
     3350:	4581                	li	a1,0
     3352:	00004517          	auipc	a0,0x4
-    3356:	10e50513          	addi	a0,a0,270 # 7460 <malloc+0x17b0>
+    3356:	0e650513          	addi	a0,a0,230 # 7438 <malloc+0x17b0>
     335a:	00002097          	auipc	ra,0x2
     335e:	538080e7          	jalr	1336(ra) # 5892 <open>
     3362:	36055263          	bgez	a0,36c6 <subdir+0x4b6>
   if(chdir("dd") != 0){
     3366:	00004517          	auipc	a0,0x4
-    336a:	05a50513          	addi	a0,a0,90 # 73c0 <malloc+0x1710>
+    336a:	03250513          	addi	a0,a0,50 # 7398 <malloc+0x1710>
     336e:	00002097          	auipc	ra,0x2
     3372:	554080e7          	jalr	1364(ra) # 58c2 <chdir>
     3376:	36051663          	bnez	a0,36e2 <subdir+0x4d2>
   if(chdir("dd/../../dd") != 0){
     337a:	00004517          	auipc	a0,0x4
-    337e:	20650513          	addi	a0,a0,518 # 7580 <malloc+0x18d0>
+    337e:	1de50513          	addi	a0,a0,478 # 7558 <malloc+0x18d0>
     3382:	00002097          	auipc	ra,0x2
     3386:	540080e7          	jalr	1344(ra) # 58c2 <chdir>
     338a:	36051a63          	bnez	a0,36fe <subdir+0x4ee>
   if(chdir("dd/../../../dd") != 0){
     338e:	00004517          	auipc	a0,0x4
-    3392:	22250513          	addi	a0,a0,546 # 75b0 <malloc+0x1900>
+    3392:	1fa50513          	addi	a0,a0,506 # 7588 <malloc+0x1900>
     3396:	00002097          	auipc	ra,0x2
     339a:	52c080e7          	jalr	1324(ra) # 58c2 <chdir>
     339e:	36051e63          	bnez	a0,371a <subdir+0x50a>
   if(chdir("./..") != 0){
     33a2:	00004517          	auipc	a0,0x4
-    33a6:	23e50513          	addi	a0,a0,574 # 75e0 <malloc+0x1930>
+    33a6:	21650513          	addi	a0,a0,534 # 75b8 <malloc+0x1930>
     33aa:	00002097          	auipc	ra,0x2
     33ae:	518080e7          	jalr	1304(ra) # 58c2 <chdir>
     33b2:	38051263          	bnez	a0,3736 <subdir+0x526>
   fd = open("dd/dd/ffff", 0);
     33b6:	4581                	li	a1,0
     33b8:	00004517          	auipc	a0,0x4
-    33bc:	13050513          	addi	a0,a0,304 # 74e8 <malloc+0x1838>
+    33bc:	10850513          	addi	a0,a0,264 # 74c0 <malloc+0x1838>
     33c0:	00002097          	auipc	ra,0x2
     33c4:	4d2080e7          	jalr	1234(ra) # 5892 <open>
     33c8:	84aa                	mv	s1,a0
@@ -5356,7 +5356,7 @@ execout(char *s)
   if(read(fd, buf, sizeof(buf)) != 2){
     33ce:	660d                	lui	a2,0x3
     33d0:	00009597          	auipc	a1,0x9
-    33d4:	9e858593          	addi	a1,a1,-1560 # bdb8 <buf>
+    33d4:	9c058593          	addi	a1,a1,-1600 # bd90 <buf>
     33d8:	00002097          	auipc	ra,0x2
     33dc:	492080e7          	jalr	1170(ra) # 586a <read>
     33e0:	4789                	li	a5,2
@@ -5368,138 +5368,138 @@ execout(char *s)
   if(open("dd/dd/ff", O_RDONLY) >= 0){
     33f0:	4581                	li	a1,0
     33f2:	00004517          	auipc	a0,0x4
-    33f6:	06e50513          	addi	a0,a0,110 # 7460 <malloc+0x17b0>
+    33f6:	04650513          	addi	a0,a0,70 # 7438 <malloc+0x17b0>
     33fa:	00002097          	auipc	ra,0x2
     33fe:	498080e7          	jalr	1176(ra) # 5892 <open>
     3402:	38055463          	bgez	a0,378a <subdir+0x57a>
   if(open("dd/ff/ff", O_CREATE|O_RDWR) >= 0){
     3406:	20200593          	li	a1,514
     340a:	00004517          	auipc	a0,0x4
-    340e:	26650513          	addi	a0,a0,614 # 7670 <malloc+0x19c0>
+    340e:	23e50513          	addi	a0,a0,574 # 7648 <malloc+0x19c0>
     3412:	00002097          	auipc	ra,0x2
     3416:	480080e7          	jalr	1152(ra) # 5892 <open>
     341a:	38055663          	bgez	a0,37a6 <subdir+0x596>
   if(open("dd/xx/ff", O_CREATE|O_RDWR) >= 0){
     341e:	20200593          	li	a1,514
     3422:	00004517          	auipc	a0,0x4
-    3426:	27e50513          	addi	a0,a0,638 # 76a0 <malloc+0x19f0>
+    3426:	25650513          	addi	a0,a0,598 # 7678 <malloc+0x19f0>
     342a:	00002097          	auipc	ra,0x2
     342e:	468080e7          	jalr	1128(ra) # 5892 <open>
     3432:	38055863          	bgez	a0,37c2 <subdir+0x5b2>
   if(open("dd", O_CREATE) >= 0){
     3436:	20000593          	li	a1,512
     343a:	00004517          	auipc	a0,0x4
-    343e:	f8650513          	addi	a0,a0,-122 # 73c0 <malloc+0x1710>
+    343e:	f5e50513          	addi	a0,a0,-162 # 7398 <malloc+0x1710>
     3442:	00002097          	auipc	ra,0x2
     3446:	450080e7          	jalr	1104(ra) # 5892 <open>
     344a:	38055a63          	bgez	a0,37de <subdir+0x5ce>
   if(open("dd", O_RDWR) >= 0){
     344e:	4589                	li	a1,2
     3450:	00004517          	auipc	a0,0x4
-    3454:	f7050513          	addi	a0,a0,-144 # 73c0 <malloc+0x1710>
+    3454:	f4850513          	addi	a0,a0,-184 # 7398 <malloc+0x1710>
     3458:	00002097          	auipc	ra,0x2
     345c:	43a080e7          	jalr	1082(ra) # 5892 <open>
     3460:	38055d63          	bgez	a0,37fa <subdir+0x5ea>
   if(open("dd", O_WRONLY) >= 0){
     3464:	4585                	li	a1,1
     3466:	00004517          	auipc	a0,0x4
-    346a:	f5a50513          	addi	a0,a0,-166 # 73c0 <malloc+0x1710>
+    346a:	f3250513          	addi	a0,a0,-206 # 7398 <malloc+0x1710>
     346e:	00002097          	auipc	ra,0x2
     3472:	424080e7          	jalr	1060(ra) # 5892 <open>
     3476:	3a055063          	bgez	a0,3816 <subdir+0x606>
   if(link("dd/ff/ff", "dd/dd/xx") == 0){
     347a:	00004597          	auipc	a1,0x4
-    347e:	2b658593          	addi	a1,a1,694 # 7730 <malloc+0x1a80>
+    347e:	28e58593          	addi	a1,a1,654 # 7708 <malloc+0x1a80>
     3482:	00004517          	auipc	a0,0x4
-    3486:	1ee50513          	addi	a0,a0,494 # 7670 <malloc+0x19c0>
+    3486:	1c650513          	addi	a0,a0,454 # 7648 <malloc+0x19c0>
     348a:	00002097          	auipc	ra,0x2
     348e:	428080e7          	jalr	1064(ra) # 58b2 <link>
     3492:	3a050063          	beqz	a0,3832 <subdir+0x622>
   if(link("dd/xx/ff", "dd/dd/xx") == 0){
     3496:	00004597          	auipc	a1,0x4
-    349a:	29a58593          	addi	a1,a1,666 # 7730 <malloc+0x1a80>
+    349a:	27258593          	addi	a1,a1,626 # 7708 <malloc+0x1a80>
     349e:	00004517          	auipc	a0,0x4
-    34a2:	20250513          	addi	a0,a0,514 # 76a0 <malloc+0x19f0>
+    34a2:	1da50513          	addi	a0,a0,474 # 7678 <malloc+0x19f0>
     34a6:	00002097          	auipc	ra,0x2
     34aa:	40c080e7          	jalr	1036(ra) # 58b2 <link>
     34ae:	3a050063          	beqz	a0,384e <subdir+0x63e>
   if(link("dd/ff", "dd/dd/ffff") == 0){
     34b2:	00004597          	auipc	a1,0x4
-    34b6:	03658593          	addi	a1,a1,54 # 74e8 <malloc+0x1838>
+    34b6:	00e58593          	addi	a1,a1,14 # 74c0 <malloc+0x1838>
     34ba:	00004517          	auipc	a0,0x4
-    34be:	f2650513          	addi	a0,a0,-218 # 73e0 <malloc+0x1730>
+    34be:	efe50513          	addi	a0,a0,-258 # 73b8 <malloc+0x1730>
     34c2:	00002097          	auipc	ra,0x2
     34c6:	3f0080e7          	jalr	1008(ra) # 58b2 <link>
     34ca:	3a050063          	beqz	a0,386a <subdir+0x65a>
   if(mkdir("dd/ff/ff") == 0){
     34ce:	00004517          	auipc	a0,0x4
-    34d2:	1a250513          	addi	a0,a0,418 # 7670 <malloc+0x19c0>
+    34d2:	17a50513          	addi	a0,a0,378 # 7648 <malloc+0x19c0>
     34d6:	00002097          	auipc	ra,0x2
     34da:	3e4080e7          	jalr	996(ra) # 58ba <mkdir>
     34de:	3a050463          	beqz	a0,3886 <subdir+0x676>
   if(mkdir("dd/xx/ff") == 0){
     34e2:	00004517          	auipc	a0,0x4
-    34e6:	1be50513          	addi	a0,a0,446 # 76a0 <malloc+0x19f0>
+    34e6:	19650513          	addi	a0,a0,406 # 7678 <malloc+0x19f0>
     34ea:	00002097          	auipc	ra,0x2
     34ee:	3d0080e7          	jalr	976(ra) # 58ba <mkdir>
     34f2:	3a050863          	beqz	a0,38a2 <subdir+0x692>
   if(mkdir("dd/dd/ffff") == 0){
     34f6:	00004517          	auipc	a0,0x4
-    34fa:	ff250513          	addi	a0,a0,-14 # 74e8 <malloc+0x1838>
+    34fa:	fca50513          	addi	a0,a0,-54 # 74c0 <malloc+0x1838>
     34fe:	00002097          	auipc	ra,0x2
     3502:	3bc080e7          	jalr	956(ra) # 58ba <mkdir>
     3506:	3a050c63          	beqz	a0,38be <subdir+0x6ae>
   if(unlink("dd/xx/ff") == 0){
     350a:	00004517          	auipc	a0,0x4
-    350e:	19650513          	addi	a0,a0,406 # 76a0 <malloc+0x19f0>
+    350e:	16e50513          	addi	a0,a0,366 # 7678 <malloc+0x19f0>
     3512:	00002097          	auipc	ra,0x2
     3516:	390080e7          	jalr	912(ra) # 58a2 <unlink>
     351a:	3c050063          	beqz	a0,38da <subdir+0x6ca>
   if(unlink("dd/ff/ff") == 0){
     351e:	00004517          	auipc	a0,0x4
-    3522:	15250513          	addi	a0,a0,338 # 7670 <malloc+0x19c0>
+    3522:	12a50513          	addi	a0,a0,298 # 7648 <malloc+0x19c0>
     3526:	00002097          	auipc	ra,0x2
     352a:	37c080e7          	jalr	892(ra) # 58a2 <unlink>
     352e:	3c050463          	beqz	a0,38f6 <subdir+0x6e6>
   if(chdir("dd/ff") == 0){
     3532:	00004517          	auipc	a0,0x4
-    3536:	eae50513          	addi	a0,a0,-338 # 73e0 <malloc+0x1730>
+    3536:	e8650513          	addi	a0,a0,-378 # 73b8 <malloc+0x1730>
     353a:	00002097          	auipc	ra,0x2
     353e:	388080e7          	jalr	904(ra) # 58c2 <chdir>
     3542:	3c050863          	beqz	a0,3912 <subdir+0x702>
   if(chdir("dd/xx") == 0){
     3546:	00004517          	auipc	a0,0x4
-    354a:	33a50513          	addi	a0,a0,826 # 7880 <malloc+0x1bd0>
+    354a:	31250513          	addi	a0,a0,786 # 7858 <malloc+0x1bd0>
     354e:	00002097          	auipc	ra,0x2
     3552:	374080e7          	jalr	884(ra) # 58c2 <chdir>
     3556:	3c050c63          	beqz	a0,392e <subdir+0x71e>
   if(unlink("dd/dd/ffff") != 0){
     355a:	00004517          	auipc	a0,0x4
-    355e:	f8e50513          	addi	a0,a0,-114 # 74e8 <malloc+0x1838>
+    355e:	f6650513          	addi	a0,a0,-154 # 74c0 <malloc+0x1838>
     3562:	00002097          	auipc	ra,0x2
     3566:	340080e7          	jalr	832(ra) # 58a2 <unlink>
     356a:	3e051063          	bnez	a0,394a <subdir+0x73a>
   if(unlink("dd/ff") != 0){
     356e:	00004517          	auipc	a0,0x4
-    3572:	e7250513          	addi	a0,a0,-398 # 73e0 <malloc+0x1730>
+    3572:	e4a50513          	addi	a0,a0,-438 # 73b8 <malloc+0x1730>
     3576:	00002097          	auipc	ra,0x2
     357a:	32c080e7          	jalr	812(ra) # 58a2 <unlink>
     357e:	3e051463          	bnez	a0,3966 <subdir+0x756>
   if(unlink("dd") == 0){
     3582:	00004517          	auipc	a0,0x4
-    3586:	e3e50513          	addi	a0,a0,-450 # 73c0 <malloc+0x1710>
+    3586:	e1650513          	addi	a0,a0,-490 # 7398 <malloc+0x1710>
     358a:	00002097          	auipc	ra,0x2
     358e:	318080e7          	jalr	792(ra) # 58a2 <unlink>
     3592:	3e050863          	beqz	a0,3982 <subdir+0x772>
   if(unlink("dd/dd") < 0){
     3596:	00004517          	auipc	a0,0x4
-    359a:	35a50513          	addi	a0,a0,858 # 78f0 <malloc+0x1c40>
+    359a:	33250513          	addi	a0,a0,818 # 78c8 <malloc+0x1c40>
     359e:	00002097          	auipc	ra,0x2
     35a2:	304080e7          	jalr	772(ra) # 58a2 <unlink>
     35a6:	3e054c63          	bltz	a0,399e <subdir+0x78e>
   if(unlink("dd") < 0){
     35aa:	00004517          	auipc	a0,0x4
-    35ae:	e1650513          	addi	a0,a0,-490 # 73c0 <malloc+0x1710>
+    35ae:	dee50513          	addi	a0,a0,-530 # 7398 <malloc+0x1710>
     35b2:	00002097          	auipc	ra,0x2
     35b6:	2f0080e7          	jalr	752(ra) # 58a2 <unlink>
     35ba:	40054063          	bltz	a0,39ba <subdir+0x7aa>
@@ -5513,9 +5513,9 @@ execout(char *s)
     printf("%s: mkdir dd failed\n", s);
     35ca:	85ca                	mv	a1,s2
     35cc:	00004517          	auipc	a0,0x4
-    35d0:	dfc50513          	addi	a0,a0,-516 # 73c8 <malloc+0x1718>
+    35d0:	dd450513          	addi	a0,a0,-556 # 73a0 <malloc+0x1718>
     35d4:	00002097          	auipc	ra,0x2
-    35d8:	61e080e7          	jalr	1566(ra) # 5bf2 <printf>
+    35d8:	5f6080e7          	jalr	1526(ra) # 5bca <printf>
     exit(1);
     35dc:	4505                	li	a0,1
     35de:	00002097          	auipc	ra,0x2
@@ -5523,9 +5523,9 @@ execout(char *s)
     printf("%s: create dd/ff failed\n", s);
     35e6:	85ca                	mv	a1,s2
     35e8:	00004517          	auipc	a0,0x4
-    35ec:	e0050513          	addi	a0,a0,-512 # 73e8 <malloc+0x1738>
+    35ec:	dd850513          	addi	a0,a0,-552 # 73c0 <malloc+0x1738>
     35f0:	00002097          	auipc	ra,0x2
-    35f4:	602080e7          	jalr	1538(ra) # 5bf2 <printf>
+    35f4:	5da080e7          	jalr	1498(ra) # 5bca <printf>
     exit(1);
     35f8:	4505                	li	a0,1
     35fa:	00002097          	auipc	ra,0x2
@@ -5533,9 +5533,9 @@ execout(char *s)
     printf("%s: unlink dd (non-empty dir) succeeded!\n", s);
     3602:	85ca                	mv	a1,s2
     3604:	00004517          	auipc	a0,0x4
-    3608:	e0450513          	addi	a0,a0,-508 # 7408 <malloc+0x1758>
+    3608:	ddc50513          	addi	a0,a0,-548 # 73e0 <malloc+0x1758>
     360c:	00002097          	auipc	ra,0x2
-    3610:	5e6080e7          	jalr	1510(ra) # 5bf2 <printf>
+    3610:	5be080e7          	jalr	1470(ra) # 5bca <printf>
     exit(1);
     3614:	4505                	li	a0,1
     3616:	00002097          	auipc	ra,0x2
@@ -5543,9 +5543,9 @@ execout(char *s)
     printf("subdir mkdir dd/dd failed\n", s);
     361e:	85ca                	mv	a1,s2
     3620:	00004517          	auipc	a0,0x4
-    3624:	e2050513          	addi	a0,a0,-480 # 7440 <malloc+0x1790>
+    3624:	df850513          	addi	a0,a0,-520 # 7418 <malloc+0x1790>
     3628:	00002097          	auipc	ra,0x2
-    362c:	5ca080e7          	jalr	1482(ra) # 5bf2 <printf>
+    362c:	5a2080e7          	jalr	1442(ra) # 5bca <printf>
     exit(1);
     3630:	4505                	li	a0,1
     3632:	00002097          	auipc	ra,0x2
@@ -5553,9 +5553,9 @@ execout(char *s)
     printf("%s: create dd/dd/ff failed\n", s);
     363a:	85ca                	mv	a1,s2
     363c:	00004517          	auipc	a0,0x4
-    3640:	e3450513          	addi	a0,a0,-460 # 7470 <malloc+0x17c0>
+    3640:	e0c50513          	addi	a0,a0,-500 # 7448 <malloc+0x17c0>
     3644:	00002097          	auipc	ra,0x2
-    3648:	5ae080e7          	jalr	1454(ra) # 5bf2 <printf>
+    3648:	586080e7          	jalr	1414(ra) # 5bca <printf>
     exit(1);
     364c:	4505                	li	a0,1
     364e:	00002097          	auipc	ra,0x2
@@ -5563,9 +5563,9 @@ execout(char *s)
     printf("%s: open dd/dd/../ff failed\n", s);
     3656:	85ca                	mv	a1,s2
     3658:	00004517          	auipc	a0,0x4
-    365c:	e5050513          	addi	a0,a0,-432 # 74a8 <malloc+0x17f8>
+    365c:	e2850513          	addi	a0,a0,-472 # 7480 <malloc+0x17f8>
     3660:	00002097          	auipc	ra,0x2
-    3664:	592080e7          	jalr	1426(ra) # 5bf2 <printf>
+    3664:	56a080e7          	jalr	1386(ra) # 5bca <printf>
     exit(1);
     3668:	4505                	li	a0,1
     366a:	00002097          	auipc	ra,0x2
@@ -5573,9 +5573,9 @@ execout(char *s)
     printf("%s: dd/dd/../ff wrong content\n", s);
     3672:	85ca                	mv	a1,s2
     3674:	00004517          	auipc	a0,0x4
-    3678:	e5450513          	addi	a0,a0,-428 # 74c8 <malloc+0x1818>
+    3678:	e2c50513          	addi	a0,a0,-468 # 74a0 <malloc+0x1818>
     367c:	00002097          	auipc	ra,0x2
-    3680:	576080e7          	jalr	1398(ra) # 5bf2 <printf>
+    3680:	54e080e7          	jalr	1358(ra) # 5bca <printf>
     exit(1);
     3684:	4505                	li	a0,1
     3686:	00002097          	auipc	ra,0x2
@@ -5583,9 +5583,9 @@ execout(char *s)
     printf("link dd/dd/ff dd/dd/ffff failed\n", s);
     368e:	85ca                	mv	a1,s2
     3690:	00004517          	auipc	a0,0x4
-    3694:	e6850513          	addi	a0,a0,-408 # 74f8 <malloc+0x1848>
+    3694:	e4050513          	addi	a0,a0,-448 # 74d0 <malloc+0x1848>
     3698:	00002097          	auipc	ra,0x2
-    369c:	55a080e7          	jalr	1370(ra) # 5bf2 <printf>
+    369c:	532080e7          	jalr	1330(ra) # 5bca <printf>
     exit(1);
     36a0:	4505                	li	a0,1
     36a2:	00002097          	auipc	ra,0x2
@@ -5593,9 +5593,9 @@ execout(char *s)
     printf("%s: unlink dd/dd/ff failed\n", s);
     36aa:	85ca                	mv	a1,s2
     36ac:	00004517          	auipc	a0,0x4
-    36b0:	e7450513          	addi	a0,a0,-396 # 7520 <malloc+0x1870>
+    36b0:	e4c50513          	addi	a0,a0,-436 # 74f8 <malloc+0x1870>
     36b4:	00002097          	auipc	ra,0x2
-    36b8:	53e080e7          	jalr	1342(ra) # 5bf2 <printf>
+    36b8:	516080e7          	jalr	1302(ra) # 5bca <printf>
     exit(1);
     36bc:	4505                	li	a0,1
     36be:	00002097          	auipc	ra,0x2
@@ -5603,9 +5603,9 @@ execout(char *s)
     printf("%s: open (unlinked) dd/dd/ff succeeded\n", s);
     36c6:	85ca                	mv	a1,s2
     36c8:	00004517          	auipc	a0,0x4
-    36cc:	e7850513          	addi	a0,a0,-392 # 7540 <malloc+0x1890>
+    36cc:	e5050513          	addi	a0,a0,-432 # 7518 <malloc+0x1890>
     36d0:	00002097          	auipc	ra,0x2
-    36d4:	522080e7          	jalr	1314(ra) # 5bf2 <printf>
+    36d4:	4fa080e7          	jalr	1274(ra) # 5bca <printf>
     exit(1);
     36d8:	4505                	li	a0,1
     36da:	00002097          	auipc	ra,0x2
@@ -5613,9 +5613,9 @@ execout(char *s)
     printf("%s: chdir dd failed\n", s);
     36e2:	85ca                	mv	a1,s2
     36e4:	00004517          	auipc	a0,0x4
-    36e8:	e8450513          	addi	a0,a0,-380 # 7568 <malloc+0x18b8>
+    36e8:	e5c50513          	addi	a0,a0,-420 # 7540 <malloc+0x18b8>
     36ec:	00002097          	auipc	ra,0x2
-    36f0:	506080e7          	jalr	1286(ra) # 5bf2 <printf>
+    36f0:	4de080e7          	jalr	1246(ra) # 5bca <printf>
     exit(1);
     36f4:	4505                	li	a0,1
     36f6:	00002097          	auipc	ra,0x2
@@ -5623,9 +5623,9 @@ execout(char *s)
     printf("%s: chdir dd/../../dd failed\n", s);
     36fe:	85ca                	mv	a1,s2
     3700:	00004517          	auipc	a0,0x4
-    3704:	e9050513          	addi	a0,a0,-368 # 7590 <malloc+0x18e0>
+    3704:	e6850513          	addi	a0,a0,-408 # 7568 <malloc+0x18e0>
     3708:	00002097          	auipc	ra,0x2
-    370c:	4ea080e7          	jalr	1258(ra) # 5bf2 <printf>
+    370c:	4c2080e7          	jalr	1218(ra) # 5bca <printf>
     exit(1);
     3710:	4505                	li	a0,1
     3712:	00002097          	auipc	ra,0x2
@@ -5633,9 +5633,9 @@ execout(char *s)
     printf("chdir dd/../../dd failed\n", s);
     371a:	85ca                	mv	a1,s2
     371c:	00004517          	auipc	a0,0x4
-    3720:	ea450513          	addi	a0,a0,-348 # 75c0 <malloc+0x1910>
+    3720:	e7c50513          	addi	a0,a0,-388 # 7598 <malloc+0x1910>
     3724:	00002097          	auipc	ra,0x2
-    3728:	4ce080e7          	jalr	1230(ra) # 5bf2 <printf>
+    3728:	4a6080e7          	jalr	1190(ra) # 5bca <printf>
     exit(1);
     372c:	4505                	li	a0,1
     372e:	00002097          	auipc	ra,0x2
@@ -5643,9 +5643,9 @@ execout(char *s)
     printf("%s: chdir ./.. failed\n", s);
     3736:	85ca                	mv	a1,s2
     3738:	00004517          	auipc	a0,0x4
-    373c:	eb050513          	addi	a0,a0,-336 # 75e8 <malloc+0x1938>
+    373c:	e8850513          	addi	a0,a0,-376 # 75c0 <malloc+0x1938>
     3740:	00002097          	auipc	ra,0x2
-    3744:	4b2080e7          	jalr	1202(ra) # 5bf2 <printf>
+    3744:	48a080e7          	jalr	1162(ra) # 5bca <printf>
     exit(1);
     3748:	4505                	li	a0,1
     374a:	00002097          	auipc	ra,0x2
@@ -5653,9 +5653,9 @@ execout(char *s)
     printf("%s: open dd/dd/ffff failed\n", s);
     3752:	85ca                	mv	a1,s2
     3754:	00004517          	auipc	a0,0x4
-    3758:	eac50513          	addi	a0,a0,-340 # 7600 <malloc+0x1950>
+    3758:	e8450513          	addi	a0,a0,-380 # 75d8 <malloc+0x1950>
     375c:	00002097          	auipc	ra,0x2
-    3760:	496080e7          	jalr	1174(ra) # 5bf2 <printf>
+    3760:	46e080e7          	jalr	1134(ra) # 5bca <printf>
     exit(1);
     3764:	4505                	li	a0,1
     3766:	00002097          	auipc	ra,0x2
@@ -5663,9 +5663,9 @@ execout(char *s)
     printf("%s: read dd/dd/ffff wrong len\n", s);
     376e:	85ca                	mv	a1,s2
     3770:	00004517          	auipc	a0,0x4
-    3774:	eb050513          	addi	a0,a0,-336 # 7620 <malloc+0x1970>
+    3774:	e8850513          	addi	a0,a0,-376 # 75f8 <malloc+0x1970>
     3778:	00002097          	auipc	ra,0x2
-    377c:	47a080e7          	jalr	1146(ra) # 5bf2 <printf>
+    377c:	452080e7          	jalr	1106(ra) # 5bca <printf>
     exit(1);
     3780:	4505                	li	a0,1
     3782:	00002097          	auipc	ra,0x2
@@ -5673,9 +5673,9 @@ execout(char *s)
     printf("%s: open (unlinked) dd/dd/ff succeeded!\n", s);
     378a:	85ca                	mv	a1,s2
     378c:	00004517          	auipc	a0,0x4
-    3790:	eb450513          	addi	a0,a0,-332 # 7640 <malloc+0x1990>
+    3790:	e8c50513          	addi	a0,a0,-372 # 7618 <malloc+0x1990>
     3794:	00002097          	auipc	ra,0x2
-    3798:	45e080e7          	jalr	1118(ra) # 5bf2 <printf>
+    3798:	436080e7          	jalr	1078(ra) # 5bca <printf>
     exit(1);
     379c:	4505                	li	a0,1
     379e:	00002097          	auipc	ra,0x2
@@ -5683,9 +5683,9 @@ execout(char *s)
     printf("%s: create dd/ff/ff succeeded!\n", s);
     37a6:	85ca                	mv	a1,s2
     37a8:	00004517          	auipc	a0,0x4
-    37ac:	ed850513          	addi	a0,a0,-296 # 7680 <malloc+0x19d0>
+    37ac:	eb050513          	addi	a0,a0,-336 # 7658 <malloc+0x19d0>
     37b0:	00002097          	auipc	ra,0x2
-    37b4:	442080e7          	jalr	1090(ra) # 5bf2 <printf>
+    37b4:	41a080e7          	jalr	1050(ra) # 5bca <printf>
     exit(1);
     37b8:	4505                	li	a0,1
     37ba:	00002097          	auipc	ra,0x2
@@ -5693,9 +5693,9 @@ execout(char *s)
     printf("%s: create dd/xx/ff succeeded!\n", s);
     37c2:	85ca                	mv	a1,s2
     37c4:	00004517          	auipc	a0,0x4
-    37c8:	eec50513          	addi	a0,a0,-276 # 76b0 <malloc+0x1a00>
+    37c8:	ec450513          	addi	a0,a0,-316 # 7688 <malloc+0x1a00>
     37cc:	00002097          	auipc	ra,0x2
-    37d0:	426080e7          	jalr	1062(ra) # 5bf2 <printf>
+    37d0:	3fe080e7          	jalr	1022(ra) # 5bca <printf>
     exit(1);
     37d4:	4505                	li	a0,1
     37d6:	00002097          	auipc	ra,0x2
@@ -5703,9 +5703,9 @@ execout(char *s)
     printf("%s: create dd succeeded!\n", s);
     37de:	85ca                	mv	a1,s2
     37e0:	00004517          	auipc	a0,0x4
-    37e4:	ef050513          	addi	a0,a0,-272 # 76d0 <malloc+0x1a20>
+    37e4:	ec850513          	addi	a0,a0,-312 # 76a8 <malloc+0x1a20>
     37e8:	00002097          	auipc	ra,0x2
-    37ec:	40a080e7          	jalr	1034(ra) # 5bf2 <printf>
+    37ec:	3e2080e7          	jalr	994(ra) # 5bca <printf>
     exit(1);
     37f0:	4505                	li	a0,1
     37f2:	00002097          	auipc	ra,0x2
@@ -5713,9 +5713,9 @@ execout(char *s)
     printf("%s: open dd rdwr succeeded!\n", s);
     37fa:	85ca                	mv	a1,s2
     37fc:	00004517          	auipc	a0,0x4
-    3800:	ef450513          	addi	a0,a0,-268 # 76f0 <malloc+0x1a40>
+    3800:	ecc50513          	addi	a0,a0,-308 # 76c8 <malloc+0x1a40>
     3804:	00002097          	auipc	ra,0x2
-    3808:	3ee080e7          	jalr	1006(ra) # 5bf2 <printf>
+    3808:	3c6080e7          	jalr	966(ra) # 5bca <printf>
     exit(1);
     380c:	4505                	li	a0,1
     380e:	00002097          	auipc	ra,0x2
@@ -5723,9 +5723,9 @@ execout(char *s)
     printf("%s: open dd wronly succeeded!\n", s);
     3816:	85ca                	mv	a1,s2
     3818:	00004517          	auipc	a0,0x4
-    381c:	ef850513          	addi	a0,a0,-264 # 7710 <malloc+0x1a60>
+    381c:	ed050513          	addi	a0,a0,-304 # 76e8 <malloc+0x1a60>
     3820:	00002097          	auipc	ra,0x2
-    3824:	3d2080e7          	jalr	978(ra) # 5bf2 <printf>
+    3824:	3aa080e7          	jalr	938(ra) # 5bca <printf>
     exit(1);
     3828:	4505                	li	a0,1
     382a:	00002097          	auipc	ra,0x2
@@ -5733,9 +5733,9 @@ execout(char *s)
     printf("%s: link dd/ff/ff dd/dd/xx succeeded!\n", s);
     3832:	85ca                	mv	a1,s2
     3834:	00004517          	auipc	a0,0x4
-    3838:	f0c50513          	addi	a0,a0,-244 # 7740 <malloc+0x1a90>
+    3838:	ee450513          	addi	a0,a0,-284 # 7718 <malloc+0x1a90>
     383c:	00002097          	auipc	ra,0x2
-    3840:	3b6080e7          	jalr	950(ra) # 5bf2 <printf>
+    3840:	38e080e7          	jalr	910(ra) # 5bca <printf>
     exit(1);
     3844:	4505                	li	a0,1
     3846:	00002097          	auipc	ra,0x2
@@ -5743,9 +5743,9 @@ execout(char *s)
     printf("%s: link dd/xx/ff dd/dd/xx succeeded!\n", s);
     384e:	85ca                	mv	a1,s2
     3850:	00004517          	auipc	a0,0x4
-    3854:	f1850513          	addi	a0,a0,-232 # 7768 <malloc+0x1ab8>
+    3854:	ef050513          	addi	a0,a0,-272 # 7740 <malloc+0x1ab8>
     3858:	00002097          	auipc	ra,0x2
-    385c:	39a080e7          	jalr	922(ra) # 5bf2 <printf>
+    385c:	372080e7          	jalr	882(ra) # 5bca <printf>
     exit(1);
     3860:	4505                	li	a0,1
     3862:	00002097          	auipc	ra,0x2
@@ -5753,9 +5753,9 @@ execout(char *s)
     printf("%s: link dd/ff dd/dd/ffff succeeded!\n", s);
     386a:	85ca                	mv	a1,s2
     386c:	00004517          	auipc	a0,0x4
-    3870:	f2450513          	addi	a0,a0,-220 # 7790 <malloc+0x1ae0>
+    3870:	efc50513          	addi	a0,a0,-260 # 7768 <malloc+0x1ae0>
     3874:	00002097          	auipc	ra,0x2
-    3878:	37e080e7          	jalr	894(ra) # 5bf2 <printf>
+    3878:	356080e7          	jalr	854(ra) # 5bca <printf>
     exit(1);
     387c:	4505                	li	a0,1
     387e:	00002097          	auipc	ra,0x2
@@ -5763,9 +5763,9 @@ execout(char *s)
     printf("%s: mkdir dd/ff/ff succeeded!\n", s);
     3886:	85ca                	mv	a1,s2
     3888:	00004517          	auipc	a0,0x4
-    388c:	f3050513          	addi	a0,a0,-208 # 77b8 <malloc+0x1b08>
+    388c:	f0850513          	addi	a0,a0,-248 # 7790 <malloc+0x1b08>
     3890:	00002097          	auipc	ra,0x2
-    3894:	362080e7          	jalr	866(ra) # 5bf2 <printf>
+    3894:	33a080e7          	jalr	826(ra) # 5bca <printf>
     exit(1);
     3898:	4505                	li	a0,1
     389a:	00002097          	auipc	ra,0x2
@@ -5773,9 +5773,9 @@ execout(char *s)
     printf("%s: mkdir dd/xx/ff succeeded!\n", s);
     38a2:	85ca                	mv	a1,s2
     38a4:	00004517          	auipc	a0,0x4
-    38a8:	f3450513          	addi	a0,a0,-204 # 77d8 <malloc+0x1b28>
+    38a8:	f0c50513          	addi	a0,a0,-244 # 77b0 <malloc+0x1b28>
     38ac:	00002097          	auipc	ra,0x2
-    38b0:	346080e7          	jalr	838(ra) # 5bf2 <printf>
+    38b0:	31e080e7          	jalr	798(ra) # 5bca <printf>
     exit(1);
     38b4:	4505                	li	a0,1
     38b6:	00002097          	auipc	ra,0x2
@@ -5783,9 +5783,9 @@ execout(char *s)
     printf("%s: mkdir dd/dd/ffff succeeded!\n", s);
     38be:	85ca                	mv	a1,s2
     38c0:	00004517          	auipc	a0,0x4
-    38c4:	f3850513          	addi	a0,a0,-200 # 77f8 <malloc+0x1b48>
+    38c4:	f1050513          	addi	a0,a0,-240 # 77d0 <malloc+0x1b48>
     38c8:	00002097          	auipc	ra,0x2
-    38cc:	32a080e7          	jalr	810(ra) # 5bf2 <printf>
+    38cc:	302080e7          	jalr	770(ra) # 5bca <printf>
     exit(1);
     38d0:	4505                	li	a0,1
     38d2:	00002097          	auipc	ra,0x2
@@ -5793,9 +5793,9 @@ execout(char *s)
     printf("%s: unlink dd/xx/ff succeeded!\n", s);
     38da:	85ca                	mv	a1,s2
     38dc:	00004517          	auipc	a0,0x4
-    38e0:	f4450513          	addi	a0,a0,-188 # 7820 <malloc+0x1b70>
+    38e0:	f1c50513          	addi	a0,a0,-228 # 77f8 <malloc+0x1b70>
     38e4:	00002097          	auipc	ra,0x2
-    38e8:	30e080e7          	jalr	782(ra) # 5bf2 <printf>
+    38e8:	2e6080e7          	jalr	742(ra) # 5bca <printf>
     exit(1);
     38ec:	4505                	li	a0,1
     38ee:	00002097          	auipc	ra,0x2
@@ -5803,9 +5803,9 @@ execout(char *s)
     printf("%s: unlink dd/ff/ff succeeded!\n", s);
     38f6:	85ca                	mv	a1,s2
     38f8:	00004517          	auipc	a0,0x4
-    38fc:	f4850513          	addi	a0,a0,-184 # 7840 <malloc+0x1b90>
+    38fc:	f2050513          	addi	a0,a0,-224 # 7818 <malloc+0x1b90>
     3900:	00002097          	auipc	ra,0x2
-    3904:	2f2080e7          	jalr	754(ra) # 5bf2 <printf>
+    3904:	2ca080e7          	jalr	714(ra) # 5bca <printf>
     exit(1);
     3908:	4505                	li	a0,1
     390a:	00002097          	auipc	ra,0x2
@@ -5813,9 +5813,9 @@ execout(char *s)
     printf("%s: chdir dd/ff succeeded!\n", s);
     3912:	85ca                	mv	a1,s2
     3914:	00004517          	auipc	a0,0x4
-    3918:	f4c50513          	addi	a0,a0,-180 # 7860 <malloc+0x1bb0>
+    3918:	f2450513          	addi	a0,a0,-220 # 7838 <malloc+0x1bb0>
     391c:	00002097          	auipc	ra,0x2
-    3920:	2d6080e7          	jalr	726(ra) # 5bf2 <printf>
+    3920:	2ae080e7          	jalr	686(ra) # 5bca <printf>
     exit(1);
     3924:	4505                	li	a0,1
     3926:	00002097          	auipc	ra,0x2
@@ -5823,9 +5823,9 @@ execout(char *s)
     printf("%s: chdir dd/xx succeeded!\n", s);
     392e:	85ca                	mv	a1,s2
     3930:	00004517          	auipc	a0,0x4
-    3934:	f5850513          	addi	a0,a0,-168 # 7888 <malloc+0x1bd8>
+    3934:	f3050513          	addi	a0,a0,-208 # 7860 <malloc+0x1bd8>
     3938:	00002097          	auipc	ra,0x2
-    393c:	2ba080e7          	jalr	698(ra) # 5bf2 <printf>
+    393c:	292080e7          	jalr	658(ra) # 5bca <printf>
     exit(1);
     3940:	4505                	li	a0,1
     3942:	00002097          	auipc	ra,0x2
@@ -5833,9 +5833,9 @@ execout(char *s)
     printf("%s: unlink dd/dd/ff failed\n", s);
     394a:	85ca                	mv	a1,s2
     394c:	00004517          	auipc	a0,0x4
-    3950:	bd450513          	addi	a0,a0,-1068 # 7520 <malloc+0x1870>
+    3950:	bac50513          	addi	a0,a0,-1108 # 74f8 <malloc+0x1870>
     3954:	00002097          	auipc	ra,0x2
-    3958:	29e080e7          	jalr	670(ra) # 5bf2 <printf>
+    3958:	276080e7          	jalr	630(ra) # 5bca <printf>
     exit(1);
     395c:	4505                	li	a0,1
     395e:	00002097          	auipc	ra,0x2
@@ -5843,9 +5843,9 @@ execout(char *s)
     printf("%s: unlink dd/ff failed\n", s);
     3966:	85ca                	mv	a1,s2
     3968:	00004517          	auipc	a0,0x4
-    396c:	f4050513          	addi	a0,a0,-192 # 78a8 <malloc+0x1bf8>
+    396c:	f1850513          	addi	a0,a0,-232 # 7880 <malloc+0x1bf8>
     3970:	00002097          	auipc	ra,0x2
-    3974:	282080e7          	jalr	642(ra) # 5bf2 <printf>
+    3974:	25a080e7          	jalr	602(ra) # 5bca <printf>
     exit(1);
     3978:	4505                	li	a0,1
     397a:	00002097          	auipc	ra,0x2
@@ -5853,9 +5853,9 @@ execout(char *s)
     printf("%s: unlink non-empty dd succeeded!\n", s);
     3982:	85ca                	mv	a1,s2
     3984:	00004517          	auipc	a0,0x4
-    3988:	f4450513          	addi	a0,a0,-188 # 78c8 <malloc+0x1c18>
+    3988:	f1c50513          	addi	a0,a0,-228 # 78a0 <malloc+0x1c18>
     398c:	00002097          	auipc	ra,0x2
-    3990:	266080e7          	jalr	614(ra) # 5bf2 <printf>
+    3990:	23e080e7          	jalr	574(ra) # 5bca <printf>
     exit(1);
     3994:	4505                	li	a0,1
     3996:	00002097          	auipc	ra,0x2
@@ -5863,9 +5863,9 @@ execout(char *s)
     printf("%s: unlink dd/dd failed\n", s);
     399e:	85ca                	mv	a1,s2
     39a0:	00004517          	auipc	a0,0x4
-    39a4:	f5850513          	addi	a0,a0,-168 # 78f8 <malloc+0x1c48>
+    39a4:	f3050513          	addi	a0,a0,-208 # 78d0 <malloc+0x1c48>
     39a8:	00002097          	auipc	ra,0x2
-    39ac:	24a080e7          	jalr	586(ra) # 5bf2 <printf>
+    39ac:	222080e7          	jalr	546(ra) # 5bca <printf>
     exit(1);
     39b0:	4505                	li	a0,1
     39b2:	00002097          	auipc	ra,0x2
@@ -5873,9 +5873,9 @@ execout(char *s)
     printf("%s: unlink dd failed\n", s);
     39ba:	85ca                	mv	a1,s2
     39bc:	00004517          	auipc	a0,0x4
-    39c0:	f5c50513          	addi	a0,a0,-164 # 7918 <malloc+0x1c68>
+    39c0:	f3450513          	addi	a0,a0,-204 # 78f0 <malloc+0x1c68>
     39c4:	00002097          	auipc	ra,0x2
-    39c8:	22e080e7          	jalr	558(ra) # 5bf2 <printf>
+    39c8:	206080e7          	jalr	518(ra) # 5bca <printf>
     exit(1);
     39cc:	4505                	li	a0,1
     39ce:	00002097          	auipc	ra,0x2
@@ -5891,49 +5891,49 @@ execout(char *s)
     39e0:	84aa                	mv	s1,a0
   if(mkdir("dots") != 0){
     39e2:	00004517          	auipc	a0,0x4
-    39e6:	f4e50513          	addi	a0,a0,-178 # 7930 <malloc+0x1c80>
+    39e6:	f2650513          	addi	a0,a0,-218 # 7908 <malloc+0x1c80>
     39ea:	00002097          	auipc	ra,0x2
     39ee:	ed0080e7          	jalr	-304(ra) # 58ba <mkdir>
     39f2:	e549                	bnez	a0,3a7c <rmdot+0xa6>
   if(chdir("dots") != 0){
     39f4:	00004517          	auipc	a0,0x4
-    39f8:	f3c50513          	addi	a0,a0,-196 # 7930 <malloc+0x1c80>
+    39f8:	f1450513          	addi	a0,a0,-236 # 7908 <malloc+0x1c80>
     39fc:	00002097          	auipc	ra,0x2
     3a00:	ec6080e7          	jalr	-314(ra) # 58c2 <chdir>
     3a04:	e951                	bnez	a0,3a98 <rmdot+0xc2>
   if(unlink(".") == 0){
     3a06:	00003517          	auipc	a0,0x3
-    3a0a:	dc250513          	addi	a0,a0,-574 # 67c8 <malloc+0xb18>
+    3a0a:	d9a50513          	addi	a0,a0,-614 # 67a0 <malloc+0xb18>
     3a0e:	00002097          	auipc	ra,0x2
     3a12:	e94080e7          	jalr	-364(ra) # 58a2 <unlink>
     3a16:	cd59                	beqz	a0,3ab4 <rmdot+0xde>
   if(unlink("..") == 0){
     3a18:	00004517          	auipc	a0,0x4
-    3a1c:	97050513          	addi	a0,a0,-1680 # 7388 <malloc+0x16d8>
+    3a1c:	94850513          	addi	a0,a0,-1720 # 7360 <malloc+0x16d8>
     3a20:	00002097          	auipc	ra,0x2
     3a24:	e82080e7          	jalr	-382(ra) # 58a2 <unlink>
     3a28:	c545                	beqz	a0,3ad0 <rmdot+0xfa>
   if(chdir("/") != 0){
     3a2a:	00004517          	auipc	a0,0x4
-    3a2e:	90650513          	addi	a0,a0,-1786 # 7330 <malloc+0x1680>
+    3a2e:	8de50513          	addi	a0,a0,-1826 # 7308 <malloc+0x1680>
     3a32:	00002097          	auipc	ra,0x2
     3a36:	e90080e7          	jalr	-368(ra) # 58c2 <chdir>
     3a3a:	e94d                	bnez	a0,3aec <rmdot+0x116>
   if(unlink("dots/.") == 0){
     3a3c:	00004517          	auipc	a0,0x4
-    3a40:	f5c50513          	addi	a0,a0,-164 # 7998 <malloc+0x1ce8>
+    3a40:	f3450513          	addi	a0,a0,-204 # 7970 <malloc+0x1ce8>
     3a44:	00002097          	auipc	ra,0x2
     3a48:	e5e080e7          	jalr	-418(ra) # 58a2 <unlink>
     3a4c:	cd55                	beqz	a0,3b08 <rmdot+0x132>
   if(unlink("dots/..") == 0){
     3a4e:	00004517          	auipc	a0,0x4
-    3a52:	f7250513          	addi	a0,a0,-142 # 79c0 <malloc+0x1d10>
+    3a52:	f4a50513          	addi	a0,a0,-182 # 7998 <malloc+0x1d10>
     3a56:	00002097          	auipc	ra,0x2
     3a5a:	e4c080e7          	jalr	-436(ra) # 58a2 <unlink>
     3a5e:	c179                	beqz	a0,3b24 <rmdot+0x14e>
   if(unlink("dots") != 0){
     3a60:	00004517          	auipc	a0,0x4
-    3a64:	ed050513          	addi	a0,a0,-304 # 7930 <malloc+0x1c80>
+    3a64:	ea850513          	addi	a0,a0,-344 # 7908 <malloc+0x1c80>
     3a68:	00002097          	auipc	ra,0x2
     3a6c:	e3a080e7          	jalr	-454(ra) # 58a2 <unlink>
     3a70:	e961                	bnez	a0,3b40 <rmdot+0x16a>
@@ -5946,9 +5946,9 @@ execout(char *s)
     printf("%s: mkdir dots failed\n", s);
     3a7c:	85a6                	mv	a1,s1
     3a7e:	00004517          	auipc	a0,0x4
-    3a82:	eba50513          	addi	a0,a0,-326 # 7938 <malloc+0x1c88>
+    3a82:	e9250513          	addi	a0,a0,-366 # 7910 <malloc+0x1c88>
     3a86:	00002097          	auipc	ra,0x2
-    3a8a:	16c080e7          	jalr	364(ra) # 5bf2 <printf>
+    3a8a:	144080e7          	jalr	324(ra) # 5bca <printf>
     exit(1);
     3a8e:	4505                	li	a0,1
     3a90:	00002097          	auipc	ra,0x2
@@ -5956,9 +5956,9 @@ execout(char *s)
     printf("%s: chdir dots failed\n", s);
     3a98:	85a6                	mv	a1,s1
     3a9a:	00004517          	auipc	a0,0x4
-    3a9e:	eb650513          	addi	a0,a0,-330 # 7950 <malloc+0x1ca0>
+    3a9e:	e8e50513          	addi	a0,a0,-370 # 7928 <malloc+0x1ca0>
     3aa2:	00002097          	auipc	ra,0x2
-    3aa6:	150080e7          	jalr	336(ra) # 5bf2 <printf>
+    3aa6:	128080e7          	jalr	296(ra) # 5bca <printf>
     exit(1);
     3aaa:	4505                	li	a0,1
     3aac:	00002097          	auipc	ra,0x2
@@ -5966,9 +5966,9 @@ execout(char *s)
     printf("%s: rm . worked!\n", s);
     3ab4:	85a6                	mv	a1,s1
     3ab6:	00004517          	auipc	a0,0x4
-    3aba:	eb250513          	addi	a0,a0,-334 # 7968 <malloc+0x1cb8>
+    3aba:	e8a50513          	addi	a0,a0,-374 # 7940 <malloc+0x1cb8>
     3abe:	00002097          	auipc	ra,0x2
-    3ac2:	134080e7          	jalr	308(ra) # 5bf2 <printf>
+    3ac2:	10c080e7          	jalr	268(ra) # 5bca <printf>
     exit(1);
     3ac6:	4505                	li	a0,1
     3ac8:	00002097          	auipc	ra,0x2
@@ -5976,9 +5976,9 @@ execout(char *s)
     printf("%s: rm .. worked!\n", s);
     3ad0:	85a6                	mv	a1,s1
     3ad2:	00004517          	auipc	a0,0x4
-    3ad6:	eae50513          	addi	a0,a0,-338 # 7980 <malloc+0x1cd0>
+    3ad6:	e8650513          	addi	a0,a0,-378 # 7958 <malloc+0x1cd0>
     3ada:	00002097          	auipc	ra,0x2
-    3ade:	118080e7          	jalr	280(ra) # 5bf2 <printf>
+    3ade:	0f0080e7          	jalr	240(ra) # 5bca <printf>
     exit(1);
     3ae2:	4505                	li	a0,1
     3ae4:	00002097          	auipc	ra,0x2
@@ -5986,9 +5986,9 @@ execout(char *s)
     printf("%s: chdir / failed\n", s);
     3aec:	85a6                	mv	a1,s1
     3aee:	00004517          	auipc	a0,0x4
-    3af2:	84a50513          	addi	a0,a0,-1974 # 7338 <malloc+0x1688>
+    3af2:	82250513          	addi	a0,a0,-2014 # 7310 <malloc+0x1688>
     3af6:	00002097          	auipc	ra,0x2
-    3afa:	0fc080e7          	jalr	252(ra) # 5bf2 <printf>
+    3afa:	0d4080e7          	jalr	212(ra) # 5bca <printf>
     exit(1);
     3afe:	4505                	li	a0,1
     3b00:	00002097          	auipc	ra,0x2
@@ -5996,9 +5996,9 @@ execout(char *s)
     printf("%s: unlink dots/. worked!\n", s);
     3b08:	85a6                	mv	a1,s1
     3b0a:	00004517          	auipc	a0,0x4
-    3b0e:	e9650513          	addi	a0,a0,-362 # 79a0 <malloc+0x1cf0>
+    3b0e:	e6e50513          	addi	a0,a0,-402 # 7978 <malloc+0x1cf0>
     3b12:	00002097          	auipc	ra,0x2
-    3b16:	0e0080e7          	jalr	224(ra) # 5bf2 <printf>
+    3b16:	0b8080e7          	jalr	184(ra) # 5bca <printf>
     exit(1);
     3b1a:	4505                	li	a0,1
     3b1c:	00002097          	auipc	ra,0x2
@@ -6006,9 +6006,9 @@ execout(char *s)
     printf("%s: unlink dots/.. worked!\n", s);
     3b24:	85a6                	mv	a1,s1
     3b26:	00004517          	auipc	a0,0x4
-    3b2a:	ea250513          	addi	a0,a0,-350 # 79c8 <malloc+0x1d18>
+    3b2a:	e7a50513          	addi	a0,a0,-390 # 79a0 <malloc+0x1d18>
     3b2e:	00002097          	auipc	ra,0x2
-    3b32:	0c4080e7          	jalr	196(ra) # 5bf2 <printf>
+    3b32:	09c080e7          	jalr	156(ra) # 5bca <printf>
     exit(1);
     3b36:	4505                	li	a0,1
     3b38:	00002097          	auipc	ra,0x2
@@ -6016,9 +6016,9 @@ execout(char *s)
     printf("%s: unlink dots failed!\n", s);
     3b40:	85a6                	mv	a1,s1
     3b42:	00004517          	auipc	a0,0x4
-    3b46:	ea650513          	addi	a0,a0,-346 # 79e8 <malloc+0x1d38>
+    3b46:	e7e50513          	addi	a0,a0,-386 # 79c0 <malloc+0x1d38>
     3b4a:	00002097          	auipc	ra,0x2
-    3b4e:	0a8080e7          	jalr	168(ra) # 5bf2 <printf>
+    3b4e:	080080e7          	jalr	128(ra) # 5bca <printf>
     exit(1);
     3b52:	4505                	li	a0,1
     3b54:	00002097          	auipc	ra,0x2
@@ -6036,7 +6036,7 @@ execout(char *s)
   fd = open("dirfile", O_CREATE);
     3b6a:	20000593          	li	a1,512
     3b6e:	00002517          	auipc	a0,0x2
-    3b72:	56250513          	addi	a0,a0,1378 # 60d0 <malloc+0x420>
+    3b72:	53a50513          	addi	a0,a0,1338 # 60a8 <malloc+0x420>
     3b76:	00002097          	auipc	ra,0x2
     3b7a:	d1c080e7          	jalr	-740(ra) # 5892 <open>
   if(fd < 0){
@@ -6046,14 +6046,14 @@ execout(char *s)
     3b86:	cf8080e7          	jalr	-776(ra) # 587a <close>
   if(chdir("dirfile") == 0){
     3b8a:	00002517          	auipc	a0,0x2
-    3b8e:	54650513          	addi	a0,a0,1350 # 60d0 <malloc+0x420>
+    3b8e:	51e50513          	addi	a0,a0,1310 # 60a8 <malloc+0x420>
     3b92:	00002097          	auipc	ra,0x2
     3b96:	d30080e7          	jalr	-720(ra) # 58c2 <chdir>
     3b9a:	cd6d                	beqz	a0,3c94 <dirfile+0x138>
   fd = open("dirfile/xx", 0);
     3b9c:	4581                	li	a1,0
     3b9e:	00004517          	auipc	a0,0x4
-    3ba2:	eaa50513          	addi	a0,a0,-342 # 7a48 <malloc+0x1d98>
+    3ba2:	e8250513          	addi	a0,a0,-382 # 7a20 <malloc+0x1d98>
     3ba6:	00002097          	auipc	ra,0x2
     3baa:	cec080e7          	jalr	-788(ra) # 5892 <open>
   if(fd >= 0){
@@ -6061,41 +6061,41 @@ execout(char *s)
   fd = open("dirfile/xx", O_CREATE);
     3bb2:	20000593          	li	a1,512
     3bb6:	00004517          	auipc	a0,0x4
-    3bba:	e9250513          	addi	a0,a0,-366 # 7a48 <malloc+0x1d98>
+    3bba:	e6a50513          	addi	a0,a0,-406 # 7a20 <malloc+0x1d98>
     3bbe:	00002097          	auipc	ra,0x2
     3bc2:	cd4080e7          	jalr	-812(ra) # 5892 <open>
   if(fd >= 0){
     3bc6:	10055363          	bgez	a0,3ccc <dirfile+0x170>
   if(mkdir("dirfile/xx") == 0){
     3bca:	00004517          	auipc	a0,0x4
-    3bce:	e7e50513          	addi	a0,a0,-386 # 7a48 <malloc+0x1d98>
+    3bce:	e5650513          	addi	a0,a0,-426 # 7a20 <malloc+0x1d98>
     3bd2:	00002097          	auipc	ra,0x2
     3bd6:	ce8080e7          	jalr	-792(ra) # 58ba <mkdir>
     3bda:	10050763          	beqz	a0,3ce8 <dirfile+0x18c>
   if(unlink("dirfile/xx") == 0){
     3bde:	00004517          	auipc	a0,0x4
-    3be2:	e6a50513          	addi	a0,a0,-406 # 7a48 <malloc+0x1d98>
+    3be2:	e4250513          	addi	a0,a0,-446 # 7a20 <malloc+0x1d98>
     3be6:	00002097          	auipc	ra,0x2
     3bea:	cbc080e7          	jalr	-836(ra) # 58a2 <unlink>
     3bee:	10050b63          	beqz	a0,3d04 <dirfile+0x1a8>
   if(link("README", "dirfile/xx") == 0){
     3bf2:	00004597          	auipc	a1,0x4
-    3bf6:	e5658593          	addi	a1,a1,-426 # 7a48 <malloc+0x1d98>
+    3bf6:	e2e58593          	addi	a1,a1,-466 # 7a20 <malloc+0x1d98>
     3bfa:	00002517          	auipc	a0,0x2
-    3bfe:	6ce50513          	addi	a0,a0,1742 # 62c8 <malloc+0x618>
+    3bfe:	6a650513          	addi	a0,a0,1702 # 62a0 <malloc+0x618>
     3c02:	00002097          	auipc	ra,0x2
     3c06:	cb0080e7          	jalr	-848(ra) # 58b2 <link>
     3c0a:	10050b63          	beqz	a0,3d20 <dirfile+0x1c4>
   if(unlink("dirfile") != 0){
     3c0e:	00002517          	auipc	a0,0x2
-    3c12:	4c250513          	addi	a0,a0,1218 # 60d0 <malloc+0x420>
+    3c12:	49a50513          	addi	a0,a0,1178 # 60a8 <malloc+0x420>
     3c16:	00002097          	auipc	ra,0x2
     3c1a:	c8c080e7          	jalr	-884(ra) # 58a2 <unlink>
     3c1e:	10051f63          	bnez	a0,3d3c <dirfile+0x1e0>
   fd = open(".", O_RDWR);
     3c22:	4589                	li	a1,2
     3c24:	00003517          	auipc	a0,0x3
-    3c28:	ba450513          	addi	a0,a0,-1116 # 67c8 <malloc+0xb18>
+    3c28:	b7c50513          	addi	a0,a0,-1156 # 67a0 <malloc+0xb18>
     3c2c:	00002097          	auipc	ra,0x2
     3c30:	c66080e7          	jalr	-922(ra) # 5892 <open>
   if(fd >= 0){
@@ -6103,14 +6103,14 @@ execout(char *s)
   fd = open(".", 0);
     3c38:	4581                	li	a1,0
     3c3a:	00003517          	auipc	a0,0x3
-    3c3e:	b8e50513          	addi	a0,a0,-1138 # 67c8 <malloc+0xb18>
+    3c3e:	b6650513          	addi	a0,a0,-1178 # 67a0 <malloc+0xb18>
     3c42:	00002097          	auipc	ra,0x2
     3c46:	c50080e7          	jalr	-944(ra) # 5892 <open>
     3c4a:	84aa                	mv	s1,a0
   if(write(fd, "x", 1) > 0){
     3c4c:	4605                	li	a2,1
     3c4e:	00002597          	auipc	a1,0x2
-    3c52:	55258593          	addi	a1,a1,1362 # 61a0 <malloc+0x4f0>
+    3c52:	52a58593          	addi	a1,a1,1322 # 6178 <malloc+0x4f0>
     3c56:	00002097          	auipc	ra,0x2
     3c5a:	c1c080e7          	jalr	-996(ra) # 5872 <write>
     3c5e:	10a04b63          	bgtz	a0,3d74 <dirfile+0x218>
@@ -6128,9 +6128,9 @@ execout(char *s)
     printf("%s: create dirfile failed\n", s);
     3c78:	85ca                	mv	a1,s2
     3c7a:	00004517          	auipc	a0,0x4
-    3c7e:	d8e50513          	addi	a0,a0,-626 # 7a08 <malloc+0x1d58>
+    3c7e:	d6650513          	addi	a0,a0,-666 # 79e0 <malloc+0x1d58>
     3c82:	00002097          	auipc	ra,0x2
-    3c86:	f70080e7          	jalr	-144(ra) # 5bf2 <printf>
+    3c86:	f48080e7          	jalr	-184(ra) # 5bca <printf>
     exit(1);
     3c8a:	4505                	li	a0,1
     3c8c:	00002097          	auipc	ra,0x2
@@ -6138,9 +6138,9 @@ execout(char *s)
     printf("%s: chdir dirfile succeeded!\n", s);
     3c94:	85ca                	mv	a1,s2
     3c96:	00004517          	auipc	a0,0x4
-    3c9a:	d9250513          	addi	a0,a0,-622 # 7a28 <malloc+0x1d78>
+    3c9a:	d6a50513          	addi	a0,a0,-662 # 7a00 <malloc+0x1d78>
     3c9e:	00002097          	auipc	ra,0x2
-    3ca2:	f54080e7          	jalr	-172(ra) # 5bf2 <printf>
+    3ca2:	f2c080e7          	jalr	-212(ra) # 5bca <printf>
     exit(1);
     3ca6:	4505                	li	a0,1
     3ca8:	00002097          	auipc	ra,0x2
@@ -6148,9 +6148,9 @@ execout(char *s)
     printf("%s: create dirfile/xx succeeded!\n", s);
     3cb0:	85ca                	mv	a1,s2
     3cb2:	00004517          	auipc	a0,0x4
-    3cb6:	da650513          	addi	a0,a0,-602 # 7a58 <malloc+0x1da8>
+    3cb6:	d7e50513          	addi	a0,a0,-642 # 7a30 <malloc+0x1da8>
     3cba:	00002097          	auipc	ra,0x2
-    3cbe:	f38080e7          	jalr	-200(ra) # 5bf2 <printf>
+    3cbe:	f10080e7          	jalr	-240(ra) # 5bca <printf>
     exit(1);
     3cc2:	4505                	li	a0,1
     3cc4:	00002097          	auipc	ra,0x2
@@ -6158,9 +6158,9 @@ execout(char *s)
     printf("%s: create dirfile/xx succeeded!\n", s);
     3ccc:	85ca                	mv	a1,s2
     3cce:	00004517          	auipc	a0,0x4
-    3cd2:	d8a50513          	addi	a0,a0,-630 # 7a58 <malloc+0x1da8>
+    3cd2:	d6250513          	addi	a0,a0,-670 # 7a30 <malloc+0x1da8>
     3cd6:	00002097          	auipc	ra,0x2
-    3cda:	f1c080e7          	jalr	-228(ra) # 5bf2 <printf>
+    3cda:	ef4080e7          	jalr	-268(ra) # 5bca <printf>
     exit(1);
     3cde:	4505                	li	a0,1
     3ce0:	00002097          	auipc	ra,0x2
@@ -6168,9 +6168,9 @@ execout(char *s)
     printf("%s: mkdir dirfile/xx succeeded!\n", s);
     3ce8:	85ca                	mv	a1,s2
     3cea:	00004517          	auipc	a0,0x4
-    3cee:	d9650513          	addi	a0,a0,-618 # 7a80 <malloc+0x1dd0>
+    3cee:	d6e50513          	addi	a0,a0,-658 # 7a58 <malloc+0x1dd0>
     3cf2:	00002097          	auipc	ra,0x2
-    3cf6:	f00080e7          	jalr	-256(ra) # 5bf2 <printf>
+    3cf6:	ed8080e7          	jalr	-296(ra) # 5bca <printf>
     exit(1);
     3cfa:	4505                	li	a0,1
     3cfc:	00002097          	auipc	ra,0x2
@@ -6178,9 +6178,9 @@ execout(char *s)
     printf("%s: unlink dirfile/xx succeeded!\n", s);
     3d04:	85ca                	mv	a1,s2
     3d06:	00004517          	auipc	a0,0x4
-    3d0a:	da250513          	addi	a0,a0,-606 # 7aa8 <malloc+0x1df8>
+    3d0a:	d7a50513          	addi	a0,a0,-646 # 7a80 <malloc+0x1df8>
     3d0e:	00002097          	auipc	ra,0x2
-    3d12:	ee4080e7          	jalr	-284(ra) # 5bf2 <printf>
+    3d12:	ebc080e7          	jalr	-324(ra) # 5bca <printf>
     exit(1);
     3d16:	4505                	li	a0,1
     3d18:	00002097          	auipc	ra,0x2
@@ -6188,9 +6188,9 @@ execout(char *s)
     printf("%s: link to dirfile/xx succeeded!\n", s);
     3d20:	85ca                	mv	a1,s2
     3d22:	00004517          	auipc	a0,0x4
-    3d26:	dae50513          	addi	a0,a0,-594 # 7ad0 <malloc+0x1e20>
+    3d26:	d8650513          	addi	a0,a0,-634 # 7aa8 <malloc+0x1e20>
     3d2a:	00002097          	auipc	ra,0x2
-    3d2e:	ec8080e7          	jalr	-312(ra) # 5bf2 <printf>
+    3d2e:	ea0080e7          	jalr	-352(ra) # 5bca <printf>
     exit(1);
     3d32:	4505                	li	a0,1
     3d34:	00002097          	auipc	ra,0x2
@@ -6198,9 +6198,9 @@ execout(char *s)
     printf("%s: unlink dirfile failed!\n", s);
     3d3c:	85ca                	mv	a1,s2
     3d3e:	00004517          	auipc	a0,0x4
-    3d42:	dba50513          	addi	a0,a0,-582 # 7af8 <malloc+0x1e48>
+    3d42:	d9250513          	addi	a0,a0,-622 # 7ad0 <malloc+0x1e48>
     3d46:	00002097          	auipc	ra,0x2
-    3d4a:	eac080e7          	jalr	-340(ra) # 5bf2 <printf>
+    3d4a:	e84080e7          	jalr	-380(ra) # 5bca <printf>
     exit(1);
     3d4e:	4505                	li	a0,1
     3d50:	00002097          	auipc	ra,0x2
@@ -6208,9 +6208,9 @@ execout(char *s)
     printf("%s: open . for writing succeeded!\n", s);
     3d58:	85ca                	mv	a1,s2
     3d5a:	00004517          	auipc	a0,0x4
-    3d5e:	dbe50513          	addi	a0,a0,-578 # 7b18 <malloc+0x1e68>
+    3d5e:	d9650513          	addi	a0,a0,-618 # 7af0 <malloc+0x1e68>
     3d62:	00002097          	auipc	ra,0x2
-    3d66:	e90080e7          	jalr	-368(ra) # 5bf2 <printf>
+    3d66:	e68080e7          	jalr	-408(ra) # 5bca <printf>
     exit(1);
     3d6a:	4505                	li	a0,1
     3d6c:	00002097          	auipc	ra,0x2
@@ -6218,9 +6218,9 @@ execout(char *s)
     printf("%s: write . succeeded!\n", s);
     3d74:	85ca                	mv	a1,s2
     3d76:	00004517          	auipc	a0,0x4
-    3d7a:	dca50513          	addi	a0,a0,-566 # 7b40 <malloc+0x1e90>
+    3d7a:	da250513          	addi	a0,a0,-606 # 7b18 <malloc+0x1e90>
     3d7e:	00002097          	auipc	ra,0x2
-    3d82:	e74080e7          	jalr	-396(ra) # 5bf2 <printf>
+    3d82:	e4c080e7          	jalr	-436(ra) # 5bca <printf>
     exit(1);
     3d86:	4505                	li	a0,1
     3d88:	00002097          	auipc	ra,0x2
@@ -6242,23 +6242,23 @@ execout(char *s)
     3da6:	03300913          	li	s2,51
     if(mkdir("irefd") != 0){
     3daa:	00004a17          	auipc	s4,0x4
-    3dae:	daea0a13          	addi	s4,s4,-594 # 7b58 <malloc+0x1ea8>
+    3dae:	d86a0a13          	addi	s4,s4,-634 # 7b30 <malloc+0x1ea8>
     mkdir("");
     3db2:	00004497          	auipc	s1,0x4
-    3db6:	8b648493          	addi	s1,s1,-1866 # 7668 <malloc+0x19b8>
+    3db6:	88e48493          	addi	s1,s1,-1906 # 7640 <malloc+0x19b8>
     link("README", "");
     3dba:	00002a97          	auipc	s5,0x2
-    3dbe:	50ea8a93          	addi	s5,s5,1294 # 62c8 <malloc+0x618>
+    3dbe:	4e6a8a93          	addi	s5,s5,1254 # 62a0 <malloc+0x618>
     fd = open("xx", O_CREATE);
     3dc2:	00004997          	auipc	s3,0x4
-    3dc6:	c8e98993          	addi	s3,s3,-882 # 7a50 <malloc+0x1da0>
+    3dc6:	c6698993          	addi	s3,s3,-922 # 7a28 <malloc+0x1da0>
     3dca:	a891                	j	3e1e <iref+0x8e>
       printf("%s: mkdir irefd failed\n", s);
     3dcc:	85da                	mv	a1,s6
     3dce:	00004517          	auipc	a0,0x4
-    3dd2:	d9250513          	addi	a0,a0,-622 # 7b60 <malloc+0x1eb0>
+    3dd2:	d6a50513          	addi	a0,a0,-662 # 7b38 <malloc+0x1eb0>
     3dd6:	00002097          	auipc	ra,0x2
-    3dda:	e1c080e7          	jalr	-484(ra) # 5bf2 <printf>
+    3dda:	df4080e7          	jalr	-524(ra) # 5bca <printf>
       exit(1);
     3dde:	4505                	li	a0,1
     3de0:	00002097          	auipc	ra,0x2
@@ -6266,9 +6266,9 @@ execout(char *s)
       printf("%s: chdir irefd failed\n", s);
     3de8:	85da                	mv	a1,s6
     3dea:	00004517          	auipc	a0,0x4
-    3dee:	d8e50513          	addi	a0,a0,-626 # 7b78 <malloc+0x1ec8>
+    3dee:	d6650513          	addi	a0,a0,-666 # 7b50 <malloc+0x1ec8>
     3df2:	00002097          	auipc	ra,0x2
-    3df6:	e00080e7          	jalr	-512(ra) # 5bf2 <printf>
+    3df6:	dd8080e7          	jalr	-552(ra) # 5bca <printf>
       exit(1);
     3dfa:	4505                	li	a0,1
     3dfc:	00002097          	auipc	ra,0x2
@@ -6324,10 +6324,10 @@ execout(char *s)
     3e7a:	03300493          	li	s1,51
     chdir("..");
     3e7e:	00003997          	auipc	s3,0x3
-    3e82:	50a98993          	addi	s3,s3,1290 # 7388 <malloc+0x16d8>
+    3e82:	4e298993          	addi	s3,s3,1250 # 7360 <malloc+0x16d8>
     unlink("irefd");
     3e86:	00004917          	auipc	s2,0x4
-    3e8a:	cd290913          	addi	s2,s2,-814 # 7b58 <malloc+0x1ea8>
+    3e8a:	caa90913          	addi	s2,s2,-854 # 7b30 <malloc+0x1ea8>
     chdir("..");
     3e8e:	854e                	mv	a0,s3
     3e90:	00002097          	auipc	ra,0x2
@@ -6341,7 +6341,7 @@ execout(char *s)
     3ea4:	f4ed                	bnez	s1,3e8e <iref+0xfe>
   chdir("/");
     3ea6:	00003517          	auipc	a0,0x3
-    3eaa:	48a50513          	addi	a0,a0,1162 # 7330 <malloc+0x1680>
+    3eaa:	46250513          	addi	a0,a0,1122 # 7308 <malloc+0x1680>
     3eae:	00002097          	auipc	ra,0x2
     3eb2:	a14080e7          	jalr	-1516(ra) # 58c2 <chdir>
 }
@@ -6366,7 +6366,7 @@ execout(char *s)
     3ed4:	84aa                	mv	s1,a0
   if(mkdir("oidir") < 0){
     3ed6:	00004517          	auipc	a0,0x4
-    3eda:	cba50513          	addi	a0,a0,-838 # 7b90 <malloc+0x1ee0>
+    3eda:	c9250513          	addi	a0,a0,-878 # 7b68 <malloc+0x1ee0>
     3ede:	00002097          	auipc	ra,0x2
     3ee2:	9dc080e7          	jalr	-1572(ra) # 58ba <mkdir>
     3ee6:	04054263          	bltz	a0,3f2a <openiputtest+0x60>
@@ -6380,7 +6380,7 @@ execout(char *s)
     int fd = open("oidir", O_RDWR);
     3ef8:	4589                	li	a1,2
     3efa:	00004517          	auipc	a0,0x4
-    3efe:	c9650513          	addi	a0,a0,-874 # 7b90 <malloc+0x1ee0>
+    3efe:	c6e50513          	addi	a0,a0,-914 # 7b68 <malloc+0x1ee0>
     3f02:	00002097          	auipc	ra,0x2
     3f06:	990080e7          	jalr	-1648(ra) # 5892 <open>
     if(fd >= 0){
@@ -6388,9 +6388,9 @@ execout(char *s)
       printf("%s: open directory for write succeeded\n", s);
     3f0e:	85a6                	mv	a1,s1
     3f10:	00004517          	auipc	a0,0x4
-    3f14:	ca050513          	addi	a0,a0,-864 # 7bb0 <malloc+0x1f00>
+    3f14:	c7850513          	addi	a0,a0,-904 # 7b88 <malloc+0x1f00>
     3f18:	00002097          	auipc	ra,0x2
-    3f1c:	cda080e7          	jalr	-806(ra) # 5bf2 <printf>
+    3f1c:	cb2080e7          	jalr	-846(ra) # 5bca <printf>
       exit(1);
     3f20:	4505                	li	a0,1
     3f22:	00002097          	auipc	ra,0x2
@@ -6398,9 +6398,9 @@ execout(char *s)
     printf("%s: mkdir oidir failed\n", s);
     3f2a:	85a6                	mv	a1,s1
     3f2c:	00004517          	auipc	a0,0x4
-    3f30:	c6c50513          	addi	a0,a0,-916 # 7b98 <malloc+0x1ee8>
+    3f30:	c4450513          	addi	a0,a0,-956 # 7b70 <malloc+0x1ee8>
     3f34:	00002097          	auipc	ra,0x2
-    3f38:	cbe080e7          	jalr	-834(ra) # 5bf2 <printf>
+    3f38:	c96080e7          	jalr	-874(ra) # 5bca <printf>
     exit(1);
     3f3c:	4505                	li	a0,1
     3f3e:	00002097          	auipc	ra,0x2
@@ -6408,9 +6408,9 @@ execout(char *s)
     printf("%s: fork failed\n", s);
     3f46:	85a6                	mv	a1,s1
     3f48:	00003517          	auipc	a0,0x3
-    3f4c:	a2050513          	addi	a0,a0,-1504 # 6968 <malloc+0xcb8>
+    3f4c:	9f850513          	addi	a0,a0,-1544 # 6940 <malloc+0xcb8>
     3f50:	00002097          	auipc	ra,0x2
-    3f54:	ca2080e7          	jalr	-862(ra) # 5bf2 <printf>
+    3f54:	c7a080e7          	jalr	-902(ra) # 5bca <printf>
     exit(1);
     3f58:	4505                	li	a0,1
     3f5a:	00002097          	auipc	ra,0x2
@@ -6425,16 +6425,16 @@ execout(char *s)
     3f72:	974080e7          	jalr	-1676(ra) # 58e2 <sleep>
   if(unlink("oidir") != 0){
     3f76:	00004517          	auipc	a0,0x4
-    3f7a:	c1a50513          	addi	a0,a0,-998 # 7b90 <malloc+0x1ee0>
+    3f7a:	bf250513          	addi	a0,a0,-1038 # 7b68 <malloc+0x1ee0>
     3f7e:	00002097          	auipc	ra,0x2
     3f82:	924080e7          	jalr	-1756(ra) # 58a2 <unlink>
     3f86:	cd19                	beqz	a0,3fa4 <openiputtest+0xda>
     printf("%s: unlink failed\n", s);
     3f88:	85a6                	mv	a1,s1
     3f8a:	00003517          	auipc	a0,0x3
-    3f8e:	bce50513          	addi	a0,a0,-1074 # 6b58 <malloc+0xea8>
+    3f8e:	ba650513          	addi	a0,a0,-1114 # 6b30 <malloc+0xea8>
     3f92:	00002097          	auipc	ra,0x2
-    3f96:	c60080e7          	jalr	-928(ra) # 5bf2 <printf>
+    3f96:	c38080e7          	jalr	-968(ra) # 5bca <printf>
     exit(1);
     3f9a:	4505                	li	a0,1
     3f9c:	00002097          	auipc	ra,0x2
@@ -6458,7 +6458,7 @@ execout(char *s)
     3fc6:	84aa                	mv	s1,a0
   unlink("stopforking");
     3fc8:	00004517          	auipc	a0,0x4
-    3fcc:	c1050513          	addi	a0,a0,-1008 # 7bd8 <malloc+0x1f28>
+    3fcc:	be850513          	addi	a0,a0,-1048 # 7bb0 <malloc+0x1f28>
     3fd0:	00002097          	auipc	ra,0x2
     3fd4:	8d2080e7          	jalr	-1838(ra) # 58a2 <unlink>
   int pid = fork();
@@ -6475,7 +6475,7 @@ execout(char *s)
   close(open("stopforking", O_CREATE|O_RDWR));
     3ff0:	20200593          	li	a1,514
     3ff4:	00004517          	auipc	a0,0x4
-    3ff8:	be450513          	addi	a0,a0,-1052 # 7bd8 <malloc+0x1f28>
+    3ff8:	bbc50513          	addi	a0,a0,-1092 # 7bb0 <malloc+0x1f28>
     3ffc:	00002097          	auipc	ra,0x2
     4000:	896080e7          	jalr	-1898(ra) # 5892 <open>
     4004:	00002097          	auipc	ra,0x2
@@ -6497,16 +6497,16 @@ execout(char *s)
     printf("%s: fork failed", s);
     402a:	85a6                	mv	a1,s1
     402c:	00003517          	auipc	a0,0x3
-    4030:	afc50513          	addi	a0,a0,-1284 # 6b28 <malloc+0xe78>
+    4030:	ad450513          	addi	a0,a0,-1324 # 6b00 <malloc+0xe78>
     4034:	00002097          	auipc	ra,0x2
-    4038:	bbe080e7          	jalr	-1090(ra) # 5bf2 <printf>
+    4038:	b96080e7          	jalr	-1130(ra) # 5bca <printf>
     exit(1);
     403c:	4505                	li	a0,1
     403e:	00002097          	auipc	ra,0x2
     4042:	814080e7          	jalr	-2028(ra) # 5852 <exit>
       int fd = open("stopforking", 0);
     4046:	00004497          	auipc	s1,0x4
-    404a:	b9248493          	addi	s1,s1,-1134 # 7bd8 <malloc+0x1f28>
+    404a:	b6a48493          	addi	s1,s1,-1174 # 7bb0 <malloc+0x1f28>
     404e:	4581                	li	a1,0
     4050:	8526                	mv	a0,s1
     4052:	00002097          	auipc	ra,0x2
@@ -6577,9 +6577,9 @@ execout(char *s)
       printf("%s: fork failed\n", s);
     40ec:	85d2                	mv	a1,s4
     40ee:	00003517          	auipc	a0,0x3
-    40f2:	87a50513          	addi	a0,a0,-1926 # 6968 <malloc+0xcb8>
+    40f2:	85250513          	addi	a0,a0,-1966 # 6940 <malloc+0xcb8>
     40f6:	00002097          	auipc	ra,0x2
-    40fa:	afc080e7          	jalr	-1284(ra) # 5bf2 <printf>
+    40fa:	ad4080e7          	jalr	-1324(ra) # 5bca <printf>
       exit(1);
     40fe:	4505                	li	a0,1
     4100:	00001097          	auipc	ra,0x1
@@ -6592,9 +6592,9 @@ execout(char *s)
        printf("%s: status should be -1\n", s);
     4112:	85d2                	mv	a1,s4
     4114:	00004517          	auipc	a0,0x4
-    4118:	ad450513          	addi	a0,a0,-1324 # 7be8 <malloc+0x1f38>
+    4118:	aac50513          	addi	a0,a0,-1364 # 7bc0 <malloc+0x1f38>
     411c:	00002097          	auipc	ra,0x2
-    4120:	ad6080e7          	jalr	-1322(ra) # 5bf2 <printf>
+    4120:	aae080e7          	jalr	-1362(ra) # 5bca <printf>
        exit(1);
     4124:	4505                	li	a0,1
     4126:	00001097          	auipc	ra,0x1
@@ -6624,9 +6624,9 @@ execout(char *s)
     printf("%s: fork failed", s);
     4152:	85a6                	mv	a1,s1
     4154:	00003517          	auipc	a0,0x3
-    4158:	9d450513          	addi	a0,a0,-1580 # 6b28 <malloc+0xe78>
+    4158:	9ac50513          	addi	a0,a0,-1620 # 6b00 <malloc+0xe78>
     415c:	00002097          	auipc	ra,0x2
-    4160:	a96080e7          	jalr	-1386(ra) # 5bf2 <printf>
+    4160:	a6e080e7          	jalr	-1426(ra) # 5bca <printf>
     exit(1);
     4164:	4505                	li	a0,1
     4166:	00001097          	auipc	ra,0x1
@@ -6644,9 +6644,9 @@ execout(char *s)
     printf("%s: fork failed\n", s);
     4180:	85a6                	mv	a1,s1
     4182:	00002517          	auipc	a0,0x2
-    4186:	7e650513          	addi	a0,a0,2022 # 6968 <malloc+0xcb8>
+    4186:	7be50513          	addi	a0,a0,1982 # 6940 <malloc+0xcb8>
     418a:	00002097          	auipc	ra,0x2
-    418e:	a68080e7          	jalr	-1432(ra) # 5bf2 <printf>
+    418e:	a40080e7          	jalr	-1472(ra) # 5bca <printf>
     exit(1);
     4192:	4505                	li	a0,1
     4194:	00001097          	auipc	ra,0x1
@@ -6670,7 +6670,7 @@ execout(char *s)
     if(write(pfds[1], "x", 1) != 1)
     41c4:	4605                	li	a2,1
     41c6:	00002597          	auipc	a1,0x2
-    41ca:	fda58593          	addi	a1,a1,-38 # 61a0 <malloc+0x4f0>
+    41ca:	fb258593          	addi	a1,a1,-78 # 6178 <malloc+0x4f0>
     41ce:	fcc42503          	lw	a0,-52(s0)
     41d2:	00001097          	auipc	ra,0x1
     41d6:	6a0080e7          	jalr	1696(ra) # 5872 <write>
@@ -6685,9 +6685,9 @@ execout(char *s)
      printf("%s: fork failed\n", s);
     41ee:	85a6                	mv	a1,s1
     41f0:	00002517          	auipc	a0,0x2
-    41f4:	77850513          	addi	a0,a0,1912 # 6968 <malloc+0xcb8>
+    41f4:	75050513          	addi	a0,a0,1872 # 6940 <malloc+0xcb8>
     41f8:	00002097          	auipc	ra,0x2
-    41fc:	9fa080e7          	jalr	-1542(ra) # 5bf2 <printf>
+    41fc:	9d2080e7          	jalr	-1582(ra) # 5bca <printf>
      exit(1);
     4200:	4505                	li	a0,1
     4202:	00001097          	auipc	ra,0x1
@@ -6695,9 +6695,9 @@ execout(char *s)
       printf("%s: preempt write error", s);
     420a:	85a6                	mv	a1,s1
     420c:	00004517          	auipc	a0,0x4
-    4210:	9fc50513          	addi	a0,a0,-1540 # 7c08 <malloc+0x1f58>
+    4210:	9d450513          	addi	a0,a0,-1580 # 7be0 <malloc+0x1f58>
     4214:	00002097          	auipc	ra,0x2
-    4218:	9de080e7          	jalr	-1570(ra) # 5bf2 <printf>
+    4218:	9b6080e7          	jalr	-1610(ra) # 5bca <printf>
     421c:	b7d1                	j	41e0 <preempt+0xb2>
   close(pfds[1]);
     421e:	fcc42503          	lw	a0,-52(s0)
@@ -6706,7 +6706,7 @@ execout(char *s)
   if(read(pfds[0], buf, sizeof(buf)) != 1){
     422a:	660d                	lui	a2,0x3
     422c:	00008597          	auipc	a1,0x8
-    4230:	b8c58593          	addi	a1,a1,-1140 # bdb8 <buf>
+    4230:	b6458593          	addi	a1,a1,-1180 # bd90 <buf>
     4234:	fc842503          	lw	a0,-56(s0)
     4238:	00001097          	auipc	ra,0x1
     423c:	632080e7          	jalr	1586(ra) # 586a <read>
@@ -6715,9 +6715,9 @@ execout(char *s)
     printf("%s: preempt read error", s);
     4246:	85a6                	mv	a1,s1
     4248:	00004517          	auipc	a0,0x4
-    424c:	9d850513          	addi	a0,a0,-1576 # 7c20 <malloc+0x1f70>
+    424c:	9b050513          	addi	a0,a0,-1616 # 7bf8 <malloc+0x1f70>
     4250:	00002097          	auipc	ra,0x2
-    4254:	9a2080e7          	jalr	-1630(ra) # 5bf2 <printf>
+    4254:	97a080e7          	jalr	-1670(ra) # 5bca <printf>
 }
     4258:	70e2                	ld	ra,56(sp)
     425a:	7442                	ld	s0,48(sp)
@@ -6733,9 +6733,9 @@ execout(char *s)
     4270:	60e080e7          	jalr	1550(ra) # 587a <close>
   printf("kill... ");
     4274:	00004517          	auipc	a0,0x4
-    4278:	9c450513          	addi	a0,a0,-1596 # 7c38 <malloc+0x1f88>
+    4278:	99c50513          	addi	a0,a0,-1636 # 7c10 <malloc+0x1f88>
     427c:	00002097          	auipc	ra,0x2
-    4280:	976080e7          	jalr	-1674(ra) # 5bf2 <printf>
+    4280:	94e080e7          	jalr	-1714(ra) # 5bca <printf>
   kill(pid1);
     4284:	8552                	mv	a0,s4
     4286:	00001097          	auipc	ra,0x1
@@ -6750,9 +6750,9 @@ execout(char *s)
     429e:	5e8080e7          	jalr	1512(ra) # 5882 <kill>
   printf("wait... ");
     42a2:	00004517          	auipc	a0,0x4
-    42a6:	9a650513          	addi	a0,a0,-1626 # 7c48 <malloc+0x1f98>
+    42a6:	97e50513          	addi	a0,a0,-1666 # 7c20 <malloc+0x1f98>
     42aa:	00002097          	auipc	ra,0x2
-    42ae:	948080e7          	jalr	-1720(ra) # 5bf2 <printf>
+    42ae:	920080e7          	jalr	-1760(ra) # 5bca <printf>
   wait(0);
     42b2:	4501                	li	a0,0
     42b4:	00001097          	auipc	ra,0x1
@@ -6806,9 +6806,9 @@ execout(char *s)
       printf("%s: fork failed\n", s);
     4320:	85ce                	mv	a1,s3
     4322:	00002517          	auipc	a0,0x2
-    4326:	64650513          	addi	a0,a0,1606 # 6968 <malloc+0xcb8>
+    4326:	61e50513          	addi	a0,a0,1566 # 6940 <malloc+0xcb8>
     432a:	00002097          	auipc	ra,0x2
-    432e:	8c8080e7          	jalr	-1848(ra) # 5bf2 <printf>
+    432e:	8a0080e7          	jalr	-1888(ra) # 5bca <printf>
       exit(1);
     4332:	4505                	li	a0,1
     4334:	00001097          	auipc	ra,0x1
@@ -6816,9 +6816,9 @@ execout(char *s)
         printf("%s: wait wrong pid\n", s);
     433c:	85ce                	mv	a1,s3
     433e:	00002517          	auipc	a0,0x2
-    4342:	7b250513          	addi	a0,a0,1970 # 6af0 <malloc+0xe40>
+    4342:	78a50513          	addi	a0,a0,1930 # 6ac8 <malloc+0xe40>
     4346:	00002097          	auipc	ra,0x2
-    434a:	8ac080e7          	jalr	-1876(ra) # 5bf2 <printf>
+    434a:	884080e7          	jalr	-1916(ra) # 5bca <printf>
         exit(1);
     434e:	4505                	li	a0,1
     4350:	00001097          	auipc	ra,0x1
@@ -6867,9 +6867,9 @@ execout(char *s)
     printf("%s: pipe() failed\n", s);
     43b2:	85ca                	mv	a1,s2
     43b4:	00002517          	auipc	a0,0x2
-    43b8:	6bc50513          	addi	a0,a0,1724 # 6a70 <malloc+0xdc0>
+    43b8:	69450513          	addi	a0,a0,1684 # 6a48 <malloc+0xdc0>
     43bc:	00002097          	auipc	ra,0x2
-    43c0:	836080e7          	jalr	-1994(ra) # 5bf2 <printf>
+    43c0:	80e080e7          	jalr	-2034(ra) # 5bca <printf>
     exit(1);
     43c4:	4505                	li	a0,1
     43c6:	00001097          	auipc	ra,0x1
@@ -6885,7 +6885,7 @@ execout(char *s)
       write(fds[1], "x", 1);
     43e8:	4605                	li	a2,1
     43ea:	00002597          	auipc	a1,0x2
-    43ee:	db658593          	addi	a1,a1,-586 # 61a0 <malloc+0x4f0>
+    43ee:	d8e58593          	addi	a1,a1,-626 # 6178 <malloc+0x4f0>
     43f2:	fb442503          	lw	a0,-76(s0)
     43f6:	00001097          	auipc	ra,0x1
     43fa:	47c080e7          	jalr	1148(ra) # 5872 <write>
@@ -6967,9 +6967,9 @@ execout(char *s)
     printf("%s: failed sbrk leaked memory\n", s);
     44ac:	85ca                	mv	a1,s2
     44ae:	00003517          	auipc	a0,0x3
-    44b2:	7aa50513          	addi	a0,a0,1962 # 7c58 <malloc+0x1fa8>
+    44b2:	78250513          	addi	a0,a0,1922 # 7c30 <malloc+0x1fa8>
     44b6:	00001097          	auipc	ra,0x1
-    44ba:	73c080e7          	jalr	1852(ra) # 5bf2 <printf>
+    44ba:	714080e7          	jalr	1812(ra) # 5bca <printf>
     exit(1);
     44be:	4505                	li	a0,1
     44c0:	00001097          	auipc	ra,0x1
@@ -6977,9 +6977,9 @@ execout(char *s)
     printf("%s: fork failed\n", s);
     44c8:	85ca                	mv	a1,s2
     44ca:	00002517          	auipc	a0,0x2
-    44ce:	49e50513          	addi	a0,a0,1182 # 6968 <malloc+0xcb8>
+    44ce:	47650513          	addi	a0,a0,1142 # 6940 <malloc+0xcb8>
     44d2:	00001097          	auipc	ra,0x1
-    44d6:	720080e7          	jalr	1824(ra) # 5bf2 <printf>
+    44d6:	6f8080e7          	jalr	1784(ra) # 5bca <printf>
     exit(1);
     44da:	4505                	li	a0,1
     44dc:	00001097          	auipc	ra,0x1
@@ -7008,9 +7008,9 @@ execout(char *s)
     4512:	8626                	mv	a2,s1
     4514:	85ca                	mv	a1,s2
     4516:	00003517          	auipc	a0,0x3
-    451a:	76250513          	addi	a0,a0,1890 # 7c78 <malloc+0x1fc8>
+    451a:	73a50513          	addi	a0,a0,1850 # 7c50 <malloc+0x1fc8>
     451e:	00001097          	auipc	ra,0x1
-    4522:	6d4080e7          	jalr	1748(ra) # 5bf2 <printf>
+    4522:	6ac080e7          	jalr	1708(ra) # 5bca <printf>
     exit(1);
     4526:	4505                	li	a0,1
     4528:	00001097          	auipc	ra,0x1
@@ -7043,7 +7043,7 @@ execout(char *s)
     while((m2 = malloc(10001)) != 0){
     455c:	854a                	mv	a0,s2
     455e:	00001097          	auipc	ra,0x1
-    4562:	752080e7          	jalr	1874(ra) # 5cb0 <malloc>
+    4562:	72a080e7          	jalr	1834(ra) # 5c88 <malloc>
     4566:	c501                	beqz	a0,456e <mem+0x34>
       *(char**)m2 = m1;
     4568:	e104                	sd	s1,0(a0)
@@ -7057,18 +7057,18 @@ execout(char *s)
     4572:	6084                	ld	s1,0(s1)
       free(m1);
     4574:	00001097          	auipc	ra,0x1
-    4578:	6b4080e7          	jalr	1716(ra) # 5c28 <free>
+    4578:	68c080e7          	jalr	1676(ra) # 5c00 <free>
     while(m1){
     457c:	f8f5                	bnez	s1,4570 <mem+0x36>
     m1 = malloc(1024*20);
     457e:	6515                	lui	a0,0x5
     4580:	00001097          	auipc	ra,0x1
-    4584:	730080e7          	jalr	1840(ra) # 5cb0 <malloc>
+    4584:	708080e7          	jalr	1800(ra) # 5c88 <malloc>
     if(m1 == 0){
     4588:	c911                	beqz	a0,459c <mem+0x62>
     free(m1);
     458a:	00001097          	auipc	ra,0x1
-    458e:	69e080e7          	jalr	1694(ra) # 5c28 <free>
+    458e:	676080e7          	jalr	1654(ra) # 5c00 <free>
     exit(0);
     4592:	4501                	li	a0,0
     4594:	00001097          	auipc	ra,0x1
@@ -7076,9 +7076,9 @@ execout(char *s)
       printf("couldn't allocate mem?!!\n", s);
     459c:	85ce                	mv	a1,s3
     459e:	00003517          	auipc	a0,0x3
-    45a2:	70a50513          	addi	a0,a0,1802 # 7ca8 <malloc+0x1ff8>
+    45a2:	6e250513          	addi	a0,a0,1762 # 7c80 <malloc+0x1ff8>
     45a6:	00001097          	auipc	ra,0x1
-    45aa:	64c080e7          	jalr	1612(ra) # 5bf2 <printf>
+    45aa:	624080e7          	jalr	1572(ra) # 5bca <printf>
       exit(1);
     45ae:	4505                	li	a0,1
     45b0:	00001097          	auipc	ra,0x1
@@ -7115,13 +7115,13 @@ execout(char *s)
     45f6:	8a2a                	mv	s4,a0
   unlink("sharedfd");
     45f8:	00002517          	auipc	a0,0x2
-    45fc:	94850513          	addi	a0,a0,-1720 # 5f40 <malloc+0x290>
+    45fc:	92050513          	addi	a0,a0,-1760 # 5f18 <malloc+0x290>
     4600:	00001097          	auipc	ra,0x1
     4604:	2a2080e7          	jalr	674(ra) # 58a2 <unlink>
   fd = open("sharedfd", O_CREATE|O_RDWR);
     4608:	20200593          	li	a1,514
     460c:	00002517          	auipc	a0,0x2
-    4610:	93450513          	addi	a0,a0,-1740 # 5f40 <malloc+0x290>
+    4610:	90c50513          	addi	a0,a0,-1780 # 5f18 <malloc+0x290>
     4614:	00001097          	auipc	ra,0x1
     4618:	27e080e7          	jalr	638(ra) # 5892 <open>
   if(fd < 0){
@@ -7160,9 +7160,9 @@ execout(char *s)
     printf("%s: cannot open sharedfd for writing", s);
     4670:	85d2                	mv	a1,s4
     4672:	00003517          	auipc	a0,0x3
-    4676:	65650513          	addi	a0,a0,1622 # 7cc8 <malloc+0x2018>
+    4676:	62e50513          	addi	a0,a0,1582 # 7ca0 <malloc+0x2018>
     467a:	00001097          	auipc	ra,0x1
-    467e:	578080e7          	jalr	1400(ra) # 5bf2 <printf>
+    467e:	550080e7          	jalr	1360(ra) # 5bca <printf>
     exit(1);
     4682:	4505                	li	a0,1
     4684:	00001097          	auipc	ra,0x1
@@ -7170,9 +7170,9 @@ execout(char *s)
       printf("%s: write sharedfd failed\n", s);
     468c:	85d2                	mv	a1,s4
     468e:	00003517          	auipc	a0,0x3
-    4692:	66250513          	addi	a0,a0,1634 # 7cf0 <malloc+0x2040>
+    4692:	63a50513          	addi	a0,a0,1594 # 7cc8 <malloc+0x2040>
     4696:	00001097          	auipc	ra,0x1
-    469a:	55c080e7          	jalr	1372(ra) # 5bf2 <printf>
+    469a:	534080e7          	jalr	1332(ra) # 5bca <printf>
       exit(1);
     469e:	4505                	li	a0,1
     46a0:	00001097          	auipc	ra,0x1
@@ -7195,7 +7195,7 @@ execout(char *s)
   fd = open("sharedfd", 0);
     46d0:	4581                	li	a1,0
     46d2:	00002517          	auipc	a0,0x2
-    46d6:	86e50513          	addi	a0,a0,-1938 # 5f40 <malloc+0x290>
+    46d6:	84650513          	addi	a0,a0,-1978 # 5f18 <malloc+0x290>
     46da:	00001097          	auipc	ra,0x1
     46de:	1b8080e7          	jalr	440(ra) # 5892 <open>
     46e2:	8baa                	mv	s7,a0
@@ -7220,9 +7220,9 @@ execout(char *s)
     printf("%s: cannot open sharedfd for reading\n", s);
     4710:	85d2                	mv	a1,s4
     4712:	00003517          	auipc	a0,0x3
-    4716:	5fe50513          	addi	a0,a0,1534 # 7d10 <malloc+0x2060>
+    4716:	5d650513          	addi	a0,a0,1494 # 7ce8 <malloc+0x2060>
     471a:	00001097          	auipc	ra,0x1
-    471e:	4d8080e7          	jalr	1240(ra) # 5bf2 <printf>
+    471e:	4b0080e7          	jalr	1200(ra) # 5bca <printf>
     exit(1);
     4722:	4505                	li	a0,1
     4724:	00001097          	auipc	ra,0x1
@@ -7233,7 +7233,7 @@ execout(char *s)
     472e:	0785                	addi	a5,a5,1
     4730:	fd2783e3          	beq	a5,s2,46f6 <sharedfd+0x116>
       if(buf[i] == 'c')
-    4734:	0007c703          	lbu	a4,0(a5) # 3e800000 <__BSS_END__+0x3e7f1238>
+    4734:	0007c703          	lbu	a4,0(a5) # 3e800000 <__BSS_END__+0x3e7f1260>
     4738:	fe970ae3          	beq	a4,s1,472c <sharedfd+0x14c>
       if(buf[i] == 'p')
     473c:	ff6719e3          	bne	a4,s6,472e <sharedfd+0x14e>
@@ -7246,7 +7246,7 @@ execout(char *s)
     474a:	134080e7          	jalr	308(ra) # 587a <close>
   unlink("sharedfd");
     474e:	00001517          	auipc	a0,0x1
-    4752:	7f250513          	addi	a0,a0,2034 # 5f40 <malloc+0x290>
+    4752:	7ca50513          	addi	a0,a0,1994 # 5f18 <malloc+0x290>
     4756:	00001097          	auipc	ra,0x1
     475a:	14c080e7          	jalr	332(ra) # 58a2 <unlink>
   if(nc == N*SZ && np == N*SZ){
@@ -7259,9 +7259,9 @@ execout(char *s)
     printf("%s: nc/np test fails\n", s);
     4772:	85d2                	mv	a1,s4
     4774:	00003517          	auipc	a0,0x3
-    4778:	5c450513          	addi	a0,a0,1476 # 7d38 <malloc+0x2088>
+    4778:	59c50513          	addi	a0,a0,1436 # 7d10 <malloc+0x2088>
     477c:	00001097          	auipc	ra,0x1
-    4780:	476080e7          	jalr	1142(ra) # 5bf2 <printf>
+    4780:	44e080e7          	jalr	1102(ra) # 5bca <printf>
     exit(1);
     4784:	4505                	li	a0,1
     4786:	00001097          	auipc	ra,0x1
@@ -7291,16 +7291,16 @@ execout(char *s)
     47b6:	8caa                	mv	s9,a0
   char *names[] = { "f0", "f1", "f2", "f3" };
     47b8:	00001797          	auipc	a5,0x1
-    47bc:	5e078793          	addi	a5,a5,1504 # 5d98 <malloc+0xe8>
+    47bc:	5b878793          	addi	a5,a5,1464 # 5d70 <malloc+0xe8>
     47c0:	f6f43823          	sd	a5,-144(s0)
     47c4:	00001797          	auipc	a5,0x1
-    47c8:	5dc78793          	addi	a5,a5,1500 # 5da0 <malloc+0xf0>
+    47c8:	5b478793          	addi	a5,a5,1460 # 5d78 <malloc+0xf0>
     47cc:	f6f43c23          	sd	a5,-136(s0)
     47d0:	00001797          	auipc	a5,0x1
-    47d4:	5d878793          	addi	a5,a5,1496 # 5da8 <malloc+0xf8>
+    47d4:	5b078793          	addi	a5,a5,1456 # 5d80 <malloc+0xf8>
     47d8:	f8f43023          	sd	a5,-128(s0)
     47dc:	00001797          	auipc	a5,0x1
-    47e0:	5d478793          	addi	a5,a5,1492 # 5db0 <malloc+0x100>
+    47e0:	5ac78793          	addi	a5,a5,1452 # 5d88 <malloc+0x100>
     47e4:	f8f43423          	sd	a5,-120(s0)
   for(pi = 0; pi < NCHILD; pi++){
     47e8:	f7040b93          	addi	s7,s0,-144
@@ -7342,9 +7342,9 @@ execout(char *s)
     4832:	f4a43c23          	sd	a0,-168(s0)
     while((n = read(fd, buf, sizeof(buf))) > 0){
     4836:	00007a17          	auipc	s4,0x7
-    483a:	582a0a13          	addi	s4,s4,1410 # bdb8 <buf>
+    483a:	55aa0a13          	addi	s4,s4,1370 # bd90 <buf>
     483e:	00007a97          	auipc	s5,0x7
-    4842:	57ba8a93          	addi	s5,s5,1403 # bdb9 <buf+0x1>
+    4842:	553a8a93          	addi	s5,s5,1363 # bd91 <buf+0x1>
     if(total != N*SZ){
     4846:	6d05                	lui	s10,0x1
     4848:	770d0d13          	addi	s10,s10,1904 # 1770 <pipe1+0x32>
@@ -7354,9 +7354,9 @@ execout(char *s)
       printf("fork failed\n", s);
     4852:	85e6                	mv	a1,s9
     4854:	00002517          	auipc	a0,0x2
-    4858:	53450513          	addi	a0,a0,1332 # 6d88 <malloc+0x10d8>
+    4858:	50c50513          	addi	a0,a0,1292 # 6d60 <malloc+0x10d8>
     485c:	00001097          	auipc	ra,0x1
-    4860:	396080e7          	jalr	918(ra) # 5bf2 <printf>
+    4860:	36e080e7          	jalr	878(ra) # 5bca <printf>
       exit(1);
     4864:	4505                	li	a0,1
     4866:	00001097          	auipc	ra,0x1
@@ -7373,13 +7373,13 @@ execout(char *s)
     4882:	1f400613          	li	a2,500
     4886:	0304859b          	addiw	a1,s1,48
     488a:	00007517          	auipc	a0,0x7
-    488e:	52e50513          	addi	a0,a0,1326 # bdb8 <buf>
+    488e:	50650513          	addi	a0,a0,1286 # bd90 <buf>
     4892:	00001097          	auipc	ra,0x1
     4896:	dbc080e7          	jalr	-580(ra) # 564e <memset>
     489a:	44b1                	li	s1,12
         if((n = write(fd, buf, SZ)) != SZ){
     489c:	00007997          	auipc	s3,0x7
-    48a0:	51c98993          	addi	s3,s3,1308 # bdb8 <buf>
+    48a0:	4f498993          	addi	s3,s3,1268 # bd90 <buf>
     48a4:	1f400613          	li	a2,500
     48a8:	85ce                	mv	a1,s3
     48aa:	854a                	mv	a0,s2
@@ -7398,18 +7398,18 @@ execout(char *s)
         printf("create failed\n", s);
     48cc:	85e6                	mv	a1,s9
     48ce:	00003517          	auipc	a0,0x3
-    48d2:	48250513          	addi	a0,a0,1154 # 7d50 <malloc+0x20a0>
+    48d2:	45a50513          	addi	a0,a0,1114 # 7d28 <malloc+0x20a0>
     48d6:	00001097          	auipc	ra,0x1
-    48da:	31c080e7          	jalr	796(ra) # 5bf2 <printf>
+    48da:	2f4080e7          	jalr	756(ra) # 5bca <printf>
         exit(1);
     48de:	4505                	li	a0,1
     48e0:	00001097          	auipc	ra,0x1
     48e4:	f72080e7          	jalr	-142(ra) # 5852 <exit>
           printf("write failed %d\n", n);
     48e8:	00003517          	auipc	a0,0x3
-    48ec:	47850513          	addi	a0,a0,1144 # 7d60 <malloc+0x20b0>
+    48ec:	45050513          	addi	a0,a0,1104 # 7d38 <malloc+0x20b0>
     48f0:	00001097          	auipc	ra,0x1
-    48f4:	302080e7          	jalr	770(ra) # 5bf2 <printf>
+    48f4:	2da080e7          	jalr	730(ra) # 5bca <printf>
           exit(1);
     48f8:	4505                	li	a0,1
     48fa:	00001097          	auipc	ra,0x1
@@ -7420,9 +7420,9 @@ execout(char *s)
           printf("wrong char\n", s);
     490a:	85e6                	mv	a1,s9
     490c:	00003517          	auipc	a0,0x3
-    4910:	46c50513          	addi	a0,a0,1132 # 7d78 <malloc+0x20c8>
+    4910:	44450513          	addi	a0,a0,1092 # 7d50 <malloc+0x20c8>
     4914:	00001097          	auipc	ra,0x1
-    4918:	2de080e7          	jalr	734(ra) # 5bf2 <printf>
+    4918:	2b6080e7          	jalr	694(ra) # 5bca <printf>
           exit(1);
     491c:	4505                	li	a0,1
     491e:	00001097          	auipc	ra,0x1
@@ -7437,7 +7437,7 @@ execout(char *s)
     4934:	f3a080e7          	jalr	-198(ra) # 586a <read>
     4938:	02a05363          	blez	a0,495e <fourfiles+0x1c6>
     493c:	00007797          	auipc	a5,0x7
-    4940:	47c78793          	addi	a5,a5,1148 # bdb8 <buf>
+    4940:	45478793          	addi	a5,a5,1108 # bd90 <buf>
     4944:	fff5069b          	addiw	a3,a0,-1
     4948:	1682                	slli	a3,a3,0x20
     494a:	9281                	srli	a3,a3,0x20
@@ -7480,9 +7480,9 @@ execout(char *s)
       printf("wrong length %d\n", total);
     499a:	85ca                	mv	a1,s2
     499c:	00003517          	auipc	a0,0x3
-    49a0:	3ec50513          	addi	a0,a0,1004 # 7d88 <malloc+0x20d8>
+    49a0:	3c450513          	addi	a0,a0,964 # 7d60 <malloc+0x20d8>
     49a4:	00001097          	auipc	ra,0x1
-    49a8:	24e080e7          	jalr	590(ra) # 5bf2 <printf>
+    49a8:	226080e7          	jalr	550(ra) # 5bca <printf>
       exit(1);
     49ac:	4505                	li	a0,1
     49ae:	00001097          	auipc	ra,0x1
@@ -7530,7 +7530,7 @@ execout(char *s)
     49fc:	4a85                	li	s5,1
       link("C0", file);
     49fe:	00003b97          	auipc	s7,0x3
-    4a02:	3a2b8b93          	addi	s7,s7,930 # 7da0 <malloc+0x20f0>
+    4a02:	37ab8b93          	addi	s7,s7,890 # 7d78 <malloc+0x20f0>
   for(i = 0; i < N; i++){
     4a06:	02800a13          	li	s4,40
     4a0a:	acc1                	j	4cda <concreate+0x306>
@@ -7556,9 +7556,9 @@ execout(char *s)
         printf("concreate create %s failed\n", file);
     4a3c:	fa840593          	addi	a1,s0,-88
     4a40:	00003517          	auipc	a0,0x3
-    4a44:	36850513          	addi	a0,a0,872 # 7da8 <malloc+0x20f8>
+    4a44:	34050513          	addi	a0,a0,832 # 7d80 <malloc+0x20f8>
     4a48:	00001097          	auipc	ra,0x1
-    4a4c:	1aa080e7          	jalr	426(ra) # 5bf2 <printf>
+    4a4c:	182080e7          	jalr	386(ra) # 5bca <printf>
         exit(1);
     4a50:	4505                	li	a0,1
     4a52:	00001097          	auipc	ra,0x1
@@ -7566,7 +7566,7 @@ execout(char *s)
       link("C0", file);
     4a5a:	fa840593          	addi	a1,s0,-88
     4a5e:	00003517          	auipc	a0,0x3
-    4a62:	34250513          	addi	a0,a0,834 # 7da0 <malloc+0x20f0>
+    4a62:	31a50513          	addi	a0,a0,794 # 7d78 <malloc+0x20f0>
     4a66:	00001097          	auipc	ra,0x1
     4a6a:	e4c080e7          	jalr	-436(ra) # 58b2 <link>
       exit(0);
@@ -7586,7 +7586,7 @@ execout(char *s)
   fd = open(".", 0);
     4a94:	4581                	li	a1,0
     4a96:	00002517          	auipc	a0,0x2
-    4a9a:	d3250513          	addi	a0,a0,-718 # 67c8 <malloc+0xb18>
+    4a9a:	d0a50513          	addi	a0,a0,-758 # 67a0 <malloc+0xb18>
     4a9e:	00001097          	auipc	ra,0x1
     4aa2:	df4080e7          	jalr	-524(ra) # 5892 <open>
     4aa6:	892a                	mv	s2,a0
@@ -7604,9 +7604,9 @@ execout(char *s)
     4ab6:	f7240613          	addi	a2,s0,-142
     4aba:	85ce                	mv	a1,s3
     4abc:	00003517          	auipc	a0,0x3
-    4ac0:	30c50513          	addi	a0,a0,780 # 7dc8 <malloc+0x2118>
+    4ac0:	2e450513          	addi	a0,a0,740 # 7da0 <malloc+0x2118>
     4ac4:	00001097          	auipc	ra,0x1
-    4ac8:	12e080e7          	jalr	302(ra) # 5bf2 <printf>
+    4ac8:	106080e7          	jalr	262(ra) # 5bca <printf>
         exit(1);
     4acc:	4505                	li	a0,1
     4ace:	00001097          	auipc	ra,0x1
@@ -7647,9 +7647,9 @@ execout(char *s)
     4b26:	f7240613          	addi	a2,s0,-142
     4b2a:	85ce                	mv	a1,s3
     4b2c:	00003517          	auipc	a0,0x3
-    4b30:	2bc50513          	addi	a0,a0,700 # 7de8 <malloc+0x2138>
+    4b30:	29450513          	addi	a0,a0,660 # 7dc0 <malloc+0x2138>
     4b34:	00001097          	auipc	ra,0x1
-    4b38:	0be080e7          	jalr	190(ra) # 5bf2 <printf>
+    4b38:	096080e7          	jalr	150(ra) # 5bca <printf>
         exit(1);
     4b3c:	4505                	li	a0,1
     4b3e:	00001097          	auipc	ra,0x1
@@ -7670,9 +7670,9 @@ execout(char *s)
     printf("%s: concreate not enough files in directory listing\n", s);
     4b62:	85ce                	mv	a1,s3
     4b64:	00003517          	auipc	a0,0x3
-    4b68:	2ac50513          	addi	a0,a0,684 # 7e10 <malloc+0x2160>
+    4b68:	28450513          	addi	a0,a0,644 # 7de8 <malloc+0x2160>
     4b6c:	00001097          	auipc	ra,0x1
-    4b70:	086080e7          	jalr	134(ra) # 5bf2 <printf>
+    4b70:	05e080e7          	jalr	94(ra) # 5bca <printf>
     exit(1);
     4b74:	4505                	li	a0,1
     4b76:	00001097          	auipc	ra,0x1
@@ -7680,9 +7680,9 @@ execout(char *s)
       printf("%s: fork failed\n", s);
     4b7e:	85ce                	mv	a1,s3
     4b80:	00002517          	auipc	a0,0x2
-    4b84:	de850513          	addi	a0,a0,-536 # 6968 <malloc+0xcb8>
+    4b84:	dc050513          	addi	a0,a0,-576 # 6940 <malloc+0xcb8>
     4b88:	00001097          	auipc	ra,0x1
-    4b8c:	06a080e7          	jalr	106(ra) # 5bf2 <printf>
+    4b8c:	042080e7          	jalr	66(ra) # 5bca <printf>
       exit(1);
     4b90:	4505                	li	a0,1
     4b92:	00001097          	auipc	ra,0x1
@@ -7851,13 +7851,13 @@ execout(char *s)
     4d40:	8aaa                	mv	s5,a0
   unlink("bigfile.dat");
     4d42:	00003517          	auipc	a0,0x3
-    4d46:	10650513          	addi	a0,a0,262 # 7e48 <malloc+0x2198>
+    4d46:	0de50513          	addi	a0,a0,222 # 7e20 <malloc+0x2198>
     4d4a:	00001097          	auipc	ra,0x1
     4d4e:	b58080e7          	jalr	-1192(ra) # 58a2 <unlink>
   fd = open("bigfile.dat", O_CREATE | O_RDWR);
     4d52:	20200593          	li	a1,514
     4d56:	00003517          	auipc	a0,0x3
-    4d5a:	0f250513          	addi	a0,a0,242 # 7e48 <malloc+0x2198>
+    4d5a:	0ca50513          	addi	a0,a0,202 # 7e20 <malloc+0x2198>
     4d5e:	00001097          	auipc	ra,0x1
     4d62:	b34080e7          	jalr	-1228(ra) # 5892 <open>
     4d66:	89aa                	mv	s3,a0
@@ -7865,7 +7865,7 @@ execout(char *s)
     4d68:	4481                	li	s1,0
     memset(buf, i, SZ);
     4d6a:	00007917          	auipc	s2,0x7
-    4d6e:	04e90913          	addi	s2,s2,78 # bdb8 <buf>
+    4d6e:	02690913          	addi	s2,s2,38 # bd90 <buf>
   for(i = 0; i < N; i++){
     4d72:	4a51                	li	s4,20
   if(fd < 0){
@@ -7894,7 +7894,7 @@ execout(char *s)
   fd = open("bigfile.dat", 0);
     4db0:	4581                	li	a1,0
     4db2:	00003517          	auipc	a0,0x3
-    4db6:	09650513          	addi	a0,a0,150 # 7e48 <malloc+0x2198>
+    4db6:	06e50513          	addi	a0,a0,110 # 7e20 <malloc+0x2198>
     4dba:	00001097          	auipc	ra,0x1
     4dbe:	ad8080e7          	jalr	-1320(ra) # 5892 <open>
     4dc2:	8a2a                	mv	s4,a0
@@ -7904,7 +7904,7 @@ execout(char *s)
     4dc6:	4481                	li	s1,0
     cc = read(fd, buf, SZ/2);
     4dc8:	00007917          	auipc	s2,0x7
-    4dcc:	ff090913          	addi	s2,s2,-16 # bdb8 <buf>
+    4dcc:	fc890913          	addi	s2,s2,-56 # bd90 <buf>
   if(fd < 0){
     4dd0:	06054e63          	bltz	a0,4e4c <bigfile+0x11e>
     cc = read(fd, buf, SZ/2);
@@ -7937,9 +7937,9 @@ execout(char *s)
     printf("%s: cannot create bigfile", s);
     4e14:	85d6                	mv	a1,s5
     4e16:	00003517          	auipc	a0,0x3
-    4e1a:	04250513          	addi	a0,a0,66 # 7e58 <malloc+0x21a8>
+    4e1a:	01a50513          	addi	a0,a0,26 # 7e30 <malloc+0x21a8>
     4e1e:	00001097          	auipc	ra,0x1
-    4e22:	dd4080e7          	jalr	-556(ra) # 5bf2 <printf>
+    4e22:	dac080e7          	jalr	-596(ra) # 5bca <printf>
     exit(1);
     4e26:	4505                	li	a0,1
     4e28:	00001097          	auipc	ra,0x1
@@ -7947,9 +7947,9 @@ execout(char *s)
       printf("%s: write bigfile failed\n", s);
     4e30:	85d6                	mv	a1,s5
     4e32:	00003517          	auipc	a0,0x3
-    4e36:	04650513          	addi	a0,a0,70 # 7e78 <malloc+0x21c8>
+    4e36:	01e50513          	addi	a0,a0,30 # 7e50 <malloc+0x21c8>
     4e3a:	00001097          	auipc	ra,0x1
-    4e3e:	db8080e7          	jalr	-584(ra) # 5bf2 <printf>
+    4e3e:	d90080e7          	jalr	-624(ra) # 5bca <printf>
       exit(1);
     4e42:	4505                	li	a0,1
     4e44:	00001097          	auipc	ra,0x1
@@ -7957,9 +7957,9 @@ execout(char *s)
     printf("%s: cannot open bigfile\n", s);
     4e4c:	85d6                	mv	a1,s5
     4e4e:	00003517          	auipc	a0,0x3
-    4e52:	04a50513          	addi	a0,a0,74 # 7e98 <malloc+0x21e8>
+    4e52:	02250513          	addi	a0,a0,34 # 7e70 <malloc+0x21e8>
     4e56:	00001097          	auipc	ra,0x1
-    4e5a:	d9c080e7          	jalr	-612(ra) # 5bf2 <printf>
+    4e5a:	d74080e7          	jalr	-652(ra) # 5bca <printf>
     exit(1);
     4e5e:	4505                	li	a0,1
     4e60:	00001097          	auipc	ra,0x1
@@ -7967,9 +7967,9 @@ execout(char *s)
       printf("%s: read bigfile failed\n", s);
     4e68:	85d6                	mv	a1,s5
     4e6a:	00003517          	auipc	a0,0x3
-    4e6e:	04e50513          	addi	a0,a0,78 # 7eb8 <malloc+0x2208>
+    4e6e:	02650513          	addi	a0,a0,38 # 7e90 <malloc+0x2208>
     4e72:	00001097          	auipc	ra,0x1
-    4e76:	d80080e7          	jalr	-640(ra) # 5bf2 <printf>
+    4e76:	d58080e7          	jalr	-680(ra) # 5bca <printf>
       exit(1);
     4e7a:	4505                	li	a0,1
     4e7c:	00001097          	auipc	ra,0x1
@@ -7977,9 +7977,9 @@ execout(char *s)
       printf("%s: short read bigfile\n", s);
     4e84:	85d6                	mv	a1,s5
     4e86:	00003517          	auipc	a0,0x3
-    4e8a:	05250513          	addi	a0,a0,82 # 7ed8 <malloc+0x2228>
+    4e8a:	02a50513          	addi	a0,a0,42 # 7eb0 <malloc+0x2228>
     4e8e:	00001097          	auipc	ra,0x1
-    4e92:	d64080e7          	jalr	-668(ra) # 5bf2 <printf>
+    4e92:	d3c080e7          	jalr	-708(ra) # 5bca <printf>
       exit(1);
     4e96:	4505                	li	a0,1
     4e98:	00001097          	auipc	ra,0x1
@@ -7987,9 +7987,9 @@ execout(char *s)
       printf("%s: read bigfile wrong data\n", s);
     4ea0:	85d6                	mv	a1,s5
     4ea2:	00003517          	auipc	a0,0x3
-    4ea6:	04e50513          	addi	a0,a0,78 # 7ef0 <malloc+0x2240>
+    4ea6:	02650513          	addi	a0,a0,38 # 7ec8 <malloc+0x2240>
     4eaa:	00001097          	auipc	ra,0x1
-    4eae:	d48080e7          	jalr	-696(ra) # 5bf2 <printf>
+    4eae:	d20080e7          	jalr	-736(ra) # 5bca <printf>
       exit(1);
     4eb2:	4505                	li	a0,1
     4eb4:	00001097          	auipc	ra,0x1
@@ -8004,7 +8004,7 @@ execout(char *s)
     4ecc:	02f99363          	bne	s3,a5,4ef2 <bigfile+0x1c4>
   unlink("bigfile.dat");
     4ed0:	00003517          	auipc	a0,0x3
-    4ed4:	f7850513          	addi	a0,a0,-136 # 7e48 <malloc+0x2198>
+    4ed4:	f5050513          	addi	a0,a0,-176 # 7e20 <malloc+0x2198>
     4ed8:	00001097          	auipc	ra,0x1
     4edc:	9ca080e7          	jalr	-1590(ra) # 58a2 <unlink>
 }
@@ -8020,9 +8020,9 @@ execout(char *s)
     printf("%s: read bigfile wrong total\n", s);
     4ef2:	85d6                	mv	a1,s5
     4ef4:	00003517          	auipc	a0,0x3
-    4ef8:	01c50513          	addi	a0,a0,28 # 7f10 <malloc+0x2260>
+    4ef8:	ff450513          	addi	a0,a0,-12 # 7ee8 <malloc+0x2260>
     4efc:	00001097          	auipc	ra,0x1
-    4f00:	cf6080e7          	jalr	-778(ra) # 5bf2 <printf>
+    4f00:	cce080e7          	jalr	-818(ra) # 5bca <printf>
     exit(1);
     4f04:	4505                	li	a0,1
     4f06:	00001097          	auipc	ra,0x1
@@ -8047,9 +8047,9 @@ execout(char *s)
     4f2a:	1900                	addi	s0,sp,176
   printf("fsfull test\n");
     4f2c:	00003517          	auipc	a0,0x3
-    4f30:	00450513          	addi	a0,a0,4 # 7f30 <malloc+0x2280>
+    4f30:	fdc50513          	addi	a0,a0,-36 # 7f08 <malloc+0x2280>
     4f34:	00001097          	auipc	ra,0x1
-    4f38:	cbe080e7          	jalr	-834(ra) # 5bf2 <printf>
+    4f38:	c96080e7          	jalr	-874(ra) # 5bca <printf>
   for(nfiles = 0; ; nfiles++){
     4f3c:	4481                	li	s1,0
     name[0] = 'f';
@@ -8062,12 +8062,12 @@ execout(char *s)
     4f4a:	4b29                	li	s6,10
     printf("writing %s\n", name);
     4f4c:	00003c97          	auipc	s9,0x3
-    4f50:	ff4c8c93          	addi	s9,s9,-12 # 7f40 <malloc+0x2290>
+    4f50:	fccc8c93          	addi	s9,s9,-52 # 7f18 <malloc+0x2290>
     int total = 0;
     4f54:	4d81                	li	s11,0
       int cc = write(fd, buf, BSIZE);
     4f56:	00007a17          	auipc	s4,0x7
-    4f5a:	e62a0a13          	addi	s4,s4,-414 # bdb8 <buf>
+    4f5a:	e3aa0a13          	addi	s4,s4,-454 # bd90 <buf>
     name[0] = 'f';
     4f5e:	f5a40823          	sb	s10,-176(s0)
     name[1] = '0' + nfiles / 1000;
@@ -8094,7 +8094,7 @@ execout(char *s)
     4f9e:	f5040593          	addi	a1,s0,-176
     4fa2:	8566                	mv	a0,s9
     4fa4:	00001097          	auipc	ra,0x1
-    4fa8:	c4e080e7          	jalr	-946(ra) # 5bf2 <printf>
+    4fa8:	c26080e7          	jalr	-986(ra) # 5bca <printf>
     int fd = open(name, O_CREATE|O_RDWR);
     4fac:	20200593          	li	a1,514
     4fb0:	f5040513          	addi	a0,s0,-176
@@ -8106,9 +8106,9 @@ execout(char *s)
       printf("open %s failed\n", name);
     4fc2:	f5040593          	addi	a1,s0,-176
     4fc6:	00003517          	auipc	a0,0x3
-    4fca:	f8a50513          	addi	a0,a0,-118 # 7f50 <malloc+0x22a0>
+    4fca:	f6250513          	addi	a0,a0,-158 # 7f28 <malloc+0x22a0>
     4fce:	00001097          	auipc	ra,0x1
-    4fd2:	c24080e7          	jalr	-988(ra) # 5bf2 <printf>
+    4fd2:	bfc080e7          	jalr	-1028(ra) # 5bca <printf>
   while(nfiles >= 0){
     4fd6:	0604c363          	bltz	s1,503c <fsfull+0x12e>
     name[0] = 'f';
@@ -8153,9 +8153,9 @@ execout(char *s)
     5038:	fb5499e3          	bne	s1,s5,4fea <fsfull+0xdc>
   printf("fsfull test finished\n");
     503c:	00003517          	auipc	a0,0x3
-    5040:	f3450513          	addi	a0,a0,-204 # 7f70 <malloc+0x22c0>
+    5040:	f0c50513          	addi	a0,a0,-244 # 7f48 <malloc+0x22c0>
     5044:	00001097          	auipc	ra,0x1
-    5048:	bae080e7          	jalr	-1106(ra) # 5bf2 <printf>
+    5048:	b86080e7          	jalr	-1146(ra) # 5bca <printf>
 }
     504c:	70aa                	ld	ra,168(sp)
     504e:	740a                	ld	s0,160(sp)
@@ -8191,9 +8191,9 @@ execout(char *s)
     printf("wrote %d bytes\n", total);
     508a:	85ce                	mv	a1,s3
     508c:	00003517          	auipc	a0,0x3
-    5090:	ed450513          	addi	a0,a0,-300 # 7f60 <malloc+0x22b0>
+    5090:	eac50513          	addi	a0,a0,-340 # 7f38 <malloc+0x22b0>
     5094:	00001097          	auipc	ra,0x1
-    5098:	b5e080e7          	jalr	-1186(ra) # 5bf2 <printf>
+    5098:	b36080e7          	jalr	-1226(ra) # 5bca <printf>
     close(fd);
     509c:	854a                	mv	a0,s2
     509e:	00000097          	auipc	ra,0x0
@@ -8216,13 +8216,13 @@ execout(char *s)
     50bc:	1800                	addi	s0,sp,48
   unlink("junk");
     50be:	00003517          	auipc	a0,0x3
-    50c2:	eca50513          	addi	a0,a0,-310 # 7f88 <malloc+0x22d8>
+    50c2:	ea250513          	addi	a0,a0,-350 # 7f60 <malloc+0x22d8>
     50c6:	00000097          	auipc	ra,0x0
     50ca:	7dc080e7          	jalr	2012(ra) # 58a2 <unlink>
     50ce:	25800913          	li	s2,600
     int fd = open("junk", O_CREATE|O_WRONLY);
     50d2:	00003997          	auipc	s3,0x3
-    50d6:	eb698993          	addi	s3,s3,-330 # 7f88 <malloc+0x22d8>
+    50d6:	e8e98993          	addi	s3,s3,-370 # 7f60 <malloc+0x22d8>
     write(fd, (char*)0xffffffffffL, 1);
     50da:	5a7d                	li	s4,-1
     50dc:	018a5a13          	srli	s4,s4,0x18
@@ -8253,7 +8253,7 @@ execout(char *s)
   int fd = open("junk", O_CREATE|O_WRONLY);
     511a:	20100593          	li	a1,513
     511e:	00003517          	auipc	a0,0x3
-    5122:	e6a50513          	addi	a0,a0,-406 # 7f88 <malloc+0x22d8>
+    5122:	e4250513          	addi	a0,a0,-446 # 7f60 <malloc+0x22d8>
     5126:	00000097          	auipc	ra,0x0
     512a:	76c080e7          	jalr	1900(ra) # 5892 <open>
     512e:	84aa                	mv	s1,a0
@@ -8262,34 +8262,34 @@ execout(char *s)
   if(write(fd, "x", 1) != 1){
     5134:	4605                	li	a2,1
     5136:	00001597          	auipc	a1,0x1
-    513a:	06a58593          	addi	a1,a1,106 # 61a0 <malloc+0x4f0>
+    513a:	04258593          	addi	a1,a1,66 # 6178 <malloc+0x4f0>
     513e:	00000097          	auipc	ra,0x0
     5142:	734080e7          	jalr	1844(ra) # 5872 <write>
     5146:	4785                	li	a5,1
     5148:	04f50963          	beq	a0,a5,519a <badwrite+0xec>
     printf("write failed\n");
     514c:	00003517          	auipc	a0,0x3
-    5150:	e5c50513          	addi	a0,a0,-420 # 7fa8 <malloc+0x22f8>
+    5150:	e3450513          	addi	a0,a0,-460 # 7f80 <malloc+0x22f8>
     5154:	00001097          	auipc	ra,0x1
-    5158:	a9e080e7          	jalr	-1378(ra) # 5bf2 <printf>
+    5158:	a76080e7          	jalr	-1418(ra) # 5bca <printf>
     exit(1);
     515c:	4505                	li	a0,1
     515e:	00000097          	auipc	ra,0x0
     5162:	6f4080e7          	jalr	1780(ra) # 5852 <exit>
       printf("open junk failed\n");
     5166:	00003517          	auipc	a0,0x3
-    516a:	e2a50513          	addi	a0,a0,-470 # 7f90 <malloc+0x22e0>
+    516a:	e0250513          	addi	a0,a0,-510 # 7f68 <malloc+0x22e0>
     516e:	00001097          	auipc	ra,0x1
-    5172:	a84080e7          	jalr	-1404(ra) # 5bf2 <printf>
+    5172:	a5c080e7          	jalr	-1444(ra) # 5bca <printf>
       exit(1);
     5176:	4505                	li	a0,1
     5178:	00000097          	auipc	ra,0x0
     517c:	6da080e7          	jalr	1754(ra) # 5852 <exit>
     printf("open junk failed\n");
     5180:	00003517          	auipc	a0,0x3
-    5184:	e1050513          	addi	a0,a0,-496 # 7f90 <malloc+0x22e0>
+    5184:	de850513          	addi	a0,a0,-536 # 7f68 <malloc+0x22e0>
     5188:	00001097          	auipc	ra,0x1
-    518c:	a6a080e7          	jalr	-1430(ra) # 5bf2 <printf>
+    518c:	a42080e7          	jalr	-1470(ra) # 5bca <printf>
     exit(1);
     5190:	4505                	li	a0,1
     5192:	00000097          	auipc	ra,0x0
@@ -8300,7 +8300,7 @@ execout(char *s)
     51a0:	6de080e7          	jalr	1758(ra) # 587a <close>
   unlink("junk");
     51a4:	00003517          	auipc	a0,0x3
-    51a8:	de450513          	addi	a0,a0,-540 # 7f88 <malloc+0x22d8>
+    51a8:	dbc50513          	addi	a0,a0,-580 # 7f60 <malloc+0x22d8>
     51ac:	00000097          	auipc	ra,0x0
     51b0:	6f6080e7          	jalr	1782(ra) # 58a2 <unlink>
   exit(0);
@@ -8364,7 +8364,7 @@ countfree()
       // report back one more page.
       if(write(fds[1], "x", 1) != 1){
     51fa:	00001917          	auipc	s2,0x1
-    51fe:	fa690913          	addi	s2,s2,-90 # 61a0 <malloc+0x4f0>
+    51fe:	f7e90913          	addi	s2,s2,-130 # 6178 <malloc+0x4f0>
       uint64 a = (uint64) sbrk(4096);
     5202:	6505                	lui	a0,0x1
     5204:	00000097          	auipc	ra,0x0
@@ -8385,27 +8385,27 @@ countfree()
     522a:	fcf50ce3          	beq	a0,a5,5202 <countfree+0x44>
         printf("write() failed in countfree()\n");
     522e:	00003517          	auipc	a0,0x3
-    5232:	dca50513          	addi	a0,a0,-566 # 7ff8 <malloc+0x2348>
+    5232:	da250513          	addi	a0,a0,-606 # 7fd0 <malloc+0x2348>
     5236:	00001097          	auipc	ra,0x1
-    523a:	9bc080e7          	jalr	-1604(ra) # 5bf2 <printf>
+    523a:	994080e7          	jalr	-1644(ra) # 5bca <printf>
         exit(1);
     523e:	4505                	li	a0,1
     5240:	00000097          	auipc	ra,0x0
     5244:	612080e7          	jalr	1554(ra) # 5852 <exit>
     printf("pipe() failed in countfree()\n");
     5248:	00003517          	auipc	a0,0x3
-    524c:	d7050513          	addi	a0,a0,-656 # 7fb8 <malloc+0x2308>
+    524c:	d4850513          	addi	a0,a0,-696 # 7f90 <malloc+0x2308>
     5250:	00001097          	auipc	ra,0x1
-    5254:	9a2080e7          	jalr	-1630(ra) # 5bf2 <printf>
+    5254:	97a080e7          	jalr	-1670(ra) # 5bca <printf>
     exit(1);
     5258:	4505                	li	a0,1
     525a:	00000097          	auipc	ra,0x0
     525e:	5f8080e7          	jalr	1528(ra) # 5852 <exit>
     printf("fork failed in countfree()\n");
     5262:	00003517          	auipc	a0,0x3
-    5266:	d7650513          	addi	a0,a0,-650 # 7fd8 <malloc+0x2328>
+    5266:	d4e50513          	addi	a0,a0,-690 # 7fb0 <malloc+0x2328>
     526a:	00001097          	auipc	ra,0x1
-    526e:	988080e7          	jalr	-1656(ra) # 5bf2 <printf>
+    526e:	960080e7          	jalr	-1696(ra) # 5bca <printf>
     exit(1);
     5272:	4505                	li	a0,1
     5274:	00000097          	auipc	ra,0x0
@@ -8448,9 +8448,9 @@ countfree()
     52ae:	b7dd                	j	5294 <countfree+0xd6>
       printf("read() failed in countfree()\n");
     52b0:	00003517          	auipc	a0,0x3
-    52b4:	d6850513          	addi	a0,a0,-664 # 8018 <malloc+0x2368>
+    52b4:	d4050513          	addi	a0,a0,-704 # 7ff0 <malloc+0x2368>
     52b8:	00001097          	auipc	ra,0x1
-    52bc:	93a080e7          	jalr	-1734(ra) # 5bf2 <printf>
+    52bc:	912080e7          	jalr	-1774(ra) # 5bca <printf>
       exit(1);
     52c0:	4505                	li	a0,1
     52c2:	00000097          	auipc	ra,0x0
@@ -8496,9 +8496,9 @@ run(void f(char *), char *s) {
 
   printf("test %s: ", s);
     5300:	00003517          	auipc	a0,0x3
-    5304:	d3850513          	addi	a0,a0,-712 # 8038 <malloc+0x2388>
+    5304:	d1050513          	addi	a0,a0,-752 # 8010 <malloc+0x2388>
     5308:	00001097          	auipc	ra,0x1
-    530c:	8ea080e7          	jalr	-1814(ra) # 5bf2 <printf>
+    530c:	8c2080e7          	jalr	-1854(ra) # 5bca <printf>
   if((pid = fork()) < 0) {
     5310:	00000097          	auipc	ra,0x0
     5314:	53a080e7          	jalr	1338(ra) # 584a <fork>
@@ -8520,9 +8520,9 @@ run(void f(char *), char *s) {
     532e:	c7b9                	beqz	a5,537c <run+0x8c>
       printf("FAILED\n");
     5330:	00003517          	auipc	a0,0x3
-    5334:	d3050513          	addi	a0,a0,-720 # 8060 <malloc+0x23b0>
+    5334:	d0850513          	addi	a0,a0,-760 # 8038 <malloc+0x23b0>
     5338:	00001097          	auipc	ra,0x1
-    533c:	8ba080e7          	jalr	-1862(ra) # 5bf2 <printf>
+    533c:	892080e7          	jalr	-1902(ra) # 5bca <printf>
     else
       printf("OK\n");
     return xstatus == 0;
@@ -8538,9 +8538,9 @@ run(void f(char *), char *s) {
     5352:	8082                	ret
     printf("runtest: fork error\n");
     5354:	00003517          	auipc	a0,0x3
-    5358:	cf450513          	addi	a0,a0,-780 # 8048 <malloc+0x2398>
+    5358:	ccc50513          	addi	a0,a0,-820 # 8020 <malloc+0x2398>
     535c:	00001097          	auipc	ra,0x1
-    5360:	896080e7          	jalr	-1898(ra) # 5bf2 <printf>
+    5360:	86e080e7          	jalr	-1938(ra) # 5bca <printf>
     exit(1);
     5364:	4505                	li	a0,1
     5366:	00000097          	auipc	ra,0x0
@@ -8554,9 +8554,9 @@ run(void f(char *), char *s) {
     5378:	4de080e7          	jalr	1246(ra) # 5852 <exit>
       printf("OK\n");
     537c:	00003517          	auipc	a0,0x3
-    5380:	cec50513          	addi	a0,a0,-788 # 8068 <malloc+0x23b8>
+    5380:	cc450513          	addi	a0,a0,-828 # 8040 <malloc+0x23b8>
     5384:	00001097          	auipc	ra,0x1
-    5388:	86e080e7          	jalr	-1938(ra) # 5bf2 <printf>
+    5388:	846080e7          	jalr	-1978(ra) # 5bca <printf>
     538c:	bf55                	j	5340 <run+0x50>
 
 000000000000538e <main>:
@@ -8599,10 +8599,10 @@ main(int argc, char *argv[])
     char *s;
   } tests[] = {
     53c6:	00003797          	auipc	a5,0x3
-    53ca:	dba78793          	addi	a5,a5,-582 # 8180 <malloc+0x24d0>
+    53ca:	d9278793          	addi	a5,a5,-622 # 8158 <malloc+0x24d0>
     53ce:	bd040713          	addi	a4,s0,-1072
     53d2:	00003317          	auipc	t1,0x3
-    53d6:	19e30313          	addi	t1,t1,414 # 8570 <malloc+0x28c0>
+    53d6:	17630313          	addi	t1,t1,374 # 8548 <malloc+0x28c0>
     53da:	0007b883          	ld	a7,0(a5)
     53de:	0087b803          	ld	a6,8(a5)
     53e2:	6b88                	ld	a0,16(a5)
@@ -8625,9 +8625,9 @@ main(int argc, char *argv[])
 
   printf("usertests starting\n");
     5406:	00003517          	auipc	a0,0x3
-    540a:	d1a50513          	addi	a0,a0,-742 # 8120 <malloc+0x2470>
+    540a:	cf250513          	addi	a0,a0,-782 # 80f8 <malloc+0x2470>
     540e:	00000097          	auipc	ra,0x0
-    5412:	7e4080e7          	jalr	2020(ra) # 5bf2 <printf>
+    5412:	7bc080e7          	jalr	1980(ra) # 5bca <printf>
   int free0 = countfree();
     5416:	00000097          	auipc	ra,0x0
     541a:	da8080e7          	jalr	-600(ra) # 51be <countfree>
@@ -8658,9 +8658,9 @@ main(int argc, char *argv[])
     printf("FAILED -- lost some free pages %d (out of %d)\n", free1, free0);
     543c:	8652                	mv	a2,s4
     543e:	00003517          	auipc	a0,0x3
-    5442:	c9a50513          	addi	a0,a0,-870 # 80d8 <malloc+0x2428>
+    5442:	c7250513          	addi	a0,a0,-910 # 80b0 <malloc+0x2428>
     5446:	00000097          	auipc	ra,0x0
-    544a:	7ac080e7          	jalr	1964(ra) # 5bf2 <printf>
+    544a:	784080e7          	jalr	1924(ra) # 5bca <printf>
     exit(1);
     544e:	4505                	li	a0,1
     5450:	00000097          	auipc	ra,0x0
@@ -8668,14 +8668,14 @@ main(int argc, char *argv[])
     5458:	84ae                	mv	s1,a1
   if(argc == 2 && strcmp(argv[1], "-c") == 0){
     545a:	00003597          	auipc	a1,0x3
-    545e:	c1658593          	addi	a1,a1,-1002 # 8070 <malloc+0x23c0>
+    545e:	bee58593          	addi	a1,a1,-1042 # 8048 <malloc+0x23c0>
     5462:	6488                	ld	a0,8(s1)
     5464:	00000097          	auipc	ra,0x0
     5468:	194080e7          	jalr	404(ra) # 55f8 <strcmp>
     546c:	10050563          	beqz	a0,5576 <main+0x1e8>
   } else if(argc == 2 && strcmp(argv[1], "-C") == 0){
     5470:	00003597          	auipc	a1,0x3
-    5474:	ce858593          	addi	a1,a1,-792 # 8158 <malloc+0x24a8>
+    5474:	cc058593          	addi	a1,a1,-832 # 8130 <malloc+0x24a8>
     5478:	6488                	ld	a0,8(s1)
     547a:	00000097          	auipc	ra,0x0
     547e:	17e080e7          	jalr	382(ra) # 55f8 <strcmp>
@@ -8687,9 +8687,9 @@ main(int argc, char *argv[])
     5490:	f2f71be3          	bne	a4,a5,53c6 <main+0x38>
     printf("Usage: usertests [-c] [testname]\n");
     5494:	00003517          	auipc	a0,0x3
-    5498:	be450513          	addi	a0,a0,-1052 # 8078 <malloc+0x23c8>
+    5498:	bbc50513          	addi	a0,a0,-1092 # 8050 <malloc+0x23c8>
     549c:	00000097          	auipc	ra,0x0
-    54a0:	756080e7          	jalr	1878(ra) # 5bf2 <printf>
+    54a0:	72e080e7          	jalr	1838(ra) # 5bca <printf>
     exit(1);
     54a4:	4505                	li	a0,1
     54a6:	00000097          	auipc	ra,0x0
@@ -8702,7 +8702,7 @@ main(int argc, char *argv[])
     54b8:	40a905bb          	subw	a1,s2,a0
     54bc:	855a                	mv	a0,s6
     54be:	00000097          	auipc	ra,0x0
-    54c2:	734080e7          	jalr	1844(ra) # 5bf2 <printf>
+    54c2:	70c080e7          	jalr	1804(ra) # 5bca <printf>
         if(continuous != 2)
     54c6:	09498463          	beq	s3,s4,554e <main+0x1c0>
           exit(1);
@@ -8732,9 +8732,9 @@ main(int argc, char *argv[])
     54fc:	f20989e3          	beqz	s3,542e <main+0xa0>
     printf("SOME TESTS FAILED\n");
     5500:	00003517          	auipc	a0,0x3
-    5504:	bc050513          	addi	a0,a0,-1088 # 80c0 <malloc+0x2410>
+    5504:	b9850513          	addi	a0,a0,-1128 # 8098 <malloc+0x2410>
     5508:	00000097          	auipc	ra,0x0
-    550c:	6ea080e7          	jalr	1770(ra) # 5bf2 <printf>
+    550c:	6c2080e7          	jalr	1730(ra) # 5bca <printf>
     exit(1);
     5510:	4505                	li	a0,1
     5512:	00000097          	auipc	ra,0x0
@@ -8742,9 +8742,9 @@ main(int argc, char *argv[])
   } else {
     printf("ALL TESTS PASSED\n");
     551a:	00003517          	auipc	a0,0x3
-    551e:	bee50513          	addi	a0,a0,-1042 # 8108 <malloc+0x2458>
+    551e:	bc650513          	addi	a0,a0,-1082 # 80e0 <malloc+0x2458>
     5522:	00000097          	auipc	ra,0x0
-    5526:	6d0080e7          	jalr	1744(ra) # 5bf2 <printf>
+    5526:	6a8080e7          	jalr	1704(ra) # 5bca <printf>
     exit(0);
     552a:	4501                	li	a0,0
     552c:	00000097          	auipc	ra,0x0
@@ -8752,7 +8752,7 @@ main(int argc, char *argv[])
         printf("SOME TESTS FAILED\n");
     5534:	8556                	mv	a0,s5
     5536:	00000097          	auipc	ra,0x0
-    553a:	6bc080e7          	jalr	1724(ra) # 5bf2 <printf>
+    553a:	694080e7          	jalr	1684(ra) # 5bca <printf>
         if(continuous != 2)
     553e:	f74998e3          	bne	s3,s4,54ae <main+0x120>
       int free1 = countfree();
@@ -8782,10 +8782,10 @@ main(int argc, char *argv[])
     5576:	4985                	li	s3,1
   } tests[] = {
     5578:	00003797          	auipc	a5,0x3
-    557c:	c0878793          	addi	a5,a5,-1016 # 8180 <malloc+0x24d0>
+    557c:	be078793          	addi	a5,a5,-1056 # 8158 <malloc+0x24d0>
     5580:	bd040713          	addi	a4,s0,-1072
     5584:	00003317          	auipc	t1,0x3
-    5588:	fec30313          	addi	t1,t1,-20 # 8570 <malloc+0x28c0>
+    5588:	fc430313          	addi	t1,t1,-60 # 8548 <malloc+0x28c0>
     558c:	0007b883          	ld	a7,0(a5)
     5590:	0087b803          	ld	a6,8(a5)
     5594:	6b88                	ld	a0,16(a5)
@@ -8803,17 +8803,17 @@ main(int argc, char *argv[])
     55b4:	fc679ce3          	bne	a5,t1,558c <main+0x1fe>
     printf("continuous usertests starting\n");
     55b8:	00003517          	auipc	a0,0x3
-    55bc:	b8050513          	addi	a0,a0,-1152 # 8138 <malloc+0x2488>
+    55bc:	b5850513          	addi	a0,a0,-1192 # 8110 <malloc+0x2488>
     55c0:	00000097          	auipc	ra,0x0
-    55c4:	632080e7          	jalr	1586(ra) # 5bf2 <printf>
+    55c4:	60a080e7          	jalr	1546(ra) # 5bca <printf>
         printf("SOME TESTS FAILED\n");
     55c8:	00003a97          	auipc	s5,0x3
-    55cc:	af8a8a93          	addi	s5,s5,-1288 # 80c0 <malloc+0x2410>
+    55cc:	ad0a8a93          	addi	s5,s5,-1328 # 8098 <malloc+0x2410>
         if(continuous != 2)
     55d0:	4a09                	li	s4,2
         printf("FAILED -- lost %d free pages\n", free0 - free1);
     55d2:	00003b17          	auipc	s6,0x3
-    55d6:	aceb0b13          	addi	s6,s6,-1330 # 80a0 <malloc+0x23f0>
+    55d6:	aa6b0b13          	addi	s6,s6,-1370 # 8078 <malloc+0x23f0>
     55da:	bf95                	j	554e <main+0x1c0>
 
 00000000000055dc <strcpy>:
@@ -9453,696 +9453,646 @@ uptime:
  ret
     58f0:	8082                	ret
 
-00000000000058f2 <pause_system>:
-.global pause_system
-pause_system:
- li a7, SYS_pause_system
-    58f2:	48d9                	li	a7,22
- ecall
-    58f4:	00000073          	ecall
- ret
-    58f8:	8082                	ret
-
-00000000000058fa <kill_system>:
-.global kill_system
-kill_system:
- li a7, SYS_kill_system
-    58fa:	48dd                	li	a7,23
- ecall
-    58fc:	00000073          	ecall
- ret
-    5900:	8082                	ret
-
-0000000000005902 <print_stats>:
-.global print_stats
-print_stats:
- li a7, SYS_print_stats
-    5902:	48e1                	li	a7,24
- ecall
-    5904:	00000073          	ecall
- ret
-    5908:	8082                	ret
-
-000000000000590a <get_cpu>:
-.global get_cpu
-get_cpu:
- li a7, SYS_get_cpu
-    590a:	48e5                	li	a7,25
- ecall
-    590c:	00000073          	ecall
- ret
-    5910:	8082                	ret
-
-0000000000005912 <set_cpu>:
-.global set_cpu
-set_cpu:
- li a7, SYS_set_cpu
-    5912:	48e9                	li	a7,26
- ecall
-    5914:	00000073          	ecall
- ret
-    5918:	8082                	ret
-
-000000000000591a <putc>:
+00000000000058f2 <putc>:
 
 static char digits[] = "0123456789ABCDEF";
 
 static void
 putc(int fd, char c)
 {
-    591a:	1101                	addi	sp,sp,-32
-    591c:	ec06                	sd	ra,24(sp)
-    591e:	e822                	sd	s0,16(sp)
-    5920:	1000                	addi	s0,sp,32
-    5922:	feb407a3          	sb	a1,-17(s0)
+    58f2:	1101                	addi	sp,sp,-32
+    58f4:	ec06                	sd	ra,24(sp)
+    58f6:	e822                	sd	s0,16(sp)
+    58f8:	1000                	addi	s0,sp,32
+    58fa:	feb407a3          	sb	a1,-17(s0)
   write(fd, &c, 1);
-    5926:	4605                	li	a2,1
-    5928:	fef40593          	addi	a1,s0,-17
-    592c:	00000097          	auipc	ra,0x0
-    5930:	f46080e7          	jalr	-186(ra) # 5872 <write>
+    58fe:	4605                	li	a2,1
+    5900:	fef40593          	addi	a1,s0,-17
+    5904:	00000097          	auipc	ra,0x0
+    5908:	f6e080e7          	jalr	-146(ra) # 5872 <write>
 }
-    5934:	60e2                	ld	ra,24(sp)
-    5936:	6442                	ld	s0,16(sp)
-    5938:	6105                	addi	sp,sp,32
-    593a:	8082                	ret
+    590c:	60e2                	ld	ra,24(sp)
+    590e:	6442                	ld	s0,16(sp)
+    5910:	6105                	addi	sp,sp,32
+    5912:	8082                	ret
 
-000000000000593c <printint>:
+0000000000005914 <printint>:
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
-    593c:	7139                	addi	sp,sp,-64
-    593e:	fc06                	sd	ra,56(sp)
-    5940:	f822                	sd	s0,48(sp)
-    5942:	f426                	sd	s1,40(sp)
-    5944:	f04a                	sd	s2,32(sp)
-    5946:	ec4e                	sd	s3,24(sp)
-    5948:	0080                	addi	s0,sp,64
-    594a:	84aa                	mv	s1,a0
+    5914:	7139                	addi	sp,sp,-64
+    5916:	fc06                	sd	ra,56(sp)
+    5918:	f822                	sd	s0,48(sp)
+    591a:	f426                	sd	s1,40(sp)
+    591c:	f04a                	sd	s2,32(sp)
+    591e:	ec4e                	sd	s3,24(sp)
+    5920:	0080                	addi	s0,sp,64
+    5922:	84aa                	mv	s1,a0
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
-    594c:	c299                	beqz	a3,5952 <printint+0x16>
-    594e:	0805c863          	bltz	a1,59de <printint+0xa2>
+    5924:	c299                	beqz	a3,592a <printint+0x16>
+    5926:	0805c863          	bltz	a1,59b6 <printint+0xa2>
     neg = 1;
     x = -xx;
   } else {
     x = xx;
-    5952:	2581                	sext.w	a1,a1
+    592a:	2581                	sext.w	a1,a1
   neg = 0;
-    5954:	4881                	li	a7,0
-    5956:	fc040693          	addi	a3,s0,-64
+    592c:	4881                	li	a7,0
+    592e:	fc040693          	addi	a3,s0,-64
   }
 
   i = 0;
-    595a:	4701                	li	a4,0
+    5932:	4701                	li	a4,0
   do{
     buf[i++] = digits[x % base];
-    595c:	2601                	sext.w	a2,a2
-    595e:	00003517          	auipc	a0,0x3
-    5962:	c1a50513          	addi	a0,a0,-998 # 8578 <digits>
-    5966:	883a                	mv	a6,a4
-    5968:	2705                	addiw	a4,a4,1
-    596a:	02c5f7bb          	remuw	a5,a1,a2
-    596e:	1782                	slli	a5,a5,0x20
-    5970:	9381                	srli	a5,a5,0x20
-    5972:	97aa                	add	a5,a5,a0
-    5974:	0007c783          	lbu	a5,0(a5)
-    5978:	00f68023          	sb	a5,0(a3)
+    5934:	2601                	sext.w	a2,a2
+    5936:	00003517          	auipc	a0,0x3
+    593a:	c1a50513          	addi	a0,a0,-998 # 8550 <digits>
+    593e:	883a                	mv	a6,a4
+    5940:	2705                	addiw	a4,a4,1
+    5942:	02c5f7bb          	remuw	a5,a1,a2
+    5946:	1782                	slli	a5,a5,0x20
+    5948:	9381                	srli	a5,a5,0x20
+    594a:	97aa                	add	a5,a5,a0
+    594c:	0007c783          	lbu	a5,0(a5)
+    5950:	00f68023          	sb	a5,0(a3)
   }while((x /= base) != 0);
-    597c:	0005879b          	sext.w	a5,a1
-    5980:	02c5d5bb          	divuw	a1,a1,a2
-    5984:	0685                	addi	a3,a3,1
-    5986:	fec7f0e3          	bgeu	a5,a2,5966 <printint+0x2a>
+    5954:	0005879b          	sext.w	a5,a1
+    5958:	02c5d5bb          	divuw	a1,a1,a2
+    595c:	0685                	addi	a3,a3,1
+    595e:	fec7f0e3          	bgeu	a5,a2,593e <printint+0x2a>
   if(neg)
-    598a:	00088b63          	beqz	a7,59a0 <printint+0x64>
+    5962:	00088b63          	beqz	a7,5978 <printint+0x64>
     buf[i++] = '-';
-    598e:	fd040793          	addi	a5,s0,-48
-    5992:	973e                	add	a4,a4,a5
-    5994:	02d00793          	li	a5,45
-    5998:	fef70823          	sb	a5,-16(a4)
-    599c:	0028071b          	addiw	a4,a6,2
+    5966:	fd040793          	addi	a5,s0,-48
+    596a:	973e                	add	a4,a4,a5
+    596c:	02d00793          	li	a5,45
+    5970:	fef70823          	sb	a5,-16(a4)
+    5974:	0028071b          	addiw	a4,a6,2
 
   while(--i >= 0)
-    59a0:	02e05863          	blez	a4,59d0 <printint+0x94>
-    59a4:	fc040793          	addi	a5,s0,-64
-    59a8:	00e78933          	add	s2,a5,a4
-    59ac:	fff78993          	addi	s3,a5,-1
-    59b0:	99ba                	add	s3,s3,a4
-    59b2:	377d                	addiw	a4,a4,-1
-    59b4:	1702                	slli	a4,a4,0x20
-    59b6:	9301                	srli	a4,a4,0x20
-    59b8:	40e989b3          	sub	s3,s3,a4
+    5978:	02e05863          	blez	a4,59a8 <printint+0x94>
+    597c:	fc040793          	addi	a5,s0,-64
+    5980:	00e78933          	add	s2,a5,a4
+    5984:	fff78993          	addi	s3,a5,-1
+    5988:	99ba                	add	s3,s3,a4
+    598a:	377d                	addiw	a4,a4,-1
+    598c:	1702                	slli	a4,a4,0x20
+    598e:	9301                	srli	a4,a4,0x20
+    5990:	40e989b3          	sub	s3,s3,a4
     putc(fd, buf[i]);
-    59bc:	fff94583          	lbu	a1,-1(s2)
-    59c0:	8526                	mv	a0,s1
-    59c2:	00000097          	auipc	ra,0x0
-    59c6:	f58080e7          	jalr	-168(ra) # 591a <putc>
+    5994:	fff94583          	lbu	a1,-1(s2)
+    5998:	8526                	mv	a0,s1
+    599a:	00000097          	auipc	ra,0x0
+    599e:	f58080e7          	jalr	-168(ra) # 58f2 <putc>
   while(--i >= 0)
-    59ca:	197d                	addi	s2,s2,-1
-    59cc:	ff3918e3          	bne	s2,s3,59bc <printint+0x80>
+    59a2:	197d                	addi	s2,s2,-1
+    59a4:	ff3918e3          	bne	s2,s3,5994 <printint+0x80>
 }
-    59d0:	70e2                	ld	ra,56(sp)
-    59d2:	7442                	ld	s0,48(sp)
-    59d4:	74a2                	ld	s1,40(sp)
-    59d6:	7902                	ld	s2,32(sp)
-    59d8:	69e2                	ld	s3,24(sp)
-    59da:	6121                	addi	sp,sp,64
-    59dc:	8082                	ret
+    59a8:	70e2                	ld	ra,56(sp)
+    59aa:	7442                	ld	s0,48(sp)
+    59ac:	74a2                	ld	s1,40(sp)
+    59ae:	7902                	ld	s2,32(sp)
+    59b0:	69e2                	ld	s3,24(sp)
+    59b2:	6121                	addi	sp,sp,64
+    59b4:	8082                	ret
     x = -xx;
-    59de:	40b005bb          	negw	a1,a1
+    59b6:	40b005bb          	negw	a1,a1
     neg = 1;
-    59e2:	4885                	li	a7,1
+    59ba:	4885                	li	a7,1
     x = -xx;
-    59e4:	bf8d                	j	5956 <printint+0x1a>
+    59bc:	bf8d                	j	592e <printint+0x1a>
 
-00000000000059e6 <vprintf>:
+00000000000059be <vprintf>:
 }
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 vprintf(int fd, const char *fmt, va_list ap)
 {
-    59e6:	7119                	addi	sp,sp,-128
-    59e8:	fc86                	sd	ra,120(sp)
-    59ea:	f8a2                	sd	s0,112(sp)
-    59ec:	f4a6                	sd	s1,104(sp)
-    59ee:	f0ca                	sd	s2,96(sp)
-    59f0:	ecce                	sd	s3,88(sp)
-    59f2:	e8d2                	sd	s4,80(sp)
-    59f4:	e4d6                	sd	s5,72(sp)
-    59f6:	e0da                	sd	s6,64(sp)
-    59f8:	fc5e                	sd	s7,56(sp)
-    59fa:	f862                	sd	s8,48(sp)
-    59fc:	f466                	sd	s9,40(sp)
-    59fe:	f06a                	sd	s10,32(sp)
-    5a00:	ec6e                	sd	s11,24(sp)
-    5a02:	0100                	addi	s0,sp,128
+    59be:	7119                	addi	sp,sp,-128
+    59c0:	fc86                	sd	ra,120(sp)
+    59c2:	f8a2                	sd	s0,112(sp)
+    59c4:	f4a6                	sd	s1,104(sp)
+    59c6:	f0ca                	sd	s2,96(sp)
+    59c8:	ecce                	sd	s3,88(sp)
+    59ca:	e8d2                	sd	s4,80(sp)
+    59cc:	e4d6                	sd	s5,72(sp)
+    59ce:	e0da                	sd	s6,64(sp)
+    59d0:	fc5e                	sd	s7,56(sp)
+    59d2:	f862                	sd	s8,48(sp)
+    59d4:	f466                	sd	s9,40(sp)
+    59d6:	f06a                	sd	s10,32(sp)
+    59d8:	ec6e                	sd	s11,24(sp)
+    59da:	0100                	addi	s0,sp,128
   char *s;
   int c, i, state;
 
   state = 0;
   for(i = 0; fmt[i]; i++){
-    5a04:	0005c903          	lbu	s2,0(a1)
-    5a08:	18090f63          	beqz	s2,5ba6 <vprintf+0x1c0>
-    5a0c:	8aaa                	mv	s5,a0
-    5a0e:	8b32                	mv	s6,a2
-    5a10:	00158493          	addi	s1,a1,1
+    59dc:	0005c903          	lbu	s2,0(a1)
+    59e0:	18090f63          	beqz	s2,5b7e <vprintf+0x1c0>
+    59e4:	8aaa                	mv	s5,a0
+    59e6:	8b32                	mv	s6,a2
+    59e8:	00158493          	addi	s1,a1,1
   state = 0;
-    5a14:	4981                	li	s3,0
+    59ec:	4981                	li	s3,0
       if(c == '%'){
         state = '%';
       } else {
         putc(fd, c);
       }
     } else if(state == '%'){
-    5a16:	02500a13          	li	s4,37
+    59ee:	02500a13          	li	s4,37
       if(c == 'd'){
-    5a1a:	06400c13          	li	s8,100
+    59f2:	06400c13          	li	s8,100
         printint(fd, va_arg(ap, int), 10, 1);
       } else if(c == 'l') {
-    5a1e:	06c00c93          	li	s9,108
+    59f6:	06c00c93          	li	s9,108
         printint(fd, va_arg(ap, uint64), 10, 0);
       } else if(c == 'x') {
-    5a22:	07800d13          	li	s10,120
+    59fa:	07800d13          	li	s10,120
         printint(fd, va_arg(ap, int), 16, 0);
       } else if(c == 'p') {
-    5a26:	07000d93          	li	s11,112
+    59fe:	07000d93          	li	s11,112
     putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
-    5a2a:	00003b97          	auipc	s7,0x3
-    5a2e:	b4eb8b93          	addi	s7,s7,-1202 # 8578 <digits>
-    5a32:	a839                	j	5a50 <vprintf+0x6a>
+    5a02:	00003b97          	auipc	s7,0x3
+    5a06:	b4eb8b93          	addi	s7,s7,-1202 # 8550 <digits>
+    5a0a:	a839                	j	5a28 <vprintf+0x6a>
         putc(fd, c);
-    5a34:	85ca                	mv	a1,s2
-    5a36:	8556                	mv	a0,s5
-    5a38:	00000097          	auipc	ra,0x0
-    5a3c:	ee2080e7          	jalr	-286(ra) # 591a <putc>
-    5a40:	a019                	j	5a46 <vprintf+0x60>
+    5a0c:	85ca                	mv	a1,s2
+    5a0e:	8556                	mv	a0,s5
+    5a10:	00000097          	auipc	ra,0x0
+    5a14:	ee2080e7          	jalr	-286(ra) # 58f2 <putc>
+    5a18:	a019                	j	5a1e <vprintf+0x60>
     } else if(state == '%'){
-    5a42:	01498f63          	beq	s3,s4,5a60 <vprintf+0x7a>
+    5a1a:	01498f63          	beq	s3,s4,5a38 <vprintf+0x7a>
   for(i = 0; fmt[i]; i++){
-    5a46:	0485                	addi	s1,s1,1
-    5a48:	fff4c903          	lbu	s2,-1(s1)
-    5a4c:	14090d63          	beqz	s2,5ba6 <vprintf+0x1c0>
+    5a1e:	0485                	addi	s1,s1,1
+    5a20:	fff4c903          	lbu	s2,-1(s1)
+    5a24:	14090d63          	beqz	s2,5b7e <vprintf+0x1c0>
     c = fmt[i] & 0xff;
-    5a50:	0009079b          	sext.w	a5,s2
+    5a28:	0009079b          	sext.w	a5,s2
     if(state == 0){
-    5a54:	fe0997e3          	bnez	s3,5a42 <vprintf+0x5c>
+    5a2c:	fe0997e3          	bnez	s3,5a1a <vprintf+0x5c>
       if(c == '%'){
-    5a58:	fd479ee3          	bne	a5,s4,5a34 <vprintf+0x4e>
+    5a30:	fd479ee3          	bne	a5,s4,5a0c <vprintf+0x4e>
         state = '%';
-    5a5c:	89be                	mv	s3,a5
-    5a5e:	b7e5                	j	5a46 <vprintf+0x60>
+    5a34:	89be                	mv	s3,a5
+    5a36:	b7e5                	j	5a1e <vprintf+0x60>
       if(c == 'd'){
-    5a60:	05878063          	beq	a5,s8,5aa0 <vprintf+0xba>
+    5a38:	05878063          	beq	a5,s8,5a78 <vprintf+0xba>
       } else if(c == 'l') {
-    5a64:	05978c63          	beq	a5,s9,5abc <vprintf+0xd6>
+    5a3c:	05978c63          	beq	a5,s9,5a94 <vprintf+0xd6>
       } else if(c == 'x') {
-    5a68:	07a78863          	beq	a5,s10,5ad8 <vprintf+0xf2>
+    5a40:	07a78863          	beq	a5,s10,5ab0 <vprintf+0xf2>
       } else if(c == 'p') {
-    5a6c:	09b78463          	beq	a5,s11,5af4 <vprintf+0x10e>
+    5a44:	09b78463          	beq	a5,s11,5acc <vprintf+0x10e>
         printptr(fd, va_arg(ap, uint64));
       } else if(c == 's'){
-    5a70:	07300713          	li	a4,115
-    5a74:	0ce78663          	beq	a5,a4,5b40 <vprintf+0x15a>
+    5a48:	07300713          	li	a4,115
+    5a4c:	0ce78663          	beq	a5,a4,5b18 <vprintf+0x15a>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
-    5a78:	06300713          	li	a4,99
-    5a7c:	0ee78e63          	beq	a5,a4,5b78 <vprintf+0x192>
+    5a50:	06300713          	li	a4,99
+    5a54:	0ee78e63          	beq	a5,a4,5b50 <vprintf+0x192>
         putc(fd, va_arg(ap, uint));
       } else if(c == '%'){
-    5a80:	11478863          	beq	a5,s4,5b90 <vprintf+0x1aa>
+    5a58:	11478863          	beq	a5,s4,5b68 <vprintf+0x1aa>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
-    5a84:	85d2                	mv	a1,s4
-    5a86:	8556                	mv	a0,s5
-    5a88:	00000097          	auipc	ra,0x0
-    5a8c:	e92080e7          	jalr	-366(ra) # 591a <putc>
+    5a5c:	85d2                	mv	a1,s4
+    5a5e:	8556                	mv	a0,s5
+    5a60:	00000097          	auipc	ra,0x0
+    5a64:	e92080e7          	jalr	-366(ra) # 58f2 <putc>
         putc(fd, c);
-    5a90:	85ca                	mv	a1,s2
-    5a92:	8556                	mv	a0,s5
-    5a94:	00000097          	auipc	ra,0x0
-    5a98:	e86080e7          	jalr	-378(ra) # 591a <putc>
+    5a68:	85ca                	mv	a1,s2
+    5a6a:	8556                	mv	a0,s5
+    5a6c:	00000097          	auipc	ra,0x0
+    5a70:	e86080e7          	jalr	-378(ra) # 58f2 <putc>
       }
       state = 0;
-    5a9c:	4981                	li	s3,0
-    5a9e:	b765                	j	5a46 <vprintf+0x60>
+    5a74:	4981                	li	s3,0
+    5a76:	b765                	j	5a1e <vprintf+0x60>
         printint(fd, va_arg(ap, int), 10, 1);
-    5aa0:	008b0913          	addi	s2,s6,8
-    5aa4:	4685                	li	a3,1
-    5aa6:	4629                	li	a2,10
-    5aa8:	000b2583          	lw	a1,0(s6)
-    5aac:	8556                	mv	a0,s5
-    5aae:	00000097          	auipc	ra,0x0
-    5ab2:	e8e080e7          	jalr	-370(ra) # 593c <printint>
-    5ab6:	8b4a                	mv	s6,s2
+    5a78:	008b0913          	addi	s2,s6,8
+    5a7c:	4685                	li	a3,1
+    5a7e:	4629                	li	a2,10
+    5a80:	000b2583          	lw	a1,0(s6)
+    5a84:	8556                	mv	a0,s5
+    5a86:	00000097          	auipc	ra,0x0
+    5a8a:	e8e080e7          	jalr	-370(ra) # 5914 <printint>
+    5a8e:	8b4a                	mv	s6,s2
       state = 0;
-    5ab8:	4981                	li	s3,0
-    5aba:	b771                	j	5a46 <vprintf+0x60>
+    5a90:	4981                	li	s3,0
+    5a92:	b771                	j	5a1e <vprintf+0x60>
         printint(fd, va_arg(ap, uint64), 10, 0);
-    5abc:	008b0913          	addi	s2,s6,8
-    5ac0:	4681                	li	a3,0
-    5ac2:	4629                	li	a2,10
-    5ac4:	000b2583          	lw	a1,0(s6)
-    5ac8:	8556                	mv	a0,s5
-    5aca:	00000097          	auipc	ra,0x0
-    5ace:	e72080e7          	jalr	-398(ra) # 593c <printint>
-    5ad2:	8b4a                	mv	s6,s2
+    5a94:	008b0913          	addi	s2,s6,8
+    5a98:	4681                	li	a3,0
+    5a9a:	4629                	li	a2,10
+    5a9c:	000b2583          	lw	a1,0(s6)
+    5aa0:	8556                	mv	a0,s5
+    5aa2:	00000097          	auipc	ra,0x0
+    5aa6:	e72080e7          	jalr	-398(ra) # 5914 <printint>
+    5aaa:	8b4a                	mv	s6,s2
       state = 0;
-    5ad4:	4981                	li	s3,0
-    5ad6:	bf85                	j	5a46 <vprintf+0x60>
+    5aac:	4981                	li	s3,0
+    5aae:	bf85                	j	5a1e <vprintf+0x60>
         printint(fd, va_arg(ap, int), 16, 0);
-    5ad8:	008b0913          	addi	s2,s6,8
-    5adc:	4681                	li	a3,0
-    5ade:	4641                	li	a2,16
-    5ae0:	000b2583          	lw	a1,0(s6)
-    5ae4:	8556                	mv	a0,s5
-    5ae6:	00000097          	auipc	ra,0x0
-    5aea:	e56080e7          	jalr	-426(ra) # 593c <printint>
-    5aee:	8b4a                	mv	s6,s2
+    5ab0:	008b0913          	addi	s2,s6,8
+    5ab4:	4681                	li	a3,0
+    5ab6:	4641                	li	a2,16
+    5ab8:	000b2583          	lw	a1,0(s6)
+    5abc:	8556                	mv	a0,s5
+    5abe:	00000097          	auipc	ra,0x0
+    5ac2:	e56080e7          	jalr	-426(ra) # 5914 <printint>
+    5ac6:	8b4a                	mv	s6,s2
       state = 0;
-    5af0:	4981                	li	s3,0
-    5af2:	bf91                	j	5a46 <vprintf+0x60>
+    5ac8:	4981                	li	s3,0
+    5aca:	bf91                	j	5a1e <vprintf+0x60>
         printptr(fd, va_arg(ap, uint64));
-    5af4:	008b0793          	addi	a5,s6,8
-    5af8:	f8f43423          	sd	a5,-120(s0)
-    5afc:	000b3983          	ld	s3,0(s6)
+    5acc:	008b0793          	addi	a5,s6,8
+    5ad0:	f8f43423          	sd	a5,-120(s0)
+    5ad4:	000b3983          	ld	s3,0(s6)
   putc(fd, '0');
-    5b00:	03000593          	li	a1,48
-    5b04:	8556                	mv	a0,s5
-    5b06:	00000097          	auipc	ra,0x0
-    5b0a:	e14080e7          	jalr	-492(ra) # 591a <putc>
+    5ad8:	03000593          	li	a1,48
+    5adc:	8556                	mv	a0,s5
+    5ade:	00000097          	auipc	ra,0x0
+    5ae2:	e14080e7          	jalr	-492(ra) # 58f2 <putc>
   putc(fd, 'x');
-    5b0e:	85ea                	mv	a1,s10
-    5b10:	8556                	mv	a0,s5
-    5b12:	00000097          	auipc	ra,0x0
-    5b16:	e08080e7          	jalr	-504(ra) # 591a <putc>
-    5b1a:	4941                	li	s2,16
+    5ae6:	85ea                	mv	a1,s10
+    5ae8:	8556                	mv	a0,s5
+    5aea:	00000097          	auipc	ra,0x0
+    5aee:	e08080e7          	jalr	-504(ra) # 58f2 <putc>
+    5af2:	4941                	li	s2,16
     putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
-    5b1c:	03c9d793          	srli	a5,s3,0x3c
-    5b20:	97de                	add	a5,a5,s7
-    5b22:	0007c583          	lbu	a1,0(a5)
-    5b26:	8556                	mv	a0,s5
-    5b28:	00000097          	auipc	ra,0x0
-    5b2c:	df2080e7          	jalr	-526(ra) # 591a <putc>
+    5af4:	03c9d793          	srli	a5,s3,0x3c
+    5af8:	97de                	add	a5,a5,s7
+    5afa:	0007c583          	lbu	a1,0(a5)
+    5afe:	8556                	mv	a0,s5
+    5b00:	00000097          	auipc	ra,0x0
+    5b04:	df2080e7          	jalr	-526(ra) # 58f2 <putc>
   for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
-    5b30:	0992                	slli	s3,s3,0x4
-    5b32:	397d                	addiw	s2,s2,-1
-    5b34:	fe0914e3          	bnez	s2,5b1c <vprintf+0x136>
+    5b08:	0992                	slli	s3,s3,0x4
+    5b0a:	397d                	addiw	s2,s2,-1
+    5b0c:	fe0914e3          	bnez	s2,5af4 <vprintf+0x136>
         printptr(fd, va_arg(ap, uint64));
-    5b38:	f8843b03          	ld	s6,-120(s0)
+    5b10:	f8843b03          	ld	s6,-120(s0)
       state = 0;
-    5b3c:	4981                	li	s3,0
-    5b3e:	b721                	j	5a46 <vprintf+0x60>
+    5b14:	4981                	li	s3,0
+    5b16:	b721                	j	5a1e <vprintf+0x60>
         s = va_arg(ap, char*);
-    5b40:	008b0993          	addi	s3,s6,8
-    5b44:	000b3903          	ld	s2,0(s6)
+    5b18:	008b0993          	addi	s3,s6,8
+    5b1c:	000b3903          	ld	s2,0(s6)
         if(s == 0)
-    5b48:	02090163          	beqz	s2,5b6a <vprintf+0x184>
+    5b20:	02090163          	beqz	s2,5b42 <vprintf+0x184>
         while(*s != 0){
-    5b4c:	00094583          	lbu	a1,0(s2)
-    5b50:	c9a1                	beqz	a1,5ba0 <vprintf+0x1ba>
+    5b24:	00094583          	lbu	a1,0(s2)
+    5b28:	c9a1                	beqz	a1,5b78 <vprintf+0x1ba>
           putc(fd, *s);
-    5b52:	8556                	mv	a0,s5
-    5b54:	00000097          	auipc	ra,0x0
-    5b58:	dc6080e7          	jalr	-570(ra) # 591a <putc>
+    5b2a:	8556                	mv	a0,s5
+    5b2c:	00000097          	auipc	ra,0x0
+    5b30:	dc6080e7          	jalr	-570(ra) # 58f2 <putc>
           s++;
-    5b5c:	0905                	addi	s2,s2,1
+    5b34:	0905                	addi	s2,s2,1
         while(*s != 0){
-    5b5e:	00094583          	lbu	a1,0(s2)
-    5b62:	f9e5                	bnez	a1,5b52 <vprintf+0x16c>
+    5b36:	00094583          	lbu	a1,0(s2)
+    5b3a:	f9e5                	bnez	a1,5b2a <vprintf+0x16c>
         s = va_arg(ap, char*);
-    5b64:	8b4e                	mv	s6,s3
+    5b3c:	8b4e                	mv	s6,s3
       state = 0;
-    5b66:	4981                	li	s3,0
-    5b68:	bdf9                	j	5a46 <vprintf+0x60>
+    5b3e:	4981                	li	s3,0
+    5b40:	bdf9                	j	5a1e <vprintf+0x60>
           s = "(null)";
-    5b6a:	00003917          	auipc	s2,0x3
-    5b6e:	a0690913          	addi	s2,s2,-1530 # 8570 <malloc+0x28c0>
+    5b42:	00003917          	auipc	s2,0x3
+    5b46:	a0690913          	addi	s2,s2,-1530 # 8548 <malloc+0x28c0>
         while(*s != 0){
-    5b72:	02800593          	li	a1,40
-    5b76:	bff1                	j	5b52 <vprintf+0x16c>
+    5b4a:	02800593          	li	a1,40
+    5b4e:	bff1                	j	5b2a <vprintf+0x16c>
         putc(fd, va_arg(ap, uint));
-    5b78:	008b0913          	addi	s2,s6,8
-    5b7c:	000b4583          	lbu	a1,0(s6)
-    5b80:	8556                	mv	a0,s5
-    5b82:	00000097          	auipc	ra,0x0
-    5b86:	d98080e7          	jalr	-616(ra) # 591a <putc>
-    5b8a:	8b4a                	mv	s6,s2
+    5b50:	008b0913          	addi	s2,s6,8
+    5b54:	000b4583          	lbu	a1,0(s6)
+    5b58:	8556                	mv	a0,s5
+    5b5a:	00000097          	auipc	ra,0x0
+    5b5e:	d98080e7          	jalr	-616(ra) # 58f2 <putc>
+    5b62:	8b4a                	mv	s6,s2
       state = 0;
-    5b8c:	4981                	li	s3,0
-    5b8e:	bd65                	j	5a46 <vprintf+0x60>
+    5b64:	4981                	li	s3,0
+    5b66:	bd65                	j	5a1e <vprintf+0x60>
         putc(fd, c);
-    5b90:	85d2                	mv	a1,s4
-    5b92:	8556                	mv	a0,s5
-    5b94:	00000097          	auipc	ra,0x0
-    5b98:	d86080e7          	jalr	-634(ra) # 591a <putc>
+    5b68:	85d2                	mv	a1,s4
+    5b6a:	8556                	mv	a0,s5
+    5b6c:	00000097          	auipc	ra,0x0
+    5b70:	d86080e7          	jalr	-634(ra) # 58f2 <putc>
       state = 0;
-    5b9c:	4981                	li	s3,0
-    5b9e:	b565                	j	5a46 <vprintf+0x60>
+    5b74:	4981                	li	s3,0
+    5b76:	b565                	j	5a1e <vprintf+0x60>
         s = va_arg(ap, char*);
-    5ba0:	8b4e                	mv	s6,s3
+    5b78:	8b4e                	mv	s6,s3
       state = 0;
-    5ba2:	4981                	li	s3,0
-    5ba4:	b54d                	j	5a46 <vprintf+0x60>
+    5b7a:	4981                	li	s3,0
+    5b7c:	b54d                	j	5a1e <vprintf+0x60>
     }
   }
 }
-    5ba6:	70e6                	ld	ra,120(sp)
-    5ba8:	7446                	ld	s0,112(sp)
-    5baa:	74a6                	ld	s1,104(sp)
-    5bac:	7906                	ld	s2,96(sp)
-    5bae:	69e6                	ld	s3,88(sp)
-    5bb0:	6a46                	ld	s4,80(sp)
-    5bb2:	6aa6                	ld	s5,72(sp)
-    5bb4:	6b06                	ld	s6,64(sp)
-    5bb6:	7be2                	ld	s7,56(sp)
-    5bb8:	7c42                	ld	s8,48(sp)
-    5bba:	7ca2                	ld	s9,40(sp)
-    5bbc:	7d02                	ld	s10,32(sp)
-    5bbe:	6de2                	ld	s11,24(sp)
-    5bc0:	6109                	addi	sp,sp,128
-    5bc2:	8082                	ret
-
-0000000000005bc4 <fprintf>:
+    5b7e:	70e6                	ld	ra,120(sp)
+    5b80:	7446                	ld	s0,112(sp)
+    5b82:	74a6                	ld	s1,104(sp)
+    5b84:	7906                	ld	s2,96(sp)
+    5b86:	69e6                	ld	s3,88(sp)
+    5b88:	6a46                	ld	s4,80(sp)
+    5b8a:	6aa6                	ld	s5,72(sp)
+    5b8c:	6b06                	ld	s6,64(sp)
+    5b8e:	7be2                	ld	s7,56(sp)
+    5b90:	7c42                	ld	s8,48(sp)
+    5b92:	7ca2                	ld	s9,40(sp)
+    5b94:	7d02                	ld	s10,32(sp)
+    5b96:	6de2                	ld	s11,24(sp)
+    5b98:	6109                	addi	sp,sp,128
+    5b9a:	8082                	ret
+
+0000000000005b9c <fprintf>:
 
 void
 fprintf(int fd, const char *fmt, ...)
 {
-    5bc4:	715d                	addi	sp,sp,-80
-    5bc6:	ec06                	sd	ra,24(sp)
-    5bc8:	e822                	sd	s0,16(sp)
-    5bca:	1000                	addi	s0,sp,32
-    5bcc:	e010                	sd	a2,0(s0)
-    5bce:	e414                	sd	a3,8(s0)
-    5bd0:	e818                	sd	a4,16(s0)
-    5bd2:	ec1c                	sd	a5,24(s0)
-    5bd4:	03043023          	sd	a6,32(s0)
-    5bd8:	03143423          	sd	a7,40(s0)
+    5b9c:	715d                	addi	sp,sp,-80
+    5b9e:	ec06                	sd	ra,24(sp)
+    5ba0:	e822                	sd	s0,16(sp)
+    5ba2:	1000                	addi	s0,sp,32
+    5ba4:	e010                	sd	a2,0(s0)
+    5ba6:	e414                	sd	a3,8(s0)
+    5ba8:	e818                	sd	a4,16(s0)
+    5baa:	ec1c                	sd	a5,24(s0)
+    5bac:	03043023          	sd	a6,32(s0)
+    5bb0:	03143423          	sd	a7,40(s0)
   va_list ap;
 
   va_start(ap, fmt);
-    5bdc:	fe843423          	sd	s0,-24(s0)
+    5bb4:	fe843423          	sd	s0,-24(s0)
   vprintf(fd, fmt, ap);
-    5be0:	8622                	mv	a2,s0
-    5be2:	00000097          	auipc	ra,0x0
-    5be6:	e04080e7          	jalr	-508(ra) # 59e6 <vprintf>
+    5bb8:	8622                	mv	a2,s0
+    5bba:	00000097          	auipc	ra,0x0
+    5bbe:	e04080e7          	jalr	-508(ra) # 59be <vprintf>
 }
-    5bea:	60e2                	ld	ra,24(sp)
-    5bec:	6442                	ld	s0,16(sp)
-    5bee:	6161                	addi	sp,sp,80
-    5bf0:	8082                	ret
+    5bc2:	60e2                	ld	ra,24(sp)
+    5bc4:	6442                	ld	s0,16(sp)
+    5bc6:	6161                	addi	sp,sp,80
+    5bc8:	8082                	ret
 
-0000000000005bf2 <printf>:
+0000000000005bca <printf>:
 
 void
 printf(const char *fmt, ...)
 {
-    5bf2:	711d                	addi	sp,sp,-96
-    5bf4:	ec06                	sd	ra,24(sp)
-    5bf6:	e822                	sd	s0,16(sp)
-    5bf8:	1000                	addi	s0,sp,32
-    5bfa:	e40c                	sd	a1,8(s0)
-    5bfc:	e810                	sd	a2,16(s0)
-    5bfe:	ec14                	sd	a3,24(s0)
-    5c00:	f018                	sd	a4,32(s0)
-    5c02:	f41c                	sd	a5,40(s0)
-    5c04:	03043823          	sd	a6,48(s0)
-    5c08:	03143c23          	sd	a7,56(s0)
+    5bca:	711d                	addi	sp,sp,-96
+    5bcc:	ec06                	sd	ra,24(sp)
+    5bce:	e822                	sd	s0,16(sp)
+    5bd0:	1000                	addi	s0,sp,32
+    5bd2:	e40c                	sd	a1,8(s0)
+    5bd4:	e810                	sd	a2,16(s0)
+    5bd6:	ec14                	sd	a3,24(s0)
+    5bd8:	f018                	sd	a4,32(s0)
+    5bda:	f41c                	sd	a5,40(s0)
+    5bdc:	03043823          	sd	a6,48(s0)
+    5be0:	03143c23          	sd	a7,56(s0)
   va_list ap;
 
   va_start(ap, fmt);
-    5c0c:	00840613          	addi	a2,s0,8
-    5c10:	fec43423          	sd	a2,-24(s0)
+    5be4:	00840613          	addi	a2,s0,8
+    5be8:	fec43423          	sd	a2,-24(s0)
   vprintf(1, fmt, ap);
-    5c14:	85aa                	mv	a1,a0
-    5c16:	4505                	li	a0,1
-    5c18:	00000097          	auipc	ra,0x0
-    5c1c:	dce080e7          	jalr	-562(ra) # 59e6 <vprintf>
+    5bec:	85aa                	mv	a1,a0
+    5bee:	4505                	li	a0,1
+    5bf0:	00000097          	auipc	ra,0x0
+    5bf4:	dce080e7          	jalr	-562(ra) # 59be <vprintf>
 }
-    5c20:	60e2                	ld	ra,24(sp)
-    5c22:	6442                	ld	s0,16(sp)
-    5c24:	6125                	addi	sp,sp,96
-    5c26:	8082                	ret
+    5bf8:	60e2                	ld	ra,24(sp)
+    5bfa:	6442                	ld	s0,16(sp)
+    5bfc:	6125                	addi	sp,sp,96
+    5bfe:	8082                	ret
 
-0000000000005c28 <free>:
+0000000000005c00 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
-    5c28:	1141                	addi	sp,sp,-16
-    5c2a:	e422                	sd	s0,8(sp)
-    5c2c:	0800                	addi	s0,sp,16
+    5c00:	1141                	addi	sp,sp,-16
+    5c02:	e422                	sd	s0,8(sp)
+    5c04:	0800                	addi	s0,sp,16
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
-    5c2e:	ff050693          	addi	a3,a0,-16
+    5c06:	ff050693          	addi	a3,a0,-16
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    5c32:	00003797          	auipc	a5,0x3
-    5c36:	9667b783          	ld	a5,-1690(a5) # 8598 <freep>
-    5c3a:	a805                	j	5c6a <free+0x42>
+    5c0a:	00003797          	auipc	a5,0x3
+    5c0e:	9667b783          	ld	a5,-1690(a5) # 8570 <freep>
+    5c12:	a805                	j	5c42 <free+0x42>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
       break;
   if(bp + bp->s.size == p->s.ptr){
     bp->s.size += p->s.ptr->s.size;
-    5c3c:	4618                	lw	a4,8(a2)
-    5c3e:	9db9                	addw	a1,a1,a4
-    5c40:	feb52c23          	sw	a1,-8(a0)
+    5c14:	4618                	lw	a4,8(a2)
+    5c16:	9db9                	addw	a1,a1,a4
+    5c18:	feb52c23          	sw	a1,-8(a0)
     bp->s.ptr = p->s.ptr->s.ptr;
-    5c44:	6398                	ld	a4,0(a5)
-    5c46:	6318                	ld	a4,0(a4)
-    5c48:	fee53823          	sd	a4,-16(a0)
-    5c4c:	a091                	j	5c90 <free+0x68>
+    5c1c:	6398                	ld	a4,0(a5)
+    5c1e:	6318                	ld	a4,0(a4)
+    5c20:	fee53823          	sd	a4,-16(a0)
+    5c24:	a091                	j	5c68 <free+0x68>
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
     p->s.size += bp->s.size;
-    5c4e:	ff852703          	lw	a4,-8(a0)
-    5c52:	9e39                	addw	a2,a2,a4
-    5c54:	c790                	sw	a2,8(a5)
+    5c26:	ff852703          	lw	a4,-8(a0)
+    5c2a:	9e39                	addw	a2,a2,a4
+    5c2c:	c790                	sw	a2,8(a5)
     p->s.ptr = bp->s.ptr;
-    5c56:	ff053703          	ld	a4,-16(a0)
-    5c5a:	e398                	sd	a4,0(a5)
-    5c5c:	a099                	j	5ca2 <free+0x7a>
+    5c2e:	ff053703          	ld	a4,-16(a0)
+    5c32:	e398                	sd	a4,0(a5)
+    5c34:	a099                	j	5c7a <free+0x7a>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    5c5e:	6398                	ld	a4,0(a5)
-    5c60:	00e7e463          	bltu	a5,a4,5c68 <free+0x40>
-    5c64:	00e6ea63          	bltu	a3,a4,5c78 <free+0x50>
+    5c36:	6398                	ld	a4,0(a5)
+    5c38:	00e7e463          	bltu	a5,a4,5c40 <free+0x40>
+    5c3c:	00e6ea63          	bltu	a3,a4,5c50 <free+0x50>
 {
-    5c68:	87ba                	mv	a5,a4
+    5c40:	87ba                	mv	a5,a4
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    5c6a:	fed7fae3          	bgeu	a5,a3,5c5e <free+0x36>
-    5c6e:	6398                	ld	a4,0(a5)
-    5c70:	00e6e463          	bltu	a3,a4,5c78 <free+0x50>
+    5c42:	fed7fae3          	bgeu	a5,a3,5c36 <free+0x36>
+    5c46:	6398                	ld	a4,0(a5)
+    5c48:	00e6e463          	bltu	a3,a4,5c50 <free+0x50>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    5c74:	fee7eae3          	bltu	a5,a4,5c68 <free+0x40>
+    5c4c:	fee7eae3          	bltu	a5,a4,5c40 <free+0x40>
   if(bp + bp->s.size == p->s.ptr){
-    5c78:	ff852583          	lw	a1,-8(a0)
-    5c7c:	6390                	ld	a2,0(a5)
-    5c7e:	02059713          	slli	a4,a1,0x20
-    5c82:	9301                	srli	a4,a4,0x20
-    5c84:	0712                	slli	a4,a4,0x4
-    5c86:	9736                	add	a4,a4,a3
-    5c88:	fae60ae3          	beq	a2,a4,5c3c <free+0x14>
+    5c50:	ff852583          	lw	a1,-8(a0)
+    5c54:	6390                	ld	a2,0(a5)
+    5c56:	02059713          	slli	a4,a1,0x20
+    5c5a:	9301                	srli	a4,a4,0x20
+    5c5c:	0712                	slli	a4,a4,0x4
+    5c5e:	9736                	add	a4,a4,a3
+    5c60:	fae60ae3          	beq	a2,a4,5c14 <free+0x14>
     bp->s.ptr = p->s.ptr;
-    5c8c:	fec53823          	sd	a2,-16(a0)
+    5c64:	fec53823          	sd	a2,-16(a0)
   if(p + p->s.size == bp){
-    5c90:	4790                	lw	a2,8(a5)
-    5c92:	02061713          	slli	a4,a2,0x20
-    5c96:	9301                	srli	a4,a4,0x20
-    5c98:	0712                	slli	a4,a4,0x4
-    5c9a:	973e                	add	a4,a4,a5
-    5c9c:	fae689e3          	beq	a3,a4,5c4e <free+0x26>
+    5c68:	4790                	lw	a2,8(a5)
+    5c6a:	02061713          	slli	a4,a2,0x20
+    5c6e:	9301                	srli	a4,a4,0x20
+    5c70:	0712                	slli	a4,a4,0x4
+    5c72:	973e                	add	a4,a4,a5
+    5c74:	fae689e3          	beq	a3,a4,5c26 <free+0x26>
   } else
     p->s.ptr = bp;
-    5ca0:	e394                	sd	a3,0(a5)
+    5c78:	e394                	sd	a3,0(a5)
   freep = p;
-    5ca2:	00003717          	auipc	a4,0x3
-    5ca6:	8ef73b23          	sd	a5,-1802(a4) # 8598 <freep>
+    5c7a:	00003717          	auipc	a4,0x3
+    5c7e:	8ef73b23          	sd	a5,-1802(a4) # 8570 <freep>
 }
-    5caa:	6422                	ld	s0,8(sp)
-    5cac:	0141                	addi	sp,sp,16
-    5cae:	8082                	ret
+    5c82:	6422                	ld	s0,8(sp)
+    5c84:	0141                	addi	sp,sp,16
+    5c86:	8082                	ret
 
-0000000000005cb0 <malloc>:
+0000000000005c88 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
-    5cb0:	7139                	addi	sp,sp,-64
-    5cb2:	fc06                	sd	ra,56(sp)
-    5cb4:	f822                	sd	s0,48(sp)
-    5cb6:	f426                	sd	s1,40(sp)
-    5cb8:	f04a                	sd	s2,32(sp)
-    5cba:	ec4e                	sd	s3,24(sp)
-    5cbc:	e852                	sd	s4,16(sp)
-    5cbe:	e456                	sd	s5,8(sp)
-    5cc0:	e05a                	sd	s6,0(sp)
-    5cc2:	0080                	addi	s0,sp,64
+    5c88:	7139                	addi	sp,sp,-64
+    5c8a:	fc06                	sd	ra,56(sp)
+    5c8c:	f822                	sd	s0,48(sp)
+    5c8e:	f426                	sd	s1,40(sp)
+    5c90:	f04a                	sd	s2,32(sp)
+    5c92:	ec4e                	sd	s3,24(sp)
+    5c94:	e852                	sd	s4,16(sp)
+    5c96:	e456                	sd	s5,8(sp)
+    5c98:	e05a                	sd	s6,0(sp)
+    5c9a:	0080                	addi	s0,sp,64
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    5cc4:	02051493          	slli	s1,a0,0x20
-    5cc8:	9081                	srli	s1,s1,0x20
-    5cca:	04bd                	addi	s1,s1,15
-    5ccc:	8091                	srli	s1,s1,0x4
-    5cce:	0014899b          	addiw	s3,s1,1
-    5cd2:	0485                	addi	s1,s1,1
+    5c9c:	02051493          	slli	s1,a0,0x20
+    5ca0:	9081                	srli	s1,s1,0x20
+    5ca2:	04bd                	addi	s1,s1,15
+    5ca4:	8091                	srli	s1,s1,0x4
+    5ca6:	0014899b          	addiw	s3,s1,1
+    5caa:	0485                	addi	s1,s1,1
   if((prevp = freep) == 0){
-    5cd4:	00003517          	auipc	a0,0x3
-    5cd8:	8c453503          	ld	a0,-1852(a0) # 8598 <freep>
-    5cdc:	c515                	beqz	a0,5d08 <malloc+0x58>
+    5cac:	00003517          	auipc	a0,0x3
+    5cb0:	8c453503          	ld	a0,-1852(a0) # 8570 <freep>
+    5cb4:	c515                	beqz	a0,5ce0 <malloc+0x58>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    5cde:	611c                	ld	a5,0(a0)
+    5cb6:	611c                	ld	a5,0(a0)
     if(p->s.size >= nunits){
-    5ce0:	4798                	lw	a4,8(a5)
-    5ce2:	02977f63          	bgeu	a4,s1,5d20 <malloc+0x70>
-    5ce6:	8a4e                	mv	s4,s3
-    5ce8:	0009871b          	sext.w	a4,s3
-    5cec:	6685                	lui	a3,0x1
-    5cee:	00d77363          	bgeu	a4,a3,5cf4 <malloc+0x44>
-    5cf2:	6a05                	lui	s4,0x1
-    5cf4:	000a0b1b          	sext.w	s6,s4
+    5cb8:	4798                	lw	a4,8(a5)
+    5cba:	02977f63          	bgeu	a4,s1,5cf8 <malloc+0x70>
+    5cbe:	8a4e                	mv	s4,s3
+    5cc0:	0009871b          	sext.w	a4,s3
+    5cc4:	6685                	lui	a3,0x1
+    5cc6:	00d77363          	bgeu	a4,a3,5ccc <malloc+0x44>
+    5cca:	6a05                	lui	s4,0x1
+    5ccc:	000a0b1b          	sext.w	s6,s4
   p = sbrk(nu * sizeof(Header));
-    5cf8:	004a1a1b          	slliw	s4,s4,0x4
+    5cd0:	004a1a1b          	slliw	s4,s4,0x4
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
-    5cfc:	00003917          	auipc	s2,0x3
-    5d00:	89c90913          	addi	s2,s2,-1892 # 8598 <freep>
+    5cd4:	00003917          	auipc	s2,0x3
+    5cd8:	89c90913          	addi	s2,s2,-1892 # 8570 <freep>
   if(p == (char*)-1)
-    5d04:	5afd                	li	s5,-1
-    5d06:	a88d                	j	5d78 <malloc+0xc8>
+    5cdc:	5afd                	li	s5,-1
+    5cde:	a88d                	j	5d50 <malloc+0xc8>
     base.s.ptr = freep = prevp = &base;
-    5d08:	00009797          	auipc	a5,0x9
-    5d0c:	0b078793          	addi	a5,a5,176 # edb8 <base>
-    5d10:	00003717          	auipc	a4,0x3
-    5d14:	88f73423          	sd	a5,-1912(a4) # 8598 <freep>
-    5d18:	e39c                	sd	a5,0(a5)
+    5ce0:	00009797          	auipc	a5,0x9
+    5ce4:	0b078793          	addi	a5,a5,176 # ed90 <base>
+    5ce8:	00003717          	auipc	a4,0x3
+    5cec:	88f73423          	sd	a5,-1912(a4) # 8570 <freep>
+    5cf0:	e39c                	sd	a5,0(a5)
     base.s.size = 0;
-    5d1a:	0007a423          	sw	zero,8(a5)
+    5cf2:	0007a423          	sw	zero,8(a5)
     if(p->s.size >= nunits){
-    5d1e:	b7e1                	j	5ce6 <malloc+0x36>
+    5cf6:	b7e1                	j	5cbe <malloc+0x36>
       if(p->s.size == nunits)
-    5d20:	02e48b63          	beq	s1,a4,5d56 <malloc+0xa6>
+    5cf8:	02e48b63          	beq	s1,a4,5d2e <malloc+0xa6>
         p->s.size -= nunits;
-    5d24:	4137073b          	subw	a4,a4,s3
-    5d28:	c798                	sw	a4,8(a5)
+    5cfc:	4137073b          	subw	a4,a4,s3
+    5d00:	c798                	sw	a4,8(a5)
         p += p->s.size;
-    5d2a:	1702                	slli	a4,a4,0x20
-    5d2c:	9301                	srli	a4,a4,0x20
-    5d2e:	0712                	slli	a4,a4,0x4
-    5d30:	97ba                	add	a5,a5,a4
+    5d02:	1702                	slli	a4,a4,0x20
+    5d04:	9301                	srli	a4,a4,0x20
+    5d06:	0712                	slli	a4,a4,0x4
+    5d08:	97ba                	add	a5,a5,a4
         p->s.size = nunits;
-    5d32:	0137a423          	sw	s3,8(a5)
+    5d0a:	0137a423          	sw	s3,8(a5)
       freep = prevp;
-    5d36:	00003717          	auipc	a4,0x3
-    5d3a:	86a73123          	sd	a0,-1950(a4) # 8598 <freep>
+    5d0e:	00003717          	auipc	a4,0x3
+    5d12:	86a73123          	sd	a0,-1950(a4) # 8570 <freep>
       return (void*)(p + 1);
-    5d3e:	01078513          	addi	a0,a5,16
+    5d16:	01078513          	addi	a0,a5,16
       if((p = morecore(nunits)) == 0)
         return 0;
   }
 }
-    5d42:	70e2                	ld	ra,56(sp)
-    5d44:	7442                	ld	s0,48(sp)
-    5d46:	74a2                	ld	s1,40(sp)
-    5d48:	7902                	ld	s2,32(sp)
-    5d4a:	69e2                	ld	s3,24(sp)
-    5d4c:	6a42                	ld	s4,16(sp)
-    5d4e:	6aa2                	ld	s5,8(sp)
-    5d50:	6b02                	ld	s6,0(sp)
-    5d52:	6121                	addi	sp,sp,64
-    5d54:	8082                	ret
+    5d1a:	70e2                	ld	ra,56(sp)
+    5d1c:	7442                	ld	s0,48(sp)
+    5d1e:	74a2                	ld	s1,40(sp)
+    5d20:	7902                	ld	s2,32(sp)
+    5d22:	69e2                	ld	s3,24(sp)
+    5d24:	6a42                	ld	s4,16(sp)
+    5d26:	6aa2                	ld	s5,8(sp)
+    5d28:	6b02                	ld	s6,0(sp)
+    5d2a:	6121                	addi	sp,sp,64
+    5d2c:	8082                	ret
         prevp->s.ptr = p->s.ptr;
-    5d56:	6398                	ld	a4,0(a5)
-    5d58:	e118                	sd	a4,0(a0)
-    5d5a:	bff1                	j	5d36 <malloc+0x86>
+    5d2e:	6398                	ld	a4,0(a5)
+    5d30:	e118                	sd	a4,0(a0)
+    5d32:	bff1                	j	5d0e <malloc+0x86>
   hp->s.size = nu;
-    5d5c:	01652423          	sw	s6,8(a0)
+    5d34:	01652423          	sw	s6,8(a0)
   free((void*)(hp + 1));
-    5d60:	0541                	addi	a0,a0,16
-    5d62:	00000097          	auipc	ra,0x0
-    5d66:	ec6080e7          	jalr	-314(ra) # 5c28 <free>
+    5d38:	0541                	addi	a0,a0,16
+    5d3a:	00000097          	auipc	ra,0x0
+    5d3e:	ec6080e7          	jalr	-314(ra) # 5c00 <free>
   return freep;
-    5d6a:	00093503          	ld	a0,0(s2)
+    5d42:	00093503          	ld	a0,0(s2)
       if((p = morecore(nunits)) == 0)
-    5d6e:	d971                	beqz	a0,5d42 <malloc+0x92>
+    5d46:	d971                	beqz	a0,5d1a <malloc+0x92>
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    5d70:	611c                	ld	a5,0(a0)
+    5d48:	611c                	ld	a5,0(a0)
     if(p->s.size >= nunits){
-    5d72:	4798                	lw	a4,8(a5)
-    5d74:	fa9776e3          	bgeu	a4,s1,5d20 <malloc+0x70>
+    5d4a:	4798                	lw	a4,8(a5)
+    5d4c:	fa9776e3          	bgeu	a4,s1,5cf8 <malloc+0x70>
     if(p == freep)
-    5d78:	00093703          	ld	a4,0(s2)
-    5d7c:	853e                	mv	a0,a5
-    5d7e:	fef719e3          	bne	a4,a5,5d70 <malloc+0xc0>
+    5d50:	00093703          	ld	a4,0(s2)
+    5d54:	853e                	mv	a0,a5
+    5d56:	fef719e3          	bne	a4,a5,5d48 <malloc+0xc0>
   p = sbrk(nu * sizeof(Header));
-    5d82:	8552                	mv	a0,s4
-    5d84:	00000097          	auipc	ra,0x0
-    5d88:	b56080e7          	jalr	-1194(ra) # 58da <sbrk>
+    5d5a:	8552                	mv	a0,s4
+    5d5c:	00000097          	auipc	ra,0x0
+    5d60:	b7e080e7          	jalr	-1154(ra) # 58da <sbrk>
   if(p == (char*)-1)
-    5d8c:	fd5518e3          	bne	a0,s5,5d5c <malloc+0xac>
+    5d64:	fd5518e3          	bne	a0,s5,5d34 <malloc+0xac>
         return 0;
-    5d90:	4501                	li	a0,0
-    5d92:	bf45                	j	5d42 <malloc+0x92>
+    5d68:	4501                	li	a0,0
+    5d6a:	bf45                	j	5d1a <malloc+0x92>
diff --git a/user/usertests.o b/user/usertests.o
index d31de77..5e064f4 100644
Binary files a/user/usertests.o and b/user/usertests.o differ
diff --git a/user/usertests.sym b/user/usertests.sym
index 2d805c3..993e06f 100644
--- a/user/usertests.sym
+++ b/user/usertests.sym
@@ -1,8 +1,8 @@
 0000000000000000 .text
-0000000000005d98 .rodata
-0000000000008590 .sdata
-0000000000008598 .sbss
-00000000000085a0 .bss
+0000000000005d70 .rodata
+0000000000008568 .sdata
+0000000000008570 .sbss
+0000000000008578 .bss
 0000000000000000 .comment
 0000000000000000 .debug_aranges
 0000000000000000 .debug_info
@@ -13,37 +13,36 @@
 0000000000000000 .debug_loc
 0000000000000000 .debug_ranges
 0000000000000000 usertests.c
-00000000000086a0 big.1280
-00000000000085a0 args.1869
+0000000000008678 big.1270
+0000000000008578 args.1859
 0000000000000000 ulib.c
 0000000000000000 printf.c
-000000000000591a putc
-000000000000593c printint
-0000000000008578 digits
+00000000000058f2 putc
+0000000000005914 printint
+0000000000008550 digits
 0000000000000000 umalloc.c
-0000000000008598 freep
-000000000000edb8 base
+0000000000008570 freep
+000000000000ed90 base
 00000000000009aa writebig
 0000000000002cde sbrk8000
 00000000000055dc strcpy
 000000000000190a exitwait
 0000000000001eb2 manywrites
-0000000000005bf2 printf
-0000000000008d90 __global_pointer$
+0000000000005bca printf
+0000000000008d68 __global_pointer$
 0000000000002236 bigargtest
 000000000000579c memmove
 0000000000003eca openiputtest
 000000000000589a mknod
 00000000000042d2 reparent
 0000000000005698 gets
-0000000000008590 __SDATA_BEGIN__
+0000000000008568 __SDATA_BEGIN__
 00000000000058d2 getpid
 000000000000173e pipe1
 0000000000005832 memcpy
 0000000000003d90 iref
 0000000000001134 pgbug
-0000000000005902 print_stats
-0000000000005cb0 malloc
+0000000000005c88 malloc
 00000000000004ac copyout
 00000000000058e2 sleep
 000000000000233c stacktest
@@ -59,20 +58,19 @@
 00000000000045e0 sharedfd
 0000000000005862 pipe
 000000000000408c killstatus
-00000000000096a8 uninit
+0000000000009680 uninit
 0000000000003b5c dirfile
 0000000000005872 write
 0000000000000058 bsstest
 00000000000058aa fstat
-0000000000005bc4 fprintf
+0000000000005b9c fprintf
 0000000000005882 kill
 00000000000010c6 validatetest
 00000000000039d6 rmdot
 0000000000000350 copyin
-00000000000059e6 vprintf
+00000000000059be vprintf
 000000000000011c truncate2
 00000000000058c2 chdir
-00000000000058f2 pause_system
 0000000000001562 exectest
 000000000000588a exec
 00000000000050ae badwrite
@@ -81,21 +79,18 @@
 000000000000412e preempt
 00000000000058a2 unlink
 000000000000116c badarg
-0000000000005912 set_cpu
 0000000000002a82 argptest
 000000000000453a mem
-000000000000590a get_cpu
 00000000000057f8 memcmp
 000000000000584a fork
 0000000000002c0c sbrklast
-00000000000058fa kill_system
-000000000000edc8 __BSS_END__
+000000000000eda0 __BSS_END__
 00000000000023c0 copyinstr3
 0000000000001a58 forkfork
 00000000000058da sbrk
 00000000000058ea uptime
 00000000000019be twochildren
-0000000000008598 __bss_start
+0000000000008570 __bss_start
 0000000000002188 MAXVAplus
 000000000000564e memset
 00000000000020dc kernmem
@@ -113,15 +108,15 @@
 0000000000003210 subdir
 00000000000011b2 copyinstr2
 0000000000000d16 linktest
-000000000000bdb8 buf
+000000000000bd90 buf
 000000000000313a dirtest
 00000000000029aa sbrkarg
 0000000000002f7c iputtest
-0000000000008589 __DATA_BEGIN__
+0000000000008561 __DATA_BEGIN__
 000000000000570c stat
 0000000000004d2e bigfile
-0000000000008598 _edata
-000000000000edc8 _end
+0000000000008570 _edata
+000000000000eda0 _end
 00000000000051be countfree
 0000000000000b60 unlinkread
 00000000000058b2 link
@@ -140,4 +135,4 @@
 00000000000058ba mkdir
 000000000000587a close
 0000000000001b22 reparent2
-0000000000005c28 free
+0000000000005c00 free
diff --git a/user/usys.S b/user/usys.S
index cade689..e761942 100644
--- a/user/usys.S
+++ b/user/usys.S
@@ -105,28 +105,3 @@ uptime:
  li a7, SYS_uptime
  ecall
  ret
-.global pause_system
-pause_system:
- li a7, SYS_pause_system
- ecall
- ret
-.global kill_system
-kill_system:
- li a7, SYS_kill_system
- ecall
- ret
-.global print_stats
-print_stats:
- li a7, SYS_print_stats
- ecall
- ret
-.global get_cpu
-get_cpu:
- li a7, SYS_get_cpu
- ecall
- ret
-.global set_cpu
-set_cpu:
- li a7, SYS_set_cpu
- ecall
- ret
diff --git a/user/usys.o b/user/usys.o
index dece8c2..ce91f6a 100644
Binary files a/user/usys.o and b/user/usys.o differ
diff --git a/user/usys.pl b/user/usys.pl
index 86ca5dc..01e426e 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,8 +36,3 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
-entry("pause_system");
-entry("kill_system");
-entry("print_stats");
-entry("get_cpu");
-entry("set_cpu");
diff --git a/user/wc.asm b/user/wc.asm
index 14aa833..4e83bbd 100644
--- a/user/wc.asm
+++ b/user/wc.asm
@@ -39,7 +39,7 @@ wc(int fd, char *name)
   2a:	4c01                	li	s8,0
   2c:	4b81                	li	s7,0
   2e:	00001d97          	auipc	s11,0x1
-  32:	993d8d93          	addi	s11,s11,-1645 # 9c1 <buf+0x1>
+  32:	96bd8d93          	addi	s11,s11,-1685 # 999 <buf+0x1>
   while((n = read(fd, buf, sizeof(buf))) > 0){
     for(i=0; i<n; i++){
       c++;
@@ -48,7 +48,7 @@ wc(int fd, char *name)
         l++;
       if(strchr(" \r\t\n\v", buf[i]))
   38:	00001a17          	auipc	s4,0x1
-  3c:	918a0a13          	addi	s4,s4,-1768 # 950 <malloc+0xe6>
+  3c:	8f0a0a13          	addi	s4,s4,-1808 # 928 <malloc+0xe6>
         inword = 0;
   40:	4b01                	li	s6,0
   while((n = read(fd, buf, sizeof(buf))) > 0){
@@ -80,14 +80,14 @@ wc(int fd, char *name)
   while((n = read(fd, buf, sizeof(buf))) > 0){
   72:	20000613          	li	a2,512
   76:	00001597          	auipc	a1,0x1
-  7a:	94a58593          	addi	a1,a1,-1718 # 9c0 <buf>
+  7a:	92258593          	addi	a1,a1,-1758 # 998 <buf>
   7e:	f8843503          	ld	a0,-120(s0)
   82:	00000097          	auipc	ra,0x0
   86:	3a2080e7          	jalr	930(ra) # 424 <read>
   8a:	00a05f63          	blez	a0,a8 <wc+0xa8>
     for(i=0; i<n; i++){
   8e:	00001497          	auipc	s1,0x1
-  92:	93248493          	addi	s1,s1,-1742 # 9c0 <buf>
+  92:	90a48493          	addi	s1,s1,-1782 # 998 <buf>
   96:	00050d1b          	sext.w	s10,a0
   9a:	fff5091b          	addiw	s2,a0,-1
   9e:	1902                	slli	s2,s2,0x20
@@ -108,9 +108,9 @@ wc(int fd, char *name)
   b2:	8662                	mv	a2,s8
   b4:	85de                	mv	a1,s7
   b6:	00001517          	auipc	a0,0x1
-  ba:	8b250513          	addi	a0,a0,-1870 # 968 <malloc+0xfe>
+  ba:	88a50513          	addi	a0,a0,-1910 # 940 <malloc+0xfe>
   be:	00000097          	auipc	ra,0x0
-  c2:	6ee080e7          	jalr	1774(ra) # 7ac <printf>
+  c2:	6c6080e7          	jalr	1734(ra) # 784 <printf>
 }
   c6:	70e6                	ld	ra,120(sp)
   c8:	7446                	ld	s0,112(sp)
@@ -129,9 +129,9 @@ wc(int fd, char *name)
   e2:	8082                	ret
     printf("wc: read error\n");
   e4:	00001517          	auipc	a0,0x1
-  e8:	87450513          	addi	a0,a0,-1932 # 958 <malloc+0xee>
+  e8:	84c50513          	addi	a0,a0,-1972 # 930 <malloc+0xee>
   ec:	00000097          	auipc	ra,0x0
-  f0:	6c0080e7          	jalr	1728(ra) # 7ac <printf>
+  f0:	698080e7          	jalr	1688(ra) # 784 <printf>
     exit(1);
   f4:	4505                	li	a0,1
   f6:	00000097          	auipc	ra,0x0
@@ -194,8 +194,8 @@ main(int argc, char *argv[])
  156:	00000097          	auipc	ra,0x0
  15a:	2b6080e7          	jalr	694(ra) # 40c <exit>
     wc(0, "");
- 15e:	00001597          	auipc	a1,0x1
- 162:	81a58593          	addi	a1,a1,-2022 # 978 <malloc+0x10e>
+ 15e:	00000597          	auipc	a1,0x0
+ 162:	7f258593          	addi	a1,a1,2034 # 950 <malloc+0x10e>
  166:	4501                	li	a0,0
  168:	00000097          	auipc	ra,0x0
  16c:	e98080e7          	jalr	-360(ra) # 0 <wc>
@@ -205,10 +205,10 @@ main(int argc, char *argv[])
  176:	29a080e7          	jalr	666(ra) # 40c <exit>
       printf("wc: cannot open %s\n", argv[i]);
  17a:	608c                	ld	a1,0(s1)
- 17c:	00001517          	auipc	a0,0x1
- 180:	80450513          	addi	a0,a0,-2044 # 980 <malloc+0x116>
+ 17c:	00000517          	auipc	a0,0x0
+ 180:	7dc50513          	addi	a0,a0,2012 # 958 <malloc+0x116>
  184:	00000097          	auipc	ra,0x0
- 188:	628080e7          	jalr	1576(ra) # 7ac <printf>
+ 188:	600080e7          	jalr	1536(ra) # 784 <printf>
       exit(1);
  18c:	4505                	li	a0,1
  18e:	00000097          	auipc	ra,0x0
@@ -851,696 +851,646 @@ uptime:
  ret
  4aa:	8082                	ret
 
-00000000000004ac <pause_system>:
-.global pause_system
-pause_system:
- li a7, SYS_pause_system
- 4ac:	48d9                	li	a7,22
- ecall
- 4ae:	00000073          	ecall
- ret
- 4b2:	8082                	ret
-
-00000000000004b4 <kill_system>:
-.global kill_system
-kill_system:
- li a7, SYS_kill_system
- 4b4:	48dd                	li	a7,23
- ecall
- 4b6:	00000073          	ecall
- ret
- 4ba:	8082                	ret
-
-00000000000004bc <print_stats>:
-.global print_stats
-print_stats:
- li a7, SYS_print_stats
- 4bc:	48e1                	li	a7,24
- ecall
- 4be:	00000073          	ecall
- ret
- 4c2:	8082                	ret
-
-00000000000004c4 <get_cpu>:
-.global get_cpu
-get_cpu:
- li a7, SYS_get_cpu
- 4c4:	48e5                	li	a7,25
- ecall
- 4c6:	00000073          	ecall
- ret
- 4ca:	8082                	ret
-
-00000000000004cc <set_cpu>:
-.global set_cpu
-set_cpu:
- li a7, SYS_set_cpu
- 4cc:	48e9                	li	a7,26
- ecall
- 4ce:	00000073          	ecall
- ret
- 4d2:	8082                	ret
-
-00000000000004d4 <putc>:
+00000000000004ac <putc>:
 
 static char digits[] = "0123456789ABCDEF";
 
 static void
 putc(int fd, char c)
 {
- 4d4:	1101                	addi	sp,sp,-32
- 4d6:	ec06                	sd	ra,24(sp)
- 4d8:	e822                	sd	s0,16(sp)
- 4da:	1000                	addi	s0,sp,32
- 4dc:	feb407a3          	sb	a1,-17(s0)
+ 4ac:	1101                	addi	sp,sp,-32
+ 4ae:	ec06                	sd	ra,24(sp)
+ 4b0:	e822                	sd	s0,16(sp)
+ 4b2:	1000                	addi	s0,sp,32
+ 4b4:	feb407a3          	sb	a1,-17(s0)
   write(fd, &c, 1);
- 4e0:	4605                	li	a2,1
- 4e2:	fef40593          	addi	a1,s0,-17
- 4e6:	00000097          	auipc	ra,0x0
- 4ea:	f46080e7          	jalr	-186(ra) # 42c <write>
+ 4b8:	4605                	li	a2,1
+ 4ba:	fef40593          	addi	a1,s0,-17
+ 4be:	00000097          	auipc	ra,0x0
+ 4c2:	f6e080e7          	jalr	-146(ra) # 42c <write>
 }
- 4ee:	60e2                	ld	ra,24(sp)
- 4f0:	6442                	ld	s0,16(sp)
- 4f2:	6105                	addi	sp,sp,32
- 4f4:	8082                	ret
+ 4c6:	60e2                	ld	ra,24(sp)
+ 4c8:	6442                	ld	s0,16(sp)
+ 4ca:	6105                	addi	sp,sp,32
+ 4cc:	8082                	ret
 
-00000000000004f6 <printint>:
+00000000000004ce <printint>:
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 4f6:	7139                	addi	sp,sp,-64
- 4f8:	fc06                	sd	ra,56(sp)
- 4fa:	f822                	sd	s0,48(sp)
- 4fc:	f426                	sd	s1,40(sp)
- 4fe:	f04a                	sd	s2,32(sp)
- 500:	ec4e                	sd	s3,24(sp)
- 502:	0080                	addi	s0,sp,64
- 504:	84aa                	mv	s1,a0
+ 4ce:	7139                	addi	sp,sp,-64
+ 4d0:	fc06                	sd	ra,56(sp)
+ 4d2:	f822                	sd	s0,48(sp)
+ 4d4:	f426                	sd	s1,40(sp)
+ 4d6:	f04a                	sd	s2,32(sp)
+ 4d8:	ec4e                	sd	s3,24(sp)
+ 4da:	0080                	addi	s0,sp,64
+ 4dc:	84aa                	mv	s1,a0
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 506:	c299                	beqz	a3,50c <printint+0x16>
- 508:	0805c863          	bltz	a1,598 <printint+0xa2>
+ 4de:	c299                	beqz	a3,4e4 <printint+0x16>
+ 4e0:	0805c863          	bltz	a1,570 <printint+0xa2>
     neg = 1;
     x = -xx;
   } else {
     x = xx;
- 50c:	2581                	sext.w	a1,a1
+ 4e4:	2581                	sext.w	a1,a1
   neg = 0;
- 50e:	4881                	li	a7,0
- 510:	fc040693          	addi	a3,s0,-64
+ 4e6:	4881                	li	a7,0
+ 4e8:	fc040693          	addi	a3,s0,-64
   }
 
   i = 0;
- 514:	4701                	li	a4,0
+ 4ec:	4701                	li	a4,0
   do{
     buf[i++] = digits[x % base];
- 516:	2601                	sext.w	a2,a2
- 518:	00000517          	auipc	a0,0x0
- 51c:	48850513          	addi	a0,a0,1160 # 9a0 <digits>
- 520:	883a                	mv	a6,a4
- 522:	2705                	addiw	a4,a4,1
- 524:	02c5f7bb          	remuw	a5,a1,a2
- 528:	1782                	slli	a5,a5,0x20
- 52a:	9381                	srli	a5,a5,0x20
- 52c:	97aa                	add	a5,a5,a0
- 52e:	0007c783          	lbu	a5,0(a5)
- 532:	00f68023          	sb	a5,0(a3)
+ 4ee:	2601                	sext.w	a2,a2
+ 4f0:	00000517          	auipc	a0,0x0
+ 4f4:	48850513          	addi	a0,a0,1160 # 978 <digits>
+ 4f8:	883a                	mv	a6,a4
+ 4fa:	2705                	addiw	a4,a4,1
+ 4fc:	02c5f7bb          	remuw	a5,a1,a2
+ 500:	1782                	slli	a5,a5,0x20
+ 502:	9381                	srli	a5,a5,0x20
+ 504:	97aa                	add	a5,a5,a0
+ 506:	0007c783          	lbu	a5,0(a5)
+ 50a:	00f68023          	sb	a5,0(a3)
   }while((x /= base) != 0);
- 536:	0005879b          	sext.w	a5,a1
- 53a:	02c5d5bb          	divuw	a1,a1,a2
- 53e:	0685                	addi	a3,a3,1
- 540:	fec7f0e3          	bgeu	a5,a2,520 <printint+0x2a>
+ 50e:	0005879b          	sext.w	a5,a1
+ 512:	02c5d5bb          	divuw	a1,a1,a2
+ 516:	0685                	addi	a3,a3,1
+ 518:	fec7f0e3          	bgeu	a5,a2,4f8 <printint+0x2a>
   if(neg)
- 544:	00088b63          	beqz	a7,55a <printint+0x64>
+ 51c:	00088b63          	beqz	a7,532 <printint+0x64>
     buf[i++] = '-';
- 548:	fd040793          	addi	a5,s0,-48
- 54c:	973e                	add	a4,a4,a5
- 54e:	02d00793          	li	a5,45
- 552:	fef70823          	sb	a5,-16(a4)
- 556:	0028071b          	addiw	a4,a6,2
+ 520:	fd040793          	addi	a5,s0,-48
+ 524:	973e                	add	a4,a4,a5
+ 526:	02d00793          	li	a5,45
+ 52a:	fef70823          	sb	a5,-16(a4)
+ 52e:	0028071b          	addiw	a4,a6,2
 
   while(--i >= 0)
- 55a:	02e05863          	blez	a4,58a <printint+0x94>
- 55e:	fc040793          	addi	a5,s0,-64
- 562:	00e78933          	add	s2,a5,a4
- 566:	fff78993          	addi	s3,a5,-1
- 56a:	99ba                	add	s3,s3,a4
- 56c:	377d                	addiw	a4,a4,-1
- 56e:	1702                	slli	a4,a4,0x20
- 570:	9301                	srli	a4,a4,0x20
- 572:	40e989b3          	sub	s3,s3,a4
+ 532:	02e05863          	blez	a4,562 <printint+0x94>
+ 536:	fc040793          	addi	a5,s0,-64
+ 53a:	00e78933          	add	s2,a5,a4
+ 53e:	fff78993          	addi	s3,a5,-1
+ 542:	99ba                	add	s3,s3,a4
+ 544:	377d                	addiw	a4,a4,-1
+ 546:	1702                	slli	a4,a4,0x20
+ 548:	9301                	srli	a4,a4,0x20
+ 54a:	40e989b3          	sub	s3,s3,a4
     putc(fd, buf[i]);
- 576:	fff94583          	lbu	a1,-1(s2)
- 57a:	8526                	mv	a0,s1
- 57c:	00000097          	auipc	ra,0x0
- 580:	f58080e7          	jalr	-168(ra) # 4d4 <putc>
+ 54e:	fff94583          	lbu	a1,-1(s2)
+ 552:	8526                	mv	a0,s1
+ 554:	00000097          	auipc	ra,0x0
+ 558:	f58080e7          	jalr	-168(ra) # 4ac <putc>
   while(--i >= 0)
- 584:	197d                	addi	s2,s2,-1
- 586:	ff3918e3          	bne	s2,s3,576 <printint+0x80>
+ 55c:	197d                	addi	s2,s2,-1
+ 55e:	ff3918e3          	bne	s2,s3,54e <printint+0x80>
 }
- 58a:	70e2                	ld	ra,56(sp)
- 58c:	7442                	ld	s0,48(sp)
- 58e:	74a2                	ld	s1,40(sp)
- 590:	7902                	ld	s2,32(sp)
- 592:	69e2                	ld	s3,24(sp)
- 594:	6121                	addi	sp,sp,64
- 596:	8082                	ret
+ 562:	70e2                	ld	ra,56(sp)
+ 564:	7442                	ld	s0,48(sp)
+ 566:	74a2                	ld	s1,40(sp)
+ 568:	7902                	ld	s2,32(sp)
+ 56a:	69e2                	ld	s3,24(sp)
+ 56c:	6121                	addi	sp,sp,64
+ 56e:	8082                	ret
     x = -xx;
- 598:	40b005bb          	negw	a1,a1
+ 570:	40b005bb          	negw	a1,a1
     neg = 1;
- 59c:	4885                	li	a7,1
+ 574:	4885                	li	a7,1
     x = -xx;
- 59e:	bf8d                	j	510 <printint+0x1a>
+ 576:	bf8d                	j	4e8 <printint+0x1a>
 
-00000000000005a0 <vprintf>:
+0000000000000578 <vprintf>:
 }
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 vprintf(int fd, const char *fmt, va_list ap)
 {
- 5a0:	7119                	addi	sp,sp,-128
- 5a2:	fc86                	sd	ra,120(sp)
- 5a4:	f8a2                	sd	s0,112(sp)
- 5a6:	f4a6                	sd	s1,104(sp)
- 5a8:	f0ca                	sd	s2,96(sp)
- 5aa:	ecce                	sd	s3,88(sp)
- 5ac:	e8d2                	sd	s4,80(sp)
- 5ae:	e4d6                	sd	s5,72(sp)
- 5b0:	e0da                	sd	s6,64(sp)
- 5b2:	fc5e                	sd	s7,56(sp)
- 5b4:	f862                	sd	s8,48(sp)
- 5b6:	f466                	sd	s9,40(sp)
- 5b8:	f06a                	sd	s10,32(sp)
- 5ba:	ec6e                	sd	s11,24(sp)
- 5bc:	0100                	addi	s0,sp,128
+ 578:	7119                	addi	sp,sp,-128
+ 57a:	fc86                	sd	ra,120(sp)
+ 57c:	f8a2                	sd	s0,112(sp)
+ 57e:	f4a6                	sd	s1,104(sp)
+ 580:	f0ca                	sd	s2,96(sp)
+ 582:	ecce                	sd	s3,88(sp)
+ 584:	e8d2                	sd	s4,80(sp)
+ 586:	e4d6                	sd	s5,72(sp)
+ 588:	e0da                	sd	s6,64(sp)
+ 58a:	fc5e                	sd	s7,56(sp)
+ 58c:	f862                	sd	s8,48(sp)
+ 58e:	f466                	sd	s9,40(sp)
+ 590:	f06a                	sd	s10,32(sp)
+ 592:	ec6e                	sd	s11,24(sp)
+ 594:	0100                	addi	s0,sp,128
   char *s;
   int c, i, state;
 
   state = 0;
   for(i = 0; fmt[i]; i++){
- 5be:	0005c903          	lbu	s2,0(a1)
- 5c2:	18090f63          	beqz	s2,760 <vprintf+0x1c0>
- 5c6:	8aaa                	mv	s5,a0
- 5c8:	8b32                	mv	s6,a2
- 5ca:	00158493          	addi	s1,a1,1
+ 596:	0005c903          	lbu	s2,0(a1)
+ 59a:	18090f63          	beqz	s2,738 <vprintf+0x1c0>
+ 59e:	8aaa                	mv	s5,a0
+ 5a0:	8b32                	mv	s6,a2
+ 5a2:	00158493          	addi	s1,a1,1
   state = 0;
- 5ce:	4981                	li	s3,0
+ 5a6:	4981                	li	s3,0
       if(c == '%'){
         state = '%';
       } else {
         putc(fd, c);
       }
     } else if(state == '%'){
- 5d0:	02500a13          	li	s4,37
+ 5a8:	02500a13          	li	s4,37
       if(c == 'd'){
- 5d4:	06400c13          	li	s8,100
+ 5ac:	06400c13          	li	s8,100
         printint(fd, va_arg(ap, int), 10, 1);
       } else if(c == 'l') {
- 5d8:	06c00c93          	li	s9,108
+ 5b0:	06c00c93          	li	s9,108
         printint(fd, va_arg(ap, uint64), 10, 0);
       } else if(c == 'x') {
- 5dc:	07800d13          	li	s10,120
+ 5b4:	07800d13          	li	s10,120
         printint(fd, va_arg(ap, int), 16, 0);
       } else if(c == 'p') {
- 5e0:	07000d93          	li	s11,112
+ 5b8:	07000d93          	li	s11,112
     putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
- 5e4:	00000b97          	auipc	s7,0x0
- 5e8:	3bcb8b93          	addi	s7,s7,956 # 9a0 <digits>
- 5ec:	a839                	j	60a <vprintf+0x6a>
+ 5bc:	00000b97          	auipc	s7,0x0
+ 5c0:	3bcb8b93          	addi	s7,s7,956 # 978 <digits>
+ 5c4:	a839                	j	5e2 <vprintf+0x6a>
         putc(fd, c);
- 5ee:	85ca                	mv	a1,s2
- 5f0:	8556                	mv	a0,s5
- 5f2:	00000097          	auipc	ra,0x0
- 5f6:	ee2080e7          	jalr	-286(ra) # 4d4 <putc>
- 5fa:	a019                	j	600 <vprintf+0x60>
+ 5c6:	85ca                	mv	a1,s2
+ 5c8:	8556                	mv	a0,s5
+ 5ca:	00000097          	auipc	ra,0x0
+ 5ce:	ee2080e7          	jalr	-286(ra) # 4ac <putc>
+ 5d2:	a019                	j	5d8 <vprintf+0x60>
     } else if(state == '%'){
- 5fc:	01498f63          	beq	s3,s4,61a <vprintf+0x7a>
+ 5d4:	01498f63          	beq	s3,s4,5f2 <vprintf+0x7a>
   for(i = 0; fmt[i]; i++){
- 600:	0485                	addi	s1,s1,1
- 602:	fff4c903          	lbu	s2,-1(s1)
- 606:	14090d63          	beqz	s2,760 <vprintf+0x1c0>
+ 5d8:	0485                	addi	s1,s1,1
+ 5da:	fff4c903          	lbu	s2,-1(s1)
+ 5de:	14090d63          	beqz	s2,738 <vprintf+0x1c0>
     c = fmt[i] & 0xff;
- 60a:	0009079b          	sext.w	a5,s2
+ 5e2:	0009079b          	sext.w	a5,s2
     if(state == 0){
- 60e:	fe0997e3          	bnez	s3,5fc <vprintf+0x5c>
+ 5e6:	fe0997e3          	bnez	s3,5d4 <vprintf+0x5c>
       if(c == '%'){
- 612:	fd479ee3          	bne	a5,s4,5ee <vprintf+0x4e>
+ 5ea:	fd479ee3          	bne	a5,s4,5c6 <vprintf+0x4e>
         state = '%';
- 616:	89be                	mv	s3,a5
- 618:	b7e5                	j	600 <vprintf+0x60>
+ 5ee:	89be                	mv	s3,a5
+ 5f0:	b7e5                	j	5d8 <vprintf+0x60>
       if(c == 'd'){
- 61a:	05878063          	beq	a5,s8,65a <vprintf+0xba>
+ 5f2:	05878063          	beq	a5,s8,632 <vprintf+0xba>
       } else if(c == 'l') {
- 61e:	05978c63          	beq	a5,s9,676 <vprintf+0xd6>
+ 5f6:	05978c63          	beq	a5,s9,64e <vprintf+0xd6>
       } else if(c == 'x') {
- 622:	07a78863          	beq	a5,s10,692 <vprintf+0xf2>
+ 5fa:	07a78863          	beq	a5,s10,66a <vprintf+0xf2>
       } else if(c == 'p') {
- 626:	09b78463          	beq	a5,s11,6ae <vprintf+0x10e>
+ 5fe:	09b78463          	beq	a5,s11,686 <vprintf+0x10e>
         printptr(fd, va_arg(ap, uint64));
       } else if(c == 's'){
- 62a:	07300713          	li	a4,115
- 62e:	0ce78663          	beq	a5,a4,6fa <vprintf+0x15a>
+ 602:	07300713          	li	a4,115
+ 606:	0ce78663          	beq	a5,a4,6d2 <vprintf+0x15a>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 632:	06300713          	li	a4,99
- 636:	0ee78e63          	beq	a5,a4,732 <vprintf+0x192>
+ 60a:	06300713          	li	a4,99
+ 60e:	0ee78e63          	beq	a5,a4,70a <vprintf+0x192>
         putc(fd, va_arg(ap, uint));
       } else if(c == '%'){
- 63a:	11478863          	beq	a5,s4,74a <vprintf+0x1aa>
+ 612:	11478863          	beq	a5,s4,722 <vprintf+0x1aa>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
- 63e:	85d2                	mv	a1,s4
- 640:	8556                	mv	a0,s5
- 642:	00000097          	auipc	ra,0x0
- 646:	e92080e7          	jalr	-366(ra) # 4d4 <putc>
+ 616:	85d2                	mv	a1,s4
+ 618:	8556                	mv	a0,s5
+ 61a:	00000097          	auipc	ra,0x0
+ 61e:	e92080e7          	jalr	-366(ra) # 4ac <putc>
         putc(fd, c);
- 64a:	85ca                	mv	a1,s2
- 64c:	8556                	mv	a0,s5
- 64e:	00000097          	auipc	ra,0x0
- 652:	e86080e7          	jalr	-378(ra) # 4d4 <putc>
+ 622:	85ca                	mv	a1,s2
+ 624:	8556                	mv	a0,s5
+ 626:	00000097          	auipc	ra,0x0
+ 62a:	e86080e7          	jalr	-378(ra) # 4ac <putc>
       }
       state = 0;
- 656:	4981                	li	s3,0
- 658:	b765                	j	600 <vprintf+0x60>
+ 62e:	4981                	li	s3,0
+ 630:	b765                	j	5d8 <vprintf+0x60>
         printint(fd, va_arg(ap, int), 10, 1);
- 65a:	008b0913          	addi	s2,s6,8
- 65e:	4685                	li	a3,1
- 660:	4629                	li	a2,10
- 662:	000b2583          	lw	a1,0(s6)
- 666:	8556                	mv	a0,s5
- 668:	00000097          	auipc	ra,0x0
- 66c:	e8e080e7          	jalr	-370(ra) # 4f6 <printint>
- 670:	8b4a                	mv	s6,s2
+ 632:	008b0913          	addi	s2,s6,8
+ 636:	4685                	li	a3,1
+ 638:	4629                	li	a2,10
+ 63a:	000b2583          	lw	a1,0(s6)
+ 63e:	8556                	mv	a0,s5
+ 640:	00000097          	auipc	ra,0x0
+ 644:	e8e080e7          	jalr	-370(ra) # 4ce <printint>
+ 648:	8b4a                	mv	s6,s2
       state = 0;
- 672:	4981                	li	s3,0
- 674:	b771                	j	600 <vprintf+0x60>
+ 64a:	4981                	li	s3,0
+ 64c:	b771                	j	5d8 <vprintf+0x60>
         printint(fd, va_arg(ap, uint64), 10, 0);
- 676:	008b0913          	addi	s2,s6,8
- 67a:	4681                	li	a3,0
- 67c:	4629                	li	a2,10
- 67e:	000b2583          	lw	a1,0(s6)
- 682:	8556                	mv	a0,s5
- 684:	00000097          	auipc	ra,0x0
- 688:	e72080e7          	jalr	-398(ra) # 4f6 <printint>
- 68c:	8b4a                	mv	s6,s2
+ 64e:	008b0913          	addi	s2,s6,8
+ 652:	4681                	li	a3,0
+ 654:	4629                	li	a2,10
+ 656:	000b2583          	lw	a1,0(s6)
+ 65a:	8556                	mv	a0,s5
+ 65c:	00000097          	auipc	ra,0x0
+ 660:	e72080e7          	jalr	-398(ra) # 4ce <printint>
+ 664:	8b4a                	mv	s6,s2
       state = 0;
- 68e:	4981                	li	s3,0
- 690:	bf85                	j	600 <vprintf+0x60>
+ 666:	4981                	li	s3,0
+ 668:	bf85                	j	5d8 <vprintf+0x60>
         printint(fd, va_arg(ap, int), 16, 0);
- 692:	008b0913          	addi	s2,s6,8
- 696:	4681                	li	a3,0
- 698:	4641                	li	a2,16
- 69a:	000b2583          	lw	a1,0(s6)
- 69e:	8556                	mv	a0,s5
- 6a0:	00000097          	auipc	ra,0x0
- 6a4:	e56080e7          	jalr	-426(ra) # 4f6 <printint>
- 6a8:	8b4a                	mv	s6,s2
+ 66a:	008b0913          	addi	s2,s6,8
+ 66e:	4681                	li	a3,0
+ 670:	4641                	li	a2,16
+ 672:	000b2583          	lw	a1,0(s6)
+ 676:	8556                	mv	a0,s5
+ 678:	00000097          	auipc	ra,0x0
+ 67c:	e56080e7          	jalr	-426(ra) # 4ce <printint>
+ 680:	8b4a                	mv	s6,s2
       state = 0;
- 6aa:	4981                	li	s3,0
- 6ac:	bf91                	j	600 <vprintf+0x60>
+ 682:	4981                	li	s3,0
+ 684:	bf91                	j	5d8 <vprintf+0x60>
         printptr(fd, va_arg(ap, uint64));
- 6ae:	008b0793          	addi	a5,s6,8
- 6b2:	f8f43423          	sd	a5,-120(s0)
- 6b6:	000b3983          	ld	s3,0(s6)
+ 686:	008b0793          	addi	a5,s6,8
+ 68a:	f8f43423          	sd	a5,-120(s0)
+ 68e:	000b3983          	ld	s3,0(s6)
   putc(fd, '0');
- 6ba:	03000593          	li	a1,48
- 6be:	8556                	mv	a0,s5
- 6c0:	00000097          	auipc	ra,0x0
- 6c4:	e14080e7          	jalr	-492(ra) # 4d4 <putc>
+ 692:	03000593          	li	a1,48
+ 696:	8556                	mv	a0,s5
+ 698:	00000097          	auipc	ra,0x0
+ 69c:	e14080e7          	jalr	-492(ra) # 4ac <putc>
   putc(fd, 'x');
- 6c8:	85ea                	mv	a1,s10
- 6ca:	8556                	mv	a0,s5
- 6cc:	00000097          	auipc	ra,0x0
- 6d0:	e08080e7          	jalr	-504(ra) # 4d4 <putc>
- 6d4:	4941                	li	s2,16
+ 6a0:	85ea                	mv	a1,s10
+ 6a2:	8556                	mv	a0,s5
+ 6a4:	00000097          	auipc	ra,0x0
+ 6a8:	e08080e7          	jalr	-504(ra) # 4ac <putc>
+ 6ac:	4941                	li	s2,16
     putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
- 6d6:	03c9d793          	srli	a5,s3,0x3c
- 6da:	97de                	add	a5,a5,s7
- 6dc:	0007c583          	lbu	a1,0(a5)
- 6e0:	8556                	mv	a0,s5
- 6e2:	00000097          	auipc	ra,0x0
- 6e6:	df2080e7          	jalr	-526(ra) # 4d4 <putc>
+ 6ae:	03c9d793          	srli	a5,s3,0x3c
+ 6b2:	97de                	add	a5,a5,s7
+ 6b4:	0007c583          	lbu	a1,0(a5)
+ 6b8:	8556                	mv	a0,s5
+ 6ba:	00000097          	auipc	ra,0x0
+ 6be:	df2080e7          	jalr	-526(ra) # 4ac <putc>
   for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
- 6ea:	0992                	slli	s3,s3,0x4
- 6ec:	397d                	addiw	s2,s2,-1
- 6ee:	fe0914e3          	bnez	s2,6d6 <vprintf+0x136>
+ 6c2:	0992                	slli	s3,s3,0x4
+ 6c4:	397d                	addiw	s2,s2,-1
+ 6c6:	fe0914e3          	bnez	s2,6ae <vprintf+0x136>
         printptr(fd, va_arg(ap, uint64));
- 6f2:	f8843b03          	ld	s6,-120(s0)
+ 6ca:	f8843b03          	ld	s6,-120(s0)
       state = 0;
- 6f6:	4981                	li	s3,0
- 6f8:	b721                	j	600 <vprintf+0x60>
+ 6ce:	4981                	li	s3,0
+ 6d0:	b721                	j	5d8 <vprintf+0x60>
         s = va_arg(ap, char*);
- 6fa:	008b0993          	addi	s3,s6,8
- 6fe:	000b3903          	ld	s2,0(s6)
+ 6d2:	008b0993          	addi	s3,s6,8
+ 6d6:	000b3903          	ld	s2,0(s6)
         if(s == 0)
- 702:	02090163          	beqz	s2,724 <vprintf+0x184>
+ 6da:	02090163          	beqz	s2,6fc <vprintf+0x184>
         while(*s != 0){
- 706:	00094583          	lbu	a1,0(s2)
- 70a:	c9a1                	beqz	a1,75a <vprintf+0x1ba>
+ 6de:	00094583          	lbu	a1,0(s2)
+ 6e2:	c9a1                	beqz	a1,732 <vprintf+0x1ba>
           putc(fd, *s);
- 70c:	8556                	mv	a0,s5
- 70e:	00000097          	auipc	ra,0x0
- 712:	dc6080e7          	jalr	-570(ra) # 4d4 <putc>
+ 6e4:	8556                	mv	a0,s5
+ 6e6:	00000097          	auipc	ra,0x0
+ 6ea:	dc6080e7          	jalr	-570(ra) # 4ac <putc>
           s++;
- 716:	0905                	addi	s2,s2,1
+ 6ee:	0905                	addi	s2,s2,1
         while(*s != 0){
- 718:	00094583          	lbu	a1,0(s2)
- 71c:	f9e5                	bnez	a1,70c <vprintf+0x16c>
+ 6f0:	00094583          	lbu	a1,0(s2)
+ 6f4:	f9e5                	bnez	a1,6e4 <vprintf+0x16c>
         s = va_arg(ap, char*);
- 71e:	8b4e                	mv	s6,s3
+ 6f6:	8b4e                	mv	s6,s3
       state = 0;
- 720:	4981                	li	s3,0
- 722:	bdf9                	j	600 <vprintf+0x60>
+ 6f8:	4981                	li	s3,0
+ 6fa:	bdf9                	j	5d8 <vprintf+0x60>
           s = "(null)";
- 724:	00000917          	auipc	s2,0x0
- 728:	27490913          	addi	s2,s2,628 # 998 <malloc+0x12e>
+ 6fc:	00000917          	auipc	s2,0x0
+ 700:	27490913          	addi	s2,s2,628 # 970 <malloc+0x12e>
         while(*s != 0){
- 72c:	02800593          	li	a1,40
- 730:	bff1                	j	70c <vprintf+0x16c>
+ 704:	02800593          	li	a1,40
+ 708:	bff1                	j	6e4 <vprintf+0x16c>
         putc(fd, va_arg(ap, uint));
- 732:	008b0913          	addi	s2,s6,8
- 736:	000b4583          	lbu	a1,0(s6)
- 73a:	8556                	mv	a0,s5
- 73c:	00000097          	auipc	ra,0x0
- 740:	d98080e7          	jalr	-616(ra) # 4d4 <putc>
- 744:	8b4a                	mv	s6,s2
+ 70a:	008b0913          	addi	s2,s6,8
+ 70e:	000b4583          	lbu	a1,0(s6)
+ 712:	8556                	mv	a0,s5
+ 714:	00000097          	auipc	ra,0x0
+ 718:	d98080e7          	jalr	-616(ra) # 4ac <putc>
+ 71c:	8b4a                	mv	s6,s2
       state = 0;
- 746:	4981                	li	s3,0
- 748:	bd65                	j	600 <vprintf+0x60>
+ 71e:	4981                	li	s3,0
+ 720:	bd65                	j	5d8 <vprintf+0x60>
         putc(fd, c);
- 74a:	85d2                	mv	a1,s4
- 74c:	8556                	mv	a0,s5
- 74e:	00000097          	auipc	ra,0x0
- 752:	d86080e7          	jalr	-634(ra) # 4d4 <putc>
+ 722:	85d2                	mv	a1,s4
+ 724:	8556                	mv	a0,s5
+ 726:	00000097          	auipc	ra,0x0
+ 72a:	d86080e7          	jalr	-634(ra) # 4ac <putc>
       state = 0;
- 756:	4981                	li	s3,0
- 758:	b565                	j	600 <vprintf+0x60>
+ 72e:	4981                	li	s3,0
+ 730:	b565                	j	5d8 <vprintf+0x60>
         s = va_arg(ap, char*);
- 75a:	8b4e                	mv	s6,s3
+ 732:	8b4e                	mv	s6,s3
       state = 0;
- 75c:	4981                	li	s3,0
- 75e:	b54d                	j	600 <vprintf+0x60>
+ 734:	4981                	li	s3,0
+ 736:	b54d                	j	5d8 <vprintf+0x60>
     }
   }
 }
- 760:	70e6                	ld	ra,120(sp)
- 762:	7446                	ld	s0,112(sp)
- 764:	74a6                	ld	s1,104(sp)
- 766:	7906                	ld	s2,96(sp)
- 768:	69e6                	ld	s3,88(sp)
- 76a:	6a46                	ld	s4,80(sp)
- 76c:	6aa6                	ld	s5,72(sp)
- 76e:	6b06                	ld	s6,64(sp)
- 770:	7be2                	ld	s7,56(sp)
- 772:	7c42                	ld	s8,48(sp)
- 774:	7ca2                	ld	s9,40(sp)
- 776:	7d02                	ld	s10,32(sp)
- 778:	6de2                	ld	s11,24(sp)
- 77a:	6109                	addi	sp,sp,128
- 77c:	8082                	ret
-
-000000000000077e <fprintf>:
+ 738:	70e6                	ld	ra,120(sp)
+ 73a:	7446                	ld	s0,112(sp)
+ 73c:	74a6                	ld	s1,104(sp)
+ 73e:	7906                	ld	s2,96(sp)
+ 740:	69e6                	ld	s3,88(sp)
+ 742:	6a46                	ld	s4,80(sp)
+ 744:	6aa6                	ld	s5,72(sp)
+ 746:	6b06                	ld	s6,64(sp)
+ 748:	7be2                	ld	s7,56(sp)
+ 74a:	7c42                	ld	s8,48(sp)
+ 74c:	7ca2                	ld	s9,40(sp)
+ 74e:	7d02                	ld	s10,32(sp)
+ 750:	6de2                	ld	s11,24(sp)
+ 752:	6109                	addi	sp,sp,128
+ 754:	8082                	ret
+
+0000000000000756 <fprintf>:
 
 void
 fprintf(int fd, const char *fmt, ...)
 {
- 77e:	715d                	addi	sp,sp,-80
- 780:	ec06                	sd	ra,24(sp)
- 782:	e822                	sd	s0,16(sp)
- 784:	1000                	addi	s0,sp,32
- 786:	e010                	sd	a2,0(s0)
- 788:	e414                	sd	a3,8(s0)
- 78a:	e818                	sd	a4,16(s0)
- 78c:	ec1c                	sd	a5,24(s0)
- 78e:	03043023          	sd	a6,32(s0)
- 792:	03143423          	sd	a7,40(s0)
+ 756:	715d                	addi	sp,sp,-80
+ 758:	ec06                	sd	ra,24(sp)
+ 75a:	e822                	sd	s0,16(sp)
+ 75c:	1000                	addi	s0,sp,32
+ 75e:	e010                	sd	a2,0(s0)
+ 760:	e414                	sd	a3,8(s0)
+ 762:	e818                	sd	a4,16(s0)
+ 764:	ec1c                	sd	a5,24(s0)
+ 766:	03043023          	sd	a6,32(s0)
+ 76a:	03143423          	sd	a7,40(s0)
   va_list ap;
 
   va_start(ap, fmt);
- 796:	fe843423          	sd	s0,-24(s0)
+ 76e:	fe843423          	sd	s0,-24(s0)
   vprintf(fd, fmt, ap);
- 79a:	8622                	mv	a2,s0
- 79c:	00000097          	auipc	ra,0x0
- 7a0:	e04080e7          	jalr	-508(ra) # 5a0 <vprintf>
+ 772:	8622                	mv	a2,s0
+ 774:	00000097          	auipc	ra,0x0
+ 778:	e04080e7          	jalr	-508(ra) # 578 <vprintf>
 }
- 7a4:	60e2                	ld	ra,24(sp)
- 7a6:	6442                	ld	s0,16(sp)
- 7a8:	6161                	addi	sp,sp,80
- 7aa:	8082                	ret
+ 77c:	60e2                	ld	ra,24(sp)
+ 77e:	6442                	ld	s0,16(sp)
+ 780:	6161                	addi	sp,sp,80
+ 782:	8082                	ret
 
-00000000000007ac <printf>:
+0000000000000784 <printf>:
 
 void
 printf(const char *fmt, ...)
 {
- 7ac:	711d                	addi	sp,sp,-96
- 7ae:	ec06                	sd	ra,24(sp)
- 7b0:	e822                	sd	s0,16(sp)
- 7b2:	1000                	addi	s0,sp,32
- 7b4:	e40c                	sd	a1,8(s0)
- 7b6:	e810                	sd	a2,16(s0)
- 7b8:	ec14                	sd	a3,24(s0)
- 7ba:	f018                	sd	a4,32(s0)
- 7bc:	f41c                	sd	a5,40(s0)
- 7be:	03043823          	sd	a6,48(s0)
- 7c2:	03143c23          	sd	a7,56(s0)
+ 784:	711d                	addi	sp,sp,-96
+ 786:	ec06                	sd	ra,24(sp)
+ 788:	e822                	sd	s0,16(sp)
+ 78a:	1000                	addi	s0,sp,32
+ 78c:	e40c                	sd	a1,8(s0)
+ 78e:	e810                	sd	a2,16(s0)
+ 790:	ec14                	sd	a3,24(s0)
+ 792:	f018                	sd	a4,32(s0)
+ 794:	f41c                	sd	a5,40(s0)
+ 796:	03043823          	sd	a6,48(s0)
+ 79a:	03143c23          	sd	a7,56(s0)
   va_list ap;
 
   va_start(ap, fmt);
- 7c6:	00840613          	addi	a2,s0,8
- 7ca:	fec43423          	sd	a2,-24(s0)
+ 79e:	00840613          	addi	a2,s0,8
+ 7a2:	fec43423          	sd	a2,-24(s0)
   vprintf(1, fmt, ap);
- 7ce:	85aa                	mv	a1,a0
- 7d0:	4505                	li	a0,1
- 7d2:	00000097          	auipc	ra,0x0
- 7d6:	dce080e7          	jalr	-562(ra) # 5a0 <vprintf>
+ 7a6:	85aa                	mv	a1,a0
+ 7a8:	4505                	li	a0,1
+ 7aa:	00000097          	auipc	ra,0x0
+ 7ae:	dce080e7          	jalr	-562(ra) # 578 <vprintf>
 }
- 7da:	60e2                	ld	ra,24(sp)
- 7dc:	6442                	ld	s0,16(sp)
- 7de:	6125                	addi	sp,sp,96
- 7e0:	8082                	ret
+ 7b2:	60e2                	ld	ra,24(sp)
+ 7b4:	6442                	ld	s0,16(sp)
+ 7b6:	6125                	addi	sp,sp,96
+ 7b8:	8082                	ret
 
-00000000000007e2 <free>:
+00000000000007ba <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 7e2:	1141                	addi	sp,sp,-16
- 7e4:	e422                	sd	s0,8(sp)
- 7e6:	0800                	addi	s0,sp,16
+ 7ba:	1141                	addi	sp,sp,-16
+ 7bc:	e422                	sd	s0,8(sp)
+ 7be:	0800                	addi	s0,sp,16
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
- 7e8:	ff050693          	addi	a3,a0,-16
+ 7c0:	ff050693          	addi	a3,a0,-16
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 7ec:	00000797          	auipc	a5,0x0
- 7f0:	1cc7b783          	ld	a5,460(a5) # 9b8 <freep>
- 7f4:	a805                	j	824 <free+0x42>
+ 7c4:	00000797          	auipc	a5,0x0
+ 7c8:	1cc7b783          	ld	a5,460(a5) # 990 <freep>
+ 7cc:	a805                	j	7fc <free+0x42>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
       break;
   if(bp + bp->s.size == p->s.ptr){
     bp->s.size += p->s.ptr->s.size;
- 7f6:	4618                	lw	a4,8(a2)
- 7f8:	9db9                	addw	a1,a1,a4
- 7fa:	feb52c23          	sw	a1,-8(a0)
+ 7ce:	4618                	lw	a4,8(a2)
+ 7d0:	9db9                	addw	a1,a1,a4
+ 7d2:	feb52c23          	sw	a1,-8(a0)
     bp->s.ptr = p->s.ptr->s.ptr;
- 7fe:	6398                	ld	a4,0(a5)
- 800:	6318                	ld	a4,0(a4)
- 802:	fee53823          	sd	a4,-16(a0)
- 806:	a091                	j	84a <free+0x68>
+ 7d6:	6398                	ld	a4,0(a5)
+ 7d8:	6318                	ld	a4,0(a4)
+ 7da:	fee53823          	sd	a4,-16(a0)
+ 7de:	a091                	j	822 <free+0x68>
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
     p->s.size += bp->s.size;
- 808:	ff852703          	lw	a4,-8(a0)
- 80c:	9e39                	addw	a2,a2,a4
- 80e:	c790                	sw	a2,8(a5)
+ 7e0:	ff852703          	lw	a4,-8(a0)
+ 7e4:	9e39                	addw	a2,a2,a4
+ 7e6:	c790                	sw	a2,8(a5)
     p->s.ptr = bp->s.ptr;
- 810:	ff053703          	ld	a4,-16(a0)
- 814:	e398                	sd	a4,0(a5)
- 816:	a099                	j	85c <free+0x7a>
+ 7e8:	ff053703          	ld	a4,-16(a0)
+ 7ec:	e398                	sd	a4,0(a5)
+ 7ee:	a099                	j	834 <free+0x7a>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 818:	6398                	ld	a4,0(a5)
- 81a:	00e7e463          	bltu	a5,a4,822 <free+0x40>
- 81e:	00e6ea63          	bltu	a3,a4,832 <free+0x50>
+ 7f0:	6398                	ld	a4,0(a5)
+ 7f2:	00e7e463          	bltu	a5,a4,7fa <free+0x40>
+ 7f6:	00e6ea63          	bltu	a3,a4,80a <free+0x50>
 {
- 822:	87ba                	mv	a5,a4
+ 7fa:	87ba                	mv	a5,a4
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 824:	fed7fae3          	bgeu	a5,a3,818 <free+0x36>
- 828:	6398                	ld	a4,0(a5)
- 82a:	00e6e463          	bltu	a3,a4,832 <free+0x50>
+ 7fc:	fed7fae3          	bgeu	a5,a3,7f0 <free+0x36>
+ 800:	6398                	ld	a4,0(a5)
+ 802:	00e6e463          	bltu	a3,a4,80a <free+0x50>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 82e:	fee7eae3          	bltu	a5,a4,822 <free+0x40>
+ 806:	fee7eae3          	bltu	a5,a4,7fa <free+0x40>
   if(bp + bp->s.size == p->s.ptr){
- 832:	ff852583          	lw	a1,-8(a0)
- 836:	6390                	ld	a2,0(a5)
- 838:	02059713          	slli	a4,a1,0x20
- 83c:	9301                	srli	a4,a4,0x20
- 83e:	0712                	slli	a4,a4,0x4
- 840:	9736                	add	a4,a4,a3
- 842:	fae60ae3          	beq	a2,a4,7f6 <free+0x14>
+ 80a:	ff852583          	lw	a1,-8(a0)
+ 80e:	6390                	ld	a2,0(a5)
+ 810:	02059713          	slli	a4,a1,0x20
+ 814:	9301                	srli	a4,a4,0x20
+ 816:	0712                	slli	a4,a4,0x4
+ 818:	9736                	add	a4,a4,a3
+ 81a:	fae60ae3          	beq	a2,a4,7ce <free+0x14>
     bp->s.ptr = p->s.ptr;
- 846:	fec53823          	sd	a2,-16(a0)
+ 81e:	fec53823          	sd	a2,-16(a0)
   if(p + p->s.size == bp){
- 84a:	4790                	lw	a2,8(a5)
- 84c:	02061713          	slli	a4,a2,0x20
- 850:	9301                	srli	a4,a4,0x20
- 852:	0712                	slli	a4,a4,0x4
- 854:	973e                	add	a4,a4,a5
- 856:	fae689e3          	beq	a3,a4,808 <free+0x26>
+ 822:	4790                	lw	a2,8(a5)
+ 824:	02061713          	slli	a4,a2,0x20
+ 828:	9301                	srli	a4,a4,0x20
+ 82a:	0712                	slli	a4,a4,0x4
+ 82c:	973e                	add	a4,a4,a5
+ 82e:	fae689e3          	beq	a3,a4,7e0 <free+0x26>
   } else
     p->s.ptr = bp;
- 85a:	e394                	sd	a3,0(a5)
+ 832:	e394                	sd	a3,0(a5)
   freep = p;
- 85c:	00000717          	auipc	a4,0x0
- 860:	14f73e23          	sd	a5,348(a4) # 9b8 <freep>
+ 834:	00000717          	auipc	a4,0x0
+ 838:	14f73e23          	sd	a5,348(a4) # 990 <freep>
 }
- 864:	6422                	ld	s0,8(sp)
- 866:	0141                	addi	sp,sp,16
- 868:	8082                	ret
+ 83c:	6422                	ld	s0,8(sp)
+ 83e:	0141                	addi	sp,sp,16
+ 840:	8082                	ret
 
-000000000000086a <malloc>:
+0000000000000842 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 86a:	7139                	addi	sp,sp,-64
- 86c:	fc06                	sd	ra,56(sp)
- 86e:	f822                	sd	s0,48(sp)
- 870:	f426                	sd	s1,40(sp)
- 872:	f04a                	sd	s2,32(sp)
- 874:	ec4e                	sd	s3,24(sp)
- 876:	e852                	sd	s4,16(sp)
- 878:	e456                	sd	s5,8(sp)
- 87a:	e05a                	sd	s6,0(sp)
- 87c:	0080                	addi	s0,sp,64
+ 842:	7139                	addi	sp,sp,-64
+ 844:	fc06                	sd	ra,56(sp)
+ 846:	f822                	sd	s0,48(sp)
+ 848:	f426                	sd	s1,40(sp)
+ 84a:	f04a                	sd	s2,32(sp)
+ 84c:	ec4e                	sd	s3,24(sp)
+ 84e:	e852                	sd	s4,16(sp)
+ 850:	e456                	sd	s5,8(sp)
+ 852:	e05a                	sd	s6,0(sp)
+ 854:	0080                	addi	s0,sp,64
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 87e:	02051493          	slli	s1,a0,0x20
- 882:	9081                	srli	s1,s1,0x20
- 884:	04bd                	addi	s1,s1,15
- 886:	8091                	srli	s1,s1,0x4
- 888:	0014899b          	addiw	s3,s1,1
- 88c:	0485                	addi	s1,s1,1
+ 856:	02051493          	slli	s1,a0,0x20
+ 85a:	9081                	srli	s1,s1,0x20
+ 85c:	04bd                	addi	s1,s1,15
+ 85e:	8091                	srli	s1,s1,0x4
+ 860:	0014899b          	addiw	s3,s1,1
+ 864:	0485                	addi	s1,s1,1
   if((prevp = freep) == 0){
- 88e:	00000517          	auipc	a0,0x0
- 892:	12a53503          	ld	a0,298(a0) # 9b8 <freep>
- 896:	c515                	beqz	a0,8c2 <malloc+0x58>
+ 866:	00000517          	auipc	a0,0x0
+ 86a:	12a53503          	ld	a0,298(a0) # 990 <freep>
+ 86e:	c515                	beqz	a0,89a <malloc+0x58>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 898:	611c                	ld	a5,0(a0)
+ 870:	611c                	ld	a5,0(a0)
     if(p->s.size >= nunits){
- 89a:	4798                	lw	a4,8(a5)
- 89c:	02977f63          	bgeu	a4,s1,8da <malloc+0x70>
- 8a0:	8a4e                	mv	s4,s3
- 8a2:	0009871b          	sext.w	a4,s3
- 8a6:	6685                	lui	a3,0x1
- 8a8:	00d77363          	bgeu	a4,a3,8ae <malloc+0x44>
- 8ac:	6a05                	lui	s4,0x1
- 8ae:	000a0b1b          	sext.w	s6,s4
+ 872:	4798                	lw	a4,8(a5)
+ 874:	02977f63          	bgeu	a4,s1,8b2 <malloc+0x70>
+ 878:	8a4e                	mv	s4,s3
+ 87a:	0009871b          	sext.w	a4,s3
+ 87e:	6685                	lui	a3,0x1
+ 880:	00d77363          	bgeu	a4,a3,886 <malloc+0x44>
+ 884:	6a05                	lui	s4,0x1
+ 886:	000a0b1b          	sext.w	s6,s4
   p = sbrk(nu * sizeof(Header));
- 8b2:	004a1a1b          	slliw	s4,s4,0x4
+ 88a:	004a1a1b          	slliw	s4,s4,0x4
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 8b6:	00000917          	auipc	s2,0x0
- 8ba:	10290913          	addi	s2,s2,258 # 9b8 <freep>
+ 88e:	00000917          	auipc	s2,0x0
+ 892:	10290913          	addi	s2,s2,258 # 990 <freep>
   if(p == (char*)-1)
- 8be:	5afd                	li	s5,-1
- 8c0:	a88d                	j	932 <malloc+0xc8>
+ 896:	5afd                	li	s5,-1
+ 898:	a88d                	j	90a <malloc+0xc8>
     base.s.ptr = freep = prevp = &base;
- 8c2:	00000797          	auipc	a5,0x0
- 8c6:	2fe78793          	addi	a5,a5,766 # bc0 <base>
- 8ca:	00000717          	auipc	a4,0x0
- 8ce:	0ef73723          	sd	a5,238(a4) # 9b8 <freep>
- 8d2:	e39c                	sd	a5,0(a5)
+ 89a:	00000797          	auipc	a5,0x0
+ 89e:	2fe78793          	addi	a5,a5,766 # b98 <base>
+ 8a2:	00000717          	auipc	a4,0x0
+ 8a6:	0ef73723          	sd	a5,238(a4) # 990 <freep>
+ 8aa:	e39c                	sd	a5,0(a5)
     base.s.size = 0;
- 8d4:	0007a423          	sw	zero,8(a5)
+ 8ac:	0007a423          	sw	zero,8(a5)
     if(p->s.size >= nunits){
- 8d8:	b7e1                	j	8a0 <malloc+0x36>
+ 8b0:	b7e1                	j	878 <malloc+0x36>
       if(p->s.size == nunits)
- 8da:	02e48b63          	beq	s1,a4,910 <malloc+0xa6>
+ 8b2:	02e48b63          	beq	s1,a4,8e8 <malloc+0xa6>
         p->s.size -= nunits;
- 8de:	4137073b          	subw	a4,a4,s3
- 8e2:	c798                	sw	a4,8(a5)
+ 8b6:	4137073b          	subw	a4,a4,s3
+ 8ba:	c798                	sw	a4,8(a5)
         p += p->s.size;
- 8e4:	1702                	slli	a4,a4,0x20
- 8e6:	9301                	srli	a4,a4,0x20
- 8e8:	0712                	slli	a4,a4,0x4
- 8ea:	97ba                	add	a5,a5,a4
+ 8bc:	1702                	slli	a4,a4,0x20
+ 8be:	9301                	srli	a4,a4,0x20
+ 8c0:	0712                	slli	a4,a4,0x4
+ 8c2:	97ba                	add	a5,a5,a4
         p->s.size = nunits;
- 8ec:	0137a423          	sw	s3,8(a5)
+ 8c4:	0137a423          	sw	s3,8(a5)
       freep = prevp;
- 8f0:	00000717          	auipc	a4,0x0
- 8f4:	0ca73423          	sd	a0,200(a4) # 9b8 <freep>
+ 8c8:	00000717          	auipc	a4,0x0
+ 8cc:	0ca73423          	sd	a0,200(a4) # 990 <freep>
       return (void*)(p + 1);
- 8f8:	01078513          	addi	a0,a5,16
+ 8d0:	01078513          	addi	a0,a5,16
       if((p = morecore(nunits)) == 0)
         return 0;
   }
 }
- 8fc:	70e2                	ld	ra,56(sp)
- 8fe:	7442                	ld	s0,48(sp)
- 900:	74a2                	ld	s1,40(sp)
- 902:	7902                	ld	s2,32(sp)
- 904:	69e2                	ld	s3,24(sp)
- 906:	6a42                	ld	s4,16(sp)
- 908:	6aa2                	ld	s5,8(sp)
- 90a:	6b02                	ld	s6,0(sp)
- 90c:	6121                	addi	sp,sp,64
- 90e:	8082                	ret
+ 8d4:	70e2                	ld	ra,56(sp)
+ 8d6:	7442                	ld	s0,48(sp)
+ 8d8:	74a2                	ld	s1,40(sp)
+ 8da:	7902                	ld	s2,32(sp)
+ 8dc:	69e2                	ld	s3,24(sp)
+ 8de:	6a42                	ld	s4,16(sp)
+ 8e0:	6aa2                	ld	s5,8(sp)
+ 8e2:	6b02                	ld	s6,0(sp)
+ 8e4:	6121                	addi	sp,sp,64
+ 8e6:	8082                	ret
         prevp->s.ptr = p->s.ptr;
- 910:	6398                	ld	a4,0(a5)
- 912:	e118                	sd	a4,0(a0)
- 914:	bff1                	j	8f0 <malloc+0x86>
+ 8e8:	6398                	ld	a4,0(a5)
+ 8ea:	e118                	sd	a4,0(a0)
+ 8ec:	bff1                	j	8c8 <malloc+0x86>
   hp->s.size = nu;
- 916:	01652423          	sw	s6,8(a0)
+ 8ee:	01652423          	sw	s6,8(a0)
   free((void*)(hp + 1));
- 91a:	0541                	addi	a0,a0,16
- 91c:	00000097          	auipc	ra,0x0
- 920:	ec6080e7          	jalr	-314(ra) # 7e2 <free>
+ 8f2:	0541                	addi	a0,a0,16
+ 8f4:	00000097          	auipc	ra,0x0
+ 8f8:	ec6080e7          	jalr	-314(ra) # 7ba <free>
   return freep;
- 924:	00093503          	ld	a0,0(s2)
+ 8fc:	00093503          	ld	a0,0(s2)
       if((p = morecore(nunits)) == 0)
- 928:	d971                	beqz	a0,8fc <malloc+0x92>
+ 900:	d971                	beqz	a0,8d4 <malloc+0x92>
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 92a:	611c                	ld	a5,0(a0)
+ 902:	611c                	ld	a5,0(a0)
     if(p->s.size >= nunits){
- 92c:	4798                	lw	a4,8(a5)
- 92e:	fa9776e3          	bgeu	a4,s1,8da <malloc+0x70>
+ 904:	4798                	lw	a4,8(a5)
+ 906:	fa9776e3          	bgeu	a4,s1,8b2 <malloc+0x70>
     if(p == freep)
- 932:	00093703          	ld	a4,0(s2)
- 936:	853e                	mv	a0,a5
- 938:	fef719e3          	bne	a4,a5,92a <malloc+0xc0>
+ 90a:	00093703          	ld	a4,0(s2)
+ 90e:	853e                	mv	a0,a5
+ 910:	fef719e3          	bne	a4,a5,902 <malloc+0xc0>
   p = sbrk(nu * sizeof(Header));
- 93c:	8552                	mv	a0,s4
- 93e:	00000097          	auipc	ra,0x0
- 942:	b56080e7          	jalr	-1194(ra) # 494 <sbrk>
+ 914:	8552                	mv	a0,s4
+ 916:	00000097          	auipc	ra,0x0
+ 91a:	b7e080e7          	jalr	-1154(ra) # 494 <sbrk>
   if(p == (char*)-1)
- 946:	fd5518e3          	bne	a0,s5,916 <malloc+0xac>
+ 91e:	fd5518e3          	bne	a0,s5,8ee <malloc+0xac>
         return 0;
- 94a:	4501                	li	a0,0
- 94c:	bf45                	j	8fc <malloc+0x92>
+ 922:	4501                	li	a0,0
+ 924:	bf45                	j	8d4 <malloc+0x92>
diff --git a/user/wc.o b/user/wc.o
index 4c2e50a..6ddef4e 100644
Binary files a/user/wc.o and b/user/wc.o differ
diff --git a/user/wc.sym b/user/wc.sym
index a99849b..3c4e201 100644
--- a/user/wc.sym
+++ b/user/wc.sym
@@ -1,7 +1,7 @@
 0000000000000000 .text
-0000000000000950 .rodata
-00000000000009b8 .sbss
-00000000000009c0 .bss
+0000000000000928 .rodata
+0000000000000990 .sbss
+0000000000000998 .bss
 0000000000000000 .comment
 0000000000000000 .debug_aranges
 0000000000000000 .debug_info
@@ -14,55 +14,50 @@
 0000000000000000 wc.c
 0000000000000000 ulib.c
 0000000000000000 printf.c
-00000000000004d4 putc
-00000000000004f6 printint
-00000000000009a0 digits
+00000000000004ac putc
+00000000000004ce printint
+0000000000000978 digits
 0000000000000000 umalloc.c
-00000000000009b8 freep
-0000000000000bc0 base
+0000000000000990 freep
+0000000000000b98 base
 0000000000000196 strcpy
-00000000000007ac printf
-00000000000011b1 __global_pointer$
+0000000000000784 printf
+0000000000001189 __global_pointer$
 0000000000000356 memmove
 0000000000000454 mknod
 0000000000000252 gets
-00000000000009b1 __SDATA_BEGIN__
+0000000000000989 __SDATA_BEGIN__
 000000000000048c getpid
 00000000000003ec memcpy
-00000000000004bc print_stats
-000000000000086a malloc
+0000000000000842 malloc
 000000000000049c sleep
 000000000000041c pipe
 000000000000042c write
 0000000000000464 fstat
-000000000000077e fprintf
+0000000000000756 fprintf
 000000000000043c kill
-00000000000005a0 vprintf
+0000000000000578 vprintf
 000000000000047c chdir
-00000000000004ac pause_system
 0000000000000444 exec
 0000000000000414 wait
 0000000000000424 read
 000000000000045c unlink
-00000000000004cc set_cpu
 0000000000000000 wc
-00000000000004c4 get_cpu
 00000000000003b2 memcmp
 0000000000000404 fork
-00000000000004b4 kill_system
-0000000000000bd0 __BSS_END__
+0000000000000ba8 __BSS_END__
 0000000000000494 sbrk
 00000000000004a4 uptime
-00000000000009b1 __bss_start
+0000000000000989 __bss_start
 0000000000000208 memset
 00000000000000fe main
 00000000000001b2 strcmp
 0000000000000484 dup
-00000000000009c0 buf
-00000000000009b1 __DATA_BEGIN__
+0000000000000998 buf
+0000000000000989 __DATA_BEGIN__
 00000000000002c6 stat
-00000000000009b1 _edata
-0000000000000bd0 _end
+0000000000000989 _edata
+0000000000000ba8 _end
 000000000000046c link
 000000000000040c exit
 000000000000030c atoi
@@ -71,4 +66,4 @@
 000000000000022e strchr
 0000000000000474 mkdir
 0000000000000434 close
-00000000000007e2 free
+00000000000007ba free
diff --git a/user/zombie.asm b/user/zombie.asm
index 866238c..3e9cc90 100644
--- a/user/zombie.asm
+++ b/user/zombie.asm
@@ -667,696 +667,646 @@ uptime:
  ret
  33e:	8082                	ret
 
-0000000000000340 <pause_system>:
-.global pause_system
-pause_system:
- li a7, SYS_pause_system
- 340:	48d9                	li	a7,22
- ecall
- 342:	00000073          	ecall
- ret
- 346:	8082                	ret
-
-0000000000000348 <kill_system>:
-.global kill_system
-kill_system:
- li a7, SYS_kill_system
- 348:	48dd                	li	a7,23
- ecall
- 34a:	00000073          	ecall
- ret
- 34e:	8082                	ret
-
-0000000000000350 <print_stats>:
-.global print_stats
-print_stats:
- li a7, SYS_print_stats
- 350:	48e1                	li	a7,24
- ecall
- 352:	00000073          	ecall
- ret
- 356:	8082                	ret
-
-0000000000000358 <get_cpu>:
-.global get_cpu
-get_cpu:
- li a7, SYS_get_cpu
- 358:	48e5                	li	a7,25
- ecall
- 35a:	00000073          	ecall
- ret
- 35e:	8082                	ret
-
-0000000000000360 <set_cpu>:
-.global set_cpu
-set_cpu:
- li a7, SYS_set_cpu
- 360:	48e9                	li	a7,26
- ecall
- 362:	00000073          	ecall
- ret
- 366:	8082                	ret
-
-0000000000000368 <putc>:
+0000000000000340 <putc>:
 
 static char digits[] = "0123456789ABCDEF";
 
 static void
 putc(int fd, char c)
 {
- 368:	1101                	addi	sp,sp,-32
- 36a:	ec06                	sd	ra,24(sp)
- 36c:	e822                	sd	s0,16(sp)
- 36e:	1000                	addi	s0,sp,32
- 370:	feb407a3          	sb	a1,-17(s0)
+ 340:	1101                	addi	sp,sp,-32
+ 342:	ec06                	sd	ra,24(sp)
+ 344:	e822                	sd	s0,16(sp)
+ 346:	1000                	addi	s0,sp,32
+ 348:	feb407a3          	sb	a1,-17(s0)
   write(fd, &c, 1);
- 374:	4605                	li	a2,1
- 376:	fef40593          	addi	a1,s0,-17
- 37a:	00000097          	auipc	ra,0x0
- 37e:	f46080e7          	jalr	-186(ra) # 2c0 <write>
+ 34c:	4605                	li	a2,1
+ 34e:	fef40593          	addi	a1,s0,-17
+ 352:	00000097          	auipc	ra,0x0
+ 356:	f6e080e7          	jalr	-146(ra) # 2c0 <write>
 }
- 382:	60e2                	ld	ra,24(sp)
- 384:	6442                	ld	s0,16(sp)
- 386:	6105                	addi	sp,sp,32
- 388:	8082                	ret
+ 35a:	60e2                	ld	ra,24(sp)
+ 35c:	6442                	ld	s0,16(sp)
+ 35e:	6105                	addi	sp,sp,32
+ 360:	8082                	ret
 
-000000000000038a <printint>:
+0000000000000362 <printint>:
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 38a:	7139                	addi	sp,sp,-64
- 38c:	fc06                	sd	ra,56(sp)
- 38e:	f822                	sd	s0,48(sp)
- 390:	f426                	sd	s1,40(sp)
- 392:	f04a                	sd	s2,32(sp)
- 394:	ec4e                	sd	s3,24(sp)
- 396:	0080                	addi	s0,sp,64
- 398:	84aa                	mv	s1,a0
+ 362:	7139                	addi	sp,sp,-64
+ 364:	fc06                	sd	ra,56(sp)
+ 366:	f822                	sd	s0,48(sp)
+ 368:	f426                	sd	s1,40(sp)
+ 36a:	f04a                	sd	s2,32(sp)
+ 36c:	ec4e                	sd	s3,24(sp)
+ 36e:	0080                	addi	s0,sp,64
+ 370:	84aa                	mv	s1,a0
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 39a:	c299                	beqz	a3,3a0 <printint+0x16>
- 39c:	0805c863          	bltz	a1,42c <printint+0xa2>
+ 372:	c299                	beqz	a3,378 <printint+0x16>
+ 374:	0805c863          	bltz	a1,404 <printint+0xa2>
     neg = 1;
     x = -xx;
   } else {
     x = xx;
- 3a0:	2581                	sext.w	a1,a1
+ 378:	2581                	sext.w	a1,a1
   neg = 0;
- 3a2:	4881                	li	a7,0
- 3a4:	fc040693          	addi	a3,s0,-64
+ 37a:	4881                	li	a7,0
+ 37c:	fc040693          	addi	a3,s0,-64
   }
 
   i = 0;
- 3a8:	4701                	li	a4,0
+ 380:	4701                	li	a4,0
   do{
     buf[i++] = digits[x % base];
- 3aa:	2601                	sext.w	a2,a2
- 3ac:	00000517          	auipc	a0,0x0
- 3b0:	44450513          	addi	a0,a0,1092 # 7f0 <digits>
- 3b4:	883a                	mv	a6,a4
- 3b6:	2705                	addiw	a4,a4,1
- 3b8:	02c5f7bb          	remuw	a5,a1,a2
- 3bc:	1782                	slli	a5,a5,0x20
- 3be:	9381                	srli	a5,a5,0x20
- 3c0:	97aa                	add	a5,a5,a0
- 3c2:	0007c783          	lbu	a5,0(a5)
- 3c6:	00f68023          	sb	a5,0(a3)
+ 382:	2601                	sext.w	a2,a2
+ 384:	00000517          	auipc	a0,0x0
+ 388:	44450513          	addi	a0,a0,1092 # 7c8 <digits>
+ 38c:	883a                	mv	a6,a4
+ 38e:	2705                	addiw	a4,a4,1
+ 390:	02c5f7bb          	remuw	a5,a1,a2
+ 394:	1782                	slli	a5,a5,0x20
+ 396:	9381                	srli	a5,a5,0x20
+ 398:	97aa                	add	a5,a5,a0
+ 39a:	0007c783          	lbu	a5,0(a5)
+ 39e:	00f68023          	sb	a5,0(a3)
   }while((x /= base) != 0);
- 3ca:	0005879b          	sext.w	a5,a1
- 3ce:	02c5d5bb          	divuw	a1,a1,a2
- 3d2:	0685                	addi	a3,a3,1
- 3d4:	fec7f0e3          	bgeu	a5,a2,3b4 <printint+0x2a>
+ 3a2:	0005879b          	sext.w	a5,a1
+ 3a6:	02c5d5bb          	divuw	a1,a1,a2
+ 3aa:	0685                	addi	a3,a3,1
+ 3ac:	fec7f0e3          	bgeu	a5,a2,38c <printint+0x2a>
   if(neg)
- 3d8:	00088b63          	beqz	a7,3ee <printint+0x64>
+ 3b0:	00088b63          	beqz	a7,3c6 <printint+0x64>
     buf[i++] = '-';
- 3dc:	fd040793          	addi	a5,s0,-48
- 3e0:	973e                	add	a4,a4,a5
- 3e2:	02d00793          	li	a5,45
- 3e6:	fef70823          	sb	a5,-16(a4)
- 3ea:	0028071b          	addiw	a4,a6,2
+ 3b4:	fd040793          	addi	a5,s0,-48
+ 3b8:	973e                	add	a4,a4,a5
+ 3ba:	02d00793          	li	a5,45
+ 3be:	fef70823          	sb	a5,-16(a4)
+ 3c2:	0028071b          	addiw	a4,a6,2
 
   while(--i >= 0)
- 3ee:	02e05863          	blez	a4,41e <printint+0x94>
- 3f2:	fc040793          	addi	a5,s0,-64
- 3f6:	00e78933          	add	s2,a5,a4
- 3fa:	fff78993          	addi	s3,a5,-1
- 3fe:	99ba                	add	s3,s3,a4
- 400:	377d                	addiw	a4,a4,-1
- 402:	1702                	slli	a4,a4,0x20
- 404:	9301                	srli	a4,a4,0x20
- 406:	40e989b3          	sub	s3,s3,a4
+ 3c6:	02e05863          	blez	a4,3f6 <printint+0x94>
+ 3ca:	fc040793          	addi	a5,s0,-64
+ 3ce:	00e78933          	add	s2,a5,a4
+ 3d2:	fff78993          	addi	s3,a5,-1
+ 3d6:	99ba                	add	s3,s3,a4
+ 3d8:	377d                	addiw	a4,a4,-1
+ 3da:	1702                	slli	a4,a4,0x20
+ 3dc:	9301                	srli	a4,a4,0x20
+ 3de:	40e989b3          	sub	s3,s3,a4
     putc(fd, buf[i]);
- 40a:	fff94583          	lbu	a1,-1(s2)
- 40e:	8526                	mv	a0,s1
- 410:	00000097          	auipc	ra,0x0
- 414:	f58080e7          	jalr	-168(ra) # 368 <putc>
+ 3e2:	fff94583          	lbu	a1,-1(s2)
+ 3e6:	8526                	mv	a0,s1
+ 3e8:	00000097          	auipc	ra,0x0
+ 3ec:	f58080e7          	jalr	-168(ra) # 340 <putc>
   while(--i >= 0)
- 418:	197d                	addi	s2,s2,-1
- 41a:	ff3918e3          	bne	s2,s3,40a <printint+0x80>
+ 3f0:	197d                	addi	s2,s2,-1
+ 3f2:	ff3918e3          	bne	s2,s3,3e2 <printint+0x80>
 }
- 41e:	70e2                	ld	ra,56(sp)
- 420:	7442                	ld	s0,48(sp)
- 422:	74a2                	ld	s1,40(sp)
- 424:	7902                	ld	s2,32(sp)
- 426:	69e2                	ld	s3,24(sp)
- 428:	6121                	addi	sp,sp,64
- 42a:	8082                	ret
+ 3f6:	70e2                	ld	ra,56(sp)
+ 3f8:	7442                	ld	s0,48(sp)
+ 3fa:	74a2                	ld	s1,40(sp)
+ 3fc:	7902                	ld	s2,32(sp)
+ 3fe:	69e2                	ld	s3,24(sp)
+ 400:	6121                	addi	sp,sp,64
+ 402:	8082                	ret
     x = -xx;
- 42c:	40b005bb          	negw	a1,a1
+ 404:	40b005bb          	negw	a1,a1
     neg = 1;
- 430:	4885                	li	a7,1
+ 408:	4885                	li	a7,1
     x = -xx;
- 432:	bf8d                	j	3a4 <printint+0x1a>
+ 40a:	bf8d                	j	37c <printint+0x1a>
 
-0000000000000434 <vprintf>:
+000000000000040c <vprintf>:
 }
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 vprintf(int fd, const char *fmt, va_list ap)
 {
- 434:	7119                	addi	sp,sp,-128
- 436:	fc86                	sd	ra,120(sp)
- 438:	f8a2                	sd	s0,112(sp)
- 43a:	f4a6                	sd	s1,104(sp)
- 43c:	f0ca                	sd	s2,96(sp)
- 43e:	ecce                	sd	s3,88(sp)
- 440:	e8d2                	sd	s4,80(sp)
- 442:	e4d6                	sd	s5,72(sp)
- 444:	e0da                	sd	s6,64(sp)
- 446:	fc5e                	sd	s7,56(sp)
- 448:	f862                	sd	s8,48(sp)
- 44a:	f466                	sd	s9,40(sp)
- 44c:	f06a                	sd	s10,32(sp)
- 44e:	ec6e                	sd	s11,24(sp)
- 450:	0100                	addi	s0,sp,128
+ 40c:	7119                	addi	sp,sp,-128
+ 40e:	fc86                	sd	ra,120(sp)
+ 410:	f8a2                	sd	s0,112(sp)
+ 412:	f4a6                	sd	s1,104(sp)
+ 414:	f0ca                	sd	s2,96(sp)
+ 416:	ecce                	sd	s3,88(sp)
+ 418:	e8d2                	sd	s4,80(sp)
+ 41a:	e4d6                	sd	s5,72(sp)
+ 41c:	e0da                	sd	s6,64(sp)
+ 41e:	fc5e                	sd	s7,56(sp)
+ 420:	f862                	sd	s8,48(sp)
+ 422:	f466                	sd	s9,40(sp)
+ 424:	f06a                	sd	s10,32(sp)
+ 426:	ec6e                	sd	s11,24(sp)
+ 428:	0100                	addi	s0,sp,128
   char *s;
   int c, i, state;
 
   state = 0;
   for(i = 0; fmt[i]; i++){
- 452:	0005c903          	lbu	s2,0(a1)
- 456:	18090f63          	beqz	s2,5f4 <vprintf+0x1c0>
- 45a:	8aaa                	mv	s5,a0
- 45c:	8b32                	mv	s6,a2
- 45e:	00158493          	addi	s1,a1,1
+ 42a:	0005c903          	lbu	s2,0(a1)
+ 42e:	18090f63          	beqz	s2,5cc <vprintf+0x1c0>
+ 432:	8aaa                	mv	s5,a0
+ 434:	8b32                	mv	s6,a2
+ 436:	00158493          	addi	s1,a1,1
   state = 0;
- 462:	4981                	li	s3,0
+ 43a:	4981                	li	s3,0
       if(c == '%'){
         state = '%';
       } else {
         putc(fd, c);
       }
     } else if(state == '%'){
- 464:	02500a13          	li	s4,37
+ 43c:	02500a13          	li	s4,37
       if(c == 'd'){
- 468:	06400c13          	li	s8,100
+ 440:	06400c13          	li	s8,100
         printint(fd, va_arg(ap, int), 10, 1);
       } else if(c == 'l') {
- 46c:	06c00c93          	li	s9,108
+ 444:	06c00c93          	li	s9,108
         printint(fd, va_arg(ap, uint64), 10, 0);
       } else if(c == 'x') {
- 470:	07800d13          	li	s10,120
+ 448:	07800d13          	li	s10,120
         printint(fd, va_arg(ap, int), 16, 0);
       } else if(c == 'p') {
- 474:	07000d93          	li	s11,112
+ 44c:	07000d93          	li	s11,112
     putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
- 478:	00000b97          	auipc	s7,0x0
- 47c:	378b8b93          	addi	s7,s7,888 # 7f0 <digits>
- 480:	a839                	j	49e <vprintf+0x6a>
+ 450:	00000b97          	auipc	s7,0x0
+ 454:	378b8b93          	addi	s7,s7,888 # 7c8 <digits>
+ 458:	a839                	j	476 <vprintf+0x6a>
         putc(fd, c);
- 482:	85ca                	mv	a1,s2
- 484:	8556                	mv	a0,s5
- 486:	00000097          	auipc	ra,0x0
- 48a:	ee2080e7          	jalr	-286(ra) # 368 <putc>
- 48e:	a019                	j	494 <vprintf+0x60>
+ 45a:	85ca                	mv	a1,s2
+ 45c:	8556                	mv	a0,s5
+ 45e:	00000097          	auipc	ra,0x0
+ 462:	ee2080e7          	jalr	-286(ra) # 340 <putc>
+ 466:	a019                	j	46c <vprintf+0x60>
     } else if(state == '%'){
- 490:	01498f63          	beq	s3,s4,4ae <vprintf+0x7a>
+ 468:	01498f63          	beq	s3,s4,486 <vprintf+0x7a>
   for(i = 0; fmt[i]; i++){
- 494:	0485                	addi	s1,s1,1
- 496:	fff4c903          	lbu	s2,-1(s1)
- 49a:	14090d63          	beqz	s2,5f4 <vprintf+0x1c0>
+ 46c:	0485                	addi	s1,s1,1
+ 46e:	fff4c903          	lbu	s2,-1(s1)
+ 472:	14090d63          	beqz	s2,5cc <vprintf+0x1c0>
     c = fmt[i] & 0xff;
- 49e:	0009079b          	sext.w	a5,s2
+ 476:	0009079b          	sext.w	a5,s2
     if(state == 0){
- 4a2:	fe0997e3          	bnez	s3,490 <vprintf+0x5c>
+ 47a:	fe0997e3          	bnez	s3,468 <vprintf+0x5c>
       if(c == '%'){
- 4a6:	fd479ee3          	bne	a5,s4,482 <vprintf+0x4e>
+ 47e:	fd479ee3          	bne	a5,s4,45a <vprintf+0x4e>
         state = '%';
- 4aa:	89be                	mv	s3,a5
- 4ac:	b7e5                	j	494 <vprintf+0x60>
+ 482:	89be                	mv	s3,a5
+ 484:	b7e5                	j	46c <vprintf+0x60>
       if(c == 'd'){
- 4ae:	05878063          	beq	a5,s8,4ee <vprintf+0xba>
+ 486:	05878063          	beq	a5,s8,4c6 <vprintf+0xba>
       } else if(c == 'l') {
- 4b2:	05978c63          	beq	a5,s9,50a <vprintf+0xd6>
+ 48a:	05978c63          	beq	a5,s9,4e2 <vprintf+0xd6>
       } else if(c == 'x') {
- 4b6:	07a78863          	beq	a5,s10,526 <vprintf+0xf2>
+ 48e:	07a78863          	beq	a5,s10,4fe <vprintf+0xf2>
       } else if(c == 'p') {
- 4ba:	09b78463          	beq	a5,s11,542 <vprintf+0x10e>
+ 492:	09b78463          	beq	a5,s11,51a <vprintf+0x10e>
         printptr(fd, va_arg(ap, uint64));
       } else if(c == 's'){
- 4be:	07300713          	li	a4,115
- 4c2:	0ce78663          	beq	a5,a4,58e <vprintf+0x15a>
+ 496:	07300713          	li	a4,115
+ 49a:	0ce78663          	beq	a5,a4,566 <vprintf+0x15a>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 4c6:	06300713          	li	a4,99
- 4ca:	0ee78e63          	beq	a5,a4,5c6 <vprintf+0x192>
+ 49e:	06300713          	li	a4,99
+ 4a2:	0ee78e63          	beq	a5,a4,59e <vprintf+0x192>
         putc(fd, va_arg(ap, uint));
       } else if(c == '%'){
- 4ce:	11478863          	beq	a5,s4,5de <vprintf+0x1aa>
+ 4a6:	11478863          	beq	a5,s4,5b6 <vprintf+0x1aa>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
- 4d2:	85d2                	mv	a1,s4
- 4d4:	8556                	mv	a0,s5
- 4d6:	00000097          	auipc	ra,0x0
- 4da:	e92080e7          	jalr	-366(ra) # 368 <putc>
+ 4aa:	85d2                	mv	a1,s4
+ 4ac:	8556                	mv	a0,s5
+ 4ae:	00000097          	auipc	ra,0x0
+ 4b2:	e92080e7          	jalr	-366(ra) # 340 <putc>
         putc(fd, c);
- 4de:	85ca                	mv	a1,s2
- 4e0:	8556                	mv	a0,s5
- 4e2:	00000097          	auipc	ra,0x0
- 4e6:	e86080e7          	jalr	-378(ra) # 368 <putc>
+ 4b6:	85ca                	mv	a1,s2
+ 4b8:	8556                	mv	a0,s5
+ 4ba:	00000097          	auipc	ra,0x0
+ 4be:	e86080e7          	jalr	-378(ra) # 340 <putc>
       }
       state = 0;
- 4ea:	4981                	li	s3,0
- 4ec:	b765                	j	494 <vprintf+0x60>
+ 4c2:	4981                	li	s3,0
+ 4c4:	b765                	j	46c <vprintf+0x60>
         printint(fd, va_arg(ap, int), 10, 1);
- 4ee:	008b0913          	addi	s2,s6,8
- 4f2:	4685                	li	a3,1
- 4f4:	4629                	li	a2,10
- 4f6:	000b2583          	lw	a1,0(s6)
- 4fa:	8556                	mv	a0,s5
- 4fc:	00000097          	auipc	ra,0x0
- 500:	e8e080e7          	jalr	-370(ra) # 38a <printint>
- 504:	8b4a                	mv	s6,s2
+ 4c6:	008b0913          	addi	s2,s6,8
+ 4ca:	4685                	li	a3,1
+ 4cc:	4629                	li	a2,10
+ 4ce:	000b2583          	lw	a1,0(s6)
+ 4d2:	8556                	mv	a0,s5
+ 4d4:	00000097          	auipc	ra,0x0
+ 4d8:	e8e080e7          	jalr	-370(ra) # 362 <printint>
+ 4dc:	8b4a                	mv	s6,s2
       state = 0;
- 506:	4981                	li	s3,0
- 508:	b771                	j	494 <vprintf+0x60>
+ 4de:	4981                	li	s3,0
+ 4e0:	b771                	j	46c <vprintf+0x60>
         printint(fd, va_arg(ap, uint64), 10, 0);
- 50a:	008b0913          	addi	s2,s6,8
- 50e:	4681                	li	a3,0
- 510:	4629                	li	a2,10
- 512:	000b2583          	lw	a1,0(s6)
- 516:	8556                	mv	a0,s5
- 518:	00000097          	auipc	ra,0x0
- 51c:	e72080e7          	jalr	-398(ra) # 38a <printint>
- 520:	8b4a                	mv	s6,s2
+ 4e2:	008b0913          	addi	s2,s6,8
+ 4e6:	4681                	li	a3,0
+ 4e8:	4629                	li	a2,10
+ 4ea:	000b2583          	lw	a1,0(s6)
+ 4ee:	8556                	mv	a0,s5
+ 4f0:	00000097          	auipc	ra,0x0
+ 4f4:	e72080e7          	jalr	-398(ra) # 362 <printint>
+ 4f8:	8b4a                	mv	s6,s2
       state = 0;
- 522:	4981                	li	s3,0
- 524:	bf85                	j	494 <vprintf+0x60>
+ 4fa:	4981                	li	s3,0
+ 4fc:	bf85                	j	46c <vprintf+0x60>
         printint(fd, va_arg(ap, int), 16, 0);
- 526:	008b0913          	addi	s2,s6,8
- 52a:	4681                	li	a3,0
- 52c:	4641                	li	a2,16
- 52e:	000b2583          	lw	a1,0(s6)
- 532:	8556                	mv	a0,s5
- 534:	00000097          	auipc	ra,0x0
- 538:	e56080e7          	jalr	-426(ra) # 38a <printint>
- 53c:	8b4a                	mv	s6,s2
+ 4fe:	008b0913          	addi	s2,s6,8
+ 502:	4681                	li	a3,0
+ 504:	4641                	li	a2,16
+ 506:	000b2583          	lw	a1,0(s6)
+ 50a:	8556                	mv	a0,s5
+ 50c:	00000097          	auipc	ra,0x0
+ 510:	e56080e7          	jalr	-426(ra) # 362 <printint>
+ 514:	8b4a                	mv	s6,s2
       state = 0;
- 53e:	4981                	li	s3,0
- 540:	bf91                	j	494 <vprintf+0x60>
+ 516:	4981                	li	s3,0
+ 518:	bf91                	j	46c <vprintf+0x60>
         printptr(fd, va_arg(ap, uint64));
- 542:	008b0793          	addi	a5,s6,8
- 546:	f8f43423          	sd	a5,-120(s0)
- 54a:	000b3983          	ld	s3,0(s6)
+ 51a:	008b0793          	addi	a5,s6,8
+ 51e:	f8f43423          	sd	a5,-120(s0)
+ 522:	000b3983          	ld	s3,0(s6)
   putc(fd, '0');
- 54e:	03000593          	li	a1,48
- 552:	8556                	mv	a0,s5
- 554:	00000097          	auipc	ra,0x0
- 558:	e14080e7          	jalr	-492(ra) # 368 <putc>
+ 526:	03000593          	li	a1,48
+ 52a:	8556                	mv	a0,s5
+ 52c:	00000097          	auipc	ra,0x0
+ 530:	e14080e7          	jalr	-492(ra) # 340 <putc>
   putc(fd, 'x');
- 55c:	85ea                	mv	a1,s10
- 55e:	8556                	mv	a0,s5
- 560:	00000097          	auipc	ra,0x0
- 564:	e08080e7          	jalr	-504(ra) # 368 <putc>
- 568:	4941                	li	s2,16
+ 534:	85ea                	mv	a1,s10
+ 536:	8556                	mv	a0,s5
+ 538:	00000097          	auipc	ra,0x0
+ 53c:	e08080e7          	jalr	-504(ra) # 340 <putc>
+ 540:	4941                	li	s2,16
     putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
- 56a:	03c9d793          	srli	a5,s3,0x3c
- 56e:	97de                	add	a5,a5,s7
- 570:	0007c583          	lbu	a1,0(a5)
- 574:	8556                	mv	a0,s5
- 576:	00000097          	auipc	ra,0x0
- 57a:	df2080e7          	jalr	-526(ra) # 368 <putc>
+ 542:	03c9d793          	srli	a5,s3,0x3c
+ 546:	97de                	add	a5,a5,s7
+ 548:	0007c583          	lbu	a1,0(a5)
+ 54c:	8556                	mv	a0,s5
+ 54e:	00000097          	auipc	ra,0x0
+ 552:	df2080e7          	jalr	-526(ra) # 340 <putc>
   for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
- 57e:	0992                	slli	s3,s3,0x4
- 580:	397d                	addiw	s2,s2,-1
- 582:	fe0914e3          	bnez	s2,56a <vprintf+0x136>
+ 556:	0992                	slli	s3,s3,0x4
+ 558:	397d                	addiw	s2,s2,-1
+ 55a:	fe0914e3          	bnez	s2,542 <vprintf+0x136>
         printptr(fd, va_arg(ap, uint64));
- 586:	f8843b03          	ld	s6,-120(s0)
+ 55e:	f8843b03          	ld	s6,-120(s0)
       state = 0;
- 58a:	4981                	li	s3,0
- 58c:	b721                	j	494 <vprintf+0x60>
+ 562:	4981                	li	s3,0
+ 564:	b721                	j	46c <vprintf+0x60>
         s = va_arg(ap, char*);
- 58e:	008b0993          	addi	s3,s6,8
- 592:	000b3903          	ld	s2,0(s6)
+ 566:	008b0993          	addi	s3,s6,8
+ 56a:	000b3903          	ld	s2,0(s6)
         if(s == 0)
- 596:	02090163          	beqz	s2,5b8 <vprintf+0x184>
+ 56e:	02090163          	beqz	s2,590 <vprintf+0x184>
         while(*s != 0){
- 59a:	00094583          	lbu	a1,0(s2)
- 59e:	c9a1                	beqz	a1,5ee <vprintf+0x1ba>
+ 572:	00094583          	lbu	a1,0(s2)
+ 576:	c9a1                	beqz	a1,5c6 <vprintf+0x1ba>
           putc(fd, *s);
- 5a0:	8556                	mv	a0,s5
- 5a2:	00000097          	auipc	ra,0x0
- 5a6:	dc6080e7          	jalr	-570(ra) # 368 <putc>
+ 578:	8556                	mv	a0,s5
+ 57a:	00000097          	auipc	ra,0x0
+ 57e:	dc6080e7          	jalr	-570(ra) # 340 <putc>
           s++;
- 5aa:	0905                	addi	s2,s2,1
+ 582:	0905                	addi	s2,s2,1
         while(*s != 0){
- 5ac:	00094583          	lbu	a1,0(s2)
- 5b0:	f9e5                	bnez	a1,5a0 <vprintf+0x16c>
+ 584:	00094583          	lbu	a1,0(s2)
+ 588:	f9e5                	bnez	a1,578 <vprintf+0x16c>
         s = va_arg(ap, char*);
- 5b2:	8b4e                	mv	s6,s3
+ 58a:	8b4e                	mv	s6,s3
       state = 0;
- 5b4:	4981                	li	s3,0
- 5b6:	bdf9                	j	494 <vprintf+0x60>
+ 58c:	4981                	li	s3,0
+ 58e:	bdf9                	j	46c <vprintf+0x60>
           s = "(null)";
- 5b8:	00000917          	auipc	s2,0x0
- 5bc:	23090913          	addi	s2,s2,560 # 7e8 <malloc+0xea>
+ 590:	00000917          	auipc	s2,0x0
+ 594:	23090913          	addi	s2,s2,560 # 7c0 <malloc+0xea>
         while(*s != 0){
- 5c0:	02800593          	li	a1,40
- 5c4:	bff1                	j	5a0 <vprintf+0x16c>
+ 598:	02800593          	li	a1,40
+ 59c:	bff1                	j	578 <vprintf+0x16c>
         putc(fd, va_arg(ap, uint));
- 5c6:	008b0913          	addi	s2,s6,8
- 5ca:	000b4583          	lbu	a1,0(s6)
- 5ce:	8556                	mv	a0,s5
- 5d0:	00000097          	auipc	ra,0x0
- 5d4:	d98080e7          	jalr	-616(ra) # 368 <putc>
- 5d8:	8b4a                	mv	s6,s2
+ 59e:	008b0913          	addi	s2,s6,8
+ 5a2:	000b4583          	lbu	a1,0(s6)
+ 5a6:	8556                	mv	a0,s5
+ 5a8:	00000097          	auipc	ra,0x0
+ 5ac:	d98080e7          	jalr	-616(ra) # 340 <putc>
+ 5b0:	8b4a                	mv	s6,s2
       state = 0;
- 5da:	4981                	li	s3,0
- 5dc:	bd65                	j	494 <vprintf+0x60>
+ 5b2:	4981                	li	s3,0
+ 5b4:	bd65                	j	46c <vprintf+0x60>
         putc(fd, c);
- 5de:	85d2                	mv	a1,s4
- 5e0:	8556                	mv	a0,s5
- 5e2:	00000097          	auipc	ra,0x0
- 5e6:	d86080e7          	jalr	-634(ra) # 368 <putc>
+ 5b6:	85d2                	mv	a1,s4
+ 5b8:	8556                	mv	a0,s5
+ 5ba:	00000097          	auipc	ra,0x0
+ 5be:	d86080e7          	jalr	-634(ra) # 340 <putc>
       state = 0;
- 5ea:	4981                	li	s3,0
- 5ec:	b565                	j	494 <vprintf+0x60>
+ 5c2:	4981                	li	s3,0
+ 5c4:	b565                	j	46c <vprintf+0x60>
         s = va_arg(ap, char*);
- 5ee:	8b4e                	mv	s6,s3
+ 5c6:	8b4e                	mv	s6,s3
       state = 0;
- 5f0:	4981                	li	s3,0
- 5f2:	b54d                	j	494 <vprintf+0x60>
+ 5c8:	4981                	li	s3,0
+ 5ca:	b54d                	j	46c <vprintf+0x60>
     }
   }
 }
- 5f4:	70e6                	ld	ra,120(sp)
- 5f6:	7446                	ld	s0,112(sp)
- 5f8:	74a6                	ld	s1,104(sp)
- 5fa:	7906                	ld	s2,96(sp)
- 5fc:	69e6                	ld	s3,88(sp)
- 5fe:	6a46                	ld	s4,80(sp)
- 600:	6aa6                	ld	s5,72(sp)
- 602:	6b06                	ld	s6,64(sp)
- 604:	7be2                	ld	s7,56(sp)
- 606:	7c42                	ld	s8,48(sp)
- 608:	7ca2                	ld	s9,40(sp)
- 60a:	7d02                	ld	s10,32(sp)
- 60c:	6de2                	ld	s11,24(sp)
- 60e:	6109                	addi	sp,sp,128
- 610:	8082                	ret
-
-0000000000000612 <fprintf>:
+ 5cc:	70e6                	ld	ra,120(sp)
+ 5ce:	7446                	ld	s0,112(sp)
+ 5d0:	74a6                	ld	s1,104(sp)
+ 5d2:	7906                	ld	s2,96(sp)
+ 5d4:	69e6                	ld	s3,88(sp)
+ 5d6:	6a46                	ld	s4,80(sp)
+ 5d8:	6aa6                	ld	s5,72(sp)
+ 5da:	6b06                	ld	s6,64(sp)
+ 5dc:	7be2                	ld	s7,56(sp)
+ 5de:	7c42                	ld	s8,48(sp)
+ 5e0:	7ca2                	ld	s9,40(sp)
+ 5e2:	7d02                	ld	s10,32(sp)
+ 5e4:	6de2                	ld	s11,24(sp)
+ 5e6:	6109                	addi	sp,sp,128
+ 5e8:	8082                	ret
+
+00000000000005ea <fprintf>:
 
 void
 fprintf(int fd, const char *fmt, ...)
 {
- 612:	715d                	addi	sp,sp,-80
- 614:	ec06                	sd	ra,24(sp)
- 616:	e822                	sd	s0,16(sp)
- 618:	1000                	addi	s0,sp,32
- 61a:	e010                	sd	a2,0(s0)
- 61c:	e414                	sd	a3,8(s0)
- 61e:	e818                	sd	a4,16(s0)
- 620:	ec1c                	sd	a5,24(s0)
- 622:	03043023          	sd	a6,32(s0)
- 626:	03143423          	sd	a7,40(s0)
+ 5ea:	715d                	addi	sp,sp,-80
+ 5ec:	ec06                	sd	ra,24(sp)
+ 5ee:	e822                	sd	s0,16(sp)
+ 5f0:	1000                	addi	s0,sp,32
+ 5f2:	e010                	sd	a2,0(s0)
+ 5f4:	e414                	sd	a3,8(s0)
+ 5f6:	e818                	sd	a4,16(s0)
+ 5f8:	ec1c                	sd	a5,24(s0)
+ 5fa:	03043023          	sd	a6,32(s0)
+ 5fe:	03143423          	sd	a7,40(s0)
   va_list ap;
 
   va_start(ap, fmt);
- 62a:	fe843423          	sd	s0,-24(s0)
+ 602:	fe843423          	sd	s0,-24(s0)
   vprintf(fd, fmt, ap);
- 62e:	8622                	mv	a2,s0
- 630:	00000097          	auipc	ra,0x0
- 634:	e04080e7          	jalr	-508(ra) # 434 <vprintf>
+ 606:	8622                	mv	a2,s0
+ 608:	00000097          	auipc	ra,0x0
+ 60c:	e04080e7          	jalr	-508(ra) # 40c <vprintf>
 }
- 638:	60e2                	ld	ra,24(sp)
- 63a:	6442                	ld	s0,16(sp)
- 63c:	6161                	addi	sp,sp,80
- 63e:	8082                	ret
+ 610:	60e2                	ld	ra,24(sp)
+ 612:	6442                	ld	s0,16(sp)
+ 614:	6161                	addi	sp,sp,80
+ 616:	8082                	ret
 
-0000000000000640 <printf>:
+0000000000000618 <printf>:
 
 void
 printf(const char *fmt, ...)
 {
- 640:	711d                	addi	sp,sp,-96
- 642:	ec06                	sd	ra,24(sp)
- 644:	e822                	sd	s0,16(sp)
- 646:	1000                	addi	s0,sp,32
- 648:	e40c                	sd	a1,8(s0)
- 64a:	e810                	sd	a2,16(s0)
- 64c:	ec14                	sd	a3,24(s0)
- 64e:	f018                	sd	a4,32(s0)
- 650:	f41c                	sd	a5,40(s0)
- 652:	03043823          	sd	a6,48(s0)
- 656:	03143c23          	sd	a7,56(s0)
+ 618:	711d                	addi	sp,sp,-96
+ 61a:	ec06                	sd	ra,24(sp)
+ 61c:	e822                	sd	s0,16(sp)
+ 61e:	1000                	addi	s0,sp,32
+ 620:	e40c                	sd	a1,8(s0)
+ 622:	e810                	sd	a2,16(s0)
+ 624:	ec14                	sd	a3,24(s0)
+ 626:	f018                	sd	a4,32(s0)
+ 628:	f41c                	sd	a5,40(s0)
+ 62a:	03043823          	sd	a6,48(s0)
+ 62e:	03143c23          	sd	a7,56(s0)
   va_list ap;
 
   va_start(ap, fmt);
- 65a:	00840613          	addi	a2,s0,8
- 65e:	fec43423          	sd	a2,-24(s0)
+ 632:	00840613          	addi	a2,s0,8
+ 636:	fec43423          	sd	a2,-24(s0)
   vprintf(1, fmt, ap);
- 662:	85aa                	mv	a1,a0
- 664:	4505                	li	a0,1
- 666:	00000097          	auipc	ra,0x0
- 66a:	dce080e7          	jalr	-562(ra) # 434 <vprintf>
+ 63a:	85aa                	mv	a1,a0
+ 63c:	4505                	li	a0,1
+ 63e:	00000097          	auipc	ra,0x0
+ 642:	dce080e7          	jalr	-562(ra) # 40c <vprintf>
 }
- 66e:	60e2                	ld	ra,24(sp)
- 670:	6442                	ld	s0,16(sp)
- 672:	6125                	addi	sp,sp,96
- 674:	8082                	ret
+ 646:	60e2                	ld	ra,24(sp)
+ 648:	6442                	ld	s0,16(sp)
+ 64a:	6125                	addi	sp,sp,96
+ 64c:	8082                	ret
 
-0000000000000676 <free>:
+000000000000064e <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 676:	1141                	addi	sp,sp,-16
- 678:	e422                	sd	s0,8(sp)
- 67a:	0800                	addi	s0,sp,16
+ 64e:	1141                	addi	sp,sp,-16
+ 650:	e422                	sd	s0,8(sp)
+ 652:	0800                	addi	s0,sp,16
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
- 67c:	ff050693          	addi	a3,a0,-16
+ 654:	ff050693          	addi	a3,a0,-16
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 680:	00000797          	auipc	a5,0x0
- 684:	1887b783          	ld	a5,392(a5) # 808 <freep>
- 688:	a805                	j	6b8 <free+0x42>
+ 658:	00000797          	auipc	a5,0x0
+ 65c:	1887b783          	ld	a5,392(a5) # 7e0 <freep>
+ 660:	a805                	j	690 <free+0x42>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
       break;
   if(bp + bp->s.size == p->s.ptr){
     bp->s.size += p->s.ptr->s.size;
- 68a:	4618                	lw	a4,8(a2)
- 68c:	9db9                	addw	a1,a1,a4
- 68e:	feb52c23          	sw	a1,-8(a0)
+ 662:	4618                	lw	a4,8(a2)
+ 664:	9db9                	addw	a1,a1,a4
+ 666:	feb52c23          	sw	a1,-8(a0)
     bp->s.ptr = p->s.ptr->s.ptr;
- 692:	6398                	ld	a4,0(a5)
- 694:	6318                	ld	a4,0(a4)
- 696:	fee53823          	sd	a4,-16(a0)
- 69a:	a091                	j	6de <free+0x68>
+ 66a:	6398                	ld	a4,0(a5)
+ 66c:	6318                	ld	a4,0(a4)
+ 66e:	fee53823          	sd	a4,-16(a0)
+ 672:	a091                	j	6b6 <free+0x68>
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
     p->s.size += bp->s.size;
- 69c:	ff852703          	lw	a4,-8(a0)
- 6a0:	9e39                	addw	a2,a2,a4
- 6a2:	c790                	sw	a2,8(a5)
+ 674:	ff852703          	lw	a4,-8(a0)
+ 678:	9e39                	addw	a2,a2,a4
+ 67a:	c790                	sw	a2,8(a5)
     p->s.ptr = bp->s.ptr;
- 6a4:	ff053703          	ld	a4,-16(a0)
- 6a8:	e398                	sd	a4,0(a5)
- 6aa:	a099                	j	6f0 <free+0x7a>
+ 67c:	ff053703          	ld	a4,-16(a0)
+ 680:	e398                	sd	a4,0(a5)
+ 682:	a099                	j	6c8 <free+0x7a>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6ac:	6398                	ld	a4,0(a5)
- 6ae:	00e7e463          	bltu	a5,a4,6b6 <free+0x40>
- 6b2:	00e6ea63          	bltu	a3,a4,6c6 <free+0x50>
+ 684:	6398                	ld	a4,0(a5)
+ 686:	00e7e463          	bltu	a5,a4,68e <free+0x40>
+ 68a:	00e6ea63          	bltu	a3,a4,69e <free+0x50>
 {
- 6b6:	87ba                	mv	a5,a4
+ 68e:	87ba                	mv	a5,a4
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6b8:	fed7fae3          	bgeu	a5,a3,6ac <free+0x36>
- 6bc:	6398                	ld	a4,0(a5)
- 6be:	00e6e463          	bltu	a3,a4,6c6 <free+0x50>
+ 690:	fed7fae3          	bgeu	a5,a3,684 <free+0x36>
+ 694:	6398                	ld	a4,0(a5)
+ 696:	00e6e463          	bltu	a3,a4,69e <free+0x50>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6c2:	fee7eae3          	bltu	a5,a4,6b6 <free+0x40>
+ 69a:	fee7eae3          	bltu	a5,a4,68e <free+0x40>
   if(bp + bp->s.size == p->s.ptr){
- 6c6:	ff852583          	lw	a1,-8(a0)
- 6ca:	6390                	ld	a2,0(a5)
- 6cc:	02059713          	slli	a4,a1,0x20
- 6d0:	9301                	srli	a4,a4,0x20
- 6d2:	0712                	slli	a4,a4,0x4
- 6d4:	9736                	add	a4,a4,a3
- 6d6:	fae60ae3          	beq	a2,a4,68a <free+0x14>
+ 69e:	ff852583          	lw	a1,-8(a0)
+ 6a2:	6390                	ld	a2,0(a5)
+ 6a4:	02059713          	slli	a4,a1,0x20
+ 6a8:	9301                	srli	a4,a4,0x20
+ 6aa:	0712                	slli	a4,a4,0x4
+ 6ac:	9736                	add	a4,a4,a3
+ 6ae:	fae60ae3          	beq	a2,a4,662 <free+0x14>
     bp->s.ptr = p->s.ptr;
- 6da:	fec53823          	sd	a2,-16(a0)
+ 6b2:	fec53823          	sd	a2,-16(a0)
   if(p + p->s.size == bp){
- 6de:	4790                	lw	a2,8(a5)
- 6e0:	02061713          	slli	a4,a2,0x20
- 6e4:	9301                	srli	a4,a4,0x20
- 6e6:	0712                	slli	a4,a4,0x4
- 6e8:	973e                	add	a4,a4,a5
- 6ea:	fae689e3          	beq	a3,a4,69c <free+0x26>
+ 6b6:	4790                	lw	a2,8(a5)
+ 6b8:	02061713          	slli	a4,a2,0x20
+ 6bc:	9301                	srli	a4,a4,0x20
+ 6be:	0712                	slli	a4,a4,0x4
+ 6c0:	973e                	add	a4,a4,a5
+ 6c2:	fae689e3          	beq	a3,a4,674 <free+0x26>
   } else
     p->s.ptr = bp;
- 6ee:	e394                	sd	a3,0(a5)
+ 6c6:	e394                	sd	a3,0(a5)
   freep = p;
- 6f0:	00000717          	auipc	a4,0x0
- 6f4:	10f73c23          	sd	a5,280(a4) # 808 <freep>
+ 6c8:	00000717          	auipc	a4,0x0
+ 6cc:	10f73c23          	sd	a5,280(a4) # 7e0 <freep>
 }
- 6f8:	6422                	ld	s0,8(sp)
- 6fa:	0141                	addi	sp,sp,16
- 6fc:	8082                	ret
+ 6d0:	6422                	ld	s0,8(sp)
+ 6d2:	0141                	addi	sp,sp,16
+ 6d4:	8082                	ret
 
-00000000000006fe <malloc>:
+00000000000006d6 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 6fe:	7139                	addi	sp,sp,-64
- 700:	fc06                	sd	ra,56(sp)
- 702:	f822                	sd	s0,48(sp)
- 704:	f426                	sd	s1,40(sp)
- 706:	f04a                	sd	s2,32(sp)
- 708:	ec4e                	sd	s3,24(sp)
- 70a:	e852                	sd	s4,16(sp)
- 70c:	e456                	sd	s5,8(sp)
- 70e:	e05a                	sd	s6,0(sp)
- 710:	0080                	addi	s0,sp,64
+ 6d6:	7139                	addi	sp,sp,-64
+ 6d8:	fc06                	sd	ra,56(sp)
+ 6da:	f822                	sd	s0,48(sp)
+ 6dc:	f426                	sd	s1,40(sp)
+ 6de:	f04a                	sd	s2,32(sp)
+ 6e0:	ec4e                	sd	s3,24(sp)
+ 6e2:	e852                	sd	s4,16(sp)
+ 6e4:	e456                	sd	s5,8(sp)
+ 6e6:	e05a                	sd	s6,0(sp)
+ 6e8:	0080                	addi	s0,sp,64
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 712:	02051493          	slli	s1,a0,0x20
- 716:	9081                	srli	s1,s1,0x20
- 718:	04bd                	addi	s1,s1,15
- 71a:	8091                	srli	s1,s1,0x4
- 71c:	0014899b          	addiw	s3,s1,1
- 720:	0485                	addi	s1,s1,1
+ 6ea:	02051493          	slli	s1,a0,0x20
+ 6ee:	9081                	srli	s1,s1,0x20
+ 6f0:	04bd                	addi	s1,s1,15
+ 6f2:	8091                	srli	s1,s1,0x4
+ 6f4:	0014899b          	addiw	s3,s1,1
+ 6f8:	0485                	addi	s1,s1,1
   if((prevp = freep) == 0){
- 722:	00000517          	auipc	a0,0x0
- 726:	0e653503          	ld	a0,230(a0) # 808 <freep>
- 72a:	c515                	beqz	a0,756 <malloc+0x58>
+ 6fa:	00000517          	auipc	a0,0x0
+ 6fe:	0e653503          	ld	a0,230(a0) # 7e0 <freep>
+ 702:	c515                	beqz	a0,72e <malloc+0x58>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 72c:	611c                	ld	a5,0(a0)
+ 704:	611c                	ld	a5,0(a0)
     if(p->s.size >= nunits){
- 72e:	4798                	lw	a4,8(a5)
- 730:	02977f63          	bgeu	a4,s1,76e <malloc+0x70>
- 734:	8a4e                	mv	s4,s3
- 736:	0009871b          	sext.w	a4,s3
- 73a:	6685                	lui	a3,0x1
- 73c:	00d77363          	bgeu	a4,a3,742 <malloc+0x44>
- 740:	6a05                	lui	s4,0x1
- 742:	000a0b1b          	sext.w	s6,s4
+ 706:	4798                	lw	a4,8(a5)
+ 708:	02977f63          	bgeu	a4,s1,746 <malloc+0x70>
+ 70c:	8a4e                	mv	s4,s3
+ 70e:	0009871b          	sext.w	a4,s3
+ 712:	6685                	lui	a3,0x1
+ 714:	00d77363          	bgeu	a4,a3,71a <malloc+0x44>
+ 718:	6a05                	lui	s4,0x1
+ 71a:	000a0b1b          	sext.w	s6,s4
   p = sbrk(nu * sizeof(Header));
- 746:	004a1a1b          	slliw	s4,s4,0x4
+ 71e:	004a1a1b          	slliw	s4,s4,0x4
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 74a:	00000917          	auipc	s2,0x0
- 74e:	0be90913          	addi	s2,s2,190 # 808 <freep>
+ 722:	00000917          	auipc	s2,0x0
+ 726:	0be90913          	addi	s2,s2,190 # 7e0 <freep>
   if(p == (char*)-1)
- 752:	5afd                	li	s5,-1
- 754:	a88d                	j	7c6 <malloc+0xc8>
+ 72a:	5afd                	li	s5,-1
+ 72c:	a88d                	j	79e <malloc+0xc8>
     base.s.ptr = freep = prevp = &base;
- 756:	00000797          	auipc	a5,0x0
- 75a:	0ba78793          	addi	a5,a5,186 # 810 <base>
- 75e:	00000717          	auipc	a4,0x0
- 762:	0af73523          	sd	a5,170(a4) # 808 <freep>
- 766:	e39c                	sd	a5,0(a5)
+ 72e:	00000797          	auipc	a5,0x0
+ 732:	0ba78793          	addi	a5,a5,186 # 7e8 <base>
+ 736:	00000717          	auipc	a4,0x0
+ 73a:	0af73523          	sd	a5,170(a4) # 7e0 <freep>
+ 73e:	e39c                	sd	a5,0(a5)
     base.s.size = 0;
- 768:	0007a423          	sw	zero,8(a5)
+ 740:	0007a423          	sw	zero,8(a5)
     if(p->s.size >= nunits){
- 76c:	b7e1                	j	734 <malloc+0x36>
+ 744:	b7e1                	j	70c <malloc+0x36>
       if(p->s.size == nunits)
- 76e:	02e48b63          	beq	s1,a4,7a4 <malloc+0xa6>
+ 746:	02e48b63          	beq	s1,a4,77c <malloc+0xa6>
         p->s.size -= nunits;
- 772:	4137073b          	subw	a4,a4,s3
- 776:	c798                	sw	a4,8(a5)
+ 74a:	4137073b          	subw	a4,a4,s3
+ 74e:	c798                	sw	a4,8(a5)
         p += p->s.size;
- 778:	1702                	slli	a4,a4,0x20
- 77a:	9301                	srli	a4,a4,0x20
- 77c:	0712                	slli	a4,a4,0x4
- 77e:	97ba                	add	a5,a5,a4
+ 750:	1702                	slli	a4,a4,0x20
+ 752:	9301                	srli	a4,a4,0x20
+ 754:	0712                	slli	a4,a4,0x4
+ 756:	97ba                	add	a5,a5,a4
         p->s.size = nunits;
- 780:	0137a423          	sw	s3,8(a5)
+ 758:	0137a423          	sw	s3,8(a5)
       freep = prevp;
- 784:	00000717          	auipc	a4,0x0
- 788:	08a73223          	sd	a0,132(a4) # 808 <freep>
+ 75c:	00000717          	auipc	a4,0x0
+ 760:	08a73223          	sd	a0,132(a4) # 7e0 <freep>
       return (void*)(p + 1);
- 78c:	01078513          	addi	a0,a5,16
+ 764:	01078513          	addi	a0,a5,16
       if((p = morecore(nunits)) == 0)
         return 0;
   }
 }
- 790:	70e2                	ld	ra,56(sp)
- 792:	7442                	ld	s0,48(sp)
- 794:	74a2                	ld	s1,40(sp)
- 796:	7902                	ld	s2,32(sp)
- 798:	69e2                	ld	s3,24(sp)
- 79a:	6a42                	ld	s4,16(sp)
- 79c:	6aa2                	ld	s5,8(sp)
- 79e:	6b02                	ld	s6,0(sp)
- 7a0:	6121                	addi	sp,sp,64
- 7a2:	8082                	ret
+ 768:	70e2                	ld	ra,56(sp)
+ 76a:	7442                	ld	s0,48(sp)
+ 76c:	74a2                	ld	s1,40(sp)
+ 76e:	7902                	ld	s2,32(sp)
+ 770:	69e2                	ld	s3,24(sp)
+ 772:	6a42                	ld	s4,16(sp)
+ 774:	6aa2                	ld	s5,8(sp)
+ 776:	6b02                	ld	s6,0(sp)
+ 778:	6121                	addi	sp,sp,64
+ 77a:	8082                	ret
         prevp->s.ptr = p->s.ptr;
- 7a4:	6398                	ld	a4,0(a5)
- 7a6:	e118                	sd	a4,0(a0)
- 7a8:	bff1                	j	784 <malloc+0x86>
+ 77c:	6398                	ld	a4,0(a5)
+ 77e:	e118                	sd	a4,0(a0)
+ 780:	bff1                	j	75c <malloc+0x86>
   hp->s.size = nu;
- 7aa:	01652423          	sw	s6,8(a0)
+ 782:	01652423          	sw	s6,8(a0)
   free((void*)(hp + 1));
- 7ae:	0541                	addi	a0,a0,16
- 7b0:	00000097          	auipc	ra,0x0
- 7b4:	ec6080e7          	jalr	-314(ra) # 676 <free>
+ 786:	0541                	addi	a0,a0,16
+ 788:	00000097          	auipc	ra,0x0
+ 78c:	ec6080e7          	jalr	-314(ra) # 64e <free>
   return freep;
- 7b8:	00093503          	ld	a0,0(s2)
+ 790:	00093503          	ld	a0,0(s2)
       if((p = morecore(nunits)) == 0)
- 7bc:	d971                	beqz	a0,790 <malloc+0x92>
+ 794:	d971                	beqz	a0,768 <malloc+0x92>
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7be:	611c                	ld	a5,0(a0)
+ 796:	611c                	ld	a5,0(a0)
     if(p->s.size >= nunits){
- 7c0:	4798                	lw	a4,8(a5)
- 7c2:	fa9776e3          	bgeu	a4,s1,76e <malloc+0x70>
+ 798:	4798                	lw	a4,8(a5)
+ 79a:	fa9776e3          	bgeu	a4,s1,746 <malloc+0x70>
     if(p == freep)
- 7c6:	00093703          	ld	a4,0(s2)
- 7ca:	853e                	mv	a0,a5
- 7cc:	fef719e3          	bne	a4,a5,7be <malloc+0xc0>
+ 79e:	00093703          	ld	a4,0(s2)
+ 7a2:	853e                	mv	a0,a5
+ 7a4:	fef719e3          	bne	a4,a5,796 <malloc+0xc0>
   p = sbrk(nu * sizeof(Header));
- 7d0:	8552                	mv	a0,s4
- 7d2:	00000097          	auipc	ra,0x0
- 7d6:	b56080e7          	jalr	-1194(ra) # 328 <sbrk>
+ 7a8:	8552                	mv	a0,s4
+ 7aa:	00000097          	auipc	ra,0x0
+ 7ae:	b7e080e7          	jalr	-1154(ra) # 328 <sbrk>
   if(p == (char*)-1)
- 7da:	fd5518e3          	bne	a0,s5,7aa <malloc+0xac>
+ 7b2:	fd5518e3          	bne	a0,s5,782 <malloc+0xac>
         return 0;
- 7de:	4501                	li	a0,0
- 7e0:	bf45                	j	790 <malloc+0x92>
+ 7b6:	4501                	li	a0,0
+ 7b8:	bf45                	j	768 <malloc+0x92>
diff --git a/user/zombie.sym b/user/zombie.sym
index e3a952c..1995949 100644
--- a/user/zombie.sym
+++ b/user/zombie.sym
@@ -1,7 +1,7 @@
 0000000000000000 .text
-00000000000007e8 .rodata
-0000000000000808 .sbss
-0000000000000810 .bss
+00000000000007c0 .rodata
+00000000000007e0 .sbss
+00000000000007e8 .bss
 0000000000000000 .comment
 0000000000000000 .debug_aranges
 0000000000000000 .debug_info
@@ -14,53 +14,48 @@
 0000000000000000 zombie.c
 0000000000000000 ulib.c
 0000000000000000 printf.c
-0000000000000368 putc
-000000000000038a printint
-00000000000007f0 digits
+0000000000000340 putc
+0000000000000362 printint
+00000000000007c8 digits
 0000000000000000 umalloc.c
-0000000000000808 freep
-0000000000000810 base
+00000000000007e0 freep
+00000000000007e8 base
 000000000000002a strcpy
-0000000000000640 printf
-0000000000001001 __global_pointer$
+0000000000000618 printf
+0000000000000fd9 __global_pointer$
 00000000000001ea memmove
 00000000000002e8 mknod
 00000000000000e6 gets
-0000000000000801 __SDATA_BEGIN__
+00000000000007d9 __SDATA_BEGIN__
 0000000000000320 getpid
 0000000000000280 memcpy
-0000000000000350 print_stats
-00000000000006fe malloc
+00000000000006d6 malloc
 0000000000000330 sleep
 00000000000002b0 pipe
 00000000000002c0 write
 00000000000002f8 fstat
-0000000000000612 fprintf
+00000000000005ea fprintf
 00000000000002d0 kill
-0000000000000434 vprintf
+000000000000040c vprintf
 0000000000000310 chdir
-0000000000000340 pause_system
 00000000000002d8 exec
 00000000000002a8 wait
 00000000000002b8 read
 00000000000002f0 unlink
-0000000000000360 set_cpu
-0000000000000358 get_cpu
 0000000000000246 memcmp
 0000000000000298 fork
-0000000000000348 kill_system
-0000000000000820 __BSS_END__
+00000000000007f8 __BSS_END__
 0000000000000328 sbrk
 0000000000000338 uptime
-0000000000000801 __bss_start
+00000000000007d9 __bss_start
 000000000000009c memset
 0000000000000000 main
 0000000000000046 strcmp
 0000000000000318 dup
-0000000000000801 __DATA_BEGIN__
+00000000000007d9 __DATA_BEGIN__
 000000000000015a stat
-0000000000000801 _edata
-0000000000000820 _end
+00000000000007d9 _edata
+00000000000007f8 _end
 0000000000000300 link
 00000000000002a0 exit
 00000000000001a0 atoi
@@ -69,4 +64,4 @@
 00000000000000c2 strchr
 0000000000000308 mkdir
 00000000000002c8 close
-0000000000000676 free
+000000000000064e free
